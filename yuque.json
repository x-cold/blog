[
  {
    "id": 5006884,
    "slug": "otiyg0",
    "title": "自定义模板",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "\n",
    "body_draft": "\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-traditional\" data-lake-element=\"root\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p><br /></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p><br /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2020-03-05T05:21:32.000Z",
    "deleted_at": null,
    "created_at": "2020-03-05T05:21:22.000Z",
    "updated_at": "2020-03-05T05:21:39.000Z",
    "published_at": "2020-03-05T05:21:39.000Z",
    "first_published_at": "2020-03-05T05:21:32.000Z",
    "word_count": 0,
    "cover": null,
    "description": "",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1583148,
    "slug": "sm7slk",
    "title": "深入浅出 React Hooks",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 24,
      "content_updated_at": "2022-02-12T14:18:05.792Z",
      "updated_at": "2022-02-12T14:18:05.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 12,
        "public_books_count": 5,
        "followers_count": 94,
        "following_count": 31,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2022-02-12T09:08:14.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 12,
      "public_books_count": 5,
      "followers_count": 94,
      "following_count": 31,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2022-02-12T09:08:14.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"article-title\"></a>\n# ![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557142209961-5115d576-5480-4725-8bed-61bb54f0cfe3.png#align=left&display=inline&height=540&name=image.png&originHeight=1080&originWidth=1920&size=98682&status=done&width=960)\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557142220425-364dee55-ce15-4c83-98d1-8e1ec9ada26e.png#align=left&display=inline&height=540&name=image.png&originHeight=1080&originWidth=1920&size=141753&status=done&width=960)\n\n> 直播回放链接：[云栖社区](https://yq.aliyun.com/articles/700174) ([@x-cold](https://github.com/x-cold))\n\n\n<a name=\"4wRfh\"></a>\n## React Hooks 是什么？\n\nHooks 顾名思义，字面意义上来说就是 React 钩子的概念。通过一个 case 我们对 React Hooks 先有一个第一印象。\n\n假设现在要实现一个计数器的组件。如果使用组件化的方式，我们需要做的事情相对更多一些，比如说声明 state，编写计数器的方法等，而且需要理解的概念可能更多一些，比如 Javascript 的类的概念，this 上下文的指向等。\n\n<!-- more -->\n\n[示例](https://codepen.io/x-cold/pen/JqjZKR)\n```jsx\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Counter extends React.Component {\n  state = {\n  \tcount: 0\n  }\n\n  countUp = () => {\n    const { count } = this.state;\n  \tthis.setState({ count: count + 1 });\n  }\n  \n  countDown = () => {\n    const { count } = this.state;\n  \tthis.setState({ count: count - 1 });\n  }\n  \n  render() {\n    const { count } = this.state;\n  \treturn (\n      <div>\n        <button onClick={this.countUp}>+</button>\n        <h1>{count}</h1>\n        <button onClick={this.countDown}>-</button>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Counter />, document.getElementById('root'));\n```\n\n使用 React Hooks，我们可以这么写。\n\n[示例](https://codepen.io/x-cold/pen/ZNEReY)\n```jsx\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>+</button>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count - 1)}>-</button>\n    </div>\n  )\n}\n\nReactDOM.render(<Counter />, document.getElementById('root'));\n```\n\n通过上面的例子，显而易见的是 React Hooks 提供了一种简洁的、函数式（FP）的程序风格，通过纯函数组件和可控的数据流来实现状态到 UI 的交互（MVVM）。\n\n<a name=\"fO6PX\"></a>\n### Hooks API\n\n- [Basic Hooks](https://reactjs.org/docs/hooks-reference.html#basic-hooks)\n   - [`useState`](https://reactjs.org/docs/hooks-reference.html#usestate)\n   - [`useEffect`](https://reactjs.org/docs/hooks-reference.html#useeffect)\n   - [`useContext`](https://reactjs.org/docs/hooks-reference.html#usecontext)\n- [Additional Hooks](https://reactjs.org/docs/hooks-reference.html#additional-hooks)\n   - [`useReducer`](https://reactjs.org/docs/hooks-reference.html#usereducer)\n   - [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback)\n   - [`useMemo`](https://reactjs.org/docs/hooks-reference.html#usememo)\n   - [`useRef`](https://reactjs.org/docs/hooks-reference.html#useref)\n   - [`useImperativeHandle`](https://reactjs.org/docs/hooks-reference.html#useimperativehandle)\n   - [`useLayoutEffect`](https://reactjs.org/docs/hooks-reference.html#uselayouteffect)\n   - [`useDebugValue`](https://reactjs.org/docs/hooks-reference.html#usedebugvalue)\n\n<a name=\"1pCkl\"></a>\n### useState\n\nuseState 是最基本的 API，它传入一个初始值，每次函数执行都能拿到新值。\n\n```jsx\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>+</button>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count - 1)}>-</button>\n    </div>\n  )\n}\n\nReactDOM.render(<Counter />, document.getElementById('root'));\n```\n\n需要注意的是，通过 useState 得到的状态 count，在 Counter 组件中的表现为一个常量，每一次通过 setCount 进行修改后，又重新通过 useState 获取到一个新的常量。\n\n<a name=\"Bfdkr\"></a>\n### useReducer\n\nuseReducer 和 useState 几乎是一样的，需要外置外置 reducer (全局)，通过这种方式可以对多个状态同时进行控制。仔细端详起来，其实跟 redux 中的数据流的概念非常接近。\n\n```jsx\nimport { useState, useReducer } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'up':\n      return { count: state.count + 1 };\n    case 'down':\n      return { count: state.count - 1 };\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, { count: 1 })\n  return (\n    <div>\n      {state.count}\n      <button onClick={() => dispatch({ type: 'up' })}>+</button>\n      <button onClick={() => dispatch({ type: 'down' })}>+</button>\n    </div>\n  );\n}\n\nReactDOM.render(<Counter />, document.getElementById('root'));\n```\n\n<a name=\"o2hie\"></a>\n### useEffect\n\n一个至关重要的 Hooks API，顾名思义，useEffect 是用于处理各种状态变化造成的副作用，也就是说只有在特定的时刻，才会执行的逻辑。\n\n```jsx\nimport { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // => componentDidMount/componentDidUpdate\n  useEffect(() => {\n    // update \n    document.title = `You clicked ${count} times`;\n    // => componentWillUnMount\n    return function cleanup() {\n    \tdocument.title = 'app';\n    }\n  }, [count]);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nReactDOM.render(<Example />, document.getElementById('root'));\n```\n\n<a name=\"fg4Y5\"></a>\n### useMemo\n\nuseMemo 主要用于渲染过程优化，两个参数依次是计算函数（通常是组件函数）和依赖状态列表，当依赖的状态发生改变时，才会触发计算函数的执行。如果没有指定依赖，则每一次渲染过程都会执行该计算函数。\n\n```jsx\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\n```jsx\nimport { useState, useMemo } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Time() {\n\treturn <p>{Date.now()}</p>;\n}\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  const memoizedChildComponent = useMemo((count) => {\n    return <Time />;\n  }, [count]);\n\n  return (\n    <div>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count + 1)}>+</button>\n      <div>{memoizedChildComponent}</div>\n    </div>\n  );\n}\n\nReactDOM.render(<Counter />, document.getElementById('root'));\n```\n\n<a name=\"Qenmu\"></a>\n### useContext\n\ncontext 是在外部 create ，内部 use 的 state，它和全局变量的区别在于，如果多个组件同时 useContext，那么这些组件都会 rerender，如果多个组件同时 useState 同一个全局变量，则只有触发 setState 的当前组件 rerender。\n\n[示例-未使用 useContext](https://codepen.io/x-cold/pen/OYJGKQ)\n\n```jsx\nimport { useState, useContext, createContext } from 'react';\nimport ReactDOM from 'react-dom';\n\n// 1. 使用 createContext 创建上下文\nconst UserContext = createContext();\n\n// 2. 创建 Provider\nconst UserProvider = props => {\n  let [username, handleChangeUsername] = useState('');\n  return (\n    <UserContext.Provider value={{ username, handleChangeUsername }}>\n      {props.children}\n    </UserContext.Provider>\n  );\n};\n\n// 3. 创建 Consumer\nconst UserConsumer = UserContext.Consumer;\n\n// 4. 使用 Consumer 包裹组件\nconst Pannel = () => (\n  <UserConsumer>\n    {({ username, handleChangeUsername }) => (\n      <div>\n        <div>user: {username}</div>\n        <input onChange={e => handleChangeUsername(e.target.value)} />\n      </div>\n    )}\n  </UserConsumer>\n);\n\nconst Form = () => <Pannel />;\n\nconst App = () => (\n  <div>\n    <UserProvider>\n      <Form />\n    </UserProvider>\n  </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n[示例 - 使用 useContext](https://codepen.io/x-cold/pen/GaRLqZ?editors=0010)\n```jsx\nimport { useState, useContext, createContext } from 'react';\nimport ReactDOM from 'react-dom';\n\n// 1. 使用 createContext 创建上下文\nconst UserContext = createContext();\n\n// 2. 创建 Provider\nconst UserProvider = props => {\n  let [username, handleChangeUsername] = useState('');\n  return (\n    <UserContext.Provider value={{ username, handleChangeUsername }}>\n      {props.children}\n    </UserContext.Provider>\n  );\n};\n\nconst Pannel = () => {\n  const { username, handleChangeUsername } = useContext(UserContext); // 3. 使用 Context\n  return (\n    <div>\n      <div>user: {username}</div>\n      <input onChange={e => handleChangeUsername(e.target.value)} />\n    </div>\n  );\n};\n\nconst Form = () => <Pannel />;\n\nconst App = () => (\n  <div>\n    <UserProvider>\n      <Form />\n    </UserProvider>\n  </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n<a name=\"xAPs1\"></a>\n### useRef\n\nuseRef 返回一个可变的 ref 对象，其 .current 属性初始化为传递的参数（initialValue）。返回的对象将持续整个组件的生命周期。事实上 useRef 是一个非常有用的 API，许多情况下，我们需要保存一些改变的东西，它会派上大用场的。\n\n[示例](https://codepen.io/x-cold/pen/EzxMPw)\n```jsx\nfunction TextInputWithFocusButton() {\n  const inputEl = useRef(null);\n  const onButtonClick = () => {\n    // `current` points to the mounted text input element\n    inputEl.current.focus();\n  };\n  return (\n    <>\n      <input ref={inputEl} type=\"text\" />\n      <button onClick={onButtonClick}>Focus the input</button>\n    </>\n  );\n}\n```\n\n<a name=\"ReVY6\"></a>\n## React 状态共享方案\n\n说到状态共享，最简单和直接的方式就是通过 props 逐级进行状态的传递，这种方式耦合于组件的父子关系，一旦组件嵌套结构发生变化，就需要重新编写代码，维护成本非常昂贵。随着时间的推移，官方推出了各种方案来解决状态共享和代码复用的问题。\n\n<a name=\"9oPRo\"></a>\n### Mixins\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557132050699-0f447719-f393-477a-9aa3-8d792ca5cd5f.png#align=left&display=inline&height=330&name=image.png&originHeight=660&originWidth=1226&size=164408&status=done&width=613)<br />React 中，只有通过 createClass 创建的组件才能使用 mixins。这种高耦合，依赖难以控制，复杂度高的方式随着 ES6 的浪潮逐渐淡出了历史舞台。\n\n<a name=\"h8DyH\"></a>\n### HOC\n\n高阶组件源于函数式编程，由于 React 中的组件也可以视为函数（类），因此天生就可以通过 HOC 的方式来实现代码复用。可以通过属性代理和反向继承来实现，HOC 可以很方便的操控渲染的结果，也可以对组件的 props / state 进行操作，从而可以很方便的进行复杂的代码逻辑复用。\n\n```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// 属性代理\nclass Show extends React.Component {\n  static propTypes = {\n    children: PropTypes.element,\n    visible: PropTypes.bool,\n  };\n\n  render() {\n    const { visible, children } = this.props;\n    return visible ? children : null;\n  }\n}\n\n// 反向继承\nfunction Show2(WrappedComponent) {\n  return class extends WrappedComponent {\n    render() {\n      if (this.props.visible === false) {\n        return null;\n      } else {\n        return super.render();\n      }\n    }\n  }\n}\n\nfunction App() {\n\treturn (\n  \t<Show visible={Math.random() > 0.5}>hello</Show>\n  );\n}\n```\n\nRedux 中的状态复用是一种典型的 HOC 的实现，我们可以通过 compose 来将数据组装到目标组件中，当然你也可以通过装饰器的方式进行处理。\n\n```jsx\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// use decorator\n@connect(state => ({ name: state.user.name }))\nclass App extends React.Component{\n  render() {\n\t\treturn <div>hello, {this.props.name}</div>\n  }\n}\n\n// use compose\nconnect((state) => ({ name: state.user.name }))(App);\n```\n \n<a name=\"ejRZ3\"></a>\n### Render Props\n\n显而易见，renderProps 就是一种将 render 方法作为 props 传递到子组件的方案，相比 HOC 的方案，renderProps 可以保护原有的组件层次结构。\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\n// 与 HOC 不同，我们可以使用具有 render prop 的普通组件来共享代码\nclass Mouse extends React.Component {\n  static propTypes = {\n    render: PropTypes.func.isRequired\n  }\n\n  state = { x: 0, y: 0 };\n\n  handleMouseMove = (event) => {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100%' }} onMouseMove={this.handleMouseMove}>\n        {this.props.render(this.state)}\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div style={{ height: '100%' }}>\n      <Mouse render={({ x, y }) => (\n          // render prop 给了我们所需要的 state 来渲染我们想要的\n          <h1>The mouse position is ({x}, {y})</h1>\n        )}/>\n    </div>\n  );\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n```\n\n<a name=\"4oynP\"></a>\n### Hooks\n\n通过组合 Hooks API 和 React 内置的 Context，从前面的示例可以看到通过 Hook 让组件之间的状态共享更清晰和简单。\n\n<a name=\"bXgHy\"></a>\n## React Hooks 设计理念\n\n<a name=\"OYTXg\"></a>\n### 基本原理\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557141237856-51f92576-f6f5-4dc3-a38f-9ef3fc841590.png#align=left&display=inline&height=376&name=image.png&originHeight=424&originWidth=684&size=88574&status=done&width=607)\n\n\n```jsx\nfunction FunctionalComponent () {\n  const [state1, setState1] = useState(1);\n  const [state2, setState2] = useState(2);\n  const [state3, setState3] = useState(3);\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557141338783-bb968286-9762-4a3a-8bc0-4d52b717ae6b.png#align=left&display=inline&height=509&name=image.png&originHeight=491&originWidth=591&size=40551&status=done&width=613)\n\n```javascript\n{\n  memoizedState: 'foo',\n  next: {\n    memoizedState: 'bar',\n    next: {\n      memoizedState: 'bar',\n      next: null\n    }\n  }\n}\n```\n\n<a name=\"nIZhk\"></a>\n### 函数式贯彻到底\n\n<a name=\"ShOaE\"></a>\n#### capture props\n\n函数组件天生就是支持 props 的，基本用法上和 class 组件没有太大的差别。需要注意的两个区别是：\n\n- class 组件 props 挂载在 this 上下文中，而函数式组件通过形参传入；\n- 由于挂载位置的差异，class 组件中如果 this 发生了变化，那么 this.props 也会随之改变；而在函数组件里 props 始终是不可变的，因此遵守 capture value 原则（即获取的值始终是某一时刻的），Hooks 也遵循这个原则。\n\n通过一个[示例](https://codesandbox.io/s/pjqnl16lm7)来理解一下 capture value，我们可以通过 useRef 来规避 capture value，因为 useRef 是可变的。\n\n<a name=\"c4wq2\"></a>\n#### state\n\n|  | class 组件 | 函数组件 |\n| --- | --- | --- |\n| 创建状态 | this.state = {} | useState, useReducer |\n| 修改状态 | this.setState() | set function |\n| 更新机制 | 异步更新，多次修改合并到上一个状态，产生一个副本 | 同步更新，直接修改为目标状态 |\n| 状态管理 | 一个 state 集中式管理多个状态 | 多个 state，可以通过 useReducer 进行状态合并（手动） |\n| 性能 | 高 | 如果 useState 初始化状态需要通过非常复杂的计算得到，请使用函数的声明方式，否则每次渲染都会重复执行 |\n|  |  |  |\n\n\n\n<a name=\"Ygpro\"></a>\n#### 生命周期\n\n- componentDidMount / componentDidUpdate / componentWillUnMount\n\nuseEffect 在每一次渲染都会被调用，稍微包装一下就可以作为这些生命周期使用；\n\n- shouldComponentUpdate\n\n通常我们优化组件性能时，会优先采用纯组件的方式来减少单个组件的渲染次数。\n\n```jsx\nclass Button extends React.PureComponent {}\n```\n\nReact Hooks 中可以采用 useMemo 代替，可以实现仅在某些数据变化时重新渲染组件，等同于自带了 shallowEqual 的 shouldComponentUpdate。\n<a name=\"HVJ3I\"></a>\n#### 强制渲染 forceUpdate\n\n由于默认情况下，每一次修改状态都会造成重新渲染，可以通过一个不使用的 set 函数来当成 forceUpdate。\n\n```javascript\nconst forceUpdate = () => useState(0)[1];\n```\n\n<a name=\"zUNJm\"></a>\n### 实现原理\n\n<a name=\"lKXz6\"></a>\n## 基于 Hooks，增强 Hooks\n\n<a name=\"I00nT\"></a>\n### 来一套组合拳吧！\n\n由于每一个 Hooks API 都是纯函数的概念，使用时更关注输入 (input) 和输出 (output)，因此可以更好的通过组装函数的方式，对不同特性的基础 Hooks API 进行组合，创造拥有新特性的 Hooks。\n\n- useState 维护组件状态\n- useEffect 处理副作用\n- useContext 监听 provider 更新变化\n\n<a name=\"smNOw\"></a>\n### useDidMount\n\n```jsx\nimport { useEffect } from 'react';\n\nconst useDidMount = fn => useEffect(() => fn && fn(), []);\n\nexport default useDidMount;\n```\n<a name=\"GwwRF\"></a>\n### \n<a name=\"4PTjD\"></a>\n### useDidUpdate\n\n```jsx\nimport { useEffect, useRef } from 'react';\n\nconst useDidUpdate = (fn, conditions) => {\n  const didMoutRef = useRef(false);\n  useEffect(() => {\n    if (!didMoutRef.current) {\n      didMoutRef.current = true;\n      return;\n    }\n    // Cleanup effects when fn returns a function\n    return fn && fn();\n  }, conditions);\n};\n\nexport default useDidUpdate\n```\n\n<a name=\"LjeaI\"></a>\n### useWillUnmount\n\n在讲到 useEffect 时已经提及过，其允许返回一个 cleanup 函数，组件在取消挂载时将会执行该 cleanup 函数，因此 useWillUnmount 也能轻松实现~\n\n```javascript\nimport { useEffect } from 'react';\n\nconst useWillUnmount = fn => useEffect(() => () => fn && fn(), []);\n\nexport default useWillUnmount;\n```\n\n<a name=\"YcQCg\"></a>\n### useHover\n\n[示例](https://codepen.io/x-cold/pen/joOXxK)\n```jsx\n// lib/onHover.js\nimport { useState } from 'react';\n\nconst useHover = () => {\n  const [hovered, set] = useState(false);\n  return {\n    hovered,\n    bind: {\n      onMouseEnter: () => set(true),\n      onMouseLeave: () => set(false),\n    },\n  };\n};\n\nexport default useHover;\n```\n\n```jsx\nimport { useHover } from './lib/onHover.js';\n\nfunction Hover() {\n  const { hovered, bind } = useHover();\n  return (\n    <div>\n      <div {...bind}>\n        hovered:\n        {String(hovered)}\n      </div>\n    </div>\n  );\n}\n```\n\n<a name=\"eObx9\"></a>\n### useField\n\n[示例](https://codepen.io/x-cold/pen/rgNPNB)\n```jsx\n// lib/useField.js\n\nimport { useState } from 'react';\n\nconst useField = (initial) => {\n  const [value, set] = useState(initial);\n\n  return {\n    value,\n    set,\n    reset: () => set(initial),\n    bind: {\n      value,\n      onChange: e => set(e.target.value),\n    },\n  };\n}\n\nexport default useField;\n```\n\n```jsx\nimport { useField } from 'lib/useField';\n\nfunction Input {\n  const { value, bind } = useField('Type Here...');\n\n  return (\n    <div>\n      input text:\n      {value}\n      <input type=\"text\" {...bind} />\n    </div>\n  );\n}\n\nfunction Select() {\n  const { value, bind } = useField('apple')\n  return (\n    <div>\n      selected:\n      {value}\n      <select {...bind}>\n        <option value=\"apple\">apple</option>\n        <option value=\"orange\">orange</option>\n      </select>\n    </div>\n  );\n}\n```\n\n<a name=\"h2fgP\"></a>\n## 注意事项\n\n- Hook 的使用范围：函数式的 React 组件中、自定义的 Hook 函数里；\n- Hook 必须写在函数的最外层，每一次 useState 都会改变其下标 (cursor)，React 根据其顺序来更新状态；\n- 尽管每一次渲染都会执行 Hook API，但是产生的状态 (state) 始终是一个常量（作用域在函数内部）；\n\n<a name=\"wBXEs\"></a>\n## 结语\n\nReact Hooks 提供为状态管理提供了新的可能性，尽管我们可能需要额外去维护一些内部的状态，但是可以避免通过 renderProps / HOC 等复杂的方式来处理状态管理的问题。Hooks 带来的好处如下：\n\n- 更细粒度的代码复用，并且不会产生过多的副作用\n- 函数式编程风格，代码更简洁，同时降低了使用和理解门槛\n- 减少组件嵌套层数\n- 组件数据流向更清晰\n\n事实上，通过定制各种场景下的自定义 Hooks，能让我们的应用程序更方便和简洁，组件的层次结构也能保证完好，还有如此令人愉悦的函数式编程风格，Hooks 在 React 16.8.0 版本已经正式发布稳定版本，现在开始用起来吧！！！\n\n<a name=\"wN7im\"></a>\n## 参考资料\n\n- [hooks-reference](https://reactjs.org/docs/hooks-reference.html)\n- [react-hooks-lib](https://github.com/beizhedenglong/react-hooks-lib)\n- [【React深入】从Mixin到HOC再到Hook](https://juejin.im/post/5cad39b3f265da03502b1c0a)\n- [How Are Function Components Different from Classes?](https://overreacted.io/how-are-function-components-different-from-classes/)\n- [under-the-hood-of-reacts-hooks-system](https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba)\n- [阅读源码后，来讲讲React Hooks是怎么实现的](https://juejin.im/post/5bdfc1c4e51d4539f4178e1f)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557142193165-0bfa8139-4b3f-40b3-9401-530eb6715a5c.png#align=left&display=inline&height=540&name=image.png&originHeight=1080&originWidth=1920&size=636918&status=done&width=960)\n\n\n\n",
    "body_draft": "<a name=\"article-title\"></a>\n# ![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557142209961-5115d576-5480-4725-8bed-61bb54f0cfe3.png#align=left&display=inline&height=540&name=image.png&originHeight=1080&originWidth=1920&size=98682&status=done&width=960)\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557142220425-364dee55-ce15-4c83-98d1-8e1ec9ada26e.png#align=left&display=inline&height=540&name=image.png&originHeight=1080&originWidth=1920&size=141753&status=done&width=960)\n\n> 直播回放链接：[云栖社区](https://yq.aliyun.com/articles/700174) ([@x-cold](https://github.com/x-cold))\n\n\n<a name=\"4wRfh\"></a>\n## React Hooks 是什么？\n\nHooks 顾名思义，字面意义上来说就是 React 钩子的概念。通过一个 case 我们对 React Hooks 先有一个第一印象。\n\n假设现在要实现一个计数器的组件。如果使用组件化的方式，我们需要做的事情相对更多一些，比如说声明 state，编写计数器的方法等，而且需要理解的概念可能更多一些，比如 Javascript 的类的概念，this 上下文的指向等。\n\n<!-- more -->\n\n[示例](https://codepen.io/x-cold/pen/JqjZKR)\n```jsx\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Counter extends React.Component {\n  state = {\n  \tcount: 0\n  }\n\n  countUp = () => {\n    const { count } = this.state;\n  \tthis.setState({ count: count + 1 });\n  }\n  \n  countDown = () => {\n    const { count } = this.state;\n  \tthis.setState({ count: count - 1 });\n  }\n  \n  render() {\n    const { count } = this.state;\n  \treturn (\n      <div>\n        <button onClick={this.countUp}>+</button>\n        <h1>{count}</h1>\n        <button onClick={this.countDown}>-</button>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Counter />, document.getElementById('root'));\n```\n\n使用 React Hooks，我们可以这么写。\n\n[示例](https://codepen.io/x-cold/pen/ZNEReY)\n```jsx\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>+</button>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count - 1)}>-</button>\n    </div>\n  )\n}\n\nReactDOM.render(<Counter />, document.getElementById('root'));\n```\n\n通过上面的例子，显而易见的是 React Hooks 提供了一种简洁的、函数式（FP）的程序风格，通过纯函数组件和可控的数据流来实现状态到 UI 的交互（MVVM）。\n\n<a name=\"fO6PX\"></a>\n### Hooks API\n\n- [Basic Hooks](https://reactjs.org/docs/hooks-reference.html#basic-hooks)\n   - [`useState`](https://reactjs.org/docs/hooks-reference.html#usestate)\n   - [`useEffect`](https://reactjs.org/docs/hooks-reference.html#useeffect)\n   - [`useContext`](https://reactjs.org/docs/hooks-reference.html#usecontext)\n- [Additional Hooks](https://reactjs.org/docs/hooks-reference.html#additional-hooks)\n   - [`useReducer`](https://reactjs.org/docs/hooks-reference.html#usereducer)\n   - [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback)\n   - [`useMemo`](https://reactjs.org/docs/hooks-reference.html#usememo)\n   - [`useRef`](https://reactjs.org/docs/hooks-reference.html#useref)\n   - [`useImperativeHandle`](https://reactjs.org/docs/hooks-reference.html#useimperativehandle)\n   - [`useLayoutEffect`](https://reactjs.org/docs/hooks-reference.html#uselayouteffect)\n   - [`useDebugValue`](https://reactjs.org/docs/hooks-reference.html#usedebugvalue)\n\n<a name=\"1pCkl\"></a>\n### useState\n\nuseState 是最基本的 API，它传入一个初始值，每次函数执行都能拿到新值。\n\n```jsx\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>+</button>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count - 1)}>-</button>\n    </div>\n  )\n}\n\nReactDOM.render(<Counter />, document.getElementById('root'));\n```\n\n需要注意的是，通过 useState 得到的状态 count，在 Counter 组件中的表现为一个常量，每一次通过 setCount 进行修改后，又重新通过 useState 获取到一个新的常量。\n\n<a name=\"Bfdkr\"></a>\n### useReducer\n\nuseReducer 和 useState 几乎是一样的，需要外置外置 reducer (全局)，通过这种方式可以对多个状态同时进行控制。仔细端详起来，其实跟 redux 中的数据流的概念非常接近。\n\n```jsx\nimport { useState, useReducer } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'up':\n      return { count: state.count + 1 };\n    case 'down':\n      return { count: state.count - 1 };\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, { count: 1 })\n  return (\n    <div>\n      {state.count}\n      <button onClick={() => dispatch({ type: 'up' })}>+</button>\n      <button onClick={() => dispatch({ type: 'down' })}>+</button>\n    </div>\n  );\n}\n\nReactDOM.render(<Counter />, document.getElementById('root'));\n```\n\n<a name=\"o2hie\"></a>\n### useEffect\n\n一个至关重要的 Hooks API，顾名思义，useEffect 是用于处理各种状态变化造成的副作用，也就是说只有在特定的时刻，才会执行的逻辑。\n\n```jsx\nimport { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // => componentDidMount/componentDidUpdate\n  useEffect(() => {\n    // update \n    document.title = `You clicked ${count} times`;\n    // => componentWillUnMount\n    return function cleanup() {\n    \tdocument.title = 'app';\n    }\n  }, [count]);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nReactDOM.render(<Example />, document.getElementById('root'));\n```\n\n<a name=\"fg4Y5\"></a>\n### useMemo\n\nuseMemo 主要用于渲染过程优化，两个参数依次是计算函数（通常是组件函数）和依赖状态列表，当依赖的状态发生改变时，才会触发计算函数的执行。如果没有指定依赖，则每一次渲染过程都会执行该计算函数。\n\n```jsx\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\n```jsx\nimport { useState, useMemo } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Time() {\n\treturn <p>{Date.now()}</p>;\n}\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  const memoizedChildComponent = useMemo((count) => {\n    return <Time />;\n  }, [count]);\n\n  return (\n    <div>\n      <h1>{count}</h1>\n      <button onClick={() => setCount(count + 1)}>+</button>\n      <div>{memoizedChildComponent}</div>\n    </div>\n  );\n}\n\nReactDOM.render(<Counter />, document.getElementById('root'));\n```\n\n<a name=\"Qenmu\"></a>\n### useContext\n\ncontext 是在外部 create ，内部 use 的 state，它和全局变量的区别在于，如果多个组件同时 useContext，那么这些组件都会 rerender，如果多个组件同时 useState 同一个全局变量，则只有触发 setState 的当前组件 rerender。\n\n[示例-未使用 useContext](https://codepen.io/x-cold/pen/OYJGKQ)\n\n```jsx\nimport { useState, useContext, createContext } from 'react';\nimport ReactDOM from 'react-dom';\n\n// 1. 使用 createContext 创建上下文\nconst UserContext = createContext();\n\n// 2. 创建 Provider\nconst UserProvider = props => {\n  let [username, handleChangeUsername] = useState('');\n  return (\n    <UserContext.Provider value={{ username, handleChangeUsername }}>\n      {props.children}\n    </UserContext.Provider>\n  );\n};\n\n// 3. 创建 Consumer\nconst UserConsumer = UserContext.Consumer;\n\n// 4. 使用 Consumer 包裹组件\nconst Pannel = () => (\n  <UserConsumer>\n    {({ username, handleChangeUsername }) => (\n      <div>\n        <div>user: {username}</div>\n        <input onChange={e => handleChangeUsername(e.target.value)} />\n      </div>\n    )}\n  </UserConsumer>\n);\n\nconst Form = () => <Pannel />;\n\nconst App = () => (\n  <div>\n    <UserProvider>\n      <Form />\n    </UserProvider>\n  </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n[示例 - 使用 useContext](https://codepen.io/x-cold/pen/GaRLqZ?editors=0010)\n```jsx\nimport { useState, useContext, createContext } from 'react';\nimport ReactDOM from 'react-dom';\n\n// 1. 使用 createContext 创建上下文\nconst UserContext = createContext();\n\n// 2. 创建 Provider\nconst UserProvider = props => {\n  let [username, handleChangeUsername] = useState('');\n  return (\n    <UserContext.Provider value={{ username, handleChangeUsername }}>\n      {props.children}\n    </UserContext.Provider>\n  );\n};\n\nconst Pannel = () => {\n  const { username, handleChangeUsername } = useContext(UserContext); // 3. 使用 Context\n  return (\n    <div>\n      <div>user: {username}</div>\n      <input onChange={e => handleChangeUsername(e.target.value)} />\n    </div>\n  );\n};\n\nconst Form = () => <Pannel />;\n\nconst App = () => (\n  <div>\n    <UserProvider>\n      <Form />\n    </UserProvider>\n  </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n<a name=\"xAPs1\"></a>\n### useRef\n\nuseRef 返回一个可变的 ref 对象，其 .current 属性初始化为传递的参数（initialValue）。返回的对象将持续整个组件的生命周期。事实上 useRef 是一个非常有用的 API，许多情况下，我们需要保存一些改变的东西，它会派上大用场的。\n\n[示例](https://codepen.io/x-cold/pen/EzxMPw)\n```jsx\nfunction TextInputWithFocusButton() {\n  const inputEl = useRef(null);\n  const onButtonClick = () => {\n    // `current` points to the mounted text input element\n    inputEl.current.focus();\n  };\n  return (\n    <>\n      <input ref={inputEl} type=\"text\" />\n      <button onClick={onButtonClick}>Focus the input</button>\n    </>\n  );\n}\n```\n\n<a name=\"ReVY6\"></a>\n## React 状态共享方案\n\n说到状态共享，最简单和直接的方式就是通过 props 逐级进行状态的传递，这种方式耦合于组件的父子关系，一旦组件嵌套结构发生变化，就需要重新编写代码，维护成本非常昂贵。随着时间的推移，官方推出了各种方案来解决状态共享和代码复用的问题。\n\n<a name=\"9oPRo\"></a>\n### Mixins\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557132050699-0f447719-f393-477a-9aa3-8d792ca5cd5f.png#align=left&display=inline&height=330&name=image.png&originHeight=660&originWidth=1226&size=164408&status=done&width=613)<br />React 中，只有通过 createClass 创建的组件才能使用 mixins。这种高耦合，依赖难以控制，复杂度高的方式随着 ES6 的浪潮逐渐淡出了历史舞台。\n\n<a name=\"h8DyH\"></a>\n### HOC\n\n高阶组件源于函数式编程，由于 React 中的组件也可以视为函数（类），因此天生就可以通过 HOC 的方式来实现代码复用。可以通过属性代理和反向继承来实现，HOC 可以很方便的操控渲染的结果，也可以对组件的 props / state 进行操作，从而可以很方便的进行复杂的代码逻辑复用。\n\n```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// 属性代理\nclass Show extends React.Component {\n  static propTypes = {\n    children: PropTypes.element,\n    visible: PropTypes.bool,\n  };\n\n  render() {\n    const { visible, children } = this.props;\n    return visible ? children : null;\n  }\n}\n\n// 反向继承\nfunction Show2(WrappedComponent) {\n  return class extends WrappedComponent {\n    render() {\n      if (this.props.visible === false) {\n        return null;\n      } else {\n        return super.render();\n      }\n    }\n  }\n}\n\nfunction App() {\n\treturn (\n  \t<Show visible={Math.random() > 0.5}>hello</Show>\n  );\n}\n```\n\nRedux 中的状态复用是一种典型的 HOC 的实现，我们可以通过 compose 来将数据组装到目标组件中，当然你也可以通过装饰器的方式进行处理。\n\n```jsx\nimport React from 'react';\nimport { connect } from 'react-redux';\n\n// use decorator\n@connect(state => ({ name: state.user.name }))\nclass App extends React.Component{\n  render() {\n\t\treturn <div>hello, {this.props.name}</div>\n  }\n}\n\n// use compose\nconnect((state) => ({ name: state.user.name }))(App);\n```\n \n<a name=\"ejRZ3\"></a>\n### Render Props\n\n显而易见，renderProps 就是一种将 render 方法作为 props 传递到子组件的方案，相比 HOC 的方案，renderProps 可以保护原有的组件层次结构。\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\n// 与 HOC 不同，我们可以使用具有 render prop 的普通组件来共享代码\nclass Mouse extends React.Component {\n  static propTypes = {\n    render: PropTypes.func.isRequired\n  }\n\n  state = { x: 0, y: 0 };\n\n  handleMouseMove = (event) => {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100%' }} onMouseMove={this.handleMouseMove}>\n        {this.props.render(this.state)}\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div style={{ height: '100%' }}>\n      <Mouse render={({ x, y }) => (\n          // render prop 给了我们所需要的 state 来渲染我们想要的\n          <h1>The mouse position is ({x}, {y})</h1>\n        )}/>\n    </div>\n  );\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n```\n\n<a name=\"4oynP\"></a>\n### Hooks\n\n通过组合 Hooks API 和 React 内置的 Context，从前面的示例可以看到通过 Hook 让组件之间的状态共享更清晰和简单。\n\n<a name=\"bXgHy\"></a>\n## React Hooks 设计理念\n\n<a name=\"OYTXg\"></a>\n### 基本原理\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557141237856-51f92576-f6f5-4dc3-a38f-9ef3fc841590.png#align=left&display=inline&height=376&name=image.png&originHeight=424&originWidth=684&size=88574&status=done&width=607)\n\n\n```jsx\nfunction FunctionalComponent () {\n  const [state1, setState1] = useState(1);\n  const [state2, setState2] = useState(2);\n  const [state3, setState3] = useState(3);\n}\n```\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557141338783-bb968286-9762-4a3a-8bc0-4d52b717ae6b.png#align=left&display=inline&height=509&name=image.png&originHeight=491&originWidth=591&size=40551&status=done&width=613)\n\n```javascript\n{\n  memoizedState: 'foo',\n  next: {\n    memoizedState: 'bar',\n    next: {\n      memoizedState: 'bar',\n      next: null\n    }\n  }\n}\n```\n\n<a name=\"nIZhk\"></a>\n### 函数式贯彻到底\n\n<a name=\"ShOaE\"></a>\n#### capture props\n\n函数组件天生就是支持 props 的，基本用法上和 class 组件没有太大的差别。需要注意的两个区别是：\n\n- class 组件 props 挂载在 this 上下文中，而函数式组件通过形参传入；\n- 由于挂载位置的差异，class 组件中如果 this 发生了变化，那么 this.props 也会随之改变；而在函数组件里 props 始终是不可变的，因此遵守 capture value 原则（即获取的值始终是某一时刻的），Hooks 也遵循这个原则。\n\n通过一个[示例](https://codesandbox.io/s/pjqnl16lm7)来理解一下 capture value，我们可以通过 useRef 来规避 capture value，因为 useRef 是可变的。\n\n<a name=\"c4wq2\"></a>\n#### state\n\n|  | class 组件 | 函数组件 |\n| --- | --- | --- |\n| 创建状态 | this.state = {} | useState, useReducer |\n| 修改状态 | this.setState() | set function |\n| 更新机制 | 异步更新，多次修改合并到上一个状态，产生一个副本 | 同步更新，直接修改为目标状态 |\n| 状态管理 | 一个 state 集中式管理多个状态 | 多个 state，可以通过 useReducer 进行状态合并（手动） |\n| 性能 | 高 | 如果 useState 初始化状态需要通过非常复杂的计算得到，请使用函数的声明方式，否则每次渲染都会重复执行 |\n|  |  |  |\n\n\n\n<a name=\"Ygpro\"></a>\n#### 生命周期\n\n- componentDidMount / componentDidUpdate / componentWillUnMount\n\nuseEffect 在每一次渲染都会被调用，稍微包装一下就可以作为这些生命周期使用；\n\n- shouldComponentUpdate\n\n通常我们优化组件性能时，会优先采用纯组件的方式来减少单个组件的渲染次数。\n\n```jsx\nclass Button extends React.PureComponent {}\n```\n\nReact Hooks 中可以采用 useMemo 代替，可以实现仅在某些数据变化时重新渲染组件，等同于自带了 shallowEqual 的 shouldComponentUpdate。\n<a name=\"HVJ3I\"></a>\n#### 强制渲染 forceUpdate\n\n由于默认情况下，每一次修改状态都会造成重新渲染，可以通过一个不使用的 set 函数来当成 forceUpdate。\n\n```javascript\nconst forceUpdate = () => useState(0)[1];\n```\n\n<a name=\"zUNJm\"></a>\n### 实现原理\n\n<a name=\"lKXz6\"></a>\n## 基于 Hooks，增强 Hooks\n\n<a name=\"I00nT\"></a>\n### 来一套组合拳吧！\n\n由于每一个 Hooks API 都是纯函数的概念，使用时更关注输入 (input) 和输出 (output)，因此可以更好的通过组装函数的方式，对不同特性的基础 Hooks API 进行组合，创造拥有新特性的 Hooks。\n\n- useState 维护组件状态\n- useEffect 处理副作用\n- useContext 监听 provider 更新变化\n\n<a name=\"smNOw\"></a>\n### useDidMount\n\n```jsx\nimport { useEffect } from 'react';\n\nconst useDidMount = fn => useEffect(() => fn && fn(), []);\n\nexport default useDidMount;\n```\n<a name=\"GwwRF\"></a>\n### \n<a name=\"4PTjD\"></a>\n### useDidUpdate\n\n```jsx\nimport { useEffect, useRef } from 'react';\n\nconst useDidUpdate = (fn, conditions) => {\n  const didMoutRef = useRef(false);\n  useEffect(() => {\n    if (!didMoutRef.current) {\n      didMoutRef.current = true;\n      return;\n    }\n    // Cleanup effects when fn returns a function\n    return fn && fn();\n  }, conditions);\n};\n\nexport default useDidUpdate\n```\n\n<a name=\"LjeaI\"></a>\n### useWillUnmount\n\n在讲到 useEffect 时已经提及过，其允许返回一个 cleanup 函数，组件在取消挂载时将会执行该 cleanup 函数，因此 useWillUnmount 也能轻松实现~\n\n```javascript\nimport { useEffect } from 'react';\n\nconst useWillUnmount = fn => useEffect(() => () => fn && fn(), []);\n\nexport default useWillUnmount;\n```\n\n<a name=\"YcQCg\"></a>\n### useHover\n\n[示例](https://codepen.io/x-cold/pen/joOXxK)\n```jsx\n// lib/onHover.js\nimport { useState } from 'react';\n\nconst useHover = () => {\n  const [hovered, set] = useState(false);\n  return {\n    hovered,\n    bind: {\n      onMouseEnter: () => set(true),\n      onMouseLeave: () => set(false),\n    },\n  };\n};\n\nexport default useHover;\n```\n\n```jsx\nimport { useHover } from './lib/onHover.js';\n\nfunction Hover() {\n  const { hovered, bind } = useHover();\n  return (\n    <div>\n      <div {...bind}>\n        hovered:\n        {String(hovered)}\n      </div>\n    </div>\n  );\n}\n```\n\n<a name=\"eObx9\"></a>\n### useField\n\n[示例](https://codepen.io/x-cold/pen/rgNPNB)\n```jsx\n// lib/useField.js\n\nimport { useState } from 'react';\n\nconst useField = (initial) => {\n  const [value, set] = useState(initial);\n\n  return {\n    value,\n    set,\n    reset: () => set(initial),\n    bind: {\n      value,\n      onChange: e => set(e.target.value),\n    },\n  };\n}\n\nexport default useField;\n```\n\n```jsx\nimport { useField } from 'lib/useField';\n\nfunction Input {\n  const { value, bind } = useField('Type Here...');\n\n  return (\n    <div>\n      input text:\n      {value}\n      <input type=\"text\" {...bind} />\n    </div>\n  );\n}\n\nfunction Select() {\n  const { value, bind } = useField('apple')\n  return (\n    <div>\n      selected:\n      {value}\n      <select {...bind}>\n        <option value=\"apple\">apple</option>\n        <option value=\"orange\">orange</option>\n      </select>\n    </div>\n  );\n}\n```\n\n<a name=\"h2fgP\"></a>\n## 注意事项\n\n- Hook 的使用范围：函数式的 React 组件中、自定义的 Hook 函数里；\n- Hook 必须写在函数的最外层，每一次 useState 都会改变其下标 (cursor)，React 根据其顺序来更新状态；\n- 尽管每一次渲染都会执行 Hook API，但是产生的状态 (state) 始终是一个常量（作用域在函数内部）；\n\n<a name=\"wBXEs\"></a>\n## 结语\n\nReact Hooks 提供为状态管理提供了新的可能性，尽管我们可能需要额外去维护一些内部的状态，但是可以避免通过 renderProps / HOC 等复杂的方式来处理状态管理的问题。Hooks 带来的好处如下：\n\n- 更细粒度的代码复用，并且不会产生过多的副作用\n- 函数式编程风格，代码更简洁，同时降低了使用和理解门槛\n- 减少组件嵌套层数\n- 组件数据流向更清晰\n\n事实上，通过定制各种场景下的自定义 Hooks，能让我们的应用程序更方便和简洁，组件的层次结构也能保证完好，还有如此令人愉悦的函数式编程风格，Hooks 在 React 16.8.0 版本已经正式发布稳定版本，现在开始用起来吧！！！\n\n<a name=\"wN7im\"></a>\n## 参考资料\n\n- [hooks-reference](https://reactjs.org/docs/hooks-reference.html)\n- [react-hooks-lib](https://github.com/beizhedenglong/react-hooks-lib)\n- [【React深入】从Mixin到HOC再到Hook](https://juejin.im/post/5cad39b3f265da03502b1c0a)\n- [How Are Function Components Different from Classes?](https://overreacted.io/how-are-function-components-different-from-classes/)\n- [under-the-hood-of-reacts-hooks-system](https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba)\n- [阅读源码后，来讲讲React Hooks是怎么实现的](https://juejin.im/post/5bdfc1c4e51d4539f4178e1f)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1557142193165-0bfa8139-4b3f-40b3-9401-530eb6715a5c.png#align=left&display=inline&height=540&name=image.png&originHeight=1080&originWidth=1920&size=636918&status=done&width=960)\n\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine\" data-lake-element=\"root\"><h1 id=\"article-title\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 36px; line-height: 1.389; color: rgb(38, 38, 38);\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1557142209961-5115d576-5480-4725-8bed-61bb54f0cfe3.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; width: 746px; height: 420px;\"></span></h1><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1557142220425-364dee55-ce15-4c83-98d1-8e1ec9ada26e.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; width: 746px; height: 420px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">直播回放链接：<a href=\"https://yq.aliyun.com/articles/700174\" target=\"_blank\">云栖社区</a>&nbsp;(<a href=\"https://github.com/x-cold\" target=\"_blank\">@x-cold</a>)</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"4wRfh\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">React Hooks 是什么？</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Hooks 顾名思义，字面意义上来说就是 React 钩子的概念。通过一个 case 我们对 React Hooks 先有一个第一印象。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">假设现在要实现一个计数器的组件。如果使用组件化的方式，我们需要做的事情相对更多一些，比如说声明 state，编写计数器的方法等，而且需要理解的概念可能更多一些，比如 Javascript 的类的概念，this 上下文的指向等。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">&lt;!-- more --&gt;</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://codepen.io/x-cold/pen/JqjZKR\" target=\"_blank\">示例</a></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"RbQrz\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">React</span>, { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Component</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react-dom'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">class</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Counter</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">extends</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">React</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Component</span> {\n  <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> {\n    <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>: <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>\n  }\n\n  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">countUp</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> } <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>;\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setState</span>({ <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>: <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span> });\n  }\n  \n  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">countDown</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> } <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>;\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setState</span>({ <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>: <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span> });\n  }\n  \n  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>() {\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> } <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>;\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n        <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onClick</span>={<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">countUp</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>+<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n        <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">h1</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>{<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">h1</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n        <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onClick</span>={<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">countDown</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>-<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    )\n  }\n}\n\n<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>(<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Counter</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">getElementById</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'root'</span>));</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>使用 React Hooks，我们可以这么写。</span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://codepen.io/x-cold/pen/ZNEReY\" target=\"_blank\">示例</a></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"XoNuM\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">React</span>, { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react-dom'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Counter</span>() {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setCount</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>);\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onClick</span>={() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setCount</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>)}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>+<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">h1</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>{<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">h1</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onClick</span>={() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setCount</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>)}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>-<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  )\n}\n\n<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>(<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Counter</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">getElementById</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'root'</span>));</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span><br></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">通过上面的例子，显而易见的是 React Hooks 提供了一种简洁的、函数式（FP）的程序风格，通过纯函数组件和可控的数据流来实现状态到 UI 的交互（MVVM）。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"fO6PX\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">Hooks API</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><a href=\"https://reactjs.org/docs/hooks-reference.html#basic-hooks\" target=\"_blank\">Basic Hooks</a></li></ul><ul lake-indent=\"1\" style=\"list-style-type: none; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><ul lake-indent=\"0\" style=\"list-style-type: circle; margin: 0px; padding-left: 23px;\"><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\" target=\"_blank\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">useState</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">useEffect</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\" target=\"_blank\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">useContext</code></a></li></ul></ul><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><a href=\"https://reactjs.org/docs/hooks-reference.html#additional-hooks\" target=\"_blank\">Additional Hooks</a></li></ul><ul lake-indent=\"1\" style=\"list-style-type: none; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><ul lake-indent=\"0\" style=\"list-style-type: circle; margin: 0px; padding-left: 23px;\"><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\" target=\"_blank\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">useReducer</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\" target=\"_blank\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">useCallback</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">useMemo</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#useref\" target=\"_blank\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">useRef</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#useimperativehandle\" target=\"_blank\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">useImperativeHandle</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#uselayouteffect\" target=\"_blank\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">useLayoutEffect</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usedebugvalue\" target=\"_blank\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">useDebugValue</code></a></li></ul></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"1pCkl\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">useState</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">useState 是最基本的 API，它传入一个初始值，每次函数执行都能拿到新值。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"LGgkb\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">React</span>, { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react-dom'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Counter</span>() {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setCount</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>);\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onClick</span>={() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setCount</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>)}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>+<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">h1</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>{<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">h1</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onClick</span>={() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setCount</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>)}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>-<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  )\n}\n\n<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>(<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Counter</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">getElementById</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'root'</span>));</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">需要注意的是，通过 useState 得到的状态 count，在 Counter 组件中的表现为一个常量，每一次通过 setCount 进行修改后，又重新通过 useState 获取到一个新的常量。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"Bfdkr\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">useReducer</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">useReducer 和 useState 几乎是一样的，需要外置外置 reducer (全局)，通过这种方式可以对多个状态同时进行控制。仔细端详起来，其实跟 redux 中的数据流的概念非常接近。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"7ZRPO\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useReducer</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react-dom'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">reducer</span>(<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">action</span>) {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">switch</span> (<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">action</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">type</span>) {\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">case</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'up'</span>:\n      <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> { <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>: <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span> };\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">case</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'down'</span>:\n      <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> { <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>: <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span> };\n  }\n}\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Counter</span>() {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">dispatch</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useReducer</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">reducer</span>, { <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>: <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span> })\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      {<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>}\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onClick</span>={() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">dispatch</span>({ <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">type</span>: <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'up'</span> })}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>+<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onClick</span>={() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">dispatch</span>({ <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">type</span>: <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'down'</span> })}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>+<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n}\n\n<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>(<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Counter</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">getElementById</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'root'</span>));</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"o2hie\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">useEffect</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">一个至关重要的 Hooks API，顾名思义，useEffect 是用于处理各种状态变化造成的副作用，也就是说只有在特定的时刻，才会执行的逻辑。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"osSpg\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useEffect</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react-dom'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Example</span>() {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setCount</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>);\n\n  <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// =&gt; componentDidMount/componentDidUpdate</span>\n  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useEffect</span>(() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n    <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// update </span>\n    <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">title</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-string-2\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">`You clicked ${</span><span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span><span class=\"cm-string-2\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}</span> <span class=\"cm-string-2\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">times`</span>;\n    <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// =&gt; componentWillUnMount</span>\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">cleanup</span>() {\n      <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">title</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'app'</span>;\n    }\n  }, [<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>]);\n\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">p</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>You clicked {<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>} times<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">p</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onClick</span>={() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setCount</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>)}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n        Click me\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n}\n\n<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>(<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Example</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">getElementById</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'root'</span>));</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"fg4Y5\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">useMemo</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">useMemo 主要用于渲染过程优化，两个参数依次是计算函数（通常是组件函数）和依赖状态列表，当依赖的状态发生改变时，才会触发计算函数的执行。如果没有指定依赖，则每一次渲染过程都会执行该计算函数。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"CtRv0\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">memoizedValue</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useMemo</span>(() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">computeExpensiveValue</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">b</span>), [<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">b</span>]);</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"QfnbV\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useMemo</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react-dom'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Time</span>() {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">p</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>{<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Date</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">now</span>()}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">p</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>;\n}\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Counter</span>() {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setCount</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>);\n  \n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">memoizedChildComponent</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useMemo</span>((<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Time</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>;\n  }, [<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>]);\n\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">h1</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>{<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">h1</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onClick</span>={() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setCount</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">count</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>)}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>+<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>{<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">memoizedChildComponent</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n}\n\n<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>(<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Counter</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">getElementById</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'root'</span>));</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"Qenmu\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">useContext</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">context 是在外部 create ，内部 use 的 state，它和全局变量的区别在于，如果多个组件同时 useContext，那么这些组件都会 rerender，如果多个组件同时 useState 同一个全局变量，则只有触发 setState 的当前组件 rerender。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://codepen.io/x-cold/pen/OYJGKQ\" target=\"_blank\">示例-未使用 useContext</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"srBWZ\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useContext</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">createContext</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react-dom'</span>;\n\n<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 1. 使用 createContext 创建上下文</span>\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserContext</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">createContext</span>();\n\n<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 2. 创建 Provider</span>\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserProvider</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">props</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">username</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">handleChangeUsername</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">''</span>);\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserContext.Provider</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>={{ <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">username</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">handleChangeUsername</span> }}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      {<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">props</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">children</span>}\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserContext.Provider</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n};\n\n<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 3. 创建 Consumer</span>\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserConsumer</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserContext</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Consumer</span>;\n\n<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 4. 使用 Consumer 包裹组件</span>\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Pannel</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> (\n  <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserConsumer</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    {({ <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">username</span>, <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">handleChangeUsername</span> }) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> (\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n        <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>user: {<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">username</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n        <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">input</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onChange</span>={<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">e</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">handleChangeUsername</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">e</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">target</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>)} <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    )}\n  <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserConsumer</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n);\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Form</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Pannel</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">App</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> (\n  <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserProvider</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Form</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserProvider</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n);\n\n<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>(<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">App</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">getElementById</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'root'</span>));</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://codepen.io/x-cold/pen/GaRLqZ?editors=0010\" target=\"_blank\">示例 -&nbsp;使用 useContext</a></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"87xQ7\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useContext</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">createContext</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react-dom'</span>;\n\n<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 1. 使用 createContext 创建上下文</span>\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserContext</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">createContext</span>();\n\n<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 2. 创建 Provider</span>\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserProvider</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">props</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">let</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">username</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">handleChangeUsername</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">''</span>);\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserContext.Provider</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>={{ <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">username</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">handleChangeUsername</span> }}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      {<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">props</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">children</span>}\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserContext.Provider</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n};\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Pannel</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">username</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">handleChangeUsername</span> } <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useContext</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserContext</span>); <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 3. 使用 Context</span>\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>user: {<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">username</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">input</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onChange</span>={<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">e</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">handleChangeUsername</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">e</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">target</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>)} <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n};\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Form</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Pannel</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">App</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> (\n  <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserProvider</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Form</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">UserProvider</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n);\n\n<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>(<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">App</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">getElementById</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'root'</span>));</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"xAPs1\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">useRef</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">useRef 返回一个可变的 ref 对象，其 .current 属性初始化为传递的参数（initialValue）。返回的对象将持续整个组件的生命周期。事实上&nbsp;useRef 是一个非常有用的 API，许多情况下，我们需要保存一些改变的东西，它会派上大用场的。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://codepen.io/x-cold/pen/EzxMPw\" target=\"_blank\">示例</a></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"PyJF2\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">TextInputWithFocusButton</span>() {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">inputEl</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useRef</span>(<span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">null</span>);\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onButtonClick</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n    <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// `current` points to the mounted text input element</span>\n    <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">inputEl</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">current</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">focus</span>();\n  };\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">input</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ref</span>={<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">inputEl</span>} <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">type</span>=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"text\"</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onClick</span>={<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onButtonClick</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>Focus the input<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">button</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n}</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"ReVY6\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">React 状态共享方案</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">说到状态共享，最简单和直接的方式就是通过 props 逐级进行状态的传递，这种方式耦合于组件的父子关系，一旦组件嵌套结构发生变化，就需要重新编写代码，维护成本非常昂贵。随着时间的推移，官方推出了各种方案来解决状态共享和代码复用的问题。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"9oPRo\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">Mixins</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1557132050699-0f447719-f393-477a-9aa3-8d792ca5cd5f.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; width: 613px; height: 330px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">React 中，只有通过 createClass 创建的组件才能使用 mixins。这种高耦合，依赖难以控制，复杂度高的方式随着 ES6 的浪潮逐渐淡出了历史舞台。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"h8DyH\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">HOC</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">高阶组件源于函数式编程，由于 React 中的组件也可以视为函数（类），因此天生就可以通过 HOC 的方式来实现代码复用。可以通过属性代理和反向继承来实现，HOC 可以很方便的操控渲染的结果，也可以对组件的 props / state 进行操作，从而可以很方便的进行复杂的代码逻辑复用。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"YAJug\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">React</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">PropTypes</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'prop-types'</span>;\n\n<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 属性代理</span>\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">class</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Show</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">extends</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">React</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Component</span> {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">static</span> <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">propTypes</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> {\n    <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">children</span>: <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">PropTypes</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">element</span>,\n    <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">visible</span>: <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">PropTypes</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bool</span>,\n  };\n\n  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>() {\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">visible</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">children</span> } <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">props</span>;\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">visible</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">?</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">children</span> : <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">null</span>;\n  }\n}\n\n<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 反向继承</span>\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Show2</span>(<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">WrappedComponent</span>) {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">class</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">extends</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">WrappedComponent</span> {\n    <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>() {\n      <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">if</span> (<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">props</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">visible</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">===</span> <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">false</span>) {\n        <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">null</span>;\n      } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">else</span> {\n        <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">super</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>();\n      }\n    }\n  }\n}\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">App</span>() {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Show</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">visible</span>={<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Math</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">random</span>() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span> <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0.5</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>hello<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Show</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n}</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Redux 中的状态复用是一种典型的 HOC 的实现，我们可以通过 compose 来将数据组装到目标组件中，当然你也可以通过装饰器的方式进行处理。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"mahEg\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">React</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">connect</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react-redux'</span>;\n\n<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// use decorator</span>\n<span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">@</span><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">connect</span>(<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> ({ <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">name</span>: <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">user</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">name</span> }))\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">class</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">App</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">extends</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">React</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Component</span>{\n  <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>() {\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>hello, {<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">props</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">name</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  }\n}\n\n<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// use compose</span>\n<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">connect</span>((<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> ({ <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">name</span>: <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">user</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">name</span> }))(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">App</span>);</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">&nbsp;</p><h3 id=\"ejRZ3\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">Render Props</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">显而易见，renderProps 就是一种将 render 方法作为 props 传递到子组件的方案，相比 HOC 的方案，renderProps 可以保护原有的组件层次结构。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"KxdZ0\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">React</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react-dom'</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">PropTypes</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'prop-types'</span>;\n\n<span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 与 HOC 不同，我们可以使用具有 render prop 的普通组件来共享代码</span>\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">class</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Mouse</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">extends</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">React</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Component</span> {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">static</span> <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">propTypes</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> {\n    <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>: <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">PropTypes</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">func</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">isRequired</span>\n  }\n\n  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> { <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">x</span>: <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>, <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">y</span>: <span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span> };\n\n  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">handleMouseMove</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> (<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">event</span>) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setState</span>({\n      <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">x</span>: <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">event</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">clientX</span>,\n      <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">y</span>: <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">event</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">clientY</span>\n    });\n  }\n\n  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>() {\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">style</span>={{ <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">height</span>: <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'100%'</span> }} <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onMouseMove</span>={<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">handleMouseMove</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n        {<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">props</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>(<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">this</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state</span>)}\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    );\n  }\n}\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">App</span>() {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">style</span>={{ <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">height</span>: <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'100%'</span> }}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Mouse</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>={({ <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">x</span>, <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">y</span> }) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> (\n          <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// render prop 给了我们所需要的 state 来渲染我们想要的</span>\n          <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">h1</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>The mouse position is ({<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">x</span>}, {<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">y</span>})<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">h1</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n        )}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n}\n\n<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">ReactDOM</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">render</span>(<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">App</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">document</span>.<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">getElementById</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'root'</span>));</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"4oynP\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">Hooks</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">通过组合 Hooks API 和 React 内置的 Context，从前面的示例可以看到通过 Hook 让组件之间的状态共享更清晰和简单。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"bXgHy\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">React Hooks 设计理念</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"OYTXg\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">基本原理</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1557141237856-51f92576-f6f5-4dc3-a38f-9ef3fc841590.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; width: 607px; height: 376px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"kFPHk\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">FunctionalComponent</span> () {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state1</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setState1</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>);\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state2</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setState2</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">2</span>);\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">state3</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">setState3</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">3</span>);\n}</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1557141338783-bb968286-9762-4a3a-8bc0-4d52b717ae6b.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; width: 613px; height: 509px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"SgRLd\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">{\n  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">memoizedState</span>: <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'foo'</span>,\n  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">next</span>: {\n    <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">memoizedState</span>: <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'bar'</span>,\n    <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">next</span>: {\n      <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">memoizedState</span>: <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'bar'</span>,\n      <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">next</span>: <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">null</span>\n    }\n  }\n}</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"nIZhk\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">函数式贯彻到底</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h4 id=\"ShOaE\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">capture props</h4><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">函数组件天生就是支持 props 的，基本用法上和 class 组件没有太大的差别。需要注意的两个区别是：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>class 组件 props 挂载在 this 上下文中，而函数式组件通过形参传入；</li><li>由于挂载位置的差异，class 组件中如果 this 发生了变化，那么 this.props 也会随之改变；而在函数组件里 props 始终是不可变的，因此遵守&nbsp;capture <span>value&nbsp;</span>原则（即获取的值始终是某一时刻的），Hooks 也遵循这个原则。</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">通过一个<a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\">示例</a>来理解一下 capture value，我们可以通过 useRef 来规避&nbsp;<span>capture value，因为 useRef 是可变的。</span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h4 id=\"c4wq2\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">state</h4><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"></p><div data-card-type=\"block\" data-lake-card=\"table\" id=\"odSZm\"><table class=\"lake-table\" style=\"width: 687px; outline: none; border-collapse: collapse;\"><colgroup><col width=\"153\" span=\"1\"><col width=\"251\" span=\"1\"><col width=\"282\" span=\"1\"></colgroup><tbody><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">class 组件</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">函数组件</p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">创建状态</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">this.state = {}</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">useState, useReducer</p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">修改状态</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">this.setState()</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">set function</p></td></tr><tr style=\"height: 33px;\"><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">更新机制</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">异步更新，多次修改合并到上一个状态，产生一个副本</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">同步更新，直接修改为目标状态</p></td></tr><tr style=\"height: 33px;\"><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">状态管理</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">一个 state 集中式管理多个状态</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">多个 state，可以通过 useReducer 进行状态合并（手动）</p></td></tr><tr style=\"height: 33px;\"><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">性能</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">高</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">如果&nbsp;useState 初始化状态需要通过非常复杂的计算得到，请使用函数的声明方式，否则每次渲染都会重复执行</p></td></tr><tr style=\"height: 33px;\"><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td></tr></tbody></table></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h4 id=\"Ygpro\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">生命周期</h4><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>componentDidMount / componentDidUpdate / componentWillUnMount</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">useEffect 在每一次渲染都会被调用，稍微包装一下就可以作为这些生命周期使用；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>shouldComponentUpdate</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">通常我们优化组件性能时，会优先采用纯组件的方式来减少单个组件的渲染次数。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"i8ucz\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">class</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Button</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">extends</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">React</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">PureComponent</span> {}</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">React Hooks 中可以采用 useMemo 代替，可以实现仅在某些数据变化时重新渲染组件，等同于自带了&nbsp;shallowEqual 的 shouldComponentUpdate。</p><h4 id=\"HVJ3I\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 16px; line-height: 24px;\">强制渲染&nbsp;forceUpdate</h4><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">由于默认情况下，每一次修改状态都会造成重新渲染，可以通过一个不使用的 set 函数来当成 forceUpdate。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"oz5bh\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">forceUpdate</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>)[<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">1</span>];</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"zUNJm\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">实现原理</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"lKXz6\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">基于 Hooks，增强 Hooks</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"I00nT\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">来一套组合拳吧！</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">由于每一个 Hooks API 都是纯函数的概念，使用时更关注输入 (input) 和输出 (output)，因此可以更好的通过组装函数的方式，对不同特性的基础 Hooks API 进行组合，创造拥有新特性的 Hooks。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>useState 维护组件状态</li><li>useEffect 处理副作用</li><li>useContext 监听 provider 更新变化</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"smNOw\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">useDidMount</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"mZPLk\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useEffect</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useDidMount</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useEffect</span>(() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&amp;</span><span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&amp;</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>(), []);\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">export</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">default</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useDidMount</span>;</pre></div></div></div><h3 id=\"GwwRF\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><br></h3><h3 id=\"4PTjD\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">useDidUpdate<br></h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"Hkvz3\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useEffect</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useRef</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useDidUpdate</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> (<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">conditions</span>) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">didMoutRef</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useRef</span>(<span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">false</span>);\n  <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useEffect</span>(() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">if</span> (<span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">!</span><span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">didMoutRef</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">current</span>) {\n      <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">didMoutRef</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">current</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">true</span>;\n      <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span>;\n    }\n    <span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Cleanup effects when fn returns a function</span>\n    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&amp;</span><span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&amp;</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>();\n  }, <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">conditions</span>);\n};\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">export</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">default</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useDidUpdate</span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"LjeaI\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">useWillUnmount</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在讲到 useEffect 时已经提及过，其允许返回一个 cleanup 函数，组件在取消挂载时将会执行该 cleanup 函数，因此&nbsp;useWillUnmount 也能轻松实现~</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"gOyTB\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useEffect</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useWillUnmount</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useEffect</span>(() <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&amp;</span><span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&amp;</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">fn</span>(), []);\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">export</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">default</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useWillUnmount</span>;</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"YcQCg\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">useHover</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://codepen.io/x-cold/pen/joOXxK\" target=\"_blank\">示例</a></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"Bipve\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// lib/onHover.js</span>\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useHover</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">hovered</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">set</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">false</span>);\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> {\n    <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">hovered</span>,\n    <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bind</span>: {\n      <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onMouseEnter</span>: () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">set</span>(<span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">true</span>),\n      <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onMouseLeave</span>: () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">set</span>(<span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">false</span>),\n    },\n  };\n};\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">export</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">default</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useHover</span>;</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"oqzFK\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useHover</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'./lib/onHover.js'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Hover</span>() {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">hovered</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bind</span> } <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useHover</span>();\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span> {<span class=\"cm-meta\" style=\"color: rgb(31, 127, 154); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">...</span><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bind</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n        hovered:\n        {<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">String</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">hovered</span>)}\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n}</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"eObx9\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">useField</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://codepen.io/x-cold/pen/rgNPNB\" target=\"_blank\">示例</a></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"OTlFT\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// lib/useField.js</span>\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'react'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useField</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> (<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">initial</span>) <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> [<span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">set</span>] <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useState</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">initial</span>);\n\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> {\n    <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>,\n    <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">set</span>,\n    <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">reset</span>: () <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">set</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">initial</span>),\n    <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bind</span>: {\n      <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>,\n      <span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">onChange</span>: <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">e</span> <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=&gt;</span> <span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">set</span>(<span class=\"cm-variable-2\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">e</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">target</span>.<span class=\"cm-property\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>),\n    },\n  };\n}\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">export</span> <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">default</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useField</span>;</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"rahR0\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(38, 38, 38); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useField</span> } <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">from</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'lib/useField'</span>;\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Input</span> {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bind</span> } <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useField</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'Type Here...'</span>);\n\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      input text:\n      {<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>}\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">input</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">type</span>=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"text\"</span> {<span class=\"cm-meta\" style=\"color: rgb(31, 127, 154); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">...</span><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bind</span>} <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">/&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n}\n\n<span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">function</span> <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Select</span>() {\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const</span> { <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>, <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bind</span> } <span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">useField</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'apple'</span>)\n  <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">return</span> (\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      selected:\n      {<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>}\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">select</span> {<span class=\"cm-meta\" style=\"color: rgb(31, 127, 154); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">...</span><span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">bind</span>}<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n        <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">option</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"apple\"</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>apple<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">option</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n        <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">option</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>=<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"orange\"</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>orange<span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">option</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n      <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">select</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n    <span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&lt;/</span><span class=\"cm-tag\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">div</span><span class=\"cm-tag cm-bracket\" style=\"color: rgb(34, 134, 58); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">&gt;</span>\n  );\n}</pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"h2fgP\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">注意事项</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>Hook 的使用范围：函数式的 React 组件中、自定义的 Hook 函数里；</li><li>Hook 必须写在函数的最外层，每一次&nbsp;useState 都会改变其下标 (cursor)，React 根据其顺序来更新状态；</li><li>尽管每一次渲染都会执行 Hook API，但是产生的状态 (state) 始终是一个常量（作用域在函数内部）；</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"wBXEs\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">结语</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">React Hooks 提供为状态管理提供了新的可能性，尽管我们可能需要额外去维护一些内部的状态，但是可以避免通过 renderProps / HOC 等复杂的方式来处理状态管理的问题。Hooks 带来的好处如下：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><span>更细粒度的</span>代码复用，并且不会产生过多的副作用</li><li>函数式编程风格，代码更简洁，同时降低了使用和理解门槛</li><li>减少组件嵌套层数</li><li>组件数据流向更清晰</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">事实上，通过定制各种场景下的自定义 Hooks，能让我们的应用程序更方便和简洁，组件的层次结构也能保证完好，还有如此令人愉悦的函数式编程风格，<span>Hooks 在 React 16.8.0 版本已经正式发布稳定版本，现在</span>开始用起来吧！！！</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"wN7im\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">参考资料</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><a href=\"https://reactjs.org/docs/hooks-reference.html\" target=\"_blank\">hooks-reference</a></li><li><a href=\"https://github.com/beizhedenglong/react-hooks-lib\" target=\"_blank\">react-hooks-lib</a></li><li><a href=\"https://juejin.im/post/5cad39b3f265da03502b1c0a\" target=\"_blank\">【React深入】从Mixin到HOC再到Hook</a></li><li><a href=\"https://overreacted.io/how-are-function-components-different-from-classes/\" target=\"_blank\">How Are Function Components Different from Classes?</a></li><li><a href=\"https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba\" target=\"_blank\">under-the-hood-of-reacts-hooks-system</a></li><li><a href=\"https://juejin.im/post/5bdfc1c4e51d4539f4178e1f\" target=\"_blank\">阅读源码后，来讲讲React Hooks是怎么实现的</a></li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1557142193165-0bfa8139-4b3f-40b3-9401-530eb6715a5c.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"visibility: visible; width: 746px; height: 420px;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 24px; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><h1 id=\"article-title\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557142209961-5115d576-5480-4725-8bed-61bb54f0cfe3.png%22%2C%22originWidth%22%3A1920%2C%22originHeight%22%3A1080%2C%22name%22%3A%22image.png%22%2C%22size%22%3A98682%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A960%2C%22height%22%3A540%7D\"></card></h1><p><br /></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557142220425-364dee55-ce15-4c83-98d1-8e1ec9ada26e.png%22%2C%22originWidth%22%3A1920%2C%22originHeight%22%3A1080%2C%22name%22%3A%22image.png%22%2C%22size%22%3A141753%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A960%2C%22height%22%3A540%7D\"></card></p><p><br /></p><blockquote><p>直播回放链接：<a href=\"https://yq.aliyun.com/articles/700174\" target=\"_blank\">云栖社区</a> (<a href=\"https://github.com/x-cold\" target=\"_blank\">@x-cold</a>)</p></blockquote><p><br /></p><h2 id=\"4wRfh\">React Hooks 是什么？</h2><p><br /></p><p>Hooks 顾名思义，字面意义上来说就是 React 钩子的概念。通过一个 case 我们对 React Hooks 先有一个第一印象。</p><p><br /></p><p>假设现在要实现一个计数器的组件。如果使用组件化的方式，我们需要做的事情相对更多一些，比如说声明 state，编写计数器的方法等，而且需要理解的概念可能更多一些，比如 Javascript 的类的概念，this 上下文的指向等。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/JqjZKR\" target=\"_blank\">示例</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20Component%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnclass%20Counter%20extends%20React.Component%20%7B%5Cn%20%20state%20%3D%20%7B%5Cn%20%20%5Ctcount%3A%200%5Cn%20%20%7D%5Cn%5Cn%20%20countUp%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20const%20%7B%20count%20%7D%20%3D%20this.state%3B%5Cn%20%20%5Ctthis.setState(%7B%20count%3A%20count%20%2B%201%20%7D)%3B%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20countDown%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20const%20%7B%20count%20%7D%20%3D%20this.state%3B%5Cn%20%20%5Ctthis.setState(%7B%20count%3A%20count%20-%201%20%7D)%3B%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20render()%20%7B%5Cn%20%20%20%20const%20%7B%20count%20%7D%20%3D%20this.state%3B%5Cn%20%20%5Ctreturn%20(%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7Bthis.countUp%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%20%20%3Ch1%3E%7Bcount%7D%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7Bthis.countDown%7D%3E-%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%5Cn%20%20%7D%5Cn%7D%5Cn%5CnReactDOM.render(%3CCounter%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22RbQrz%22%7D\"></card><p><br /></p><p><span>使用 React Hooks，我们可以这么写。</span></p><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/ZNEReY\" target=\"_blank\">示例</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20useState%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnfunction%20Counter()%20%7B%5Cn%20%20const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20%2B%201)%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Ch1%3E%7Bcount%7D%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20-%201)%7D%3E-%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%5Cn%7D%5Cn%5CnReactDOM.render(%3CCounter%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22XoNuM%22%7D\"></card><p><span><br /></span></p><p>通过上面的例子，显而易见的是 React Hooks 提供了一种简洁的、函数式（FP）的程序风格，通过纯函数组件和可控的数据流来实现状态到 UI 的交互（MVVM）。</p><p><br /></p><h3 id=\"fO6PX\">Hooks API</h3><p><br /></p><ul><li><a href=\"https://reactjs.org/docs/hooks-reference.html#basic-hooks\" target=\"_blank\">Basic Hooks</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\" target=\"_blank\"><code>useState</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\"><code>useEffect</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\" target=\"_blank\"><code>useContext</code></a></li></ul><ul><li><a href=\"https://reactjs.org/docs/hooks-reference.html#additional-hooks\" target=\"_blank\">Additional Hooks</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\" target=\"_blank\"><code>useReducer</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\" target=\"_blank\"><code>useCallback</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\"><code>useMemo</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#useref\" target=\"_blank\"><code>useRef</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#useimperativehandle\" target=\"_blank\"><code>useImperativeHandle</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#uselayouteffect\" target=\"_blank\"><code>useLayoutEffect</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usedebugvalue\" target=\"_blank\"><code>useDebugValue</code></a></li></ul><p><br /></p><h3 id=\"1pCkl\">useState</h3><p><br /></p><p>useState 是最基本的 API，它传入一个初始值，每次函数执行都能拿到新值。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20useState%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnfunction%20Counter()%20%7B%5Cn%20%20const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20%2B%201)%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Ch1%3E%7Bcount%7D%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20-%201)%7D%3E-%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%5Cn%7D%5Cn%5CnReactDOM.render(%3CCounter%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22LGgkb%22%7D\"></card><p><br /></p><p>需要注意的是，通过 useState 得到的状态 count，在 Counter 组件中的表现为一个常量，每一次通过 setCount 进行修改后，又重新通过 useState 获取到一个新的常量。</p><p><br /></p><h3 id=\"Bfdkr\">useReducer</h3><p><br /></p><p>useReducer 和 useState 几乎是一样的，需要外置外置 reducer (全局)，通过这种方式可以对多个状态同时进行控制。仔细端详起来，其实跟 redux 中的数据流的概念非常接近。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useReducer%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnfunction%20reducer(state%2C%20action)%20%7B%5Cn%20%20switch%20(action.type)%20%7B%5Cn%20%20%20%20case%20'up'%3A%5Cn%20%20%20%20%20%20return%20%7B%20count%3A%20state.count%20%2B%201%20%7D%3B%5Cn%20%20%20%20case%20'down'%3A%5Cn%20%20%20%20%20%20return%20%7B%20count%3A%20state.count%20-%201%20%7D%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnfunction%20Counter()%20%7B%5Cn%20%20const%20%5Bstate%2C%20dispatch%5D%20%3D%20useReducer(reducer%2C%20%7B%20count%3A%201%20%7D)%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%7Bstate.count%7D%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20dispatch(%7B%20type%3A%20'up'%20%7D)%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20dispatch(%7B%20type%3A%20'down'%20%7D)%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5CnReactDOM.render(%3CCounter%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%227ZRPO%22%7D\"></card><p><br /></p><h3 id=\"o2hie\">useEffect</h3><p><br /></p><p>一个至关重要的 Hooks API，顾名思义，useEffect 是用于处理各种状态变化造成的副作用，也就是说只有在特定的时刻，才会执行的逻辑。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useEffect%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnfunction%20Example()%20%7B%5Cn%20%20const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%3B%5Cn%5Cn%20%20%2F%2F%20%3D%3E%20componentDidMount%2FcomponentDidUpdate%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20update%20%5Cn%20%20%20%20document.title%20%3D%20%60You%20clicked%20%24%7Bcount%7D%20times%60%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20componentWillUnMount%5Cn%20%20%20%20return%20function%20cleanup()%20%7B%5Cn%20%20%20%20%5Ctdocument.title%20%3D%20'app'%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%20%5Bcount%5D)%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cp%3EYou%20clicked%20%7Bcount%7D%20times%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20%2B%201)%7D%3E%5Cn%20%20%20%20%20%20%20%20Click%20me%5Cn%20%20%20%20%20%20%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5CnReactDOM.render(%3CExample%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22osSpg%22%7D\"></card><p><br /></p><h3 id=\"fg4Y5\">useMemo</h3><p><br /></p><p>useMemo 主要用于渲染过程优化，两个参数依次是计算函数（通常是组件函数）和依赖状态列表，当依赖的状态发生改变时，才会触发计算函数的执行。如果没有指定依赖，则每一次渲染过程都会执行该计算函数。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22const%20memoizedValue%20%3D%20useMemo(()%20%3D%3E%20computeExpensiveValue(a%2C%20b)%2C%20%5Ba%2C%20b%5D)%3B%22%2C%22id%22%3A%22CtRv0%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useMemo%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnfunction%20Time()%20%7B%5Cn%5Ctreturn%20%3Cp%3E%7BDate.now()%7D%3C%2Fp%3E%3B%5Cn%7D%5Cn%5Cnfunction%20Counter()%20%7B%5Cn%20%20const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%3B%5Cn%20%20%5Cn%20%20const%20memoizedChildComponent%20%3D%20useMemo((count)%20%3D%3E%20%7B%5Cn%20%20%20%20return%20%3CTime%20%2F%3E%3B%5Cn%20%20%7D%2C%20%5Bcount%5D)%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Ch1%3E%7Bcount%7D%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20%2B%201)%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cdiv%3E%7BmemoizedChildComponent%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5CnReactDOM.render(%3CCounter%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22QfnbV%22%7D\"></card><p><br /></p><h3 id=\"Qenmu\">useContext</h3><p><br /></p><p>context 是在外部 create ，内部 use 的 state，它和全局变量的区别在于，如果多个组件同时 useContext，那么这些组件都会 rerender，如果多个组件同时 useState 同一个全局变量，则只有触发 setState 的当前组件 rerender。</p><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/OYJGKQ\" target=\"_blank\">示例-未使用 useContext</a></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useContext%2C%20createContext%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cn%2F%2F%201.%20%E4%BD%BF%E7%94%A8%20createContext%20%E5%88%9B%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87%5Cnconst%20UserContext%20%3D%20createContext()%3B%5Cn%5Cn%2F%2F%202.%20%E5%88%9B%E5%BB%BA%20Provider%5Cnconst%20UserProvider%20%3D%20props%20%3D%3E%20%7B%5Cn%20%20let%20%5Busername%2C%20handleChangeUsername%5D%20%3D%20useState('')%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3CUserContext.Provider%20value%3D%7B%7B%20username%2C%20handleChangeUsername%20%7D%7D%3E%5Cn%20%20%20%20%20%20%7Bprops.children%7D%5Cn%20%20%20%20%3C%2FUserContext.Provider%3E%5Cn%20%20)%3B%5Cn%7D%3B%5Cn%5Cn%2F%2F%203.%20%E5%88%9B%E5%BB%BA%20Consumer%5Cnconst%20UserConsumer%20%3D%20UserContext.Consumer%3B%5Cn%5Cn%2F%2F%204.%20%E4%BD%BF%E7%94%A8%20Consumer%20%E5%8C%85%E8%A3%B9%E7%BB%84%E4%BB%B6%5Cnconst%20Pannel%20%3D%20()%20%3D%3E%20(%5Cn%20%20%3CUserConsumer%3E%5Cn%20%20%20%20%7B(%7B%20username%2C%20handleChangeUsername%20%7D)%20%3D%3E%20(%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3Euser%3A%20%7Busername%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cinput%20onChange%3D%7Be%20%3D%3E%20handleChangeUsername(e.target.value)%7D%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%7D%5Cn%20%20%3C%2FUserConsumer%3E%5Cn)%3B%5Cn%5Cnconst%20Form%20%3D%20()%20%3D%3E%20%3CPannel%20%2F%3E%3B%5Cn%5Cnconst%20App%20%3D%20()%20%3D%3E%20(%5Cn%20%20%3Cdiv%3E%5Cn%20%20%20%20%3CUserProvider%3E%5Cn%20%20%20%20%20%20%3CForm%20%2F%3E%5Cn%20%20%20%20%3C%2FUserProvider%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn)%3B%5Cn%5CnReactDOM.render(%3CApp%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22srBWZ%22%7D\"></card><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/GaRLqZ?editors=0010\" target=\"_blank\">示例 - 使用 useContext</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useContext%2C%20createContext%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cn%2F%2F%201.%20%E4%BD%BF%E7%94%A8%20createContext%20%E5%88%9B%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87%5Cnconst%20UserContext%20%3D%20createContext()%3B%5Cn%5Cn%2F%2F%202.%20%E5%88%9B%E5%BB%BA%20Provider%5Cnconst%20UserProvider%20%3D%20props%20%3D%3E%20%7B%5Cn%20%20let%20%5Busername%2C%20handleChangeUsername%5D%20%3D%20useState('')%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3CUserContext.Provider%20value%3D%7B%7B%20username%2C%20handleChangeUsername%20%7D%7D%3E%5Cn%20%20%20%20%20%20%7Bprops.children%7D%5Cn%20%20%20%20%3C%2FUserContext.Provider%3E%5Cn%20%20)%3B%5Cn%7D%3B%5Cn%5Cnconst%20Pannel%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20const%20%7B%20username%2C%20handleChangeUsername%20%7D%20%3D%20useContext(UserContext)%3B%20%2F%2F%203.%20%E4%BD%BF%E7%94%A8%20Context%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cdiv%3Euser%3A%20%7Busername%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3Cinput%20onChange%3D%7Be%20%3D%3E%20handleChangeUsername(e.target.value)%7D%20%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%3B%5Cn%5Cnconst%20Form%20%3D%20()%20%3D%3E%20%3CPannel%20%2F%3E%3B%5Cn%5Cnconst%20App%20%3D%20()%20%3D%3E%20(%5Cn%20%20%3Cdiv%3E%5Cn%20%20%20%20%3CUserProvider%3E%5Cn%20%20%20%20%20%20%3CForm%20%2F%3E%5Cn%20%20%20%20%3C%2FUserProvider%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn)%3B%5Cn%5CnReactDOM.render(%3CApp%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%2287xQ7%22%7D\"></card><p><br /></p><h3 id=\"xAPs1\">useRef</h3><p><br /></p><p>useRef 返回一个可变的 ref 对象，其 .current 属性初始化为传递的参数（initialValue）。返回的对象将持续整个组件的生命周期。事实上 useRef 是一个非常有用的 API，许多情况下，我们需要保存一些改变的东西，它会派上大用场的。</p><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/EzxMPw\" target=\"_blank\">示例</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22function%20TextInputWithFocusButton()%20%7B%5Cn%20%20const%20inputEl%20%3D%20useRef(null)%3B%5Cn%20%20const%20onButtonClick%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20%60current%60%20points%20to%20the%20mounted%20text%20input%20element%5Cn%20%20%20%20inputEl.current.focus()%3B%5Cn%20%20%7D%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3C%3E%5Cn%20%20%20%20%20%20%3Cinput%20ref%3D%7BinputEl%7D%20type%3D%5C%22text%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7BonButtonClick%7D%3EFocus%20the%20input%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2F%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22id%22%3A%22PyJF2%22%7D\"></card><p><br /></p><h2 id=\"ReVY6\">React 状态共享方案</h2><p><br /></p><p>说到状态共享，最简单和直接的方式就是通过 props 逐级进行状态的传递，这种方式耦合于组件的父子关系，一旦组件嵌套结构发生变化，就需要重新编写代码，维护成本非常昂贵。随着时间的推移，官方推出了各种方案来解决状态共享和代码复用的问题。</p><p><br /></p><h3 id=\"9oPRo\">Mixins</h3><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557132050699-0f447719-f393-477a-9aa3-8d792ca5cd5f.png%22%2C%22originWidth%22%3A1226%2C%22originHeight%22%3A660%2C%22name%22%3A%22image.png%22%2C%22size%22%3A164408%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A613%2C%22height%22%3A330%7D\"></card></p><p>React 中，只有通过 createClass 创建的组件才能使用 mixins。这种高耦合，依赖难以控制，复杂度高的方式随着 ES6 的浪潮逐渐淡出了历史舞台。</p><p><br /></p><h3 id=\"h8DyH\">HOC</h3><p><br /></p><p>高阶组件源于函数式编程，由于 React 中的组件也可以视为函数（类），因此天生就可以通过 HOC 的方式来实现代码复用。可以通过属性代理和反向继承来实现，HOC 可以很方便的操控渲染的结果，也可以对组件的 props / state 进行操作，从而可以很方便的进行复杂的代码逻辑复用。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20PropTypes%20from%20'prop-types'%3B%5Cn%5Cn%2F%2F%20%E5%B1%9E%E6%80%A7%E4%BB%A3%E7%90%86%5Cnclass%20Show%20extends%20React.Component%20%7B%5Cn%20%20static%20propTypes%20%3D%20%7B%5Cn%20%20%20%20children%3A%20PropTypes.element%2C%5Cn%20%20%20%20visible%3A%20PropTypes.bool%2C%5Cn%20%20%7D%3B%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20const%20%7B%20visible%2C%20children%20%7D%20%3D%20this.props%3B%5Cn%20%20%20%20return%20visible%20%3F%20children%20%3A%20null%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E5%8F%8D%E5%90%91%E7%BB%A7%E6%89%BF%5Cnfunction%20Show2(WrappedComponent)%20%7B%5Cn%20%20return%20class%20extends%20WrappedComponent%20%7B%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20if%20(this.props.visible%20%3D%3D%3D%20false)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20return%20super.render()%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnfunction%20App()%20%7B%5Cn%5Ctreturn%20(%5Cn%20%20%5Ct%3CShow%20visible%3D%7BMath.random()%20%3E%200.5%7D%3Ehello%3C%2FShow%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22id%22%3A%22YAJug%22%7D\"></card><p><br /></p><p>Redux 中的状态复用是一种典型的 HOC 的实现，我们可以通过 compose 来将数据组装到目标组件中，当然你也可以通过装饰器的方式进行处理。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7B%20connect%20%7D%20from%20'react-redux'%3B%5Cn%5Cn%2F%2F%20use%20decorator%5Cn%40connect(state%20%3D%3E%20(%7B%20name%3A%20state.user.name%20%7D))%5Cnclass%20App%20extends%20React.Component%7B%5Cn%20%20render()%20%7B%5Cn%5Ct%5Ctreturn%20%3Cdiv%3Ehello%2C%20%7Bthis.props.name%7D%3C%2Fdiv%3E%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20use%20compose%5Cnconnect((state)%20%3D%3E%20(%7B%20name%3A%20state.user.name%20%7D))(App)%3B%22%2C%22id%22%3A%22mahEg%22%7D\"></card><p> </p><h3 id=\"ejRZ3\">Render Props</h3><p><br /></p><p>显而易见，renderProps 就是一种将 render 方法作为 props 传递到子组件的方案，相比 HOC 的方案，renderProps 可以保护原有的组件层次结构。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cnimport%20PropTypes%20from%20'prop-types'%3B%5Cn%5Cn%2F%2F%20%E4%B8%8E%20HOC%20%E4%B8%8D%E5%90%8C%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%85%B7%E6%9C%89%20render%20prop%20%E7%9A%84%E6%99%AE%E9%80%9A%E7%BB%84%E4%BB%B6%E6%9D%A5%E5%85%B1%E4%BA%AB%E4%BB%A3%E7%A0%81%5Cnclass%20Mouse%20extends%20React.Component%20%7B%5Cn%20%20static%20propTypes%20%3D%20%7B%5Cn%20%20%20%20render%3A%20PropTypes.func.isRequired%5Cn%20%20%7D%5Cn%5Cn%20%20state%20%3D%20%7B%20x%3A%200%2C%20y%3A%200%20%7D%3B%5Cn%5Cn%20%20handleMouseMove%20%3D%20(event)%20%3D%3E%20%7B%5Cn%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20x%3A%20event.clientX%2C%5Cn%20%20%20%20%20%20y%3A%20event.clientY%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20style%3D%7B%7B%20height%3A%20'100%25'%20%7D%7D%20onMouseMove%3D%7Bthis.handleMouseMove%7D%3E%5Cn%20%20%20%20%20%20%20%20%7Bthis.props.render(this.state)%7D%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnfunction%20App()%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%20style%3D%7B%7B%20height%3A%20'100%25'%20%7D%7D%3E%5Cn%20%20%20%20%20%20%3CMouse%20render%3D%7B(%7B%20x%2C%20y%20%7D)%20%3D%3E%20(%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20render%20prop%20%E7%BB%99%E4%BA%86%E6%88%91%E4%BB%AC%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%20state%20%E6%9D%A5%E6%B8%B2%E6%9F%93%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E7%9A%84%5Cn%20%20%20%20%20%20%20%20%20%20%3Ch1%3EThe%20mouse%20position%20is%20(%7Bx%7D%2C%20%7By%7D)%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%20%20)%7D%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5CnReactDOM.render(%3CApp%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22KxdZ0%22%7D\"></card><p><br /></p><h3 id=\"4oynP\">Hooks</h3><p><br /></p><p>通过组合 Hooks API 和 React 内置的 Context，从前面的示例可以看到通过 Hook 让组件之间的状态共享更清晰和简单。</p><p><br /></p><h2 id=\"bXgHy\">React Hooks 设计理念</h2><p><br /></p><h3 id=\"OYTXg\">基本原理</h3><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557141237856-51f92576-f6f5-4dc3-a38f-9ef3fc841590.png%22%2C%22originWidth%22%3A684%2C%22originHeight%22%3A424%2C%22name%22%3A%22image.png%22%2C%22size%22%3A88574%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A607%2C%22height%22%3A376%7D\"></card></p><p><br /></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22function%20FunctionalComponent%20()%20%7B%5Cn%20%20const%20%5Bstate1%2C%20setState1%5D%20%3D%20useState(1)%3B%5Cn%20%20const%20%5Bstate2%2C%20setState2%5D%20%3D%20useState(2)%3B%5Cn%20%20const%20%5Bstate3%2C%20setState3%5D%20%3D%20useState(3)%3B%5Cn%7D%22%2C%22id%22%3A%22kFPHk%22%7D\"></card><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557141338783-bb968286-9762-4a3a-8bc0-4d52b717ae6b.png%22%2C%22originWidth%22%3A591%2C%22originHeight%22%3A491%2C%22name%22%3A%22image.png%22%2C%22size%22%3A40551%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A613%2C%22height%22%3A509%7D\"></card></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%7B%5Cn%20%20memoizedState%3A%20'foo'%2C%5Cn%20%20next%3A%20%7B%5Cn%20%20%20%20memoizedState%3A%20'bar'%2C%5Cn%20%20%20%20next%3A%20%7B%5Cn%20%20%20%20%20%20memoizedState%3A%20'bar'%2C%5Cn%20%20%20%20%20%20next%3A%20null%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22id%22%3A%22SgRLd%22%7D\"></card><p><br /></p><h3 id=\"nIZhk\">函数式贯彻到底</h3><p><br /></p><h4 id=\"ShOaE\">capture props</h4><p><br /></p><p>函数组件天生就是支持 props 的，基本用法上和 class 组件没有太大的差别。需要注意的两个区别是：</p><p><br /></p><ul><li>class 组件 props 挂载在 this 上下文中，而函数式组件通过形参传入；</li><li>由于挂载位置的差异，class 组件中如果 this 发生了变化，那么 this.props 也会随之改变；而在函数组件里 props 始终是不可变的，因此遵守 capture <span>value </span>原则（即获取的值始终是某一时刻的），Hooks 也遵循这个原则。</li></ul><p><br /></p><p>通过一个<a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\">示例</a>来理解一下 capture value，我们可以通过 useRef 来规避 <span>capture value，因为 useRef 是可变的。</span></p><p><br /></p><h4 id=\"c4wq2\">state</h4><p></p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A7%2C%22cols%22%3A3%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20687px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22153%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22251%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22282%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3Eclass%20%E7%BB%84%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E5%88%9B%E5%BB%BA%E7%8A%B6%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3Ethis.state%20%3D%20%7B%7D%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3EuseState%2C%20useReducer%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3Ethis.setState()%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3Eset%20function%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%A4%9A%E6%AC%A1%E4%BF%AE%E6%94%B9%E5%90%88%E5%B9%B6%E5%88%B0%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%8A%B6%E6%80%81%EF%BC%8C%E4%BA%A7%E7%94%9F%E4%B8%80%E4%B8%AA%E5%89%AF%E6%9C%AC%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0%EF%BC%8C%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9%E4%B8%BA%E7%9B%AE%E6%A0%87%E7%8A%B6%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E4%B8%80%E4%B8%AA%20state%20%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E7%8A%B6%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E5%A4%9A%E4%B8%AA%20state%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%20useReducer%20%E8%BF%9B%E8%A1%8C%E7%8A%B6%E6%80%81%E5%90%88%E5%B9%B6%EF%BC%88%E6%89%8B%E5%8A%A8%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%80%A7%E8%83%BD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E9%AB%98%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E5%A6%82%E6%9E%9C%C2%A0useState%20%E5%88%9D%E5%A7%8B%E5%8C%96%E7%8A%B6%E6%80%81%E9%9C%80%E8%A6%81%E9%80%9A%E8%BF%87%E9%9D%9E%E5%B8%B8%E5%A4%8D%E6%9D%82%E7%9A%84%E8%AE%A1%E7%AE%97%E5%BE%97%E5%88%B0%EF%BC%8C%E8%AF%B7%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%90%A6%E5%88%99%E6%AF%8F%E6%AC%A1%E6%B8%B2%E6%9F%93%E9%83%BD%E4%BC%9A%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%22odSZm%22%7D\"></card><p></p><p><br /></p><h4 id=\"Ygpro\">生命周期</h4><p><br /></p><ul><li>componentDidMount / componentDidUpdate / componentWillUnMount</li></ul><p><br /></p><p>useEffect 在每一次渲染都会被调用，稍微包装一下就可以作为这些生命周期使用；</p><p><br /></p><ul><li>shouldComponentUpdate</li></ul><p><br /></p><p>通常我们优化组件性能时，会优先采用纯组件的方式来减少单个组件的渲染次数。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22class%20Button%20extends%20React.PureComponent%20%7B%7D%22%2C%22id%22%3A%22i8ucz%22%7D\"></card><p><br /></p><p>React Hooks 中可以采用 useMemo 代替，可以实现仅在某些数据变化时重新渲染组件，等同于自带了 shallowEqual 的 shouldComponentUpdate。</p><h4 id=\"HVJ3I\">强制渲染 forceUpdate</h4><p><br /></p><p>由于默认情况下，每一次修改状态都会造成重新渲染，可以通过一个不使用的 set 函数来当成 forceUpdate。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20forceUpdate%20%3D%20()%20%3D%3E%20useState(0)%5B1%5D%3B%22%2C%22id%22%3A%22oz5bh%22%7D\"></card><p><br /></p><h3 id=\"zUNJm\">实现原理</h3><p><br /></p><h2 id=\"lKXz6\">基于 Hooks，增强 Hooks</h2><p><br /></p><h3 id=\"I00nT\">来一套组合拳吧！</h3><p><br /></p><p>由于每一个 Hooks API 都是纯函数的概念，使用时更关注输入 (input) 和输出 (output)，因此可以更好的通过组装函数的方式，对不同特性的基础 Hooks API 进行组合，创造拥有新特性的 Hooks。</p><p><br /></p><ul><li>useState 维护组件状态</li><li>useEffect 处理副作用</li><li>useContext 监听 provider 更新变化</li></ul><p><br /></p><h3 id=\"smNOw\">useDidMount</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useEffect%20%7D%20from%20'react'%3B%5Cn%5Cnconst%20useDidMount%20%3D%20fn%20%3D%3E%20useEffect(()%20%3D%3E%20fn%20%26%26%20fn()%2C%20%5B%5D)%3B%5Cn%5Cnexport%20default%20useDidMount%3B%22%2C%22id%22%3A%22mZPLk%22%7D\"></card><h3 id=\"GwwRF\"><br /></h3><h3 id=\"4PTjD\">useDidUpdate<br /></h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useEffect%2C%20useRef%20%7D%20from%20'react'%3B%5Cn%5Cnconst%20useDidUpdate%20%3D%20(fn%2C%20conditions)%20%3D%3E%20%7B%5Cn%20%20const%20didMoutRef%20%3D%20useRef(false)%3B%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20if%20(!didMoutRef.current)%20%7B%5Cn%20%20%20%20%20%20didMoutRef.current%20%3D%20true%3B%5Cn%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20Cleanup%20effects%20when%20fn%20returns%20a%20function%5Cn%20%20%20%20return%20fn%20%26%26%20fn()%3B%5Cn%20%20%7D%2C%20conditions)%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20useDidUpdate%22%2C%22id%22%3A%22Hkvz3%22%7D\"></card><p><br /></p><h3 id=\"LjeaI\">useWillUnmount</h3><p><br /></p><p>在讲到 useEffect 时已经提及过，其允许返回一个 cleanup 函数，组件在取消挂载时将会执行该 cleanup 函数，因此 useWillUnmount 也能轻松实现~</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20useEffect%20%7D%20from%20'react'%3B%5Cn%5Cnconst%20useWillUnmount%20%3D%20fn%20%3D%3E%20useEffect(()%20%3D%3E%20()%20%3D%3E%20fn%20%26%26%20fn()%2C%20%5B%5D)%3B%5Cn%5Cnexport%20default%20useWillUnmount%3B%22%2C%22id%22%3A%22gOyTB%22%7D\"></card><p><br /></p><h3 id=\"YcQCg\">useHover</h3><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/joOXxK\" target=\"_blank\">示例</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%2F%2F%20lib%2FonHover.js%5Cnimport%20%7B%20useState%20%7D%20from%20'react'%3B%5Cn%5Cnconst%20useHover%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20const%20%5Bhovered%2C%20set%5D%20%3D%20useState(false)%3B%5Cn%20%20return%20%7B%5Cn%20%20%20%20hovered%2C%5Cn%20%20%20%20bind%3A%20%7B%5Cn%20%20%20%20%20%20onMouseEnter%3A%20()%20%3D%3E%20set(true)%2C%5Cn%20%20%20%20%20%20onMouseLeave%3A%20()%20%3D%3E%20set(false)%2C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20useHover%3B%22%2C%22id%22%3A%22Bipve%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useHover%20%7D%20from%20'.%2Flib%2FonHover.js'%3B%5Cn%5Cnfunction%20Hover()%20%7B%5Cn%20%20const%20%7B%20hovered%2C%20bind%20%7D%20%3D%20useHover()%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cdiv%20%7B...bind%7D%3E%5Cn%20%20%20%20%20%20%20%20hovered%3A%5Cn%20%20%20%20%20%20%20%20%7BString(hovered)%7D%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22id%22%3A%22oqzFK%22%7D\"></card><p><br /></p><h3 id=\"eObx9\">useField</h3><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/rgNPNB\" target=\"_blank\">示例</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%2F%2F%20lib%2FuseField.js%5Cn%5Cnimport%20%7B%20useState%20%7D%20from%20'react'%3B%5Cn%5Cnconst%20useField%20%3D%20(initial)%20%3D%3E%20%7B%5Cn%20%20const%20%5Bvalue%2C%20set%5D%20%3D%20useState(initial)%3B%5Cn%5Cn%20%20return%20%7B%5Cn%20%20%20%20value%2C%5Cn%20%20%20%20set%2C%5Cn%20%20%20%20reset%3A%20()%20%3D%3E%20set(initial)%2C%5Cn%20%20%20%20bind%3A%20%7B%5Cn%20%20%20%20%20%20value%2C%5Cn%20%20%20%20%20%20onChange%3A%20e%20%3D%3E%20set(e.target.value)%2C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%3B%5Cn%7D%5Cn%5Cnexport%20default%20useField%3B%22%2C%22id%22%3A%22OTlFT%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useField%20%7D%20from%20'lib%2FuseField'%3B%5Cn%5Cnfunction%20Input%20%7B%5Cn%20%20const%20%7B%20value%2C%20bind%20%7D%20%3D%20useField('Type%20Here...')%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20input%20text%3A%5Cn%20%20%20%20%20%20%7Bvalue%7D%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%7B...bind%7D%20%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5Cnfunction%20Select()%20%7B%5Cn%20%20const%20%7B%20value%2C%20bind%20%7D%20%3D%20useField('apple')%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20selected%3A%5Cn%20%20%20%20%20%20%7Bvalue%7D%5Cn%20%20%20%20%20%20%3Cselect%20%7B...bind%7D%3E%5Cn%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22apple%5C%22%3Eapple%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22orange%5C%22%3Eorange%3C%2Foption%3E%5Cn%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22id%22%3A%22rahR0%22%7D\"></card><p><br /></p><h2 id=\"h2fgP\">注意事项</h2><p><br /></p><ul><li>Hook 的使用范围：函数式的 React 组件中、自定义的 Hook 函数里；</li><li>Hook 必须写在函数的最外层，每一次 useState 都会改变其下标 (cursor)，React 根据其顺序来更新状态；</li><li>尽管每一次渲染都会执行 Hook API，但是产生的状态 (state) 始终是一个常量（作用域在函数内部）；</li></ul><p><br /></p><h2 id=\"wBXEs\">结语</h2><p><br /></p><p>React Hooks 提供为状态管理提供了新的可能性，尽管我们可能需要额外去维护一些内部的状态，但是可以避免通过 renderProps / HOC 等复杂的方式来处理状态管理的问题。Hooks 带来的好处如下：</p><p><br /></p><ul><li><span>更细粒度的</span>代码复用，并且不会产生过多的副作用</li><li>函数式编程风格，代码更简洁，同时降低了使用和理解门槛</li><li>减少组件嵌套层数</li><li>组件数据流向更清晰</li></ul><p><br /></p><p>事实上，通过定制各种场景下的自定义 Hooks，能让我们的应用程序更方便和简洁，组件的层次结构也能保证完好，还有如此令人愉悦的函数式编程风格，<span>Hooks 在 React 16.8.0 版本已经正式发布稳定版本，现在</span>开始用起来吧！！！</p><p><br /></p><h2 id=\"wN7im\">参考资料</h2><p><br /></p><ul><li><a href=\"https://reactjs.org/docs/hooks-reference.html\" target=\"_blank\">hooks-reference</a></li><li><a href=\"https://github.com/beizhedenglong/react-hooks-lib\" target=\"_blank\">react-hooks-lib</a></li><li><a href=\"https://juejin.im/post/5cad39b3f265da03502b1c0a\" target=\"_blank\">【React深入】从Mixin到HOC再到Hook</a></li><li><a href=\"https://overreacted.io/how-are-function-components-different-from-classes/\" target=\"_blank\">How Are Function Components Different from Classes?</a></li><li><a href=\"https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba\" target=\"_blank\">under-the-hood-of-reacts-hooks-system</a></li><li><a href=\"https://juejin.im/post/5bdfc1c4e51d4539f4178e1f\" target=\"_blank\">阅读源码后，来讲讲React Hooks是怎么实现的</a></li></ul><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557142193165-0bfa8139-4b3f-40b3-9401-530eb6715a5c.png%22%2C%22originWidth%22%3A1920%2C%22originHeight%22%3A1080%2C%22name%22%3A%22image.png%22%2C%22size%22%3A636918%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A960%2C%22height%22%3A540%7D\"></card></p><p><br /></p><p><br /></p><p><br /></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><h1 id=\"article-title\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557142209961-5115d576-5480-4725-8bed-61bb54f0cfe3.png%22%2C%22originWidth%22%3A1920%2C%22originHeight%22%3A1080%2C%22name%22%3A%22image.png%22%2C%22size%22%3A98682%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A960%2C%22height%22%3A540%7D\"></card></h1><p><br /></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557142220425-364dee55-ce15-4c83-98d1-8e1ec9ada26e.png%22%2C%22originWidth%22%3A1920%2C%22originHeight%22%3A1080%2C%22name%22%3A%22image.png%22%2C%22size%22%3A141753%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A960%2C%22height%22%3A540%7D\"></card></p><p><br /></p><blockquote><p>直播回放链接：<a href=\"https://yq.aliyun.com/articles/700174\" target=\"_blank\">云栖社区</a> (<a href=\"https://github.com/x-cold\" target=\"_blank\">@x-cold</a>)</p></blockquote><p><br /></p><h2 id=\"4wRfh\">React Hooks 是什么？</h2><p><br /></p><p>Hooks 顾名思义，字面意义上来说就是 React 钩子的概念。通过一个 case 我们对 React Hooks 先有一个第一印象。</p><p><br /></p><p>假设现在要实现一个计数器的组件。如果使用组件化的方式，我们需要做的事情相对更多一些，比如说声明 state，编写计数器的方法等，而且需要理解的概念可能更多一些，比如 Javascript 的类的概念，this 上下文的指向等。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/JqjZKR\" target=\"_blank\">示例</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20Component%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnclass%20Counter%20extends%20React.Component%20%7B%5Cn%20%20state%20%3D%20%7B%5Cn%20%20%5Ctcount%3A%200%5Cn%20%20%7D%5Cn%5Cn%20%20countUp%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20const%20%7B%20count%20%7D%20%3D%20this.state%3B%5Cn%20%20%5Ctthis.setState(%7B%20count%3A%20count%20%2B%201%20%7D)%3B%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20countDown%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20const%20%7B%20count%20%7D%20%3D%20this.state%3B%5Cn%20%20%5Ctthis.setState(%7B%20count%3A%20count%20-%201%20%7D)%3B%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20render()%20%7B%5Cn%20%20%20%20const%20%7B%20count%20%7D%20%3D%20this.state%3B%5Cn%20%20%5Ctreturn%20(%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7Bthis.countUp%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%20%20%3Ch1%3E%7Bcount%7D%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7Bthis.countDown%7D%3E-%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%5Cn%20%20%7D%5Cn%7D%5Cn%5CnReactDOM.render(%3CCounter%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22RbQrz%22%7D\"></card><p><br /></p><p><span>使用 React Hooks，我们可以这么写。</span></p><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/ZNEReY\" target=\"_blank\">示例</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20useState%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnfunction%20Counter()%20%7B%5Cn%20%20const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20%2B%201)%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Ch1%3E%7Bcount%7D%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20-%201)%7D%3E-%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%5Cn%7D%5Cn%5CnReactDOM.render(%3CCounter%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22XoNuM%22%7D\"></card><p><span><br /></span></p><p>通过上面的例子，显而易见的是 React Hooks 提供了一种简洁的、函数式（FP）的程序风格，通过纯函数组件和可控的数据流来实现状态到 UI 的交互（MVVM）。</p><p><br /></p><h3 id=\"fO6PX\">Hooks API</h3><p><br /></p><ul><li><a href=\"https://reactjs.org/docs/hooks-reference.html#basic-hooks\" target=\"_blank\">Basic Hooks</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\" target=\"_blank\"><code>useState</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\"><code>useEffect</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\" target=\"_blank\"><code>useContext</code></a></li></ul><ul><li><a href=\"https://reactjs.org/docs/hooks-reference.html#additional-hooks\" target=\"_blank\">Additional Hooks</a></li></ul><ul data-lake-indent=\"1\"><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\" target=\"_blank\"><code>useReducer</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\" target=\"_blank\"><code>useCallback</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\" target=\"_blank\"><code>useMemo</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#useref\" target=\"_blank\"><code>useRef</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#useimperativehandle\" target=\"_blank\"><code>useImperativeHandle</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#uselayouteffect\" target=\"_blank\"><code>useLayoutEffect</code></a></li><li><a href=\"https://reactjs.org/docs/hooks-reference.html#usedebugvalue\" target=\"_blank\"><code>useDebugValue</code></a></li></ul><p><br /></p><h3 id=\"1pCkl\">useState</h3><p><br /></p><p>useState 是最基本的 API，它传入一个初始值，每次函数执行都能拿到新值。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20useState%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnfunction%20Counter()%20%7B%5Cn%20%20const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20%2B%201)%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Ch1%3E%7Bcount%7D%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20-%201)%7D%3E-%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%5Cn%7D%5Cn%5CnReactDOM.render(%3CCounter%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22LGgkb%22%7D\"></card><p><br /></p><p>需要注意的是，通过 useState 得到的状态 count，在 Counter 组件中的表现为一个常量，每一次通过 setCount 进行修改后，又重新通过 useState 获取到一个新的常量。</p><p><br /></p><h3 id=\"Bfdkr\">useReducer</h3><p><br /></p><p>useReducer 和 useState 几乎是一样的，需要外置外置 reducer (全局)，通过这种方式可以对多个状态同时进行控制。仔细端详起来，其实跟 redux 中的数据流的概念非常接近。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useReducer%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnfunction%20reducer(state%2C%20action)%20%7B%5Cn%20%20switch%20(action.type)%20%7B%5Cn%20%20%20%20case%20'up'%3A%5Cn%20%20%20%20%20%20return%20%7B%20count%3A%20state.count%20%2B%201%20%7D%3B%5Cn%20%20%20%20case%20'down'%3A%5Cn%20%20%20%20%20%20return%20%7B%20count%3A%20state.count%20-%201%20%7D%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnfunction%20Counter()%20%7B%5Cn%20%20const%20%5Bstate%2C%20dispatch%5D%20%3D%20useReducer(reducer%2C%20%7B%20count%3A%201%20%7D)%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%7Bstate.count%7D%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20dispatch(%7B%20type%3A%20'up'%20%7D)%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20dispatch(%7B%20type%3A%20'down'%20%7D)%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5CnReactDOM.render(%3CCounter%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%227ZRPO%22%7D\"></card><p><br /></p><h3 id=\"o2hie\">useEffect</h3><p><br /></p><p>一个至关重要的 Hooks API，顾名思义，useEffect 是用于处理各种状态变化造成的副作用，也就是说只有在特定的时刻，才会执行的逻辑。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useEffect%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnfunction%20Example()%20%7B%5Cn%20%20const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%3B%5Cn%5Cn%20%20%2F%2F%20%3D%3E%20componentDidMount%2FcomponentDidUpdate%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20update%20%5Cn%20%20%20%20document.title%20%3D%20%60You%20clicked%20%24%7Bcount%7D%20times%60%3B%5Cn%20%20%20%20%2F%2F%20%3D%3E%20componentWillUnMount%5Cn%20%20%20%20return%20function%20cleanup()%20%7B%5Cn%20%20%20%20%5Ctdocument.title%20%3D%20'app'%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%20%5Bcount%5D)%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cp%3EYou%20clicked%20%7Bcount%7D%20times%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20%2B%201)%7D%3E%5Cn%20%20%20%20%20%20%20%20Click%20me%5Cn%20%20%20%20%20%20%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5CnReactDOM.render(%3CExample%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22osSpg%22%7D\"></card><p><br /></p><h3 id=\"fg4Y5\">useMemo</h3><p><br /></p><p>useMemo 主要用于渲染过程优化，两个参数依次是计算函数（通常是组件函数）和依赖状态列表，当依赖的状态发生改变时，才会触发计算函数的执行。如果没有指定依赖，则每一次渲染过程都会执行该计算函数。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22const%20memoizedValue%20%3D%20useMemo(()%20%3D%3E%20computeExpensiveValue(a%2C%20b)%2C%20%5Ba%2C%20b%5D)%3B%22%2C%22id%22%3A%22CtRv0%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useMemo%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cnfunction%20Time()%20%7B%5Cn%5Ctreturn%20%3Cp%3E%7BDate.now()%7D%3C%2Fp%3E%3B%5Cn%7D%5Cn%5Cnfunction%20Counter()%20%7B%5Cn%20%20const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%3B%5Cn%20%20%5Cn%20%20const%20memoizedChildComponent%20%3D%20useMemo((count)%20%3D%3E%20%7B%5Cn%20%20%20%20return%20%3CTime%20%2F%3E%3B%5Cn%20%20%7D%2C%20%5Bcount%5D)%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Ch1%3E%7Bcount%7D%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20%2B%201)%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cdiv%3E%7BmemoizedChildComponent%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5CnReactDOM.render(%3CCounter%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22QfnbV%22%7D\"></card><p><br /></p><h3 id=\"Qenmu\">useContext</h3><p><br /></p><p>context 是在外部 create ，内部 use 的 state，它和全局变量的区别在于，如果多个组件同时 useContext，那么这些组件都会 rerender，如果多个组件同时 useState 同一个全局变量，则只有触发 setState 的当前组件 rerender。</p><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/OYJGKQ\" target=\"_blank\">示例-未使用 useContext</a></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useContext%2C%20createContext%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cn%2F%2F%201.%20%E4%BD%BF%E7%94%A8%20createContext%20%E5%88%9B%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87%5Cnconst%20UserContext%20%3D%20createContext()%3B%5Cn%5Cn%2F%2F%202.%20%E5%88%9B%E5%BB%BA%20Provider%5Cnconst%20UserProvider%20%3D%20props%20%3D%3E%20%7B%5Cn%20%20let%20%5Busername%2C%20handleChangeUsername%5D%20%3D%20useState('')%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3CUserContext.Provider%20value%3D%7B%7B%20username%2C%20handleChangeUsername%20%7D%7D%3E%5Cn%20%20%20%20%20%20%7Bprops.children%7D%5Cn%20%20%20%20%3C%2FUserContext.Provider%3E%5Cn%20%20)%3B%5Cn%7D%3B%5Cn%5Cn%2F%2F%203.%20%E5%88%9B%E5%BB%BA%20Consumer%5Cnconst%20UserConsumer%20%3D%20UserContext.Consumer%3B%5Cn%5Cn%2F%2F%204.%20%E4%BD%BF%E7%94%A8%20Consumer%20%E5%8C%85%E8%A3%B9%E7%BB%84%E4%BB%B6%5Cnconst%20Pannel%20%3D%20()%20%3D%3E%20(%5Cn%20%20%3CUserConsumer%3E%5Cn%20%20%20%20%7B(%7B%20username%2C%20handleChangeUsername%20%7D)%20%3D%3E%20(%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3Euser%3A%20%7Busername%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cinput%20onChange%3D%7Be%20%3D%3E%20handleChangeUsername(e.target.value)%7D%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%7D%5Cn%20%20%3C%2FUserConsumer%3E%5Cn)%3B%5Cn%5Cnconst%20Form%20%3D%20()%20%3D%3E%20%3CPannel%20%2F%3E%3B%5Cn%5Cnconst%20App%20%3D%20()%20%3D%3E%20(%5Cn%20%20%3Cdiv%3E%5Cn%20%20%20%20%3CUserProvider%3E%5Cn%20%20%20%20%20%20%3CForm%20%2F%3E%5Cn%20%20%20%20%3C%2FUserProvider%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn)%3B%5Cn%5CnReactDOM.render(%3CApp%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22srBWZ%22%7D\"></card><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/GaRLqZ?editors=0010\" target=\"_blank\">示例 - 使用 useContext</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useContext%2C%20createContext%20%7D%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cn%5Cn%2F%2F%201.%20%E4%BD%BF%E7%94%A8%20createContext%20%E5%88%9B%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87%5Cnconst%20UserContext%20%3D%20createContext()%3B%5Cn%5Cn%2F%2F%202.%20%E5%88%9B%E5%BB%BA%20Provider%5Cnconst%20UserProvider%20%3D%20props%20%3D%3E%20%7B%5Cn%20%20let%20%5Busername%2C%20handleChangeUsername%5D%20%3D%20useState('')%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3CUserContext.Provider%20value%3D%7B%7B%20username%2C%20handleChangeUsername%20%7D%7D%3E%5Cn%20%20%20%20%20%20%7Bprops.children%7D%5Cn%20%20%20%20%3C%2FUserContext.Provider%3E%5Cn%20%20)%3B%5Cn%7D%3B%5Cn%5Cnconst%20Pannel%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20const%20%7B%20username%2C%20handleChangeUsername%20%7D%20%3D%20useContext(UserContext)%3B%20%2F%2F%203.%20%E4%BD%BF%E7%94%A8%20Context%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cdiv%3Euser%3A%20%7Busername%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3Cinput%20onChange%3D%7Be%20%3D%3E%20handleChangeUsername(e.target.value)%7D%20%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%3B%5Cn%5Cnconst%20Form%20%3D%20()%20%3D%3E%20%3CPannel%20%2F%3E%3B%5Cn%5Cnconst%20App%20%3D%20()%20%3D%3E%20(%5Cn%20%20%3Cdiv%3E%5Cn%20%20%20%20%3CUserProvider%3E%5Cn%20%20%20%20%20%20%3CForm%20%2F%3E%5Cn%20%20%20%20%3C%2FUserProvider%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn)%3B%5Cn%5CnReactDOM.render(%3CApp%20%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%2287xQ7%22%7D\"></card><p><br /></p><h3 id=\"xAPs1\">useRef</h3><p><br /></p><p>useRef 返回一个可变的 ref 对象，其 .current 属性初始化为传递的参数（initialValue）。返回的对象将持续整个组件的生命周期。事实上 useRef 是一个非常有用的 API，许多情况下，我们需要保存一些改变的东西，它会派上大用场的。</p><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/EzxMPw\" target=\"_blank\">示例</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22function%20TextInputWithFocusButton()%20%7B%5Cn%20%20const%20inputEl%20%3D%20useRef(null)%3B%5Cn%20%20const%20onButtonClick%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20%60current%60%20points%20to%20the%20mounted%20text%20input%20element%5Cn%20%20%20%20inputEl.current.focus()%3B%5Cn%20%20%7D%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3C%3E%5Cn%20%20%20%20%20%20%3Cinput%20ref%3D%7BinputEl%7D%20type%3D%5C%22text%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7BonButtonClick%7D%3EFocus%20the%20input%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2F%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22id%22%3A%22PyJF2%22%7D\"></card><p><br /></p><h2 id=\"ReVY6\">React 状态共享方案</h2><p><br /></p><p>说到状态共享，最简单和直接的方式就是通过 props 逐级进行状态的传递，这种方式耦合于组件的父子关系，一旦组件嵌套结构发生变化，就需要重新编写代码，维护成本非常昂贵。随着时间的推移，官方推出了各种方案来解决状态共享和代码复用的问题。</p><p><br /></p><h3 id=\"9oPRo\">Mixins</h3><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557132050699-0f447719-f393-477a-9aa3-8d792ca5cd5f.png%22%2C%22originWidth%22%3A1226%2C%22originHeight%22%3A660%2C%22name%22%3A%22image.png%22%2C%22size%22%3A164408%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A613%2C%22height%22%3A330%7D\"></card></p><p>React 中，只有通过 createClass 创建的组件才能使用 mixins。这种高耦合，依赖难以控制，复杂度高的方式随着 ES6 的浪潮逐渐淡出了历史舞台。</p><p><br /></p><h3 id=\"h8DyH\">HOC</h3><p><br /></p><p>高阶组件源于函数式编程，由于 React 中的组件也可以视为函数（类），因此天生就可以通过 HOC 的方式来实现代码复用。可以通过属性代理和反向继承来实现，HOC 可以很方便的操控渲染的结果，也可以对组件的 props / state 进行操作，从而可以很方便的进行复杂的代码逻辑复用。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20PropTypes%20from%20'prop-types'%3B%5Cn%5Cn%2F%2F%20%E5%B1%9E%E6%80%A7%E4%BB%A3%E7%90%86%5Cnclass%20Show%20extends%20React.Component%20%7B%5Cn%20%20static%20propTypes%20%3D%20%7B%5Cn%20%20%20%20children%3A%20PropTypes.element%2C%5Cn%20%20%20%20visible%3A%20PropTypes.bool%2C%5Cn%20%20%7D%3B%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20const%20%7B%20visible%2C%20children%20%7D%20%3D%20this.props%3B%5Cn%20%20%20%20return%20visible%20%3F%20children%20%3A%20null%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E5%8F%8D%E5%90%91%E7%BB%A7%E6%89%BF%5Cnfunction%20Show2(WrappedComponent)%20%7B%5Cn%20%20return%20class%20extends%20WrappedComponent%20%7B%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20if%20(this.props.visible%20%3D%3D%3D%20false)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20return%20super.render()%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnfunction%20App()%20%7B%5Cn%5Ctreturn%20(%5Cn%20%20%5Ct%3CShow%20visible%3D%7BMath.random()%20%3E%200.5%7D%3Ehello%3C%2FShow%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22id%22%3A%22YAJug%22%7D\"></card><p><br /></p><p>Redux 中的状态复用是一种典型的 HOC 的实现，我们可以通过 compose 来将数据组装到目标组件中，当然你也可以通过装饰器的方式进行处理。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20%7B%20connect%20%7D%20from%20'react-redux'%3B%5Cn%5Cn%2F%2F%20use%20decorator%5Cn%40connect(state%20%3D%3E%20(%7B%20name%3A%20state.user.name%20%7D))%5Cnclass%20App%20extends%20React.Component%7B%5Cn%20%20render()%20%7B%5Cn%5Ct%5Ctreturn%20%3Cdiv%3Ehello%2C%20%7Bthis.props.name%7D%3C%2Fdiv%3E%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20use%20compose%5Cnconnect((state)%20%3D%3E%20(%7B%20name%3A%20state.user.name%20%7D))(App)%3B%22%2C%22id%22%3A%22mahEg%22%7D\"></card><p> </p><h3 id=\"ejRZ3\">Render Props</h3><p><br /></p><p>显而易见，renderProps 就是一种将 render 方法作为 props 传递到子组件的方案，相比 HOC 的方案，renderProps 可以保护原有的组件层次结构。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cnimport%20PropTypes%20from%20'prop-types'%3B%5Cn%5Cn%2F%2F%20%E4%B8%8E%20HOC%20%E4%B8%8D%E5%90%8C%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%85%B7%E6%9C%89%20render%20prop%20%E7%9A%84%E6%99%AE%E9%80%9A%E7%BB%84%E4%BB%B6%E6%9D%A5%E5%85%B1%E4%BA%AB%E4%BB%A3%E7%A0%81%5Cnclass%20Mouse%20extends%20React.Component%20%7B%5Cn%20%20static%20propTypes%20%3D%20%7B%5Cn%20%20%20%20render%3A%20PropTypes.func.isRequired%5Cn%20%20%7D%5Cn%5Cn%20%20state%20%3D%20%7B%20x%3A%200%2C%20y%3A%200%20%7D%3B%5Cn%5Cn%20%20handleMouseMove%20%3D%20(event)%20%3D%3E%20%7B%5Cn%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20x%3A%20event.clientX%2C%5Cn%20%20%20%20%20%20y%3A%20event.clientY%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20style%3D%7B%7B%20height%3A%20'100%25'%20%7D%7D%20onMouseMove%3D%7Bthis.handleMouseMove%7D%3E%5Cn%20%20%20%20%20%20%20%20%7Bthis.props.render(this.state)%7D%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnfunction%20App()%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%20style%3D%7B%7B%20height%3A%20'100%25'%20%7D%7D%3E%5Cn%20%20%20%20%20%20%3CMouse%20render%3D%7B(%7B%20x%2C%20y%20%7D)%20%3D%3E%20(%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20render%20prop%20%E7%BB%99%E4%BA%86%E6%88%91%E4%BB%AC%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%20state%20%E6%9D%A5%E6%B8%B2%E6%9F%93%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E7%9A%84%5Cn%20%20%20%20%20%20%20%20%20%20%3Ch1%3EThe%20mouse%20position%20is%20(%7Bx%7D%2C%20%7By%7D)%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%20%20)%7D%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5CnReactDOM.render(%3CApp%2F%3E%2C%20document.getElementById('root'))%3B%22%2C%22id%22%3A%22KxdZ0%22%7D\"></card><p><br /></p><h3 id=\"4oynP\">Hooks</h3><p><br /></p><p>通过组合 Hooks API 和 React 内置的 Context，从前面的示例可以看到通过 Hook 让组件之间的状态共享更清晰和简单。</p><p><br /></p><h2 id=\"bXgHy\">React Hooks 设计理念</h2><p><br /></p><h3 id=\"OYTXg\">基本原理</h3><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557141237856-51f92576-f6f5-4dc3-a38f-9ef3fc841590.png%22%2C%22originWidth%22%3A684%2C%22originHeight%22%3A424%2C%22name%22%3A%22image.png%22%2C%22size%22%3A88574%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A607%2C%22height%22%3A376%7D\"></card></p><p><br /></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22function%20FunctionalComponent%20()%20%7B%5Cn%20%20const%20%5Bstate1%2C%20setState1%5D%20%3D%20useState(1)%3B%5Cn%20%20const%20%5Bstate2%2C%20setState2%5D%20%3D%20useState(2)%3B%5Cn%20%20const%20%5Bstate3%2C%20setState3%5D%20%3D%20useState(3)%3B%5Cn%7D%22%2C%22id%22%3A%22kFPHk%22%7D\"></card><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557141338783-bb968286-9762-4a3a-8bc0-4d52b717ae6b.png%22%2C%22originWidth%22%3A591%2C%22originHeight%22%3A491%2C%22name%22%3A%22image.png%22%2C%22size%22%3A40551%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A613%2C%22height%22%3A509%7D\"></card></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%7B%5Cn%20%20memoizedState%3A%20'foo'%2C%5Cn%20%20next%3A%20%7B%5Cn%20%20%20%20memoizedState%3A%20'bar'%2C%5Cn%20%20%20%20next%3A%20%7B%5Cn%20%20%20%20%20%20memoizedState%3A%20'bar'%2C%5Cn%20%20%20%20%20%20next%3A%20null%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22id%22%3A%22SgRLd%22%7D\"></card><p><br /></p><h3 id=\"nIZhk\">函数式贯彻到底</h3><p><br /></p><h4 id=\"ShOaE\">capture props</h4><p><br /></p><p>函数组件天生就是支持 props 的，基本用法上和 class 组件没有太大的差别。需要注意的两个区别是：</p><p><br /></p><ul><li>class 组件 props 挂载在 this 上下文中，而函数式组件通过形参传入；</li><li>由于挂载位置的差异，class 组件中如果 this 发生了变化，那么 this.props 也会随之改变；而在函数组件里 props 始终是不可变的，因此遵守 capture <span>value </span>原则（即获取的值始终是某一时刻的），Hooks 也遵循这个原则。</li></ul><p><br /></p><p>通过一个<a href=\"https://codesandbox.io/s/pjqnl16lm7\" target=\"_blank\">示例</a>来理解一下 capture value，我们可以通过 useRef 来规避 <span>capture value，因为 useRef 是可变的。</span></p><p><br /></p><h4 id=\"c4wq2\">state</h4><p></p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A7%2C%22cols%22%3A3%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20687px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22153%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22251%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22282%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3Eclass%20%E7%BB%84%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E5%88%9B%E5%BB%BA%E7%8A%B6%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3Ethis.state%20%3D%20%7B%7D%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3EuseState%2C%20useReducer%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3Ethis.setState()%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3Eset%20function%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%EF%BC%8C%E5%A4%9A%E6%AC%A1%E4%BF%AE%E6%94%B9%E5%90%88%E5%B9%B6%E5%88%B0%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%8A%B6%E6%80%81%EF%BC%8C%E4%BA%A7%E7%94%9F%E4%B8%80%E4%B8%AA%E5%89%AF%E6%9C%AC%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0%EF%BC%8C%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9%E4%B8%BA%E7%9B%AE%E6%A0%87%E7%8A%B6%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E4%B8%80%E4%B8%AA%20state%20%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E7%8A%B6%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E5%A4%9A%E4%B8%AA%20state%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%20useReducer%20%E8%BF%9B%E8%A1%8C%E7%8A%B6%E6%80%81%E5%90%88%E5%B9%B6%EF%BC%88%E6%89%8B%E5%8A%A8%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%80%A7%E8%83%BD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E9%AB%98%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E5%A6%82%E6%9E%9C%C2%A0useState%20%E5%88%9D%E5%A7%8B%E5%8C%96%E7%8A%B6%E6%80%81%E9%9C%80%E8%A6%81%E9%80%9A%E8%BF%87%E9%9D%9E%E5%B8%B8%E5%A4%8D%E6%9D%82%E7%9A%84%E8%AE%A1%E7%AE%97%E5%BE%97%E5%88%B0%EF%BC%8C%E8%AF%B7%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E7%9A%84%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%90%A6%E5%88%99%E6%AF%8F%E6%AC%A1%E6%B8%B2%E6%9F%93%E9%83%BD%E4%BC%9A%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%22odSZm%22%7D\"></card><p></p><p><br /></p><h4 id=\"Ygpro\">生命周期</h4><p><br /></p><ul><li>componentDidMount / componentDidUpdate / componentWillUnMount</li></ul><p><br /></p><p>useEffect 在每一次渲染都会被调用，稍微包装一下就可以作为这些生命周期使用；</p><p><br /></p><ul><li>shouldComponentUpdate</li></ul><p><br /></p><p>通常我们优化组件性能时，会优先采用纯组件的方式来减少单个组件的渲染次数。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22class%20Button%20extends%20React.PureComponent%20%7B%7D%22%2C%22id%22%3A%22i8ucz%22%7D\"></card><p><br /></p><p>React Hooks 中可以采用 useMemo 代替，可以实现仅在某些数据变化时重新渲染组件，等同于自带了 shallowEqual 的 shouldComponentUpdate。</p><h4 id=\"HVJ3I\">强制渲染 forceUpdate</h4><p><br /></p><p>由于默认情况下，每一次修改状态都会造成重新渲染，可以通过一个不使用的 set 函数来当成 forceUpdate。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20forceUpdate%20%3D%20()%20%3D%3E%20useState(0)%5B1%5D%3B%22%2C%22id%22%3A%22oz5bh%22%7D\"></card><p><br /></p><h3 id=\"zUNJm\">实现原理</h3><p><br /></p><h2 id=\"lKXz6\">基于 Hooks，增强 Hooks</h2><p><br /></p><h3 id=\"I00nT\">来一套组合拳吧！</h3><p><br /></p><p>由于每一个 Hooks API 都是纯函数的概念，使用时更关注输入 (input) 和输出 (output)，因此可以更好的通过组装函数的方式，对不同特性的基础 Hooks API 进行组合，创造拥有新特性的 Hooks。</p><p><br /></p><ul><li>useState 维护组件状态</li><li>useEffect 处理副作用</li><li>useContext 监听 provider 更新变化</li></ul><p><br /></p><h3 id=\"smNOw\">useDidMount</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useEffect%20%7D%20from%20'react'%3B%5Cn%5Cnconst%20useDidMount%20%3D%20fn%20%3D%3E%20useEffect(()%20%3D%3E%20fn%20%26%26%20fn()%2C%20%5B%5D)%3B%5Cn%5Cnexport%20default%20useDidMount%3B%22%2C%22id%22%3A%22mZPLk%22%7D\"></card><h3 id=\"GwwRF\"><br /></h3><h3 id=\"4PTjD\">useDidUpdate<br /></h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useEffect%2C%20useRef%20%7D%20from%20'react'%3B%5Cn%5Cnconst%20useDidUpdate%20%3D%20(fn%2C%20conditions)%20%3D%3E%20%7B%5Cn%20%20const%20didMoutRef%20%3D%20useRef(false)%3B%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20if%20(!didMoutRef.current)%20%7B%5Cn%20%20%20%20%20%20didMoutRef.current%20%3D%20true%3B%5Cn%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20Cleanup%20effects%20when%20fn%20returns%20a%20function%5Cn%20%20%20%20return%20fn%20%26%26%20fn()%3B%5Cn%20%20%7D%2C%20conditions)%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20useDidUpdate%22%2C%22id%22%3A%22Hkvz3%22%7D\"></card><p><br /></p><h3 id=\"LjeaI\">useWillUnmount</h3><p><br /></p><p>在讲到 useEffect 时已经提及过，其允许返回一个 cleanup 函数，组件在取消挂载时将会执行该 cleanup 函数，因此 useWillUnmount 也能轻松实现~</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20useEffect%20%7D%20from%20'react'%3B%5Cn%5Cnconst%20useWillUnmount%20%3D%20fn%20%3D%3E%20useEffect(()%20%3D%3E%20()%20%3D%3E%20fn%20%26%26%20fn()%2C%20%5B%5D)%3B%5Cn%5Cnexport%20default%20useWillUnmount%3B%22%2C%22id%22%3A%22gOyTB%22%7D\"></card><p><br /></p><h3 id=\"YcQCg\">useHover</h3><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/joOXxK\" target=\"_blank\">示例</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%2F%2F%20lib%2FonHover.js%5Cnimport%20%7B%20useState%20%7D%20from%20'react'%3B%5Cn%5Cnconst%20useHover%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20const%20%5Bhovered%2C%20set%5D%20%3D%20useState(false)%3B%5Cn%20%20return%20%7B%5Cn%20%20%20%20hovered%2C%5Cn%20%20%20%20bind%3A%20%7B%5Cn%20%20%20%20%20%20onMouseEnter%3A%20()%20%3D%3E%20set(true)%2C%5Cn%20%20%20%20%20%20onMouseLeave%3A%20()%20%3D%3E%20set(false)%2C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%3B%5Cn%7D%3B%5Cn%5Cnexport%20default%20useHover%3B%22%2C%22id%22%3A%22Bipve%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useHover%20%7D%20from%20'.%2Flib%2FonHover.js'%3B%5Cn%5Cnfunction%20Hover()%20%7B%5Cn%20%20const%20%7B%20hovered%2C%20bind%20%7D%20%3D%20useHover()%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cdiv%20%7B...bind%7D%3E%5Cn%20%20%20%20%20%20%20%20hovered%3A%5Cn%20%20%20%20%20%20%20%20%7BString(hovered)%7D%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22id%22%3A%22oqzFK%22%7D\"></card><p><br /></p><h3 id=\"eObx9\">useField</h3><p><br /></p><p><a href=\"https://codepen.io/x-cold/pen/rgNPNB\" target=\"_blank\">示例</a></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%2F%2F%20lib%2FuseField.js%5Cn%5Cnimport%20%7B%20useState%20%7D%20from%20'react'%3B%5Cn%5Cnconst%20useField%20%3D%20(initial)%20%3D%3E%20%7B%5Cn%20%20const%20%5Bvalue%2C%20set%5D%20%3D%20useState(initial)%3B%5Cn%5Cn%20%20return%20%7B%5Cn%20%20%20%20value%2C%5Cn%20%20%20%20set%2C%5Cn%20%20%20%20reset%3A%20()%20%3D%3E%20set(initial)%2C%5Cn%20%20%20%20bind%3A%20%7B%5Cn%20%20%20%20%20%20value%2C%5Cn%20%20%20%20%20%20onChange%3A%20e%20%3D%3E%20set(e.target.value)%2C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%3B%5Cn%7D%5Cn%5Cnexport%20default%20useField%3B%22%2C%22id%22%3A%22OTlFT%22%7D\"></card><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useField%20%7D%20from%20'lib%2FuseField'%3B%5Cn%5Cnfunction%20Input%20%7B%5Cn%20%20const%20%7B%20value%2C%20bind%20%7D%20%3D%20useField('Type%20Here...')%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20input%20text%3A%5Cn%20%20%20%20%20%20%7Bvalue%7D%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20%7B...bind%7D%20%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5Cnfunction%20Select()%20%7B%5Cn%20%20const%20%7B%20value%2C%20bind%20%7D%20%3D%20useField('apple')%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20selected%3A%5Cn%20%20%20%20%20%20%7Bvalue%7D%5Cn%20%20%20%20%20%20%3Cselect%20%7B...bind%7D%3E%5Cn%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22apple%5C%22%3Eapple%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22orange%5C%22%3Eorange%3C%2Foption%3E%5Cn%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22id%22%3A%22rahR0%22%7D\"></card><p><br /></p><h2 id=\"h2fgP\">注意事项</h2><p><br /></p><ul><li>Hook 的使用范围：函数式的 React 组件中、自定义的 Hook 函数里；</li><li>Hook 必须写在函数的最外层，每一次 useState 都会改变其下标 (cursor)，React 根据其顺序来更新状态；</li><li>尽管每一次渲染都会执行 Hook API，但是产生的状态 (state) 始终是一个常量（作用域在函数内部）；</li></ul><p><br /></p><h2 id=\"wBXEs\">结语</h2><p><br /></p><p>React Hooks 提供为状态管理提供了新的可能性，尽管我们可能需要额外去维护一些内部的状态，但是可以避免通过 renderProps / HOC 等复杂的方式来处理状态管理的问题。Hooks 带来的好处如下：</p><p><br /></p><ul><li><span>更细粒度的</span>代码复用，并且不会产生过多的副作用</li><li>函数式编程风格，代码更简洁，同时降低了使用和理解门槛</li><li>减少组件嵌套层数</li><li>组件数据流向更清晰</li></ul><p><br /></p><p>事实上，通过定制各种场景下的自定义 Hooks，能让我们的应用程序更方便和简洁，组件的层次结构也能保证完好，还有如此令人愉悦的函数式编程风格，<span>Hooks 在 React 16.8.0 版本已经正式发布稳定版本，现在</span>开始用起来吧！！！</p><p><br /></p><h2 id=\"wN7im\">参考资料</h2><p><br /></p><ul><li><a href=\"https://reactjs.org/docs/hooks-reference.html\" target=\"_blank\">hooks-reference</a></li><li><a href=\"https://github.com/beizhedenglong/react-hooks-lib\" target=\"_blank\">react-hooks-lib</a></li><li><a href=\"https://juejin.im/post/5cad39b3f265da03502b1c0a\" target=\"_blank\">【React深入】从Mixin到HOC再到Hook</a></li><li><a href=\"https://overreacted.io/how-are-function-components-different-from-classes/\" target=\"_blank\">How Are Function Components Different from Classes?</a></li><li><a href=\"https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba\" target=\"_blank\">under-the-hood-of-reacts-hooks-system</a></li><li><a href=\"https://juejin.im/post/5bdfc1c4e51d4539f4178e1f\" target=\"_blank\">阅读源码后，来讲讲React Hooks是怎么实现的</a></li></ul><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1557142193165-0bfa8139-4b3f-40b3-9401-530eb6715a5c.png%22%2C%22originWidth%22%3A1920%2C%22originHeight%22%3A1080%2C%22name%22%3A%22image.png%22%2C%22size%22%3A636918%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A960%2C%22height%22%3A540%7D\"></card></p><p><br /></p><p><br /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 6,
    "comments_count": 4,
    "content_updated_at": "2019-09-04T04:58:29.000Z",
    "deleted_at": null,
    "created_at": "2019-04-23T15:13:42.000Z",
    "updated_at": "2022-01-06T00:55:20.000Z",
    "published_at": "2019-09-04T04:58:29.000Z",
    "first_published_at": "2019-04-23T15:24:05.000Z",
    "word_count": 3524,
    "cover": null,
    "description": "直播回放链接：云栖社区&nbsp;(@x-cold)React Hooks 是什么？Hooks 顾名思义，字面意义上来说就是 React 钩子的概念。通过一个 case 我们对 React Hooks 先有一个第一印象。假设现在要实现一个计数器的组件。如果使用组件化的方式，我们需要做的事情相对...",
    "custom_description": null,
    "hits": 1148,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1438272,
    "slug": "fxz0qy",
    "title": "Mac mini 2014 款拆解",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "最近入手了一款 Mac mini (Late 2014) 中配版本，主要用于 Work At Home 的一些需求，替换掉我原来的 Mac Mini (2011) 款。由于自带的 HDD 1TB 5400R 的硬盘的读写速度的限制，系统运行效率受到很大的制约，我选择升级到 SDD 以提高机器的性能。\n\n> 温馨提示：2014 款的 Mac mini 的内存是焊死在主板上的，无法进行内存升级。\n\n\n<a name=\"77f721d4\"></a>\n## SSD 选用\n\n首先，2014 款支持两种升级 SSD 的方式，**加装 PCIe SSD** 和替换原有 **SATA HDD**。\n\n- Mac mini 主板上有预留一个 PCIe 的接口（传输速度限制在 700MB/s 左右），需要通过转接卡才能使用标准的 PCIe / NVMe 的 SSD；\n- Mac mini 有且仅有一个 SATA HDD，升级 SATA SSD 必须替换到原有的 HDD；\n\n<!-- more -->\n\n|  | SATA SSD | PCIe SSD |\n| --- | --- | --- |\n| 传输速率 | 500MB/s (Samsang 860 EVO 500G 为例，下同) | 读取 3000MB/s, 写入2300MB/s (Sumang 970 Plus EVO  250G 为例，下同) |\n| 价格 | ￥529 / 500G | ￥499 / 250G |\n| 额外设备 | 无 | [NVMe PCIe x4 M.2 NGFF转 late 2014苹果 Mac mini A1347 SSD 转接卡]() |\n| 拆装难度 | 需要拆解整机，替换原有 HDD | 只需要拆开底壳，主板表面即可安装 |\n| 总结 | 总体上来看，升级 SATA SSD 的性价比要优于 PCIe SSD，但是需要拆解整机，需要一定的动手能力。另外原有的 HDD 也无法同时使用。 | PCIe SSD 的优势很明显，传输速率明显比传统的 SATA SSD 更快一些，另外还能跟原有的 HDD 共存，可以保持更大的存储空间。<br />但是受限于主板接口的传输速率的限制，PCIe SSD 应有的传输速率会大打折扣 (读写 700MB/s)。 |\n\n综上，按照个人的需求可以选择一套合适的方案进行 SSD 的升级，个人建议需要大容量或者“不喜欢动手”的同学可以选择 PCIe SSD，追求性价比的同学推荐直接升级 SATA SSD (500G+ 的 SSD 正在成为主流)。关于 SSD 的选购可以参考这个[文章](https://zhuanlan.zhihu.com/p/40555331)。\n\n<a name=\"9a2b769a\"></a>\n## 拆解步骤\n\n> 拆解过程中基本没拍照，所以就只能引用参考资料的图片啦\n\n\n<a name=\"88210852\"></a>\n### 准备工作\n\nMac mini 的组装相对普通的主机更为精细，使用的螺丝都是非常迷你的，以 T6H 为主，部分是普通的小十字螺丝。拆机过程记得对螺丝做好分类哦。\n\n- T6H 螺丝刀\n- 十字螺丝刀\n\n一套小米家装的[精修工具箱](https://detail.tmall.com/item.htm?id=563193067319&skuId=3543342140610) (￥99) 就能解决啦~\n\n<a name=\"717287d5\"></a>\n### 拆开底壳\n\n使用稍微坚硬点的卡片，撬开黑色底壳；\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552791318220-de5c1020-3c64-441d-aff9-4a6ef44bedf6.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=216358&status=done&width=592)\n\n拧下电磁屏蔽层的六枚螺丝，翘起一半**（注意不要直接打开）**，然后从主板卸下 Wifi 的连接线，取下电磁屏蔽层。\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552791717666-0b64066c-ce50-4651-ab07-6bca12ed51df.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=254350&status=done&width=592)\n\n<a name=\"8c47ecd4\"></a>\n### 分割线\n\n如果是加装 PCIe SSD，往下的步骤就不需要再进行下去了，只需要把 SSD 装进去转接卡上，然后将转接卡安装到主板表面即可。\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552792965448-06555547-bce5-4847-a131-91421dd6cd59.png#align=left&display=inline&height=1024&name=image.png&originHeight=1024&originWidth=1366&size=1480881&status=done&width=1366)\n\n<a name=\"e9812d11\"></a>\n### 卸载风扇\n\n> 通常来说，无线网卡无需进行拆卸。\n\n\n拧开固定风扇的螺丝，卸下风扇的接线（在 Wifi 接线的旁边），取出风扇。\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552791918748-295fd5ba-f018-49f2-baf0-89c577e85f10.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=296012&status=done&width=592)\n\n<a name=\"7fe43ee3\"></a>\n### 取下主板\n\n主板的拆解即是细致活，也是体力活。首先把 Mac mini 表面所有的排线和接口全部卸下，然后取出固定的螺丝。<br />\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552792295593-1b7802ba-a1ce-46d6-80cc-0aaf8666a278.png#align=left&display=inline&height=482&name=image.png&originHeight=482&originWidth=638&size=464488&status=done&width=638)<br />\n<br />蓝色区域是电源排线，也需要先推出来\n\n接下来则是体力活了，用两只螺丝刀插入到这两个洞口**（务必插到最底部），然后往外用力推开。**\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552792411854-d3976262-312c-455e-ac38-b4094e37e018.png#align=left&display=inline&height=483&name=image.png&originHeight=483&originWidth=642&size=354782&status=done&width=642)\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552792502983-a70adf16-3524-4366-bf9f-eb0a7fe55004.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=114993&status=done&width=592)\n\n<a name=\"a5c28012\"></a>\n### 抽出电源\n\n抽出电源之前一定要确保蓝色框的电源线接口已经拔出。电源的输入口就是我们插入电源线的接头，稍微拉松一下最下面的金属滑片，旋转接口至 90 度，可以明显感觉到松动感，抽出电源。\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552792715272-71e2e732-b88d-4738-95de-e6ce9348bf96.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=114055&status=done&width=592)\n\n<a name=\"c27ff29f\"></a>\n### 替换硬盘\n\n最后剩下的硬盘托架非常容易拆卸，往外一拉就出来了\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552793027234-233cf2f3-89f7-44ab-b0ff-d966018d0793.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=252148&status=done&width=592)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552793042179-20a64d5e-5b53-4496-a938-335982c18891.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=217700&status=done&width=592)\n\n然后替换上新的 SSD 即可（建议使用之前先测试一下 SSD 的可用性）。按照拆机的步骤反向进行即可重新组装好你的 Mac mini。\n\n<a name=\"93a461ab\"></a>\n## 系统安装\n\n系统安装可以通过三种方式进行安装，这里只介绍几个方法，不做深入的教程了，大家可以参考网上很多详细的教程。\n\n- （如果你的系统是完整可运行的）直接从 App Store 下载和安装最新的 OSX，只需要搜索 “macos mojave”，然后根据提示安装到对应的硬盘就好了；\n- 制作 OSX 的 U 盘启动，具体查阅参考资料的教程；\n- 使用 Apple 官方提供的网络恢复；\n\n<a name=\"5db9fd7c\"></a>\n## 小结\n\n相较于 2011 款等的 Mac mini，2014 年款主板内存焊死，升级空间限制非常大，不过好在 2018 年款的 Mac mini 又可以进行内存升级了✌️。尽管在 SATA 接口的数量从两个减少到一个的情况下，还新增了一个 PCIe 的接口，硬盘数量上还是能接受的，当然升级的成本是增加了不少（PCIe SSD 和 SATA SSD 的差价，以及转接卡的购买）。\n\n总体上来说，换上新的 SSD 的 2014 款 Mac mini 还是非常流畅的，足以应对绝大多数的办公和家庭娱乐的场景。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n1、[《升级或安装 Mac mini 中的内存》](https://support.apple.com/zh-cn/HT205041)<br />2、[《2014 款苹果 Mac Mini 拆机组图》](http://www.mac52ipod.cn/post/apple-mac-mini-2014-teardown.php?page=1&part=1)<br />3、[《Mac mini 换SSD拆机详细教程》](http://www.iphoneba.net/2525.html)<br />4、[《Mac mini 2014 late 加装PCIe SSD纪实》](https://bbs.feng.com/read-htm-tid-11750596.html)<br />5、[《制作 macOS Mojave U盘USB启动安装盘方法教程 (全新安装 Mac 系统)》](https://www.iplaysoft.com/macos-usb-install-drive.html)<br />6、[《关于 macOS 的恢复功能》](https://support.apple.com/zh-cn/HT201314)<br />7、[《通过“启动转换”在 Windows 中使用 Apple 键盘》](https://support.apple.com/zh-cn/HT202676)<br />8、[《小白SSD固态硬盘选购指南》](https://zhuanlan.zhihu.com/p/40555331)\n",
    "body_draft": "最近入手了一款 Mac mini (Late 2014) 中配版本，主要用于 Work At Home 的一些需求，替换掉我原来的 Mac Mini (2011) 款。由于自带的 HDD 1TB 5400R 的硬盘的读写速度的限制，系统运行效率受到很大的制约，我选择升级到 SDD 以提高机器的性能。\n\n> 温馨提示：2014 款的 Mac mini 的内存是焊死在主板上的，无法进行内存升级。\n\n\n<a name=\"77f721d4\"></a>\n## SSD 选用\n\n首先，2014 款支持两种升级 SSD 的方式，**加装 PCIe SSD** 和替换原有 **SATA HDD**。\n\n- Mac mini 主板上有预留一个 PCIe 的接口（传输速度限制在 700MB/s 左右），需要通过转接卡才能使用标准的 PCIe / NVMe 的 SSD；\n- Mac mini 有且仅有一个 SATA HDD，升级 SATA SSD 必须替换到原有的 HDD；\n\n<!-- more -->\n\n|  | SATA SSD | PCIe SSD |\n| --- | --- | --- |\n| 传输速率 | 500MB/s (Samsang 860 EVO 500G 为例，下同) | 读取 3000MB/s, 写入2300MB/s (Sumang 970 Plus EVO  250G 为例，下同) |\n| 价格 | ￥529 / 500G | ￥499 / 250G |\n| 额外设备 | 无 | [NVMe PCIe x4 M.2 NGFF转 late 2014苹果 Mac mini A1347 SSD 转接卡]() |\n| 拆装难度 | 需要拆解整机，替换原有 HDD | 只需要拆开底壳，主板表面即可安装 |\n| 总结 | 总体上来看，升级 SATA SSD 的性价比要优于 PCIe SSD，但是需要拆解整机，需要一定的动手能力。另外原有的 HDD 也无法同时使用。 | PCIe SSD 的优势很明显，传输速率明显比传统的 SATA SSD 更快一些，另外还能跟原有的 HDD 共存，可以保持更大的存储空间。<br />但是受限于主板接口的传输速率的限制，PCIe SSD 应有的传输速率会大打折扣 (读写 700MB/s)。 |\n\n综上，按照个人的需求可以选择一套合适的方案进行 SSD 的升级，个人建议需要大容量或者“不喜欢动手”的同学可以选择 PCIe SSD，追求性价比的同学推荐直接升级 SATA SSD (500G+ 的 SSD 正在成为主流)。关于 SSD 的选购可以参考这个[文章](https://zhuanlan.zhihu.com/p/40555331)。\n\n<a name=\"9a2b769a\"></a>\n## 拆解步骤\n\n> 拆解过程中基本没拍照，所以就只能引用参考资料的图片啦\n\n\n<a name=\"88210852\"></a>\n### 准备工作\n\nMac mini 的组装相对普通的主机更为精细，使用的螺丝都是非常迷你的，以 T6H 为主，部分是普通的小十字螺丝。拆机过程记得对螺丝做好分类哦。\n\n- T6H 螺丝刀\n- 十字螺丝刀\n\n一套小米家装的[精修工具箱](https://detail.tmall.com/item.htm?id=563193067319&skuId=3543342140610) (￥99) 就能解决啦~\n\n<a name=\"717287d5\"></a>\n### 拆开底壳\n\n使用稍微坚硬点的卡片，撬开黑色底壳；\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552791318220-de5c1020-3c64-441d-aff9-4a6ef44bedf6.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=216358&status=done&width=592)\n\n拧下电磁屏蔽层的六枚螺丝，翘起一半**（注意不要直接打开）**，然后从主板卸下 Wifi 的连接线，取下电磁屏蔽层。\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552791717666-0b64066c-ce50-4651-ab07-6bca12ed51df.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=254350&status=done&width=592)\n\n<a name=\"8c47ecd4\"></a>\n### 分割线\n\n如果是加装 PCIe SSD，往下的步骤就不需要再进行下去了，只需要把 SSD 装进去转接卡上，然后将转接卡安装到主板表面即可。\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552792965448-06555547-bce5-4847-a131-91421dd6cd59.png#align=left&display=inline&height=1024&name=image.png&originHeight=1024&originWidth=1366&size=1480881&status=done&width=1366)\n\n<a name=\"e9812d11\"></a>\n### 卸载风扇\n\n> 通常来说，无线网卡无需进行拆卸。\n\n\n拧开固定风扇的螺丝，卸下风扇的接线（在 Wifi 接线的旁边），取出风扇。\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552791918748-295fd5ba-f018-49f2-baf0-89c577e85f10.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=296012&status=done&width=592)\n\n<a name=\"7fe43ee3\"></a>\n### 取下主板\n\n主板的拆解即是细致活，也是体力活。首先把 Mac mini 表面所有的排线和接口全部卸下，然后取出固定的螺丝。<br />\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552792295593-1b7802ba-a1ce-46d6-80cc-0aaf8666a278.png#align=left&display=inline&height=482&name=image.png&originHeight=482&originWidth=638&size=464488&status=done&width=638)<br />\n<br />蓝色区域是电源排线，也需要先推出来\n\n接下来则是体力活了，用两只螺丝刀插入到这两个洞口**（务必插到最底部），然后往外用力推开。**\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552792411854-d3976262-312c-455e-ac38-b4094e37e018.png#align=left&display=inline&height=483&name=image.png&originHeight=483&originWidth=642&size=354782&status=done&width=642)\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552792502983-a70adf16-3524-4366-bf9f-eb0a7fe55004.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=114993&status=done&width=592)\n\n<a name=\"a5c28012\"></a>\n### 抽出电源\n\n抽出电源之前一定要确保蓝色框的电源线接口已经拔出。电源的输入口就是我们插入电源线的接头，稍微拉松一下最下面的金属滑片，旋转接口至 90 度，可以明显感觉到松动感，抽出电源。\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552792715272-71e2e732-b88d-4738-95de-e6ce9348bf96.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=114055&status=done&width=592)\n\n<a name=\"c27ff29f\"></a>\n### 替换硬盘\n\n最后剩下的硬盘托架非常容易拆卸，往外一拉就出来了\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552793027234-233cf2f3-89f7-44ab-b0ff-d966018d0793.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=252148&status=done&width=592)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1552793042179-20a64d5e-5b53-4496-a938-335982c18891.png#align=left&display=inline&height=444&name=image.png&originHeight=444&originWidth=592&size=217700&status=done&width=592)\n\n然后替换上新的 SSD 即可（建议使用之前先测试一下 SSD 的可用性）。按照拆机的步骤反向进行即可重新组装好你的 Mac mini。\n\n<a name=\"93a461ab\"></a>\n## 系统安装\n\n系统安装可以通过三种方式进行安装，这里只介绍几个方法，不做深入的教程了，大家可以参考网上很多详细的教程。\n\n- （如果你的系统是完整可运行的）直接从 App Store 下载和安装最新的 OSX，只需要搜索 “macos mojave”，然后根据提示安装到对应的硬盘就好了；\n- 制作 OSX 的 U 盘启动，具体查阅参考资料的教程；\n- 使用 Apple 官方提供的网络恢复；\n\n<a name=\"5db9fd7c\"></a>\n## 小结\n\n相较于 2011 款等的 Mac mini，2014 年款主板内存焊死，升级空间限制非常大，不过好在 2018 年款的 Mac mini 又可以进行内存升级了✌️。尽管在 SATA 接口的数量从两个减少到一个的情况下，还新增了一个 PCIe 的接口，硬盘数量上还是能接受的，当然升级的成本是增加了不少（PCIe SSD 和 SATA SSD 的差价，以及转接卡的购买）。\n\n总体上来说，换上新的 SSD 的 2014 款 Mac mini 还是非常流畅的，足以应对绝大多数的办公和家庭娱乐的场景。\n\n<a name=\"35808e79\"></a>\n## 参考资料\n\n1、[《升级或安装 Mac mini 中的内存》](https://support.apple.com/zh-cn/HT205041)<br />2、[《2014 款苹果 Mac Mini 拆机组图》](http://www.mac52ipod.cn/post/apple-mac-mini-2014-teardown.php?page=1&part=1)<br />3、[《Mac mini 换SSD拆机详细教程》](http://www.iphoneba.net/2525.html)<br />4、[《Mac mini 2014 late 加装PCIe SSD纪实》](https://bbs.feng.com/read-htm-tid-11750596.html)<br />5、[《制作 macOS Mojave U盘USB启动安装盘方法教程 (全新安装 Mac 系统)》](https://www.iplaysoft.com/macos-usb-install-drive.html)<br />6、[《关于 macOS 的恢复功能》](https://support.apple.com/zh-cn/HT201314)<br />7、[《通过“启动转换”在 Windows 中使用 Apple 键盘》](https://support.apple.com/zh-cn/HT202676)<br />8、[《小白SSD固态硬盘选购指南》](https://zhuanlan.zhihu.com/p/40555331)\n",
    "body_html": "<!doctype html><div data-lake-element=\"root\" class=\"lake-engine lake-typography-traditional\" data-parser-by=\"lake2html\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">最近入手了一款 Mac mini (Late 2014) 中配版本，主要用于 Work At Home 的一些需求，替换掉我原来的 Mac Mini (2011) 款。由于自带的 HDD 1TB 5400R 的硬盘的读写速度的限制，系统运行效率受到很大的制约，我选择升级到 SDD 以提高机器的性能。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">温馨提示：2014 款的 Mac mini 的内存是焊死在主板上的，无法进行内存升级。</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"77f721d4\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">SSD 选用</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">首先，2014 款支持两种升级 SSD 的方式，<strong>加装 PCIe SSD</strong> 和替换原有 <strong>SATA HDD</strong>。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>Mac mini 主板上有预留一个 PCIe 的接口（传输速度限制在 700MB/s 左右），需要通过转接卡才能使用标准的 PCIe / NVMe 的 SSD；</li><li>Mac mini 有且仅有一个 SATA HDD，升级 SATA SSD 必须替换到原有的 HDD；</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span>&lt;!-- more --&gt;</span></p><div data-card-type=\"block\" data-lake-card=\"table\" data-card-value=\"data:%7B%22rows%22%3A6%2C%22cols%22%3A3%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20721px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22116%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22289%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22315%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cspan%3ESATA%20SSD%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cspan%3EPCIe%20SSD%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E500MB%2Fs%20(Samsang%20860%20EVO%20500G%20%E4%B8%BA%E4%BE%8B%EF%BC%8C%E4%B8%8B%E5%90%8C)%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E8%AF%BB%E5%8F%96%203000MB%2Fs%2C%20%E5%86%99%E5%85%A52300MB%2Fs%20(Sumang%20970%20Plus%20EVO%C2%A0%20250G%20%E4%B8%BA%E4%BE%8B%EF%BC%8C%E4%B8%8B%E5%90%8C)%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E4%BB%B7%E6%A0%BC%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%EF%BF%A5529%20%2F%20500G%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%EF%BF%A5499%20%2F%20250G%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E9%A2%9D%E5%A4%96%E8%AE%BE%E5%A4%87%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%97%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%3Ca%20href%3D%5C%22%5C%22%20target%3D%5C%22_blank%5C%22%3ENVMe%20PCIe%20x4%20M.2%20NGFF%E8%BD%AC%20late%202014%E8%8B%B9%E6%9E%9C%20Mac%20mini%20A1347%20SSD%20%E8%BD%AC%E6%8E%A5%E5%8D%A1%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%8B%86%E8%A3%85%E9%9A%BE%E5%BA%A6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E9%9C%80%E8%A6%81%E6%8B%86%E8%A7%A3%E6%95%B4%E6%9C%BA%EF%BC%8C%E6%9B%BF%E6%8D%A2%E5%8E%9F%E6%9C%89%20HDD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E5%8F%AA%E9%9C%80%E8%A6%81%E6%8B%86%E5%BC%80%E5%BA%95%E5%A3%B3%EF%BC%8C%E4%B8%BB%E6%9D%BF%E8%A1%A8%E9%9D%A2%E5%8D%B3%E5%8F%AF%E5%AE%89%E8%A3%85%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%80%BB%E7%BB%93%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%80%BB%E4%BD%93%E4%B8%8A%E6%9D%A5%E7%9C%8B%EF%BC%8C%E5%8D%87%E7%BA%A7%20SATA%20SSD%20%E7%9A%84%E6%80%A7%E4%BB%B7%E6%AF%94%E8%A6%81%E4%BC%98%E4%BA%8E%20PCIe%20SSD%EF%BC%8C%E4%BD%86%E6%98%AF%E9%9C%80%E8%A6%81%E6%8B%86%E8%A7%A3%E6%95%B4%E6%9C%BA%EF%BC%8C%E9%9C%80%E8%A6%81%E4%B8%80%E5%AE%9A%E7%9A%84%E5%8A%A8%E6%89%8B%E8%83%BD%E5%8A%9B%E3%80%82%E5%8F%A6%E5%A4%96%E5%8E%9F%E6%9C%89%E7%9A%84%20HDD%20%E4%B9%9F%E6%97%A0%E6%B3%95%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E3%80%82%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3EPCIe%20SSD%20%E7%9A%84%E4%BC%98%E5%8A%BF%E5%BE%88%E6%98%8E%E6%98%BE%EF%BC%8C%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%E6%98%8E%E6%98%BE%E6%AF%94%E4%BC%A0%E7%BB%9F%E7%9A%84%20SATA%20SSD%20%E6%9B%B4%E5%BF%AB%E4%B8%80%E4%BA%9B%EF%BC%8C%E5%8F%A6%E5%A4%96%E8%BF%98%E8%83%BD%E8%B7%9F%E5%8E%9F%E6%9C%89%E7%9A%84%20HDD%20%E5%85%B1%E5%AD%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BF%9D%E6%8C%81%E6%9B%B4%E5%A4%A7%E7%9A%84%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E3%80%82%3C%2Fp%3E%3Cp%3E%E4%BD%86%E6%98%AF%E5%8F%97%E9%99%90%E4%BA%8E%E4%B8%BB%E6%9D%BF%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%E7%9A%84%E9%99%90%E5%88%B6%EF%BC%8CPCIe%20SSD%20%E5%BA%94%E6%9C%89%E7%9A%84%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%E4%BC%9A%E5%A4%A7%E6%89%93%E6%8A%98%E6%89%A3%20(%E8%AF%BB%E5%86%99%20700MB%2Fs)%E3%80%82%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%22x0H31%22%7D\" id=\"x0H31\"><table class=\"lake-table\" style=\"width: 721px; outline: none; border-collapse: collapse;\"><colgroup><col width=\"116\" span=\"1\"><col width=\"289\" span=\"1\"><col width=\"315\" span=\"1\"></colgroup><tbody><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span>SATA SSD</span></p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span>PCIe SSD</span></p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">传输速率</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">500MB/s (Samsang 860 EVO 500G 为例，下同)</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">读取 3000MB/s, 写入2300MB/s (Sumang 970 Plus EVO&nbsp; 250G 为例，下同)</p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">价格</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">￥529 / 500G</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">￥499 / 250G</p></td></tr><tr style=\"height: 33px;\"><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">额外设备</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">无</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><a href=\"\" target=\"_blank\" rel=\"noopener noreferrer\">NVMe PCIe x4 M.2 NGFF转 late 2014苹果 Mac mini A1347 SSD 转接卡</a></p></td></tr><tr style=\"height: 33px;\"><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">拆装难度</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">需要拆解整机，替换原有 HDD</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">只需要拆开底壳，主板表面即可安装</p></td></tr><tr style=\"height: 33px;\"><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">总结</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">总体上来看，升级 SATA SSD 的性价比要优于 PCIe SSD，但是需要拆解整机，需要一定的动手能力。另外原有的 HDD 也无法同时使用。</p></td><td colspan=\"1\" style=\"vertical-align: top; background-color: rgb(255, 255, 255); color: rgb(38, 38, 38); min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">PCIe SSD 的优势很明显，传输速率明显比传统的 SATA SSD 更快一些，另外还能跟原有的 HDD 共存，可以保持更大的存储空间。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">但是受限于主板接口的传输速率的限制，PCIe SSD 应有的传输速率会大打折扣 (读写 700MB/s)。</p></td></tr></tbody></table></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">综上，按照个人的需求可以选择一套合适的方案进行 SSD 的升级，个人建议需要大容量或者“不喜欢动手”的同学可以选择 PCIe SSD，追求性价比的同学推荐直接升级 SATA SSD (500G+ 的 SSD 正在成为主流)。关于 SSD 的选购可以参考这个<a href=\"https://zhuanlan.zhihu.com/p/40555331\" target=\"_blank\" rel=\"noopener noreferrer\">文章</a>。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"9a2b769a\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">拆解步骤</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">拆解过程中基本没拍照，所以就只能引用参考资料的图片啦</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"88210852\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">准备工作</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span>Mac mini 的组装相对普通的主机更为精细，使用的螺丝都是非常迷你的，以 T6H 为主，部分是普通的小十字螺丝。拆机过程记得对螺丝做好分类哦。</span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span><br></span></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>T6H 螺丝刀</li><li>十字螺丝刀</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">一套小米家装的<a href=\"https://detail.tmall.com/item.htm?id=563193067319&amp;skuId=3543342140610\" target=\"_blank\" rel=\"noopener noreferrer\">精修工具箱</a>&nbsp;(￥99) 就能解决啦~</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"717287d5\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">拆开底壳</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">使用稍微坚硬点的卡片，撬开黑色底壳；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br><span data-card-type=\"inline\" data-lake-card=\"image\" data-card-value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552791318220-de5c1020-3c64-441d-aff9-4a6ef44bedf6.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A216358%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552791318220-de5c1020-3c64-441d-aff9-4a6ef44bedf6.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552791318220-de5c1020-3c64-441d-aff9-4a6ef44bedf6.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"width: 592px; height: 444px; border: none; box-shadow: none; visibility: visible;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">拧下电磁屏蔽层的六枚螺丝，翘起一半<strong>（注意不要直接打开）</strong>，然后从主板卸下 Wifi 的连接线，取下电磁屏蔽层。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br><span data-card-type=\"inline\" data-lake-card=\"image\" data-card-value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552791717666-0b64066c-ce50-4651-ab07-6bca12ed51df.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A254350%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552791717666-0b64066c-ce50-4651-ab07-6bca12ed51df.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552791717666-0b64066c-ce50-4651-ab07-6bca12ed51df.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"width: 592px; height: 444px; border: none; box-shadow: none; visibility: visible;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"8c47ecd4\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">分割线</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">如果是加装 PCIe SSD，往下的步骤就不需要再进行下去了，只需要把 SSD 装进去转接卡上，然后将转接卡安装到主板表面即可。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br><span data-card-type=\"inline\" data-lake-card=\"image\" data-card-value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792965448-06555547-bce5-4847-a131-91421dd6cd59.png%22%2C%22originWidth%22%3A1366%2C%22originHeight%22%3A1024%2C%22name%22%3A%22image.png%22%2C%22size%22%3A1480881%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A1366%2C%22height%22%3A1024%7D\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552792965448-06555547-bce5-4847-a131-91421dd6cd59.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552792965448-06555547-bce5-4847-a131-91421dd6cd59.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"width: 778px; height: 583px; border: none; box-shadow: none; visibility: visible;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"e9812d11\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">卸载风扇</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">通常来说，无线网卡无需进行拆卸。</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">拧开固定风扇的螺丝，卸下风扇的接线（在 Wifi 接线的旁边），取出风扇。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br><span data-card-type=\"inline\" data-lake-card=\"image\" data-card-value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552791918748-295fd5ba-f018-49f2-baf0-89c577e85f10.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A296012%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552791918748-295fd5ba-f018-49f2-baf0-89c577e85f10.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552791918748-295fd5ba-f018-49f2-baf0-89c577e85f10.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"width: 592px; height: 444px; border: none; box-shadow: none; visibility: visible;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"7fe43ee3\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">取下主板</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">主板的拆解即是细致活，也是体力活。首先把 Mac mini 表面所有的排线和接口全部卸下，然后取出固定的螺丝。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br><span data-card-type=\"inline\" data-lake-card=\"image\" data-card-value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792295593-1b7802ba-a1ce-46d6-80cc-0aaf8666a278.png%22%2C%22originWidth%22%3A638%2C%22originHeight%22%3A482%2C%22name%22%3A%22image.png%22%2C%22size%22%3A464488%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A638%2C%22height%22%3A482%7D\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552792295593-1b7802ba-a1ce-46d6-80cc-0aaf8666a278.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552792295593-1b7802ba-a1ce-46d6-80cc-0aaf8666a278.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"width: 638px; height: 482px; border: none; box-shadow: none; visibility: visible;\"></span></p><p style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">蓝色区域是电源排线，也需要先推出来</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">接下来则是体力活了，用两只螺丝刀插入到这两个洞口<strong>（务必插到最底部），然后往外用力推开。</strong></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" data-card-value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792411854-d3976262-312c-455e-ac38-b4094e37e018.png%22%2C%22originWidth%22%3A642%2C%22originHeight%22%3A483%2C%22name%22%3A%22image.png%22%2C%22size%22%3A354782%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A642%2C%22height%22%3A483%7D\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552792411854-d3976262-312c-455e-ac38-b4094e37e018.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552792411854-d3976262-312c-455e-ac38-b4094e37e018.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"width: 642px; height: 483px; border: none; box-shadow: none; visibility: visible;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" data-card-value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792502983-a70adf16-3524-4366-bf9f-eb0a7fe55004.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A114993%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552792502983-a70adf16-3524-4366-bf9f-eb0a7fe55004.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552792502983-a70adf16-3524-4366-bf9f-eb0a7fe55004.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"width: 592px; height: 444px; border: none; box-shadow: none; visibility: visible;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"a5c28012\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">抽出电源</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">抽出电源之前一定要确保蓝色框的电源线接口已经拔出。电源的输入口就是我们插入电源线的接头，稍微拉松一下最下面的金属滑片，旋转接口至 90 度，可以明显感觉到松动感，抽出电源。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" data-card-value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792715272-71e2e732-b88d-4738-95de-e6ce9348bf96.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A114055%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552792715272-71e2e732-b88d-4738-95de-e6ce9348bf96.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552792715272-71e2e732-b88d-4738-95de-e6ce9348bf96.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"width: 592px; height: 444px; border: none; box-shadow: none; visibility: visible;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"c27ff29f\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">替换硬盘</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">最后剩下的硬盘托架非常容易拆卸，往外一拉就出来了</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" data-card-value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552793027234-233cf2f3-89f7-44ab-b0ff-d966018d0793.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A252148%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552793027234-233cf2f3-89f7-44ab-b0ff-d966018d0793.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552793027234-233cf2f3-89f7-44ab-b0ff-d966018d0793.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"width: 592px; height: 444px; border: none; box-shadow: none; visibility: visible;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\" data-card-value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552793042179-20a64d5e-5b53-4496-a938-335982c18891.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A217700%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552793042179-20a64d5e-5b53-4496-a938-335982c18891.png\" data-raw-src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1552793042179-20a64d5e-5b53-4496-a938-335982c18891.png\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" style=\"width: 592px; height: 444px; border: none; box-shadow: none; visibility: visible;\"></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">然后替换上新的 SSD 即可（建议使用之前先测试一下 SSD 的可用性）。按照拆机的步骤反向进行即可重新组装好你的 Mac mini。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"93a461ab\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">系统安装</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">系统安装可以通过三种方式进行安装，这里只介绍几个方法，不做深入的教程了，大家可以参考网上很多详细的教程。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>（如果你的系统是完整可运行的）直接从 App Store 下载和安装最新的 OSX，只需要搜索 “macos mojave”，然后根据提示安装到对应的硬盘就好了；</li><li>制作 OSX 的 U 盘启动，具体查阅参考资料的教程；</li><li>使用 Apple 官方提供的网络恢复；</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"5db9fd7c\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">小结</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">相较于 2011 款等的 Mac mini，2014 年款主板内存焊死，升级空间限制非常大，不过好在 2018 年款的 Mac mini 又可以进行内存升级了✌️。尽管在 SATA 接口的数量从两个减少到一个的情况下，还新增了一个 PCIe 的接口，硬盘数量上还是能接受的，当然升级的成本是增加了不少（PCIe SSD 和 SATA SSD 的差价，以及转接卡的购买）。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">总体上来说，换上新的 SSD 的 2014 款 Mac mini 还是非常流畅的，足以应对绝大多数的办公和家庭娱乐的场景。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"35808e79\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">参考资料</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">1、<a href=\"https://support.apple.com/zh-cn/HT205041\" target=\"_blank\" rel=\"noopener noreferrer\">《升级或安装 Mac mini 中的内存》</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">2、<a href=\"http://www.mac52ipod.cn/post/apple-mac-mini-2014-teardown.php?page=1&amp;part=1\" target=\"_blank\" rel=\"noopener noreferrer\">《2014 款苹果 Mac Mini 拆机组图》</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">3、<a href=\"http://www.iphoneba.net/2525.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Mac mini 换SSD拆机详细教程》</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">4、<a href=\"https://bbs.feng.com/read-htm-tid-11750596.html\" target=\"_blank\" rel=\"noopener noreferrer\">《Mac mini 2014 late 加装PCIe SSD纪实》</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">5、<a href=\"https://www.iplaysoft.com/macos-usb-install-drive.html\" target=\"_blank\" rel=\"noopener noreferrer\">《制作 macOS Mojave U盘USB启动安装盘方法教程 (全新安装 Mac 系统)》</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">6、<a href=\"https://support.apple.com/zh-cn/HT201314\" target=\"_blank\" rel=\"noopener noreferrer\">《关于 macOS 的恢复功能》</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">7、<a href=\"https://support.apple.com/zh-cn/HT202676\" target=\"_blank\" rel=\"noopener noreferrer\">《通过“启动转换”在 Windows 中使用 Apple 键盘》</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">8、<a href=\"https://zhuanlan.zhihu.com/p/40555331\" target=\"_blank\" rel=\"noopener noreferrer\">《小白SSD固态硬盘选购指南》</a></p></div>",
    "body_lake": "<!doctype lake><p>最近入手了一款 Mac mini (Late 2014) 中配版本，主要用于 Work At Home 的一些需求，替换掉我原来的 Mac Mini (2011) 款。由于自带的 HDD 1TB 5400R 的硬盘的读写速度的限制，系统运行效率受到很大的制约，我选择升级到 SDD 以提高机器的性能。</p><p><br /></p><blockquote><p>温馨提示：2014 款的 Mac mini 的内存是焊死在主板上的，无法进行内存升级。</p></blockquote><p><br /></p><h2 id=\"77f721d4\">SSD 选用</h2><p><br /></p><p>首先，2014 款支持两种升级 SSD 的方式，<strong>加装 PCIe SSD</strong> 和替换原有 <strong>SATA HDD</strong>。</p><p><br /></p><ul><li>Mac mini 主板上有预留一个 PCIe 的接口（传输速度限制在 700MB/s 左右），需要通过转接卡才能使用标准的 PCIe / NVMe 的 SSD；</li><li>Mac mini 有且仅有一个 SATA HDD，升级 SATA SSD 必须替换到原有的 HDD；</li></ul><p><br /></p><p><span>&lt;!-- more --&gt;</span></p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A6%2C%22cols%22%3A3%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20721px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22116%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22289%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22315%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cspan%3ESATA%20SSD%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cspan%3EPCIe%20SSD%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E500MB%2Fs%20(Samsang%20860%20EVO%20500G%20%E4%B8%BA%E4%BE%8B%EF%BC%8C%E4%B8%8B%E5%90%8C)%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E8%AF%BB%E5%8F%96%203000MB%2Fs%2C%20%E5%86%99%E5%85%A52300MB%2Fs%20(Sumang%20970%20Plus%20EVO%C2%A0%20250G%20%E4%B8%BA%E4%BE%8B%EF%BC%8C%E4%B8%8B%E5%90%8C)%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E4%BB%B7%E6%A0%BC%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%EF%BF%A5529%20%2F%20500G%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%EF%BF%A5499%20%2F%20250G%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E9%A2%9D%E5%A4%96%E8%AE%BE%E5%A4%87%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%97%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%3Ca%20href%3D%5C%22%5C%22%20target%3D%5C%22_blank%5C%22%3ENVMe%20PCIe%20x4%20M.2%20NGFF%E8%BD%AC%20late%202014%E8%8B%B9%E6%9E%9C%20Mac%20mini%20A1347%20SSD%20%E8%BD%AC%E6%8E%A5%E5%8D%A1%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%8B%86%E8%A3%85%E9%9A%BE%E5%BA%A6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E9%9C%80%E8%A6%81%E6%8B%86%E8%A7%A3%E6%95%B4%E6%9C%BA%EF%BC%8C%E6%9B%BF%E6%8D%A2%E5%8E%9F%E6%9C%89%20HDD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E5%8F%AA%E9%9C%80%E8%A6%81%E6%8B%86%E5%BC%80%E5%BA%95%E5%A3%B3%EF%BC%8C%E4%B8%BB%E6%9D%BF%E8%A1%A8%E9%9D%A2%E5%8D%B3%E5%8F%AF%E5%AE%89%E8%A3%85%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%80%BB%E7%BB%93%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%80%BB%E4%BD%93%E4%B8%8A%E6%9D%A5%E7%9C%8B%EF%BC%8C%E5%8D%87%E7%BA%A7%20SATA%20SSD%20%E7%9A%84%E6%80%A7%E4%BB%B7%E6%AF%94%E8%A6%81%E4%BC%98%E4%BA%8E%20PCIe%20SSD%EF%BC%8C%E4%BD%86%E6%98%AF%E9%9C%80%E8%A6%81%E6%8B%86%E8%A7%A3%E6%95%B4%E6%9C%BA%EF%BC%8C%E9%9C%80%E8%A6%81%E4%B8%80%E5%AE%9A%E7%9A%84%E5%8A%A8%E6%89%8B%E8%83%BD%E5%8A%9B%E3%80%82%E5%8F%A6%E5%A4%96%E5%8E%9F%E6%9C%89%E7%9A%84%20HDD%20%E4%B9%9F%E6%97%A0%E6%B3%95%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E3%80%82%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3EPCIe%20SSD%20%E7%9A%84%E4%BC%98%E5%8A%BF%E5%BE%88%E6%98%8E%E6%98%BE%EF%BC%8C%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%E6%98%8E%E6%98%BE%E6%AF%94%E4%BC%A0%E7%BB%9F%E7%9A%84%20SATA%20SSD%20%E6%9B%B4%E5%BF%AB%E4%B8%80%E4%BA%9B%EF%BC%8C%E5%8F%A6%E5%A4%96%E8%BF%98%E8%83%BD%E8%B7%9F%E5%8E%9F%E6%9C%89%E7%9A%84%20HDD%20%E5%85%B1%E5%AD%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BF%9D%E6%8C%81%E6%9B%B4%E5%A4%A7%E7%9A%84%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E3%80%82%3C%2Fp%3E%3Cp%3E%E4%BD%86%E6%98%AF%E5%8F%97%E9%99%90%E4%BA%8E%E4%B8%BB%E6%9D%BF%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%E7%9A%84%E9%99%90%E5%88%B6%EF%BC%8CPCIe%20SSD%20%E5%BA%94%E6%9C%89%E7%9A%84%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%E4%BC%9A%E5%A4%A7%E6%89%93%E6%8A%98%E6%89%A3%20(%E8%AF%BB%E5%86%99%20700MB%2Fs)%E3%80%82%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%22x0H31%22%7D\"></card><p>综上，按照个人的需求可以选择一套合适的方案进行 SSD 的升级，个人建议需要大容量或者“不喜欢动手”的同学可以选择 PCIe SSD，追求性价比的同学推荐直接升级 SATA SSD (500G+ 的 SSD 正在成为主流)。关于 SSD 的选购可以参考这个<a href=\"https://zhuanlan.zhihu.com/p/40555331\" target=\"_blank\">文章</a>。</p><p><br /></p><h2 id=\"9a2b769a\">拆解步骤</h2><p><br /></p><blockquote><p>拆解过程中基本没拍照，所以就只能引用参考资料的图片啦</p></blockquote><p><br /></p><h3 id=\"88210852\">准备工作</h3><p><br /></p><p><span>Mac mini 的组装相对普通的主机更为精细，使用的螺丝都是非常迷你的，以 T6H 为主，部分是普通的小十字螺丝。拆机过程记得对螺丝做好分类哦。</span></p><p><span><br /></span></p><ul><li>T6H 螺丝刀</li><li>十字螺丝刀</li></ul><p><br /></p><p>一套小米家装的<a href=\"https://detail.tmall.com/item.htm?id=563193067319&amp;skuId=3543342140610\" target=\"_blank\">精修工具箱</a> (￥99) 就能解决啦~</p><p><br /></p><h3 id=\"717287d5\">拆开底壳</h3><p><br /></p><p>使用稍微坚硬点的卡片，撬开黑色底壳；</p><p><br /></p><p><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552791318220-de5c1020-3c64-441d-aff9-4a6ef44bedf6.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A216358%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><p>拧下电磁屏蔽层的六枚螺丝，翘起一半<strong>（注意不要直接打开）</strong>，然后从主板卸下 Wifi 的连接线，取下电磁屏蔽层。</p><p><br /></p><p><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552791717666-0b64066c-ce50-4651-ab07-6bca12ed51df.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A254350%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><h3 id=\"8c47ecd4\">分割线</h3><p><br /></p><p>如果是加装 PCIe SSD，往下的步骤就不需要再进行下去了，只需要把 SSD 装进去转接卡上，然后将转接卡安装到主板表面即可。</p><p><br /></p><p><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792965448-06555547-bce5-4847-a131-91421dd6cd59.png%22%2C%22originWidth%22%3A1366%2C%22originHeight%22%3A1024%2C%22name%22%3A%22image.png%22%2C%22size%22%3A1480881%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A1366%2C%22height%22%3A1024%7D\"></card></p><p><br /></p><h3 id=\"e9812d11\">卸载风扇</h3><p><br /></p><blockquote><p>通常来说，无线网卡无需进行拆卸。</p></blockquote><p><br /></p><p>拧开固定风扇的螺丝，卸下风扇的接线（在 Wifi 接线的旁边），取出风扇。</p><p><br /></p><p><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552791918748-295fd5ba-f018-49f2-baf0-89c577e85f10.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A296012%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><h3 id=\"7fe43ee3\">取下主板</h3><p><br /></p><p>主板的拆解即是细致活，也是体力活。首先把 Mac mini 表面所有的排线和接口全部卸下，然后取出固定的螺丝。</p><p><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792295593-1b7802ba-a1ce-46d6-80cc-0aaf8666a278.png%22%2C%22originWidth%22%3A638%2C%22originHeight%22%3A482%2C%22name%22%3A%22image.png%22%2C%22size%22%3A464488%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A638%2C%22height%22%3A482%7D\"></card></p><p style=\"text-align: center;\"><br /></p><p style=\"text-align: center;\">蓝色区域是电源排线，也需要先推出来</p><p><br /></p><p>接下来则是体力活了，用两只螺丝刀插入到这两个洞口<strong>（务必插到最底部），然后往外用力推开。</strong></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792411854-d3976262-312c-455e-ac38-b4094e37e018.png%22%2C%22originWidth%22%3A642%2C%22originHeight%22%3A483%2C%22name%22%3A%22image.png%22%2C%22size%22%3A354782%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A642%2C%22height%22%3A483%7D\"></card></p><p><br /></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792502983-a70adf16-3524-4366-bf9f-eb0a7fe55004.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A114993%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><h3 id=\"a5c28012\">抽出电源</h3><p><br /></p><p>抽出电源之前一定要确保蓝色框的电源线接口已经拔出。电源的输入口就是我们插入电源线的接头，稍微拉松一下最下面的金属滑片，旋转接口至 90 度，可以明显感觉到松动感，抽出电源。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792715272-71e2e732-b88d-4738-95de-e6ce9348bf96.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A114055%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><h3 id=\"c27ff29f\">替换硬盘</h3><p><br /></p><p>最后剩下的硬盘托架非常容易拆卸，往外一拉就出来了</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552793027234-233cf2f3-89f7-44ab-b0ff-d966018d0793.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A252148%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552793042179-20a64d5e-5b53-4496-a938-335982c18891.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A217700%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><p>然后替换上新的 SSD 即可（建议使用之前先测试一下 SSD 的可用性）。按照拆机的步骤反向进行即可重新组装好你的 Mac mini。</p><p><br /></p><h2 id=\"93a461ab\">系统安装</h2><p><br /></p><p>系统安装可以通过三种方式进行安装，这里只介绍几个方法，不做深入的教程了，大家可以参考网上很多详细的教程。</p><p><br /></p><ul><li>（如果你的系统是完整可运行的）直接从 App Store 下载和安装最新的 OSX，只需要搜索 “macos mojave”，然后根据提示安装到对应的硬盘就好了；</li><li>制作 OSX 的 U 盘启动，具体查阅参考资料的教程；</li><li>使用 Apple 官方提供的网络恢复；</li></ul><p><br /></p><h2 id=\"5db9fd7c\">小结</h2><p><br /></p><p>相较于 2011 款等的 Mac mini，2014 年款主板内存焊死，升级空间限制非常大，不过好在 2018 年款的 Mac mini 又可以进行内存升级了✌️。尽管在 SATA 接口的数量从两个减少到一个的情况下，还新增了一个 PCIe 的接口，硬盘数量上还是能接受的，当然升级的成本是增加了不少（PCIe SSD 和 SATA SSD 的差价，以及转接卡的购买）。</p><p><br /></p><p>总体上来说，换上新的 SSD 的 2014 款 Mac mini 还是非常流畅的，足以应对绝大多数的办公和家庭娱乐的场景。</p><p><br /></p><h2 id=\"35808e79\">参考资料</h2><p><br /></p><p>1、<a href=\"https://support.apple.com/zh-cn/HT205041\" target=\"_blank\">《升级或安装 Mac mini 中的内存》</a></p><p>2、<a href=\"http://www.mac52ipod.cn/post/apple-mac-mini-2014-teardown.php?page=1&amp;part=1\" target=\"_blank\">《2014 款苹果 Mac Mini 拆机组图》</a></p><p>3、<a href=\"http://www.iphoneba.net/2525.html\" target=\"_blank\">《Mac mini 换SSD拆机详细教程》</a></p><p>4、<a href=\"https://bbs.feng.com/read-htm-tid-11750596.html\" target=\"_blank\">《Mac mini 2014 late 加装PCIe SSD纪实》</a></p><p>5、<a href=\"https://www.iplaysoft.com/macos-usb-install-drive.html\" target=\"_blank\">《制作 macOS Mojave U盘USB启动安装盘方法教程 (全新安装 Mac 系统)》</a></p><p>6、<a href=\"https://support.apple.com/zh-cn/HT201314\" target=\"_blank\">《关于 macOS 的恢复功能》</a></p><p>7、<a href=\"https://support.apple.com/zh-cn/HT202676\" target=\"_blank\">《通过“启动转换”在 Windows 中使用 Apple 键盘》</a></p><p>8、<a href=\"https://zhuanlan.zhihu.com/p/40555331\" target=\"_blank\">《小白SSD固态硬盘选购指南》</a></p>",
    "body_draft_lake": "<!doctype lake><p>最近入手了一款 Mac mini (Late 2014) 中配版本，主要用于 Work At Home 的一些需求，替换掉我原来的 Mac Mini (2011) 款。由于自带的 HDD 1TB 5400R 的硬盘的读写速度的限制，系统运行效率受到很大的制约，我选择升级到 SDD 以提高机器的性能。</p><p><br /></p><blockquote><p>温馨提示：2014 款的 Mac mini 的内存是焊死在主板上的，无法进行内存升级。</p></blockquote><p><br /></p><h2 id=\"77f721d4\">SSD 选用</h2><p><br /></p><p>首先，2014 款支持两种升级 SSD 的方式，<strong>加装 PCIe SSD</strong> 和替换原有 <strong>SATA HDD</strong>。</p><p><br /></p><ul><li>Mac mini 主板上有预留一个 PCIe 的接口（传输速度限制在 700MB/s 左右），需要通过转接卡才能使用标准的 PCIe / NVMe 的 SSD；</li><li>Mac mini 有且仅有一个 SATA HDD，升级 SATA SSD 必须替换到原有的 HDD；</li></ul><p><br /></p><p><span>&lt;!-- more --&gt;</span></p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A6%2C%22cols%22%3A3%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20721px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22116%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22289%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22315%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cspan%3ESATA%20SSD%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cspan%3EPCIe%20SSD%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E500MB%2Fs%20(Samsang%20860%20EVO%20500G%20%E4%B8%BA%E4%BE%8B%EF%BC%8C%E4%B8%8B%E5%90%8C)%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E8%AF%BB%E5%8F%96%203000MB%2Fs%2C%20%E5%86%99%E5%85%A52300MB%2Fs%20(Sumang%20970%20Plus%20EVO%C2%A0%20250G%20%E4%B8%BA%E4%BE%8B%EF%BC%8C%E4%B8%8B%E5%90%8C)%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E4%BB%B7%E6%A0%BC%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%EF%BF%A5529%20%2F%20500G%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%EF%BF%A5499%20%2F%20250G%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E9%A2%9D%E5%A4%96%E8%AE%BE%E5%A4%87%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%97%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%3Ca%20href%3D%5C%22%5C%22%20target%3D%5C%22_blank%5C%22%3ENVMe%20PCIe%20x4%20M.2%20NGFF%E8%BD%AC%20late%202014%E8%8B%B9%E6%9E%9C%20Mac%20mini%20A1347%20SSD%20%E8%BD%AC%E6%8E%A5%E5%8D%A1%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%8B%86%E8%A3%85%E9%9A%BE%E5%BA%A6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E9%9C%80%E8%A6%81%E6%8B%86%E8%A7%A3%E6%95%B4%E6%9C%BA%EF%BC%8C%E6%9B%BF%E6%8D%A2%E5%8E%9F%E6%9C%89%20HDD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E5%8F%AA%E9%9C%80%E8%A6%81%E6%8B%86%E5%BC%80%E5%BA%95%E5%A3%B3%EF%BC%8C%E4%B8%BB%E6%9D%BF%E8%A1%A8%E9%9D%A2%E5%8D%B3%E5%8F%AF%E5%AE%89%E8%A3%85%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%80%BB%E7%BB%93%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3E%E6%80%BB%E4%BD%93%E4%B8%8A%E6%9D%A5%E7%9C%8B%EF%BC%8C%E5%8D%87%E7%BA%A7%20SATA%20SSD%20%E7%9A%84%E6%80%A7%E4%BB%B7%E6%AF%94%E8%A6%81%E4%BC%98%E4%BA%8E%20PCIe%20SSD%EF%BC%8C%E4%BD%86%E6%98%AF%E9%9C%80%E8%A6%81%E6%8B%86%E8%A7%A3%E6%95%B4%E6%9C%BA%EF%BC%8C%E9%9C%80%E8%A6%81%E4%B8%80%E5%AE%9A%E7%9A%84%E5%8A%A8%E6%89%8B%E8%83%BD%E5%8A%9B%E3%80%82%E5%8F%A6%E5%A4%96%E5%8E%9F%E6%9C%89%E7%9A%84%20HDD%20%E4%B9%9F%E6%97%A0%E6%B3%95%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E3%80%82%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%20background-color%3A%20%23FFFFFF%3B%20color%3A%20%23262626%3B%5C%22%3E%3Cp%3EPCIe%20SSD%20%E7%9A%84%E4%BC%98%E5%8A%BF%E5%BE%88%E6%98%8E%E6%98%BE%EF%BC%8C%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%E6%98%8E%E6%98%BE%E6%AF%94%E4%BC%A0%E7%BB%9F%E7%9A%84%20SATA%20SSD%20%E6%9B%B4%E5%BF%AB%E4%B8%80%E4%BA%9B%EF%BC%8C%E5%8F%A6%E5%A4%96%E8%BF%98%E8%83%BD%E8%B7%9F%E5%8E%9F%E6%9C%89%E7%9A%84%20HDD%20%E5%85%B1%E5%AD%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BF%9D%E6%8C%81%E6%9B%B4%E5%A4%A7%E7%9A%84%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E3%80%82%3C%2Fp%3E%3Cp%3E%E4%BD%86%E6%98%AF%E5%8F%97%E9%99%90%E4%BA%8E%E4%B8%BB%E6%9D%BF%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%E7%9A%84%E9%99%90%E5%88%B6%EF%BC%8CPCIe%20SSD%20%E5%BA%94%E6%9C%89%E7%9A%84%E4%BC%A0%E8%BE%93%E9%80%9F%E7%8E%87%E4%BC%9A%E5%A4%A7%E6%89%93%E6%8A%98%E6%89%A3%20(%E8%AF%BB%E5%86%99%20700MB%2Fs)%E3%80%82%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%22x0H31%22%7D\"></card><p>综上，按照个人的需求可以选择一套合适的方案进行 SSD 的升级，个人建议需要大容量或者“不喜欢动手”的同学可以选择 PCIe SSD，追求性价比的同学推荐直接升级 SATA SSD (500G+ 的 SSD 正在成为主流)。关于 SSD 的选购可以参考这个<a href=\"https://zhuanlan.zhihu.com/p/40555331\" target=\"_blank\">文章</a>。</p><p><br /></p><h2 id=\"9a2b769a\">拆解步骤</h2><p><br /></p><blockquote><p>拆解过程中基本没拍照，所以就只能引用参考资料的图片啦</p></blockquote><p><br /></p><h3 id=\"88210852\">准备工作</h3><p><br /></p><p><span>Mac mini 的组装相对普通的主机更为精细，使用的螺丝都是非常迷你的，以 T6H 为主，部分是普通的小十字螺丝。拆机过程记得对螺丝做好分类哦。</span></p><p><span><br /></span></p><ul><li>T6H 螺丝刀</li><li>十字螺丝刀</li></ul><p><br /></p><p>一套小米家装的<a href=\"https://detail.tmall.com/item.htm?id=563193067319&amp;skuId=3543342140610\" target=\"_blank\">精修工具箱</a> (￥99) 就能解决啦~</p><p><br /></p><h3 id=\"717287d5\">拆开底壳</h3><p><br /></p><p>使用稍微坚硬点的卡片，撬开黑色底壳；</p><p><br /></p><p><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552791318220-de5c1020-3c64-441d-aff9-4a6ef44bedf6.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A216358%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><p>拧下电磁屏蔽层的六枚螺丝，翘起一半<strong>（注意不要直接打开）</strong>，然后从主板卸下 Wifi 的连接线，取下电磁屏蔽层。</p><p><br /></p><p><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552791717666-0b64066c-ce50-4651-ab07-6bca12ed51df.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A254350%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><h3 id=\"8c47ecd4\">分割线</h3><p><br /></p><p>如果是加装 PCIe SSD，往下的步骤就不需要再进行下去了，只需要把 SSD 装进去转接卡上，然后将转接卡安装到主板表面即可。</p><p><br /></p><p><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792965448-06555547-bce5-4847-a131-91421dd6cd59.png%22%2C%22originWidth%22%3A1366%2C%22originHeight%22%3A1024%2C%22name%22%3A%22image.png%22%2C%22size%22%3A1480881%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A1366%2C%22height%22%3A1024%7D\"></card></p><p><br /></p><h3 id=\"e9812d11\">卸载风扇</h3><p><br /></p><blockquote><p>通常来说，无线网卡无需进行拆卸。</p></blockquote><p><br /></p><p>拧开固定风扇的螺丝，卸下风扇的接线（在 Wifi 接线的旁边），取出风扇。</p><p><br /></p><p><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552791918748-295fd5ba-f018-49f2-baf0-89c577e85f10.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A296012%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><h3 id=\"7fe43ee3\">取下主板</h3><p><br /></p><p>主板的拆解即是细致活，也是体力活。首先把 Mac mini 表面所有的排线和接口全部卸下，然后取出固定的螺丝。</p><p><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792295593-1b7802ba-a1ce-46d6-80cc-0aaf8666a278.png%22%2C%22originWidth%22%3A638%2C%22originHeight%22%3A482%2C%22name%22%3A%22image.png%22%2C%22size%22%3A464488%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A638%2C%22height%22%3A482%7D\"></card></p><p style=\"text-align: center;\"><br /></p><p style=\"text-align: center;\">蓝色区域是电源排线，也需要先推出来</p><p><br /></p><p>接下来则是体力活了，用两只螺丝刀插入到这两个洞口<strong>（务必插到最底部），然后往外用力推开。</strong></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792411854-d3976262-312c-455e-ac38-b4094e37e018.png%22%2C%22originWidth%22%3A642%2C%22originHeight%22%3A483%2C%22name%22%3A%22image.png%22%2C%22size%22%3A354782%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A642%2C%22height%22%3A483%7D\"></card></p><p><br /></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792502983-a70adf16-3524-4366-bf9f-eb0a7fe55004.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A114993%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><h3 id=\"a5c28012\">抽出电源</h3><p><br /></p><p>抽出电源之前一定要确保蓝色框的电源线接口已经拔出。电源的输入口就是我们插入电源线的接头，稍微拉松一下最下面的金属滑片，旋转接口至 90 度，可以明显感觉到松动感，抽出电源。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552792715272-71e2e732-b88d-4738-95de-e6ce9348bf96.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A114055%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><h3 id=\"c27ff29f\">替换硬盘</h3><p><br /></p><p>最后剩下的硬盘托架非常容易拆卸，往外一拉就出来了</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552793027234-233cf2f3-89f7-44ab-b0ff-d966018d0793.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A252148%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1552793042179-20a64d5e-5b53-4496-a938-335982c18891.png%22%2C%22originWidth%22%3A592%2C%22originHeight%22%3A444%2C%22name%22%3A%22image.png%22%2C%22size%22%3A217700%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A592%2C%22height%22%3A444%7D\"></card></p><p><br /></p><p>然后替换上新的 SSD 即可（建议使用之前先测试一下 SSD 的可用性）。按照拆机的步骤反向进行即可重新组装好你的 Mac mini。</p><p><br /></p><h2 id=\"93a461ab\">系统安装</h2><p><br /></p><p>系统安装可以通过三种方式进行安装，这里只介绍几个方法，不做深入的教程了，大家可以参考网上很多详细的教程。</p><p><br /></p><ul><li>（如果你的系统是完整可运行的）直接从 App Store 下载和安装最新的 OSX，只需要搜索 “macos mojave”，然后根据提示安装到对应的硬盘就好了；</li><li>制作 OSX 的 U 盘启动，具体查阅参考资料的教程；</li><li>使用 Apple 官方提供的网络恢复；</li></ul><p><br /></p><h2 id=\"5db9fd7c\">小结</h2><p><br /></p><p>相较于 2011 款等的 Mac mini，2014 年款主板内存焊死，升级空间限制非常大，不过好在 2018 年款的 Mac mini 又可以进行内存升级了✌️。尽管在 SATA 接口的数量从两个减少到一个的情况下，还新增了一个 PCIe 的接口，硬盘数量上还是能接受的，当然升级的成本是增加了不少（PCIe SSD 和 SATA SSD 的差价，以及转接卡的购买）。</p><p><br /></p><p>总体上来说，换上新的 SSD 的 2014 款 Mac mini 还是非常流畅的，足以应对绝大多数的办公和家庭娱乐的场景。</p><p><br /></p><h2 id=\"35808e79\">参考资料</h2><p><br /></p><p>1、<a href=\"https://support.apple.com/zh-cn/HT205041\" target=\"_blank\">《升级或安装 Mac mini 中的内存》</a></p><p>2、<a href=\"http://www.mac52ipod.cn/post/apple-mac-mini-2014-teardown.php?page=1&amp;part=1\" target=\"_blank\">《2014 款苹果 Mac Mini 拆机组图》</a></p><p>3、<a href=\"http://www.iphoneba.net/2525.html\" target=\"_blank\">《Mac mini 换SSD拆机详细教程》</a></p><p>4、<a href=\"https://bbs.feng.com/read-htm-tid-11750596.html\" target=\"_blank\">《Mac mini 2014 late 加装PCIe SSD纪实》</a></p><p>5、<a href=\"https://www.iplaysoft.com/macos-usb-install-drive.html\" target=\"_blank\">《制作 macOS Mojave U盘USB启动安装盘方法教程 (全新安装 Mac 系统)》</a></p><p>6、<a href=\"https://support.apple.com/zh-cn/HT201314\" target=\"_blank\">《关于 macOS 的恢复功能》</a></p><p>7、<a href=\"https://support.apple.com/zh-cn/HT202676\" target=\"_blank\">《通过“启动转换”在 Windows 中使用 Apple 键盘》</a></p><p>8、<a href=\"https://zhuanlan.zhihu.com/p/40555331\" target=\"_blank\">《小白SSD固态硬盘选购指南》</a></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-05-04T11:40:31.000Z",
    "deleted_at": null,
    "created_at": "2019-03-28T02:00:41.000Z",
    "updated_at": "2020-03-05T05:14:02.000Z",
    "published_at": "2019-05-04T11:40:31.000Z",
    "first_published_at": "2019-03-28T02:43:27.000Z",
    "word_count": 1464,
    "cover": "https://cdn.nlark.com/yuque/0/2019/png/103147/1552791318220-de5c1020-3c64-441d-aff9-4a6ef44bedf6.png",
    "description": "最近入手了一款 Mac mini (Late 2014) 中配版本，主要用于 Work At Home 的一些需求，替换掉我原来的 Mac Mini (2011) 款。由于自带的 HDD 1TB 5400R 的硬盘的读写速度的限制，系统运行效率受到很大的制约，我选择升级到 SDD 以提高机器的...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1438269,
    "slug": "lfmcil",
    "title": "Git 实用指南",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 24,
      "content_updated_at": "2022-02-12T14:18:05.792Z",
      "updated_at": "2022-02-12T14:18:05.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 12,
        "public_books_count": 5,
        "followers_count": 94,
        "following_count": 31,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2022-02-12T09:08:14.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 12,
      "public_books_count": 5,
      "followers_count": 94,
      "following_count": 31,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2022-02-12T09:08:14.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [git]<br />date: 2019-03-28\n\n---\n\n\n<br />个人整理的一些常用的 Git 概念和命令集合，方便速查和快速解决某些场景下的问题，覆盖了日常开发和协同工作下的一部分场景，不只是命令行的介绍。欢迎关注[语雀原文](https://www.yuque.com/yinzhi/blog/lfmcil)，持续更新！<br />\n\n<a name=\"0b133c66\"></a>\n## 精简入门\n\n<br />1、克隆仓库<br />\n<br />克隆仓库会下载仓库完整的文件、分支和历史记录。<br />\n\n```bash\ngit clone [<options>] [--] <repo> [<dir>]\n```\n\n<br /><!-- more --><br />\n\n```bash\n# 克隆完整的仓库到 ./git-learning 目录下\ngit clone git@github.com:x-cold/git-learning.git\n# 只克隆 dev 分支到 ./dev 目录下\ngit clone -b dev git@github.com:x-cold/git-learning.git dev\n```\n\n<br />2、将文件变更记录写入到本地的索引库<br />\n\n```bash\ngit add [<options>] [--] <pathspec>...\n```\n\n\n```bash\n# 添加当前目录下所有文件\ngit add .\n# 添加部分文件\ngit add src/ app/ index.js\n```\n\n<br />3、提交变更到工作区<br />\n\n```bash\ngit commit [<options>] [--] <pathspec>...\n```\n\n\n```bash\n# 最普通的提交\ngit commit -m \"feat: support canvas\"\n# 修改当前的 commit message\ngit commit --amend\n# 重置当前的 commit author 和 message\ngit commit --amend --reset-author \n```\n\n<br />4、推送代码到远程仓库<br />\n\n```bash\ngit push [<options>] [<repository> [<refspec>...]]\n```\n\n\n```bash\n# 提交本地仓库当前分支到远程仓库的 master 分支\ngit push origin master\n# 提交本地仓库 dev 分支到远程的 master 分支\ngit push origin master:dev\n```\n\n\n<a name=\"af75a264\"></a>\n## 聊聊设计\n\n<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1553735304999-5c646d62-6d36-45d9-9ae1-ffdf4b5d6e67.png#align=left&display=inline&height=837&margin=%5Bobject%20Object%5D&name=image.png&originHeight=837&originWidth=1024&size=67634&status=done&style=none&width=1024)<br />图像来自维基百科<br />\n<br />Git 是一个分布式的版本控制工具，因此远程和本地可以视为两个独立的 Git 仓库。上图是一张经典的 Git 中的数据流与存储级别的介绍，其中储存级别主要包含几部分：<br />\n\n- 工作区 (Working Files)，指的是我们时刻在编辑的文件的目录，通常来说我们修改文件都是在工作区体现的\n- 暂存区（Stage），暂存将本地的修改，然后提交到本地仓库\n- 本地仓库（Local）\n- 远程仓库（Remote）\n\n\n<br />由此不难看出整体的数据流动，就是一条从：工作区 -> 暂存区 -> 本地仓库 -> 远程仓库 的双向数据流通道。<br />\n\n<a name=\"0dfbe902\"></a>\n## 常用命令\n<a name=\"04900ddb\"></a>\n### git init\n\n<br />创建一个空白的 git 仓库<br />\n\n```bash\ngit init\n```\n\n\n<a name=\"73e58b95\"></a>\n### git add\n\n\n```bash\ngit add [<options>] [--] <pathspec>...\n```\n\n\n<a name=\"5f9e613a\"></a>\n### git commit\n\n\n```bash\ngit commit [<options>] [--] <pathspec>...\n```\n\n\n<a name=\"da5508cb\"></a>\n### git remote\n\n<br />remote 指的是本地的 git 仓库关联的远程 git 仓库。<br />\n<br />1、查看远程仓库信息<br />\n\n```bash\ngit remote\n```\n\n<br />2、看远程仓库详细信息<br />\n\n```bash\ngit remote -v\n```\n\n<br />3、删除远程仓库<br />\n\n```bash\ngit remote remove <name>\n```\n\n\n```bash\n# 移除名字为 origin 的远程仓库\ngit remote remove origin\n```\n\n<br />4、添加远程仓库<br />\n\n```bash\ngit remote add [-t <branch>] [-m <master>] [-f] [--tags | --no-tags] [--mirror=<fetch|push>] <name> <url>\n```\n\n\n```bash\ngit remote origin git@github.com:x-cold/git-learning.git\n```\n\n\n<a name=\"57bbe662\"></a>\n### git branch\n\n<br />1、列出本地存在的分支<br />\n\n```bash\ngit branch\n```\n\n<br />2、列出远程分支<br />\n\n```bash\ngit branch -r\n```\n\n<br />3、列出本地和远程分支<br />\n\n```bash\ngit branch -a\n```\n\n<br />4、创建本地分支<br />\n\n```bash\ngit branch [branchName]  (remoteBranch)\n```\n\n\n```bash\n# 基于远程仓库的 dev 分支，创建本地仓库的 feature/canvas 分支\ngit branch feature/canvas dev\n```\n\n<br />5、分支重命名<br />\n\n```bash\ngit branch [<options>] (-m | -M) [<old-branch>] <new-branch>\n```\n\n\n```bash\n# 修改 feature/canvas 分支名为 feature/canvas2\ngit branch -M feature/canvas feature/canvas2\n```\n\n<br />6、删除本地分支<br />\n\n```bash\ngit branch -d | -D [branchName]\n```\n\n<br />7、删除远程分支<br />\n\n```bash\ngit branch [<options>] [-r] (-d | -D) <branch-name>.\n```\n\n\n```bash\n# 删除 feature/canvas2 分支\ngit branch -d feature/canvas2\n```\n\n<br />8、设置默认上游及分支<br />\n\n```bash\ngit branch --set-upstream <localBranch> <remote>/<remoteBranch>\n```\n\n\n```bash\n# 以后只需要在 dev 分支执行 git push (无需额外的参数) 就可以提交到 origin/dev\ngit branch --set-upstream dev origin/dev\n```\n\n\n<a name=\"386668d1\"></a>\n### git checkout\n\n<br />检出分支:<br />\n\n```bash\ngit checkout [<options>] <branch>\n```\n\n\n```bash\n# 切换当前分支到 dev 分支\ngit checkout dev\n# 基于当前分支创建 test 分支，并且将当前分支切换到 test 分支\ngit checkout -b test\n```\n\n<br />除开用于分支切换，checkout 还可以用于恢复**未添加到本地工作区，但是被修改过的文件。**<br />**\n```bash\n# 将 index.js 恢复到当前 commit 的内容\ngit checkout index.js\n```\n\n\n<a name=\"89b6da3d\"></a>\n### git merge\n\n<br />合并分支:<br />\n\n```bash\ngit merge [<options>] [<commit>...]\n```\n\n\n```bash\n# 合并远程仓库的 master 分支到当前分支\ngit merge origin/master\n```\n\n\n<a name=\"5c874c8c\"></a>\n### git rebase\n\n<br />变基，是一种常用且有风险的操作，会改变提交历史，谨慎使用！<br />\n\n```bash\ngit rebase \nwhile(存在冲突) {\n    git status\n    找到当前冲突文件，编辑解决冲突\n    git add -u\n    git rebase --continue\n    if( git rebase --abort )\n        break; \n}\n```\n\n\n<a name=\"b8180c6e\"></a>\n### git cherry-pick\n\n<br />魔法级的命令，cherry-pick 可以提取 N 个的提交记录，合入稳定版本的分支上。<br />\n\n```bash\ngit cherry-pick [<options>] <commit-ish>...\n```\n\n\n```bash\n# 挑选 371c2 单个提交记录，合入当前分支\ngit cherry-pick 371c2\n# 挑选出 371c2 到 971209 的所有提交记录，并合入当前分支\ngit cherry-pick 371c2…971209\n```\n\n\n<a name=\"0380e71d\"></a>\n### git push\n\n<br />推送到远程仓库，同步本地仓库的提交历史到远程仓库<br />\n\n```bash\ngit push [<options>] [<repository> [<refspec>...]]\n```\n\n\n```bash\n# 提交本地仓库当前分支到远程仓库的 master 分支\ngit push origin master\n# 提交本地仓库 dev 分支到远程的 master 分支\ngit push origin master:dev\n# 提交单个 tag\ngit push origin publish/1.0.0\n# 提交所有 tag\ngit push origin --tags\n```\n\n\n<a name=\"6f808f5a\"></a>\n### git pull\n\n<br />拉取远程分支，同步远程仓库的提交历史到本地仓库<br />\n\n```bash\ngit pull [<options>] [<repository> [<refspec>...]]\n```\n\n\n```bash\n# 通常来说，默认的 pull 行为等同于 git fetch + git merge\n# 下面这行命令等同于 git fetch origin master && git merge origin/master\ngit pull origin master\n\n# 也可以通过变基的方式来拉取代码，这样分支模型不容易受到影响\n# 下面这行命令等同于 git fetch origin master && git rebase origin/master\ngit pull --rebase origin master\n```\n\n\n<a name=\"2968dbdd\"></a>\n### git tag\n\n<br />1、创建 tag<br />\n\n```bash\ngit tag -a v1.1.0 -m \"\"\n```\n\n<br />2、查看 tag<br />\n\n```bash\ngit tag\n```\n\n<br />3、推送到远程<br />\n\n```bash\ngit push origin --tags\n```\n\n<br />4、删除本地 tag<br />\n\n```bash\ngit tag -d v1.0.0\n```\n\n<br />5、删除远程 tag<br />\n\n```bash\ngit push origin :refs/tags/v1.0.0\n```\n\n\n<a name=\"d1595401\"></a>\n## .git 仓库元数据\n\n<br />每一个 git 的代码仓库目录下，都会有一个 `.git` 的文件夹，其中包含的重要文件包含以下：\n\n| 文件/文件夹 | 含义 |  |\n| --- | --- | --- |\n| config* | 配置文件 |  |\n| description | 描述，仅供 Git Web 程序使用 |  |\n| HEAD | 当前被检出的分支 |  |\n| index | 暂存区信息 |  |\n| hooks/ | 客户端或服务端的钩子脚本（hook scripts） |  |\n| info/ | 全局性排除（global exclude）文件，不希望被记录在 .gitignore 文件中的忽略模式（ignored patterns） |  |\n| objects/ | 所有数据内容 |  |\n| refs/ | 数据（分支）的提交对象的指针 |  |\n|  |  |  |\n\n\n\n<a name=\"7c99e281\"></a>\n## 进阶技巧\n\n\n<a name=\"d653f1cb\"></a>\n### 修改 commit 历史\n\n<br />使用 git rebase 进行历史修改，假定修改最近 3 条历史，操作步骤如下：<br />\n<br />1、`git rebase -i HEAD~3`<br />\n<br />运行此命令会提供一个提交列表，如下所示，其中 commit 记录是时间逆序排列的；<br />\n\n```\npick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\npick a5f412a0d added cat-file1\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n#  p, pick = use commit\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n\n:2, 4 s/pick/s/g\n```\n\n<br />2、编辑上述列表文件，在需要更改的 commit 前，将 `pick` 修改为 `edit` ，如果需要压缩，可设置为 `squash` 保存退出，进入到 rebase 流程；<br />\n<br />3、通过 `git commit --amend --author` 对历史记录依次修改和持续进行 rebase；<br />\n\n<a name=\"b65fd098\"></a>\n### 添加指定文件\n\n\n```bash\ngit ls-files src/ | grep '\\.css$' | xargs git add\n```\n\n\n<a name=\"160944bd\"></a>\n### 删除所有 commit 中的某些文件\n\n\n```bash\n# 删除文件\ngit filter-branch --force --index-filter 'git rm --cached --ignore-unmatch -r build' --prune-empty --tag-name-filter cat -- --all\n\n# 触发 GC\ngit reflog expire --expire=now --all && git gc --prune=now --aggressive\n```\n\n\n<a name=\"5317a015\"></a>\n### git stash\n\n<br />使用 stash 可以将当工作区更改的临时存放起来，等一番 git 操作（比如 merge / rebase 等）之后，再将这部分更改重新放回工作区。<br />\n\n```bash\n# 临时存放，临时存放区是一个栈的结构，支持多次临时存放，遵循后入先出的原则\ngit stash\n# 重新放回到工作区\ngit stash pop\n```\n\n\n<a name=\"2e307a62\"></a>\n## 附录\n\n\n- [githug](https://github.com/Gazler/githug), 一个专门为 git 学习路径设计的游戏\n\n- [awesome-git-addons](https://github.com/stevemao/awesome-git-addons), git 命令行工具扩展的合集\n\n- [git-tips](https://github.com/git-tips/tips), 常用使用场景和技巧集合\n\n- [lazygit](https://github.com/jesseduffield/lazygit), 懒人专用的 git 命令行程序\n\n\n\n\n<a name=\"d64d6855\"></a>\n## 其他用途\n\n\n<a name=\"2d3ad16e\"></a>\n### issue 评论\n\n\n- [gitment](https://github.com/imsun/gitment), github issue 社会化评论插件\n\n- [gittalk](https://github.com/gitalk/gitalk), github issue 社会化评论插件，感觉稍微好看一点点\n\n\n\n<br />\n<br />\n\n",
    "body_draft": "tags: [git]<br />date: 2019-03-28\n\n---\n\n\n<br />个人整理的一些常用的 Git 概念和命令集合，方便速查和快速解决某些场景下的问题，覆盖了日常开发和协同工作下的一部分场景，不只是命令行的介绍。欢迎关注[语雀原文](https://www.yuque.com/yinzhi/blog/lfmcil)，持续更新！<br />\n\n<a name=\"0b133c66\"></a>\n## 精简入门\n\n<br />1、克隆仓库<br />\n<br />克隆仓库会下载仓库完整的文件、分支和历史记录。<br />\n\n```bash\ngit clone [<options>] [--] <repo> [<dir>]\n```\n\n<br /><!-- more --><br />\n\n```bash\n# 克隆完整的仓库到 ./git-learning 目录下\ngit clone git@github.com:x-cold/git-learning.git\n# 只克隆 dev 分支到 ./dev 目录下\ngit clone -b dev git@github.com:x-cold/git-learning.git dev\n```\n\n<br />2、将文件变更记录写入到本地的索引库<br />\n\n```bash\ngit add [<options>] [--] <pathspec>...\n```\n\n\n```bash\n# 添加当前目录下所有文件\ngit add .\n# 添加部分文件\ngit add src/ app/ index.js\n```\n\n<br />3、提交变更到工作区<br />\n\n```bash\ngit commit [<options>] [--] <pathspec>...\n```\n\n\n```bash\n# 最普通的提交\ngit commit -m \"feat: support canvas\"\n# 修改当前的 commit message\ngit commit --amend\n# 重置当前的 commit author 和 message\ngit commit --amend --reset-author \n```\n\n<br />4、推送代码到远程仓库<br />\n\n```bash\ngit push [<options>] [<repository> [<refspec>...]]\n```\n\n\n```bash\n# 提交本地仓库当前分支到远程仓库的 master 分支\ngit push origin master\n# 提交本地仓库 dev 分支到远程的 master 分支\ngit push origin master:dev\n```\n\n\n<a name=\"af75a264\"></a>\n## 聊聊设计\n\n<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/103147/1553735304999-5c646d62-6d36-45d9-9ae1-ffdf4b5d6e67.png#align=left&display=inline&height=837&margin=%5Bobject%20Object%5D&name=image.png&originHeight=837&originWidth=1024&size=67634&status=done&style=none&width=1024)<br />图像来自维基百科<br />\n<br />Git 是一个分布式的版本控制工具，因此远程和本地可以视为两个独立的 Git 仓库。上图是一张经典的 Git 中的数据流与存储级别的介绍，其中储存级别主要包含几部分：<br />\n\n- 工作区 (Working Files)，指的是我们时刻在编辑的文件的目录，通常来说我们修改文件都是在工作区体现的\n- 暂存区（Stage），暂存将本地的修改，然后提交到本地仓库\n- 本地仓库（Local）\n- 远程仓库（Remote）\n\n\n<br />由此不难看出整体的数据流动，就是一条从：工作区 -> 暂存区 -> 本地仓库 -> 远程仓库 的双向数据流通道。<br />\n\n<a name=\"0dfbe902\"></a>\n## 常用命令\n<a name=\"04900ddb\"></a>\n### git init\n\n<br />创建一个空白的 git 仓库<br />\n\n```bash\ngit init\n```\n\n\n<a name=\"73e58b95\"></a>\n### git add\n\n\n```bash\ngit add [<options>] [--] <pathspec>...\n```\n\n\n<a name=\"5f9e613a\"></a>\n### git commit\n\n\n```bash\ngit commit [<options>] [--] <pathspec>...\n```\n\n\n<a name=\"da5508cb\"></a>\n### git remote\n\n<br />remote 指的是本地的 git 仓库关联的远程 git 仓库。<br />\n<br />1、查看远程仓库信息<br />\n\n```bash\ngit remote\n```\n\n<br />2、看远程仓库详细信息<br />\n\n```bash\ngit remote -v\n```\n\n<br />3、删除远程仓库<br />\n\n```bash\ngit remote remove <name>\n```\n\n\n```bash\n# 移除名字为 origin 的远程仓库\ngit remote remove origin\n```\n\n<br />4、添加远程仓库<br />\n\n```bash\ngit remote add [-t <branch>] [-m <master>] [-f] [--tags | --no-tags] [--mirror=<fetch|push>] <name> <url>\n```\n\n\n```bash\ngit remote origin git@github.com:x-cold/git-learning.git\n```\n\n\n<a name=\"57bbe662\"></a>\n### git branch\n\n<br />1、列出本地存在的分支<br />\n\n```bash\ngit branch\n```\n\n<br />2、列出远程分支<br />\n\n```bash\ngit branch -r\n```\n\n<br />3、列出本地和远程分支<br />\n\n```bash\ngit branch -a\n```\n\n<br />4、创建本地分支<br />\n\n```bash\ngit branch [branchName]  (remoteBranch)\n```\n\n\n```bash\n# 基于远程仓库的 dev 分支，创建本地仓库的 feature/canvas 分支\ngit branch feature/canvas dev\n```\n\n<br />5、分支重命名<br />\n\n```bash\ngit branch [<options>] (-m | -M) [<old-branch>] <new-branch>\n```\n\n\n```bash\n# 修改 feature/canvas 分支名为 feature/canvas2\ngit branch -M feature/canvas feature/canvas2\n```\n\n<br />6、删除本地分支<br />\n\n```bash\ngit branch -d | -D [branchName]\n```\n\n<br />7、删除远程分支<br />\n\n```bash\ngit branch [<options>] [-r] (-d | -D) <branch-name>.\n```\n\n\n```bash\n# 删除 feature/canvas2 分支\ngit branch -d feature/canvas2\n```\n\n<br />8、设置默认上游及分支<br />\n\n```bash\ngit branch --set-upstream <localBranch> <remote>/<remoteBranch>\n```\n\n\n```bash\n# 以后只需要在 dev 分支执行 git push (无需额外的参数) 就可以提交到 origin/dev\ngit branch --set-upstream dev origin/dev\n```\n\n\n<a name=\"386668d1\"></a>\n### git checkout\n\n<br />检出分支:<br />\n\n```bash\ngit checkout [<options>] <branch>\n```\n\n\n```bash\n# 切换当前分支到 dev 分支\ngit checkout dev\n# 基于当前分支创建 test 分支，并且将当前分支切换到 test 分支\ngit checkout -b test\n```\n\n<br />除开用于分支切换，checkout 还可以用于恢复**未添加到本地工作区，但是被修改过的文件。**<br />**\n```bash\n# 将 index.js 恢复到当前 commit 的内容\ngit checkout index.js\n```\n\n\n<a name=\"89b6da3d\"></a>\n### git merge\n\n<br />合并分支:<br />\n\n```bash\ngit merge [<options>] [<commit>...]\n```\n\n\n```bash\n# 合并远程仓库的 master 分支到当前分支\ngit merge origin/master\n```\n\n\n<a name=\"5c874c8c\"></a>\n### git rebase\n\n<br />变基，是一种常用且有风险的操作，会改变提交历史，谨慎使用！<br />\n\n```bash\ngit rebase \nwhile(存在冲突) {\n    git status\n    找到当前冲突文件，编辑解决冲突\n    git add -u\n    git rebase --continue\n    if( git rebase --abort )\n        break; \n}\n```\n\n\n<a name=\"b8180c6e\"></a>\n### git cherry-pick\n\n<br />魔法级的命令，cherry-pick 可以提取 N 个的提交记录，合入稳定版本的分支上。<br />\n\n```bash\ngit cherry-pick [<options>] <commit-ish>...\n```\n\n\n```bash\n# 挑选 371c2 单个提交记录，合入当前分支\ngit cherry-pick 371c2\n# 挑选出 371c2 到 971209 的所有提交记录，并合入当前分支\ngit cherry-pick 371c2…971209\n```\n\n\n<a name=\"0380e71d\"></a>\n### git push\n\n<br />推送到远程仓库，同步本地仓库的提交历史到远程仓库<br />\n\n```bash\ngit push [<options>] [<repository> [<refspec>...]]\n```\n\n\n```bash\n# 提交本地仓库当前分支到远程仓库的 master 分支\ngit push origin master\n# 提交本地仓库 dev 分支到远程的 master 分支\ngit push origin master:dev\n# 提交单个 tag\ngit push origin publish/1.0.0\n# 提交所有 tag\ngit push origin --tags\n```\n\n\n<a name=\"6f808f5a\"></a>\n### git pull\n\n<br />拉取远程分支，同步远程仓库的提交历史到本地仓库<br />\n\n```bash\ngit pull [<options>] [<repository> [<refspec>...]]\n```\n\n\n```bash\n# 通常来说，默认的 pull 行为等同于 git fetch + git merge\n# 下面这行命令等同于 git fetch origin master && git merge origin/master\ngit pull origin master\n\n# 也可以通过变基的方式来拉取代码，这样分支模型不容易受到影响\n# 下面这行命令等同于 git fetch origin master && git rebase origin/master\ngit pull --rebase origin master\n```\n\n\n<a name=\"2968dbdd\"></a>\n### git tag\n\n<br />1、创建 tag<br />\n\n```bash\ngit tag -a v1.1.0 -m \"\"\n```\n\n<br />2、查看 tag<br />\n\n```bash\ngit tag\n```\n\n<br />3、推送到远程<br />\n\n```bash\ngit push origin --tags\n```\n\n<br />4、删除本地 tag<br />\n\n```bash\ngit tag -d v1.0.0\n```\n\n<br />5、删除远程 tag<br />\n\n```bash\ngit push origin :refs/tags/v1.0.0\n```\n\n\n<a name=\"d1595401\"></a>\n## .git 仓库元数据\n\n<br />每一个 git 的代码仓库目录下，都会有一个 `.git` 的文件夹，其中包含的重要文件包含以下：\n\n| 文件/文件夹 | 含义 |  |\n| --- | --- | --- |\n| config* | 配置文件 |  |\n| description | 描述，仅供 Git Web 程序使用 |  |\n| HEAD | 当前被检出的分支 |  |\n| index | 暂存区信息 |  |\n| hooks/ | 客户端或服务端的钩子脚本（hook scripts） |  |\n| info/ | 全局性排除（global exclude）文件，不希望被记录在 .gitignore 文件中的忽略模式（ignored patterns） |  |\n| objects/ | 所有数据内容 |  |\n| refs/ | 数据（分支）的提交对象的指针 |  |\n|  |  |  |\n\n\n\n<a name=\"7c99e281\"></a>\n## 进阶技巧\n\n\n<a name=\"d653f1cb\"></a>\n### 修改 commit 历史\n\n<br />使用 git rebase 进行历史修改，假定修改最近 3 条历史，操作步骤如下：<br />\n<br />1、`git rebase -i HEAD~3`<br />\n<br />运行此命令会提供一个提交列表，如下所示，其中 commit 记录是时间逆序排列的；<br />\n\n```\npick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\npick a5f412a0d added cat-file1\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n#  p, pick = use commit\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n\n:2, 4 s/pick/s/g\n```\n\n<br />2、编辑上述列表文件，在需要更改的 commit 前，将 `pick` 修改为 `edit` ，如果需要压缩，可设置为 `squash` 保存退出，进入到 rebase 流程；<br />\n<br />3、通过 `git commit --amend --author` 对历史记录依次修改和持续进行 rebase；<br />\n\n<a name=\"b65fd098\"></a>\n### 添加指定文件\n\n\n```bash\ngit ls-files src/ | grep '\\.css$' | xargs git add\n```\n\n\n<a name=\"160944bd\"></a>\n### 删除所有 commit 中的某些文件\n\n\n```bash\n# 删除文件\ngit filter-branch --force --index-filter 'git rm --cached --ignore-unmatch -r build' --prune-empty --tag-name-filter cat -- --all\n\n# 触发 GC\ngit reflog expire --expire=now --all && git gc --prune=now --aggressive\n```\n\n\n<a name=\"5317a015\"></a>\n### git stash\n\n<br />使用 stash 可以将当工作区更改的临时存放起来，等一番 git 操作（比如 merge / rebase 等）之后，再将这部分更改重新放回工作区。<br />\n\n```bash\n# 临时存放，临时存放区是一个栈的结构，支持多次临时存放，遵循后入先出的原则\ngit stash\n# 重新放回到工作区\ngit stash pop\n```\n\n\n<a name=\"2e307a62\"></a>\n## 附录\n\n\n- [githug](https://github.com/Gazler/githug), 一个专门为 git 学习路径设计的游戏\n\n- [awesome-git-addons](https://github.com/stevemao/awesome-git-addons), git 命令行工具扩展的合集\n\n- [git-tips](https://github.com/git-tips/tips), 常用使用场景和技巧集合\n\n- [lazygit](https://github.com/jesseduffield/lazygit), 懒人专用的 git 命令行程序\n\n\n\n\n<a name=\"d64d6855\"></a>\n## 其他用途\n\n\n<a name=\"2d3ad16e\"></a>\n### issue 评论\n\n\n- [gitment](https://github.com/imsun/gitment), github issue 社会化评论插件\n\n- [gittalk](https://github.com/gitalk/gitalk), github issue 社会化评论插件，感觉稍微好看一点点\n\n\n\n<br />\n<br />\n\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-traditional\" data-lake-element=\"root\" data-selection-undefined=\"%7B%22path%22%3A%5B%5B215%2C0%2C1%2C0%5D%2C%5B215%2C0%2C1%2C2%5D%5D%2C%22active%22%3Atrue%7D\"><p data-lake-id=\"9ed3128bc0d64343c4c9b20798f0d21f_p_0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">tags: [git]</p><p data-lake-id=\"b6379efd4078eec94c8d8bc2efba3efe_p_1\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">date: 2019-03-28</p><div data-card-type=\"block\" data-lake-card=\"hr\" id=\"O3mBA\"><hr style=\"background-color: rgb(232, 232, 232); border: 1px solid transparent; margin: 18px 0px;\"></div><p data-lake-id=\"2b2b3e7dc122d1502f582c0c8b7958d8_p_2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"a3503574d17f33ade4448178351c02fa_p_3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">个人整理的一些常用的 Git 概念和命令集合，方便速查和快速解决某些场景下的问题，覆盖了日常开发和协同工作下的一部分场景，不只是命令行的介绍。欢迎关注<a href=\"https://www.yuque.com/yinzhi/blog/lfmcil\" target=\"_blank\">语雀原文</a>，持续更新！</p><p data-lake-id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"0b133c66\" data-lake-id=\"fc01b66098729952c08217daeb7e7977_h2_0\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">精简入门</h2><p data-lake-id=\"7467903a77e4c43e92d4f196903d0bbe_p_5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"cfeedfba5ad314b0f460c27ecd3045e2_p_6\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1、克隆仓库</p><p data-lake-id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"86a5f4c052823d2818150bf0c3d30019_p_8\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">克隆仓库会下载仓库完整的文件、分支和历史记录。</p><p data-lake-id=\"eadc4ec477465f1f239730d987d394b1_p_9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"9W1GY\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> clone [&lt;options&gt;] [--] &lt;repo&gt; [&lt;dir&gt;]</span></span></pre></div></div></div><p data-lake-id=\"042da541aac17f869693ba89ebd10d8e_p_10\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"3977176c2c6fdd6c6bad4edb7aab174c_p_11\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">&lt;!-- more --&gt;</p><p data-lake-id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"GfypA\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 克隆完整的仓库到 ./git-learning 目录下</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> clone <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span>@github.com:x-cold/git-learning.git\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 只克隆 dev 分支到 ./dev 目录下</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> clone <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-b</span> dev <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span>@github.com:x-cold/git-learning.git dev</span></span></pre></div></div></div><p data-lake-id=\"2369fafe89fae403079018df6f36b51b_p_13\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"5a17770302edffe59d1ddd594875ec28_p_14\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2、将文件变更记录写入到本地的<span style=\"color: #333333;\"><span style=\"background-color: #FFFFFF;\">索引库</span></span></p><p data-lake-id=\"c53070088aadb43ef468f61fca8ca22a_p_15\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"bqdOX\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> add [&lt;options&gt;] [--] &lt;pathspec&gt;...</span></span></pre></div></div></div><p data-lake-id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"TUvN9\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 添加当前目录下所有文件</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> add .\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 添加部分文件</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> add src/ app/ index.js</span></span></pre></div></div></div><p data-lake-id=\"c5eaf555cee01ec836fc749258c6179d_p_17\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"f05142fc336562bb62f95efe8798fdec_p_18\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">3、提交变更到工作区</p><p data-lake-id=\"bac67e7fcdfb0acc75b3cf54e2dd1141_p_19\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"m1LRP\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> commit [&lt;options&gt;] [--] &lt;pathspec&gt;...</span></span></pre></div></div></div><p data-lake-id=\"db841a6e995b001085603629a3ace379_p_20\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"vByX9\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 最普通的提交</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> commit <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-m</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"feat: support canvas\"</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 修改当前的 commit message</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> commit <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--amend</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 重置当前的 commit author 和 message</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> commit <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--amend</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--reset</span><span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-author</span> </span></span></pre></div></div></div><p data-lake-id=\"54d418504a63791b75a5f497078fa24a_p_21\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"00a98ea94e8ed7c59652bf67fa37a9e9_p_22\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">4、推送代码到远程仓库</p><p data-lake-id=\"4547a4b65fb57fca5301c6973643450c_p_23\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"3rRLe\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> push [&lt;options&gt;] [&lt;repository&gt; [&lt;refspec&gt;...]]</span></span></pre></div></div></div><p data-lake-id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"P6Yrw\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 提交本地仓库当前分支到远程仓库的 master 分支</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> push origin master\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 提交本地仓库 dev 分支到远程的 master 分支</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> push origin master:dev</span></span></pre></div></div></div><p data-lake-id=\"3afe72986fc83f6913935faccbcf69b2_p_25\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"af75a264\" data-lake-id=\"d2a5c595f7dca4a206396c7360e8579f_h2_1\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">聊聊设计</h2><p data-lake-id=\"b57de0a6a045efefe71d109094be9ddc_p_26\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"80cacdeabf55070274ec5a162824eece_p_27\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span data-card-type=\"inline\" data-lake-card=\"image\"><img data-role=\"image\" src=\"https://cdn.nlark.com/yuque/0/2019/png/103147/1553735304999-5c646d62-6d36-45d9-9ae1-ffdf4b5d6e67.png\" data-raw-src=\"\" class=\"image lake-drag-image\" alt=\"image.png\" title=\"image.png\" data-height=\"837px\" style=\"visibility: visible; width: 1024px;\"></span></p><p data-lake-id=\"ae63fb760cf20bab17ded668e908f9d3_p_28\" style=\"text-align: center; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">图像来自维基百科</p><p data-lake-id=\"d8f02fc6e1d9d5e68b5ff128662a6b29_p_29\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"535773e08f045555e6c332bbbb80fde2_p_30\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><span>Git 是一个分布式的版本控制工具，因此远程和本地可以视为两个独立的 Git 仓库。</span>上图是一张经典的 Git 中的数据流与存储级别的介绍<span>，</span>其中储存级别主要包含几部分：</p><p data-lake-id=\"e2e9b10bfede90e88bd47291199e0b55_p_31\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul data-lake-id=\"abce4b28910a70b77001569472f18af7_ul_0\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"d75263098cf28af05daddaab27f5b5f2_li_0\">工作区 (Working Files)，指的是我们时刻在编辑的文件的目录，通常来说我们修改文件都是在工作区体现的</li><li data-lake-id=\"08cdf53a1997267dc49c5b7933add113_li_1\">暂存区（Stage），暂存将本地的修改，然后提交到本地仓库</li><li data-lake-id=\"66e730a75f2dfaea279bb85a90003871_li_2\">本地仓库（Local）</li><li data-lake-id=\"eebc549f6454ebae232725cbabb25958_li_3\">远程仓库（Remote）</li></ul><p data-lake-id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"dadbb619705f4582673344d23dea1d09_p_33\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">由此不难看出整体的数据流动，就是一条从：工作区 -&gt; 暂存区 -&gt; 本地仓库 -&gt; 远程仓库 的双向数据流通道。</p><p data-lake-id=\"39abba9494ef6da94608fbd0e487aa60_p_34\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"0dfbe902\" data-lake-id=\"eed30c2083d002ce01f17926da36bcbb_h2_2\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">常用命令</h2><h3 id=\"04900ddb\" data-lake-id=\"497198b039a2cdbbe3a7b6e0a8d20136_h3_0\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git init</h3><p data-lake-id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"25a422c7ff505e0ab46166fbe28b533d_p_36\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">创建一个空白的 git 仓库</p><p data-lake-id=\"ab57135091a86c42cc63ec67ac068a45_p_37\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"dF24s\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> init</span></span></pre></div></div></div><p data-lake-id=\"82f45866a429f6224b2e92c65bfda254_p_38\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"73e58b95\" data-lake-id=\"98541dd7f58d36950993a626aa1eed52_h3_1\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git add</h3><p data-lake-id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"EMR0q\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> add [&lt;options&gt;] [--] &lt;pathspec&gt;...</span></span></pre></div></div></div><p data-lake-id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"5f9e613a\" data-lake-id=\"dbb53fe2c92fab2d53ca1aa3049e555f_h3_2\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git commit</h3><p data-lake-id=\"d9d31f80b21bee6005ee4bb0be1d9a6b_p_41\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"3rTA7\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> commit [&lt;options&gt;] [--] &lt;pathspec&gt;...</span></span></pre></div></div></div><p data-lake-id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"da5508cb\" data-lake-id=\"196c484004a40c3b66fb7bc3cd386bde_h3_3\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git remote</h3><p data-lake-id=\"4930f2b57b08d977b4a7a79433f23490_p_43\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"d658f725cfb158f42be8f548c342e384_p_44\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">remote 指的是本地的 git 仓库关联的远程 git 仓库。</p><p data-lake-id=\"0e4b859961c17882302ca1144adad96d_p_45\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"d5318dc63e7d0faa5fe2c8443c062d2f_p_46\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1、查看远程仓库信息</p><p data-lake-id=\"478231c71c811ff5f728eef1ada97581_p_47\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"5sARr\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> remote</span></span></pre></div></div></div><p data-lake-id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"1dcbde7ea266ac66338a8158e6ba3e1f_p_49\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2、看远程仓库详细信息</p><p data-lake-id=\"4108a5bc411c7547dc6876b612b07f81_p_50\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"JPsWM\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> remote <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-v</span></span></span></pre></div></div></div><p data-lake-id=\"d3ff43f9faa22377838e1e2c0834a861_p_51\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"4ba62ab05319ed2c42144f5bf6422fb2_p_52\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">3、删除远程仓库</p><p data-lake-id=\"0c6a7643ebb3931744a90899eb00ce0b_p_53\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"oBnLI\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> remote remove &lt;name&gt;</span></span></pre></div></div></div><p data-lake-id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"mBtnQ\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 移除名字为 origin 的远程仓库</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> remote remove origin</span></span></pre></div></div></div><p data-lake-id=\"7188e3d4590c731c34019643bbb3ba96_p_55\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"733c4107a1a54e99d80ec65afa1168d6_p_56\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">4、添加远程仓库</p><p data-lake-id=\"67592880a847e874a0da3af4d564ef1f_p_57\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"N3Lg7\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--tags | <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--no</span><span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-tags</span>] <span class=\"cm-def\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">[--mirror</span><span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span>&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</span></span></pre></div></div></div><p data-lake-id=\"e3c9bad72638009a374744280c63ecc6_p_58\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"8YiQb\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> remote origin <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span>@github.com:x-cold/git-learning.git</span></span></pre></div></div></div><p data-lake-id=\"1b325e2e939e9ae8679222558eaaceb6_p_59\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"57bbe662\" data-lake-id=\"930af256e5a71a9ead80ea32978fd18c_h3_4\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git branch</h3><p data-lake-id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"d2ed6529fc9c95df33cdcaa71f2a9f27_p_61\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1、列出本地存在的分支</p><p data-lake-id=\"9b034733f43578c770243b15c945bc07_p_62\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"zjC0E\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch</span></span></pre></div></div></div><p data-lake-id=\"87e34965e50e2c8e31ce44a85667e8dd_p_63\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"d7994b4343d9fc631f6ef70e2c646e8e_p_64\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2、列出远程分支</p><p data-lake-id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"mVhNp\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-r</span></span></span></pre></div></div></div><p data-lake-id=\"cf44cb59378505901ec625cdc88d7d91_p_66\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"0e7ed0f821001ce3cbf47d45f2fc160d_p_67\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">3、列出本地和远程分支</p><p data-lake-id=\"f67c084ec5a7dd840c4c56ee24cc368e_p_68\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"POWoN\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-a</span></span></span></pre></div></div></div><p data-lake-id=\"956e0d4312e941b77cd57ec35c294aff_p_69\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"a71f2fcf190defe5e404822bdd23d006_p_70\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">4、创建本地分支</p><p data-lake-id=\"b7f5c253c3fb3956b40638fc0613cbf9_p_71\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"MPlsk\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch [branchName]  (remoteBranch)</span></span></pre></div></div></div><p data-lake-id=\"200b796b4b1f5a36aa12caae6b6fa3d8_p_72\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"zwdoZ\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 基于远程仓库的 dev 分支，创建本地仓库的 feature/canvas 分支</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch feature/canvas dev</span></span></pre></div></div></div><p data-lake-id=\"7e9db6e1dddd1090f9cbf7742b89f0d6_p_73\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"9db9b98bed544367d59fa6ca74f9381d_p_74\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">5、分支重命名</p><p data-lake-id=\"cee026a6997be2fe2ca3b5d6e2ce2bf0_p_75\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"SCAy7\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch [&lt;options&gt;] (-m | <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-M</span>) [&lt;old-branch&gt;] &lt;new-branch&gt;</span></span></pre></div></div></div><p data-lake-id=\"391eee0f96cca26f6e7df243706d21bf_p_76\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"jVXwe\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 修改 feature/canvas 分支名为 feature/canvas2</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-M</span> feature/canvas feature/canvas2</span></span></pre></div></div></div><p data-lake-id=\"9fc1a1e32cf7c324fef5888bc3009382_p_77\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"ce3ef9d0eef22521a499a1252bf36783_p_78\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">6、删除本地分支</p><p data-lake-id=\"f855fcce122120d1233c03106e601338_p_79\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"pBn9M\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-d</span> | <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-D</span> [branchName]</span></span></pre></div></div></div><p data-lake-id=\"cacc5e28cdefa24e262c83e0ab2a3ade_p_80\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"e333c5912d5c42b0a3a56b7ca134c07b_p_81\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">7、删除远程分支</p><p data-lake-id=\"ede07f6666baf1587414d7171c5dd877_p_82\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"0Viv0\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch [&lt;options&gt;] [-r] (-d | <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-D</span>) &lt;branch-name&gt;.</span></span></pre></div></div></div><p data-lake-id=\"187832c794b601f7094c1a9b20086a6b_p_83\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"muDT4\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 删除 feature/canvas2 分支</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-d</span> feature/canvas2</span></span></pre></div></div></div><p data-lake-id=\"470257ffbff08ad0eedbc557452f8c66_p_84\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"22477ea4a7bab33a2ee9c7f37679d523_p_85\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">8、设置默认上游及分支</p><p data-lake-id=\"c07d4a2054239914d4a014d7d64fcf23_p_86\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"kbtLO\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--set</span><span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-upstream</span> &lt;localBranch&gt; &lt;remote&gt;/&lt;remoteBranch&gt;</span></span></pre></div></div></div><p data-lake-id=\"bd67236b6b40e1ddeba66aa4c905c5af_p_87\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"6sxNn\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 以后只需要在 dev 分支执行 git push (无需额外的参数) 就可以提交到 origin/dev</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> branch <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--set</span><span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-upstream</span> dev origin/dev</span></span></pre></div></div></div><p data-lake-id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"386668d1\" data-lake-id=\"3656d6c33ad30c0dc766550a027c603f_h3_5\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git checkout</h3><p data-lake-id=\"ab51a4ad9cb9ee48199bb5c9fc6715a2_p_89\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"ea4381cd2a5c397389b46222ff9442f9_p_90\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">检出分支:</p><p data-lake-id=\"2585884a100de0fae153ff935c1040bf_p_91\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"PU5L5\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> checkout [&lt;options&gt;] &lt;branch&gt;</span></span></pre></div></div></div><p data-lake-id=\"f82a35c2fca60d6b3bdc5c1000201985_p_92\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"21As1\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 切换当前分支到 dev 分支</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> checkout dev\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 基于当前分支创建 test 分支，并且将当前分支切换到 test 分支</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> checkout <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-b</span> test</span></span></pre></div></div></div><p data-lake-id=\"92499751fabe053dd037c1574d6f4fb2_p_93\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"bd94fa12acead2cb6228f66868ef3f73_p_94\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">除开用于分支切换，checkout 还可以用于恢复<strong>未添加到本地工作区，但是被修改过的文件。</strong></p><p data-lake-id=\"45f9c401f99c8bc813e223381c98f09b_p_95\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><strong><br></strong></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"4hB2o\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 将 index.js 恢复到当前 commit 的内容</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> checkout index.js</span></span></pre></div></div></div><p data-lake-id=\"cd1514dfedaab485e5767b166731e116_p_96\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"89b6da3d\" data-lake-id=\"a12e32ab022ecf76deede9c72264a2ff_h3_6\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git merge</h3><p data-lake-id=\"d6a51c95a901676ffc113c140e74f091_p_97\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"a25f438f8dd04baf21b7d5e00cd7057c_p_98\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">合并分支:</p><p data-lake-id=\"680207cd112f221e8bb2a2adf8b5ef15_p_99\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"2UXo6\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> merge [&lt;options&gt;] [&lt;commit&gt;...]</span></span></pre></div></div></div><p data-lake-id=\"ec69cd8d8f73ee437722723e0adf1fa7_p_100\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"WWdgA\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 合并远程仓库的 master 分支到当前分支</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> merge origin/master</span></span></pre></div></div></div><p data-lake-id=\"01884230bc631815ce050c63d5156a8c_p_101\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"5c874c8c\" data-lake-id=\"ab40770755c09c0e00ac80e022b064e4_h3_7\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git rebase</h3><p data-lake-id=\"a2c2ab33193f15adcdff2e08f718d7c2_p_102\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"74336c34260a8796a2e9edf065b284d4_p_103\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">变基，是一种常用且有风险的操作，会改变提交历史，谨慎使用！</p><p data-lake-id=\"9bd2d97c6b7de4b9f89a01020f0acbdc_p_104\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"nI5BG\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> rebase \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">while</span>(存在冲突) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> status\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    找到当前冲突文件，编辑解决冲突\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> add <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-u</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> rebase <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--continue</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    <span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">if</span>( <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> rebase <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--abort</span> )\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">        break; \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">}</span></span></pre></div></div></div><p data-lake-id=\"702e00ceee7e1a86732f5fe484305638_p_105\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"b8180c6e\" data-lake-id=\"5fc0f8e4c2aa96cd29681897ad2412f0_h3_8\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git cherry-pick</h3><p data-lake-id=\"32e4b810a1a3b020b0a0d082442d55f7_p_106\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"174854b2afcf8d2723f1f28fb5f28357_p_107\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">魔法级的命令，<span>cherry-pick 可以提取 N 个的提交记录，合入稳定版本的分支上。</span></p><p data-lake-id=\"c6ea08d82bf830d4344bc47c75959696_p_108\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"E7812\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> cherry-pick [&lt;options&gt;] &lt;commit-ish&gt;...</span></span></pre></div></div></div><p data-lake-id=\"db6a3a7f6005176b48ff149f30b21edd_p_109\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"0elxh\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 挑选 371c2 单个提交记录，合入当前分支</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> cherry-pick 371c2\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 挑选出 371c2 到 971209 的所有提交记录，并合入当前分支</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> cherry-pick 371c2…971209</span></span></pre></div></div></div><p data-lake-id=\"e9ce31f642ab705821fd192984e0da5b_p_110\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"0380e71d\" data-lake-id=\"cc341f2c4a593c75442288823e812dda_h3_9\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git push</h3><p data-lake-id=\"7df9b20b6b924d2fc8c9e5079bc8d88d_p_111\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"b1cdfcbea2f330fa8f2f9c2604f50e3d_p_112\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">推送到远程仓库，同步本地仓库的提交历史到远程仓库</p><p data-lake-id=\"45e36abc53ce1dcd83cb64d5bdb2b960_p_113\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"WI7cq\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> push [&lt;options&gt;] [&lt;repository&gt; [&lt;refspec&gt;...]]</span></span></pre></div></div></div><p data-lake-id=\"22c0deb23b61b42a2425aabf1c1bdedf_p_114\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"6b7JR\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 提交本地仓库当前分支到远程仓库的 master 分支</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> push origin master\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 提交本地仓库 dev 分支到远程的 master 分支</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> push origin master:dev\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 提交单个 tag</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> push origin publish/1.0.0\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 提交所有 tag</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> push origin <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--tags</span></span></span></pre></div></div></div><p data-lake-id=\"bdad9f83e0239c83aaf356c272a6c0ea_p_115\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"6f808f5a\" data-lake-id=\"565a8987a16e860316942d32d74bd50c_h3_10\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git pull</h3><p data-lake-id=\"ed74be64a5e06e3ce79ba78b44b8adfe_p_116\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"772040cdae550550ccee8614ce00ea7b_p_117\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">拉取远程分支，同步远程仓库的提交历史到本地仓库</p><p data-lake-id=\"29c1f9f3d7ddd7828bcbdb5345f90158_p_118\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"UBEMd\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> pull [&lt;options&gt;] [&lt;repository&gt; [&lt;refspec&gt;...]]</span></span></pre></div></div></div><p data-lake-id=\"649530dfe6472825a73f37a542e2e465_p_119\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"iBu20\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 通常来说，默认的 pull 行为等同于 git fetch + git merge</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 下面这行命令等同于 git fetch origin master &amp;&amp; git merge origin/master</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> pull origin master\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 也可以通过变基的方式来拉取代码，这样分支模型不容易受到影响</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 下面这行命令等同于 git fetch origin master &amp;&amp; git rebase origin/master</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> pull <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--rebase</span> origin master</span></span></pre></div></div></div><p data-lake-id=\"a4740d4bfa04da5081d466fc1a05e14e_p_120\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"2968dbdd\" data-lake-id=\"44b36002483365bbd9c60e4c8cc66712_h3_11\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git tag</h3><p data-lake-id=\"d0c08438d746f74145c64c20ef564288_p_121\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"ce117302a77f173a2df438ead1734f87_p_122\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1、创建 tag</p><p data-lake-id=\"229af124bfdb4f72f7476a537561ed01_p_123\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"pPNvw\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> tag <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-a</span> v1.1.0 <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-m</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\"\"</span></span></span></pre></div></div></div><p data-lake-id=\"22ec2a6212062c98aa0e4f653f5c3b04_p_124\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"ff59bdd1c34b52c840cd005be913f078_p_125\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2、查看 tag</p><p data-lake-id=\"037180a84ec63c01b315559ed5a15c1d_p_126\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"sESjB\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> tag</span></span></pre></div></div></div><p data-lake-id=\"218526f010699898c9b5afe5bee78564_p_127\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"db2a3e0f7d1db1ad22ed4a6d0f9b9dd3_p_128\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">3、推送到远程</p><p data-lake-id=\"95d2789c2734df969b06fab66880adbb_p_129\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"rqpmR\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> push origin <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--tags</span></span></span></pre></div></div></div><p data-lake-id=\"d2111bc79f3924932d5ab50f8af2ecbc_p_130\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"617bc70910e6d0ab07b30aee76684b5d_p_131\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">4、删除本地 tag</p><p data-lake-id=\"2f49e0ddefda4b24fada2a6edd68033d_p_132\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"SoaFj\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> tag <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-d</span> v1.0.0</span></span></pre></div></div></div><p data-lake-id=\"ec0f52fa0be53a0503a5f45678d7af64_p_133\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"884e5f0c9213d7d0976fb2297db87c91_p_134\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">5、删除远程 tag</p><p data-lake-id=\"f8654ab62d3ffca1147edabe4e605303_p_135\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"uQqBl\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> push origin :refs/tags/v1.0.0</span></span></pre></div></div></div><p data-lake-id=\"1b28de05b104a11bb389f3b3c60b9570_p_136\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"d1595401\" data-lake-id=\"206b202e8065b74af86e15433911b0af_h2_3\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">.git 仓库元数据</h2><p data-lake-id=\"f474938634c47815c9cafa361ce29c41_p_137\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"f8fbe4a5e4107eef43677b2b15952584_p_138\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">每一个 git 的代码仓库目录下，都会有一个 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">.git</code> 的文件夹，其中包含的重要文件包含以下：</p><div data-card-type=\"block\" data-lake-card=\"table\" id=\"x7oD7\"><table class=\"lake-table\" style=\"width: 750px; outline: none; border-collapse: collapse; border: 1px solid rgb(217, 217, 217);\"><colgroup><col width=\"193\" span=\"1\"><col width=\"333\" span=\"1\"><col width=\"223\" span=\"1\"></colgroup><tbody><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"dbfc185b213f665655634d9949954c49\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">文件/文件夹</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"cbf8415272df20109c0df6e1843ed100\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">含义</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"415ba27c227e4f6cf17f41d2a906ab77\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"77c3a8a98b1bacd5720b1b978b82f906\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">config*</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"5a7ecc5eb4bcb6407588f3ce7e8a175d\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">配置文件</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"e8a01bc2f32bd14bbf8c0cf2b6fbf9cf\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"23b3e52e9a2b8924b7eb780ec5b4abd7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">description</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"47259964bbf3e68456ec4e415e380db7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">描述，仅供 Git Web 程序使用</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"22567f31b0875846d77f979c698f5317\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"b3ee359b9512d7d4d47352ec55f0742b\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">HEAD</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"1e3e9b44e09da771763bd84781668c58\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">当前被检出的分支</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"0395282adae3e101e909530d25bee047\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"56cd2ed153efda544e8559ed768035a7\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">index</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"7a2af5e1be218299d474f6988363b0be\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">暂存区信息</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"304ec3f1360be9dec41f77b2cc7f6c65\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"f278cb79c91f310f7c47b9ec6c57b874\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">hooks/</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"0a2dc3d2eee46d53437f8cac5de8ca15\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">客户端或服务端的钩子脚本（hook scripts）</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"b1bc9f30563a733f97680c911348e506\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"127b5a771f7af6361021a93ccd9cf6d5\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">info/</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"ba66d178a24844cfac39236f8826e9fb\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">全局性排除（global exclude）文件，不希望被记录在 .gitignore 文件中的忽略模式（ignored patterns）</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"4670630ce5770a8823aa91f993d5dcf2\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"a2cf33c2b6c4212b779dbf28953f3ca9\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">objects/</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"783c48ee84fa5d8a348f8afdab94ec27\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">所有数据内容</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"0d990af3592f5c44ad46cb0c77c9d076\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"5c7634281f3a68ee50b76ba78fcd1ea0\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">refs/</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"4e2949b8201291cd513952ad93ade73c\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">数据（分支）的提交对象的指针</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"d7c1b2aa690f51704b405b9f0de583c3\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"b912503e074910e834563df2cc666828\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"0972eef803ad822a77b548e445a51574\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p data-lake-id=\"6974309ad26cb164c2faa613723bd758\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></td></tr></tbody></table></div><p data-lake-id=\"a8e4ffc9b0db855a66f6153499a950d0_p_139\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"7c99e281\" data-lake-id=\"0c51af1ad1a9a8d33f665934a1fbb224_h2_4\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">进阶技巧</h2><p data-lake-id=\"91cea5fb3ce029632e4cd2ba40ed2467_p_140\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"d653f1cb\" data-lake-id=\"3098081fbf6d90c801b6c976ea8b49dd_h3_12\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">修改 commit 历史</h3><p data-lake-id=\"6a77d5641d799908d669ed274c8503e1_p_141\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"190fc98d19d85aef99c454ad03ac8e49_p_142\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">使用 git rebase 进行历史修改，假定修改最近 3 条历史，操作步骤如下：</p><p data-lake-id=\"ecbf2a7b370d7c1f11409dc2caadd396_p_143\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"559eba1b9473b55c763fc5676d47d5a8_p_144\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1、`git rebase -i HEAD~3`</p><p data-lake-id=\"bdbce808fca59ee263677a643219090a_p_145\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"8806ee660a9c4f05249c2c7e60ab7a57_p_146\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">运行此命令会提供一个提交列表，如下所示，其中 commit 记录是时间逆序排列的；</p><p data-lake-id=\"7e0f4c425a469a407bb6094b1048bd2a_p_147\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"yknuM\" class=\"\" data-language=\"plain\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">pick f7f3f6d changed my name a bit\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">pick 310154e updated README formatting and added blame\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">pick a5f4a0d added cat-file\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">pick a5f412a0d added cat-file1\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># Rebase 710f0f8..a5f4a0d onto 710f0f8\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">#\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># Commands:\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">#  p, pick = use commit\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">#  e, edit = use commit, but stop for amending\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">#  s, squash = use commit, but meld into previous commit\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">#\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># If you remove a line here THAT COMMIT WILL BE LOST.\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># However, if you remove everything, the rebase will be aborted.\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">#\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">:2, 4 s/pick/s/g</span></span></pre></div></div></div><p data-lake-id=\"fd8dd5e29cc68951de3711296b3ec5da_p_148\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"cffaae5359788e047feccc37cb4359cd_p_149\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2、编辑上述列表文件，在需要更改的 commit 前，将 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">pick</code> 修改为 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">edit</code> ，如果需要压缩，可设置为 <span style=\"color: #4F4F4F;\"><span style=\"background-color: #FFFFFF;\"><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">squash</code></span></span><span style=\"color: #4F4F4F;\"><span style=\"background-color: #FFFFFF;\"> </span></span>保存退出，进入到 rebase 流程；</p><p data-lake-id=\"66d65f3a5b8e94e695d6df7f3989a5f6_p_150\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"e096a00a6b7efaf3c06bc6b6efb37c21_p_151\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">3、通过 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">git commit --amend --author</code> 对历史记录依次修改和持续进行 rebase；</p><p data-lake-id=\"f15456644c6b1005375e99dd194ebf41_p_152\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"b65fd098\" data-lake-id=\"c67b34dd9ae8649376f941cae5b566dd_h3_13\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">添加指定文件</h3><p data-lake-id=\"d6aad01cce7555ee21c55669cd02505b_p_153\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"o89Wy\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> ls-files src/ | <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">grep</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'\\.css$'</span> | xargs <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> add</span></span></pre></div></div></div><p data-lake-id=\"ce225d72190bb5bc96c7675d82aeb159_p_154\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"160944bd\" data-lake-id=\"582ec3ac108b27951b3731998f182f9a_h3_14\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">删除所有 commit 中的某些文件</h3><p data-lake-id=\"21145fbd4b460925834eb32e00b394d5_p_155\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"c6y9V\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 删除文件</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> filter-branch <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--force</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--index</span><span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-filter</span> <span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">'git rm --cached --ignore-unmatch -r build'</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--prune</span><span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-empty</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--tag</span><span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-name</span><span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">-filter</span> <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">cat</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--</span> <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--all</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 触发 GC</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> reflog expire <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--expire</span><span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span>now <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--all</span> &amp;&amp; <span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> gc <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--prune</span><span class=\"cm-operator\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">=</span>now <span class=\"cm-attribute\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">--aggressive</span></span></span></pre></div></div></div><p data-lake-id=\"f055c5eaf69ffd994712ed724c58c065_p_156\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"5317a015\" data-lake-id=\"1da3614c9d179ba18eb357c0391c6f0e_h3_15\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">git stash</h3><p data-lake-id=\"b68200708c960efa87d95f272f623cc5_p_157\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"49ae5b4c45caa52fc4fde135ec6d078d_p_158\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">使用 stash 可以将当工作区更改的临时存放起来，等一番 git 操作（比如 merge / rebase 等）之后，再将这部分更改重新放回工作区。</p><p data-lake-id=\"e2e19f3807b1a26de6bfd8d5d8f8346a_p_159\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"spE79\" data-language=\"bash\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"CodeMirror-sizer\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 临时存放，临时存放区是一个栈的结构，支持多次临时存放，遵循后入先出的原则</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> stash\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"># 重新放回到工作区</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-builtin\" style=\"color: rgb(111, 66, 193); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">git</span> stash pop</span></span></pre></div></div></div><p data-lake-id=\"b0d1fb541c750b95e1b76e1c686fea12_p_160\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"2e307a62\" data-lake-id=\"e0cc256d99fe5454a4f76dbdf994e010_h2_5\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">附录</h2><p data-lake-id=\"651309cbfbecc7836ba00bb10131bced_p_161\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul data-lake-id=\"ee5a07fdb66cf26dbdd19bf4530d0e79_ul_1\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"21acfae8a9785fd52ba7e81f0b0c4816_li_4\"><p data-lake-id=\"b23b6f698191f27aeb4032ab70cd95c8_p_162\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/Gazler/githug\" target=\"_blank\">githug</a>, 一个专门为 git 学习路径设计的游戏</p></li></ul><ul data-lake-id=\"036405d8e0edb30b27e7428c8dc1b086_ul_2\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"5082a0684bf71fadb5d9ce03978573d5_li_5\"><p data-lake-id=\"3f2b1a94a3aea9877ada13d36ad61185_p_163\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/stevemao/awesome-git-addons\" target=\"_blank\">awesome-git-addons</a>, git 命令行工具扩展的合集</p></li></ul><ul data-lake-id=\"0007dd3b44ad881c12ce810edd9c82e7_ul_3\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"c5aab03c5090b015457350523e52b44d_li_6\"><p data-lake-id=\"8e0059eb2388d143c5d22a6c72355980_p_164\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/git-tips/tips\" target=\"_blank\">git-tips</a>, 常用使用场景和技巧集合</p></li></ul><ul data-lake-id=\"31867c3057aa2e9544b04ac6b84ed637_ul_4\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"1b9b5ea92be95a6c2a289e4f072438d3_li_7\"><p data-lake-id=\"192c1599645b4878d6e79226c700ed1f_p_165\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/jesseduffield/lazygit\" target=\"_blank\">lazygit</a>, 懒人专用的 git 命令行程序</p></li></ul><p data-lake-id=\"a964985d3a0719f64ee67db676d49377_p_166\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h2 id=\"d64d6855\" data-lake-id=\"4fb492779b7cee62bfd1d12e82b60a48_h2_6\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\">其他用途</h2><p data-lake-id=\"fff1d53cf87be1ed0758fa6eab740c40_p_167\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"2d3ad16e\" data-lake-id=\"f897fb5e5f59741fd66743159f05e6a3_h3_16\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">issue 评论</h3><p data-lake-id=\"f1c8ecc8b9af30fe449b5f1cb67a7baf_p_168\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul data-lake-id=\"4dc0ab1b90b4dc03bc35a0d0fa298b1f_ul_5\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"b4bc163c09166425051c9b7d8b2b3230_li_8\"><p data-lake-id=\"a509ba2d38884bb156fc970b047d49ef_p_169\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/imsun/gitment\" target=\"_blank\">gitment</a>, github issue 社会化评论插件</p></li></ul><ul data-lake-id=\"959451bbb3e53a071bf43c1270c85c36_ul_6\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li data-lake-id=\"287a946f2c773d8c13be883570fde472_li_9\"><p data-lake-id=\"33a8f1948a5be9a67bc26139c15c0022_p_170\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\">gittalk</a>, github issue 社会化评论插件，感觉稍微好看一点点</p></li></ul><p data-lake-id=\"c82f591337f789ed81cef7d9c961abe3_p_171\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"7c99e1264b141371ec53052f1b9bd8a1_p_172\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p data-lake-id=\"78b96904bed30c073b2e45e0e72b5f12_p_173\" style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p data-lake-id=\"9ed3128bc0d64343c4c9b20798f0d21f_p_0\">tags: [git]</p><p data-lake-id=\"b6379efd4078eec94c8d8bc2efba3efe_p_1\">date: 2019-03-28</p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22O3mBA%22%7D\"></card><p data-lake-id=\"2b2b3e7dc122d1502f582c0c8b7958d8_p_2\"><br /></p><p data-lake-id=\"a3503574d17f33ade4448178351c02fa_p_3\">个人整理的一些常用的 Git 概念和命令集合，方便速查和快速解决某些场景下的问题，覆盖了日常开发和协同工作下的一部分场景，不只是命令行的介绍。欢迎关注<a href=\"https://www.yuque.com/yinzhi/blog/lfmcil\" target=\"_blank\">语雀原文</a>，持续更新！</p><p data-lake-id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\"><br /></p><h2 id=\"0b133c66\" data-lake-id=\"fc01b66098729952c08217daeb7e7977_h2_0\">精简入门</h2><p data-lake-id=\"7467903a77e4c43e92d4f196903d0bbe_p_5\"><br /></p><p data-lake-id=\"cfeedfba5ad314b0f460c27ecd3045e2_p_6\">1、克隆仓库</p><p data-lake-id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\"><br /></p><p data-lake-id=\"86a5f4c052823d2818150bf0c3d30019_p_8\">克隆仓库会下载仓库完整的文件、分支和历史记录。</p><p data-lake-id=\"eadc4ec477465f1f239730d987d394b1_p_9\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20clone%20%5B%3Coptions%3E%5D%20%5B--%5D%20%3Crepo%3E%20%5B%3Cdir%3E%5D%22%2C%22id%22%3A%229W1GY%22%7D\"></card><p data-lake-id=\"042da541aac17f869693ba89ebd10d8e_p_10\"><br /></p><p data-lake-id=\"3977176c2c6fdd6c6bad4edb7aab174c_p_11\">&lt;!-- more --&gt;</p><p data-lake-id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%85%8B%E9%9A%86%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BB%93%E5%BA%93%E5%88%B0%20.%2Fgit-learning%20%E7%9B%AE%E5%BD%95%E4%B8%8B%5Cngit%20clone%20git%40github.com%3Ax-cold%2Fgit-learning.git%5Cn%23%20%E5%8F%AA%E5%85%8B%E9%9A%86%20dev%20%E5%88%86%E6%94%AF%E5%88%B0%20.%2Fdev%20%E7%9B%AE%E5%BD%95%E4%B8%8B%5Cngit%20clone%20-b%20dev%20git%40github.com%3Ax-cold%2Fgit-learning.git%20dev%22%2C%22id%22%3A%22GfypA%22%7D\"></card><p data-lake-id=\"2369fafe89fae403079018df6f36b51b_p_13\"><br /></p><p data-lake-id=\"5a17770302edffe59d1ddd594875ec28_p_14\">2、将文件变更记录写入到本地的<span style=\"color: #333333;\"><span style=\"background-color: #FFFFFF;\">索引库</span></span></p><p data-lake-id=\"c53070088aadb43ef468f61fca8ca22a_p_15\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20add%20%5B%3Coptions%3E%5D%20%5B--%5D%20%3Cpathspec%3E...%22%2C%22id%22%3A%22bqdOX%22%7D\"></card><p data-lake-id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E6%B7%BB%E5%8A%A0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%5Cngit%20add%20.%5Cn%23%20%E6%B7%BB%E5%8A%A0%E9%83%A8%E5%88%86%E6%96%87%E4%BB%B6%5Cngit%20add%20src%2F%20app%2F%20index.js%22%2C%22id%22%3A%22TUvN9%22%7D\"></card><p data-lake-id=\"c5eaf555cee01ec836fc749258c6179d_p_17\"><br /></p><p data-lake-id=\"f05142fc336562bb62f95efe8798fdec_p_18\">3、提交变更到工作区</p><p data-lake-id=\"bac67e7fcdfb0acc75b3cf54e2dd1141_p_19\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20commit%20%5B%3Coptions%3E%5D%20%5B--%5D%20%3Cpathspec%3E...%22%2C%22id%22%3A%22m1LRP%22%7D\"></card><p data-lake-id=\"db841a6e995b001085603629a3ace379_p_20\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E6%9C%80%E6%99%AE%E9%80%9A%E7%9A%84%E6%8F%90%E4%BA%A4%5Cngit%20commit%20-m%20%5C%22feat%3A%20support%20canvas%5C%22%5Cn%23%20%E4%BF%AE%E6%94%B9%E5%BD%93%E5%89%8D%E7%9A%84%20commit%20message%5Cngit%20commit%20--amend%5Cn%23%20%E9%87%8D%E7%BD%AE%E5%BD%93%E5%89%8D%E7%9A%84%20commit%20author%20%E5%92%8C%20message%5Cngit%20commit%20--amend%20--reset-author%20%22%2C%22id%22%3A%22vByX9%22%7D\"></card><p data-lake-id=\"54d418504a63791b75a5f497078fa24a_p_21\"><br /></p><p data-lake-id=\"00a98ea94e8ed7c59652bf67fa37a9e9_p_22\">4、推送代码到远程仓库</p><p data-lake-id=\"4547a4b65fb57fca5301c6973643450c_p_23\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20push%20%5B%3Coptions%3E%5D%20%5B%3Crepository%3E%20%5B%3Crefspec%3E...%5D%5D%22%2C%22id%22%3A%223rRLe%22%7D\"></card><p data-lake-id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%20master%20%E5%88%86%E6%94%AF%5Cngit%20push%20origin%20master%5Cn%23%20%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%20dev%20%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E7%9A%84%20master%20%E5%88%86%E6%94%AF%5Cngit%20push%20origin%20master%3Adev%22%2C%22id%22%3A%22P6Yrw%22%7D\"></card><p data-lake-id=\"3afe72986fc83f6913935faccbcf69b2_p_25\"><br /></p><h2 id=\"af75a264\" data-lake-id=\"d2a5c595f7dca4a206396c7360e8579f_h2_1\">聊聊设计</h2><p data-lake-id=\"b57de0a6a045efefe71d109094be9ddc_p_26\"><br /></p><p data-lake-id=\"80cacdeabf55070274ec5a162824eece_p_27\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1553735304999-5c646d62-6d36-45d9-9ae1-ffdf4b5d6e67.png%22%2C%22originWidth%22%3A1024%2C%22originHeight%22%3A837%2C%22name%22%3A%22image.png%22%2C%22size%22%3A67634%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22margin%22%3A%7B%22top%22%3Afalse%2C%22bottom%22%3Afalse%7D%2C%22width%22%3A1024%2C%22height%22%3A837%7D\"></card></p><p data-lake-id=\"ae63fb760cf20bab17ded668e908f9d3_p_28\" style=\"text-align: center;\">图像来自维基百科</p><p data-lake-id=\"d8f02fc6e1d9d5e68b5ff128662a6b29_p_29\"><br /></p><p data-lake-id=\"535773e08f045555e6c332bbbb80fde2_p_30\"><span>Git 是一个分布式的版本控制工具，因此远程和本地可以视为两个独立的 Git 仓库。</span>上图是一张经典的 Git 中的数据流与存储级别的介绍<span>，</span>其中储存级别主要包含几部分：</p><p data-lake-id=\"e2e9b10bfede90e88bd47291199e0b55_p_31\"><br /></p><ul data-lake-id=\"abce4b28910a70b77001569472f18af7_ul_0\"><li data-lake-id=\"d75263098cf28af05daddaab27f5b5f2_li_0\">工作区 (Working Files)，指的是我们时刻在编辑的文件的目录，通常来说我们修改文件都是在工作区体现的</li><li data-lake-id=\"08cdf53a1997267dc49c5b7933add113_li_1\">暂存区（Stage），暂存将本地的修改，然后提交到本地仓库</li><li data-lake-id=\"66e730a75f2dfaea279bb85a90003871_li_2\">本地仓库（Local）</li><li data-lake-id=\"eebc549f6454ebae232725cbabb25958_li_3\">远程仓库（Remote）</li></ul><p data-lake-id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\"><br /></p><p data-lake-id=\"dadbb619705f4582673344d23dea1d09_p_33\">由此不难看出整体的数据流动，就是一条从：工作区 -&gt; 暂存区 -&gt; 本地仓库 -&gt; 远程仓库 的双向数据流通道。</p><p data-lake-id=\"39abba9494ef6da94608fbd0e487aa60_p_34\"><br /></p><h2 id=\"0dfbe902\" data-lake-id=\"eed30c2083d002ce01f17926da36bcbb_h2_2\">常用命令</h2><h3 id=\"04900ddb\" data-lake-id=\"497198b039a2cdbbe3a7b6e0a8d20136_h3_0\">git init</h3><p data-lake-id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\"><br /></p><p data-lake-id=\"25a422c7ff505e0ab46166fbe28b533d_p_36\">创建一个空白的 git 仓库</p><p data-lake-id=\"ab57135091a86c42cc63ec67ac068a45_p_37\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20init%22%2C%22id%22%3A%22dF24s%22%7D\"></card><p data-lake-id=\"82f45866a429f6224b2e92c65bfda254_p_38\"><br /></p><h3 id=\"73e58b95\" data-lake-id=\"98541dd7f58d36950993a626aa1eed52_h3_1\">git add</h3><p data-lake-id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20add%20%5B%3Coptions%3E%5D%20%5B--%5D%20%3Cpathspec%3E...%22%2C%22id%22%3A%22EMR0q%22%7D\"></card><p data-lake-id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\"><br /></p><h3 id=\"5f9e613a\" data-lake-id=\"dbb53fe2c92fab2d53ca1aa3049e555f_h3_2\">git commit</h3><p data-lake-id=\"d9d31f80b21bee6005ee4bb0be1d9a6b_p_41\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20commit%20%5B%3Coptions%3E%5D%20%5B--%5D%20%3Cpathspec%3E...%22%2C%22id%22%3A%223rTA7%22%7D\"></card><p data-lake-id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\"><br /></p><h3 id=\"da5508cb\" data-lake-id=\"196c484004a40c3b66fb7bc3cd386bde_h3_3\">git remote</h3><p data-lake-id=\"4930f2b57b08d977b4a7a79433f23490_p_43\"><br /></p><p data-lake-id=\"d658f725cfb158f42be8f548c342e384_p_44\">remote 指的是本地的 git 仓库关联的远程 git 仓库。</p><p data-lake-id=\"0e4b859961c17882302ca1144adad96d_p_45\"><br /></p><p data-lake-id=\"d5318dc63e7d0faa5fe2c8443c062d2f_p_46\">1、查看远程仓库信息</p><p data-lake-id=\"478231c71c811ff5f728eef1ada97581_p_47\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20remote%22%2C%22id%22%3A%225sARr%22%7D\"></card><p data-lake-id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\"><br /></p><p data-lake-id=\"1dcbde7ea266ac66338a8158e6ba3e1f_p_49\">2、看远程仓库详细信息</p><p data-lake-id=\"4108a5bc411c7547dc6876b612b07f81_p_50\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20remote%20-v%22%2C%22id%22%3A%22JPsWM%22%7D\"></card><p data-lake-id=\"d3ff43f9faa22377838e1e2c0834a861_p_51\"><br /></p><p data-lake-id=\"4ba62ab05319ed2c42144f5bf6422fb2_p_52\">3、删除远程仓库</p><p data-lake-id=\"0c6a7643ebb3931744a90899eb00ce0b_p_53\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20remote%20remove%20%3Cname%3E%22%2C%22id%22%3A%22oBnLI%22%7D\"></card><p data-lake-id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E7%A7%BB%E9%99%A4%E5%90%8D%E5%AD%97%E4%B8%BA%20origin%20%E7%9A%84%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%5Cngit%20remote%20remove%20origin%22%2C%22id%22%3A%22mBtnQ%22%7D\"></card><p data-lake-id=\"7188e3d4590c731c34019643bbb3ba96_p_55\"><br /></p><p data-lake-id=\"733c4107a1a54e99d80ec65afa1168d6_p_56\">4、添加远程仓库</p><p data-lake-id=\"67592880a847e874a0da3af4d564ef1f_p_57\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20remote%20add%20%5B-t%20%3Cbranch%3E%5D%20%5B-m%20%3Cmaster%3E%5D%20%5B-f%5D%20%5B--tags%20%7C%20--no-tags%5D%20%5B--mirror%3D%3Cfetch%7Cpush%3E%5D%20%3Cname%3E%20%3Curl%3E%22%2C%22id%22%3A%22N3Lg7%22%7D\"></card><p data-lake-id=\"e3c9bad72638009a374744280c63ecc6_p_58\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20remote%20origin%20git%40github.com%3Ax-cold%2Fgit-learning.git%22%2C%22id%22%3A%228YiQb%22%7D\"></card><p data-lake-id=\"1b325e2e939e9ae8679222558eaaceb6_p_59\"><br /></p><h3 id=\"57bbe662\" data-lake-id=\"930af256e5a71a9ead80ea32978fd18c_h3_4\">git branch</h3><p data-lake-id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\"><br /></p><p data-lake-id=\"d2ed6529fc9c95df33cdcaa71f2a9f27_p_61\">1、列出本地存在的分支</p><p data-lake-id=\"9b034733f43578c770243b15c945bc07_p_62\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%22%2C%22id%22%3A%22zjC0E%22%7D\"></card><p data-lake-id=\"87e34965e50e2c8e31ce44a85667e8dd_p_63\"><br /></p><p data-lake-id=\"d7994b4343d9fc631f6ef70e2c646e8e_p_64\">2、列出远程分支</p><p data-lake-id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20-r%22%2C%22id%22%3A%22mVhNp%22%7D\"></card><p data-lake-id=\"cf44cb59378505901ec625cdc88d7d91_p_66\"><br /></p><p data-lake-id=\"0e7ed0f821001ce3cbf47d45f2fc160d_p_67\">3、列出本地和远程分支</p><p data-lake-id=\"f67c084ec5a7dd840c4c56ee24cc368e_p_68\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20-a%22%2C%22id%22%3A%22POWoN%22%7D\"></card><p data-lake-id=\"956e0d4312e941b77cd57ec35c294aff_p_69\"><br /></p><p data-lake-id=\"a71f2fcf190defe5e404822bdd23d006_p_70\">4、创建本地分支</p><p data-lake-id=\"b7f5c253c3fb3956b40638fc0613cbf9_p_71\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20%5BbranchName%5D%20%20(remoteBranch)%22%2C%22id%22%3A%22MPlsk%22%7D\"></card><p data-lake-id=\"200b796b4b1f5a36aa12caae6b6fa3d8_p_72\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%9F%BA%E4%BA%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%20dev%20%E5%88%86%E6%94%AF%EF%BC%8C%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%9A%84%20feature%2Fcanvas%20%E5%88%86%E6%94%AF%5Cngit%20branch%20feature%2Fcanvas%20dev%22%2C%22id%22%3A%22zwdoZ%22%7D\"></card><p data-lake-id=\"7e9db6e1dddd1090f9cbf7742b89f0d6_p_73\"><br /></p><p data-lake-id=\"9db9b98bed544367d59fa6ca74f9381d_p_74\">5、分支重命名</p><p data-lake-id=\"cee026a6997be2fe2ca3b5d6e2ce2bf0_p_75\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20%5B%3Coptions%3E%5D%20(-m%20%7C%20-M)%20%5B%3Cold-branch%3E%5D%20%3Cnew-branch%3E%22%2C%22id%22%3A%22SCAy7%22%7D\"></card><p data-lake-id=\"391eee0f96cca26f6e7df243706d21bf_p_76\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E4%BF%AE%E6%94%B9%20feature%2Fcanvas%20%E5%88%86%E6%94%AF%E5%90%8D%E4%B8%BA%20feature%2Fcanvas2%5Cngit%20branch%20-M%20feature%2Fcanvas%20feature%2Fcanvas2%22%2C%22id%22%3A%22jVXwe%22%7D\"></card><p data-lake-id=\"9fc1a1e32cf7c324fef5888bc3009382_p_77\"><br /></p><p data-lake-id=\"ce3ef9d0eef22521a499a1252bf36783_p_78\">6、删除本地分支</p><p data-lake-id=\"f855fcce122120d1233c03106e601338_p_79\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20-d%20%7C%20-D%20%5BbranchName%5D%22%2C%22id%22%3A%22pBn9M%22%7D\"></card><p data-lake-id=\"cacc5e28cdefa24e262c83e0ab2a3ade_p_80\"><br /></p><p data-lake-id=\"e333c5912d5c42b0a3a56b7ca134c07b_p_81\">7、删除远程分支</p><p data-lake-id=\"ede07f6666baf1587414d7171c5dd877_p_82\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20%5B%3Coptions%3E%5D%20%5B-r%5D%20(-d%20%7C%20-D)%20%3Cbranch-name%3E.%22%2C%22id%22%3A%220Viv0%22%7D\"></card><p data-lake-id=\"187832c794b601f7094c1a9b20086a6b_p_83\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%88%A0%E9%99%A4%20feature%2Fcanvas2%20%E5%88%86%E6%94%AF%5Cngit%20branch%20-d%20feature%2Fcanvas2%22%2C%22id%22%3A%22muDT4%22%7D\"></card><p data-lake-id=\"470257ffbff08ad0eedbc557452f8c66_p_84\"><br /></p><p data-lake-id=\"22477ea4a7bab33a2ee9c7f37679d523_p_85\">8、设置默认上游及分支</p><p data-lake-id=\"c07d4a2054239914d4a014d7d64fcf23_p_86\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20--set-upstream%20%3ClocalBranch%3E%20%3Cremote%3E%2F%3CremoteBranch%3E%22%2C%22id%22%3A%22kbtLO%22%7D\"></card><p data-lake-id=\"bd67236b6b40e1ddeba66aa4c905c5af_p_87\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E4%BB%A5%E5%90%8E%E5%8F%AA%E9%9C%80%E8%A6%81%E5%9C%A8%20dev%20%E5%88%86%E6%94%AF%E6%89%A7%E8%A1%8C%20git%20push%20(%E6%97%A0%E9%9C%80%E9%A2%9D%E5%A4%96%E7%9A%84%E5%8F%82%E6%95%B0)%20%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%8F%90%E4%BA%A4%E5%88%B0%20origin%2Fdev%5Cngit%20branch%20--set-upstream%20dev%20origin%2Fdev%22%2C%22id%22%3A%226sxNn%22%7D\"></card><p data-lake-id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\"><br /></p><h3 id=\"386668d1\" data-lake-id=\"3656d6c33ad30c0dc766550a027c603f_h3_5\">git checkout</h3><p data-lake-id=\"ab51a4ad9cb9ee48199bb5c9fc6715a2_p_89\"><br /></p><p data-lake-id=\"ea4381cd2a5c397389b46222ff9442f9_p_90\">检出分支:</p><p data-lake-id=\"2585884a100de0fae153ff935c1040bf_p_91\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20checkout%20%5B%3Coptions%3E%5D%20%3Cbranch%3E%22%2C%22id%22%3A%22PU5L5%22%7D\"></card><p data-lake-id=\"f82a35c2fca60d6b3bdc5c1000201985_p_92\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%88%87%E6%8D%A2%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%B0%20dev%20%E5%88%86%E6%94%AF%5Cngit%20checkout%20dev%5Cn%23%20%E5%9F%BA%E4%BA%8E%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%9B%E5%BB%BA%20test%20%E5%88%86%E6%94%AF%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%B0%86%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2%E5%88%B0%20test%20%E5%88%86%E6%94%AF%5Cngit%20checkout%20-b%20test%22%2C%22id%22%3A%2221As1%22%7D\"></card><p data-lake-id=\"92499751fabe053dd037c1574d6f4fb2_p_93\"><br /></p><p data-lake-id=\"bd94fa12acead2cb6228f66868ef3f73_p_94\">除开用于分支切换，checkout 还可以用于恢复<strong>未添加到本地工作区，但是被修改过的文件。</strong></p><p data-lake-id=\"45f9c401f99c8bc813e223381c98f09b_p_95\"><strong><br /></strong></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%B0%86%20index.js%20%E6%81%A2%E5%A4%8D%E5%88%B0%E5%BD%93%E5%89%8D%20commit%20%E7%9A%84%E5%86%85%E5%AE%B9%5Cngit%20checkout%20index.js%22%2C%22id%22%3A%224hB2o%22%7D\"></card><p data-lake-id=\"cd1514dfedaab485e5767b166731e116_p_96\"><br /></p><h3 id=\"89b6da3d\" data-lake-id=\"a12e32ab022ecf76deede9c72264a2ff_h3_6\">git merge</h3><p data-lake-id=\"d6a51c95a901676ffc113c140e74f091_p_97\"><br /></p><p data-lake-id=\"a25f438f8dd04baf21b7d5e00cd7057c_p_98\">合并分支:</p><p data-lake-id=\"680207cd112f221e8bb2a2adf8b5ef15_p_99\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20merge%20%5B%3Coptions%3E%5D%20%5B%3Ccommit%3E...%5D%22%2C%22id%22%3A%222UXo6%22%7D\"></card><p data-lake-id=\"ec69cd8d8f73ee437722723e0adf1fa7_p_100\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%90%88%E5%B9%B6%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%20master%20%E5%88%86%E6%94%AF%E5%88%B0%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%5Cngit%20merge%20origin%2Fmaster%22%2C%22id%22%3A%22WWdgA%22%7D\"></card><p data-lake-id=\"01884230bc631815ce050c63d5156a8c_p_101\"><br /></p><h3 id=\"5c874c8c\" data-lake-id=\"ab40770755c09c0e00ac80e022b064e4_h3_7\">git rebase</h3><p data-lake-id=\"a2c2ab33193f15adcdff2e08f718d7c2_p_102\"><br /></p><p data-lake-id=\"74336c34260a8796a2e9edf065b284d4_p_103\">变基，是一种常用且有风险的操作，会改变提交历史，谨慎使用！</p><p data-lake-id=\"9bd2d97c6b7de4b9f89a01020f0acbdc_p_104\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20rebase%20%5Cnwhile(%E5%AD%98%E5%9C%A8%E5%86%B2%E7%AA%81)%20%7B%5Cn%20%20%20%20git%20status%5Cn%20%20%20%20%E6%89%BE%E5%88%B0%E5%BD%93%E5%89%8D%E5%86%B2%E7%AA%81%E6%96%87%E4%BB%B6%EF%BC%8C%E7%BC%96%E8%BE%91%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81%5Cn%20%20%20%20git%20add%20-u%5Cn%20%20%20%20git%20rebase%20--continue%5Cn%20%20%20%20if(%20git%20rebase%20--abort%20)%5Cn%20%20%20%20%20%20%20%20break%3B%20%5Cn%7D%22%2C%22id%22%3A%22nI5BG%22%7D\"></card><p data-lake-id=\"702e00ceee7e1a86732f5fe484305638_p_105\"><br /></p><h3 id=\"b8180c6e\" data-lake-id=\"5fc0f8e4c2aa96cd29681897ad2412f0_h3_8\">git cherry-pick</h3><p data-lake-id=\"32e4b810a1a3b020b0a0d082442d55f7_p_106\"><br /></p><p data-lake-id=\"174854b2afcf8d2723f1f28fb5f28357_p_107\">魔法级的命令，<span>cherry-pick 可以提取 N 个的提交记录，合入稳定版本的分支上。</span></p><p data-lake-id=\"c6ea08d82bf830d4344bc47c75959696_p_108\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20cherry-pick%20%5B%3Coptions%3E%5D%20%3Ccommit-ish%3E...%22%2C%22id%22%3A%22E7812%22%7D\"></card><p data-lake-id=\"db6a3a7f6005176b48ff149f30b21edd_p_109\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E6%8C%91%E9%80%89%20371c2%20%E5%8D%95%E4%B8%AA%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%EF%BC%8C%E5%90%88%E5%85%A5%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%5Cngit%20cherry-pick%20371c2%5Cn%23%20%E6%8C%91%E9%80%89%E5%87%BA%20371c2%20%E5%88%B0%20971209%20%E7%9A%84%E6%89%80%E6%9C%89%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%EF%BC%8C%E5%B9%B6%E5%90%88%E5%85%A5%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%5Cngit%20cherry-pick%20371c2%E2%80%A6971209%22%2C%22id%22%3A%220elxh%22%7D\"></card><p data-lake-id=\"e9ce31f642ab705821fd192984e0da5b_p_110\"><br /></p><h3 id=\"0380e71d\" data-lake-id=\"cc341f2c4a593c75442288823e812dda_h3_9\">git push</h3><p data-lake-id=\"7df9b20b6b924d2fc8c9e5079bc8d88d_p_111\"><br /></p><p data-lake-id=\"b1cdfcbea2f330fa8f2f9c2604f50e3d_p_112\">推送到远程仓库，同步本地仓库的提交历史到远程仓库</p><p data-lake-id=\"45e36abc53ce1dcd83cb64d5bdb2b960_p_113\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20push%20%5B%3Coptions%3E%5D%20%5B%3Crepository%3E%20%5B%3Crefspec%3E...%5D%5D%22%2C%22id%22%3A%22WI7cq%22%7D\"></card><p data-lake-id=\"22c0deb23b61b42a2425aabf1c1bdedf_p_114\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%20master%20%E5%88%86%E6%94%AF%5Cngit%20push%20origin%20master%5Cn%23%20%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%20dev%20%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E7%9A%84%20master%20%E5%88%86%E6%94%AF%5Cngit%20push%20origin%20master%3Adev%5Cn%23%20%E6%8F%90%E4%BA%A4%E5%8D%95%E4%B8%AA%20tag%5Cngit%20push%20origin%20publish%2F1.0.0%5Cn%23%20%E6%8F%90%E4%BA%A4%E6%89%80%E6%9C%89%20tag%5Cngit%20push%20origin%20--tags%22%2C%22id%22%3A%226b7JR%22%7D\"></card><p data-lake-id=\"bdad9f83e0239c83aaf356c272a6c0ea_p_115\"><br /></p><h3 id=\"6f808f5a\" data-lake-id=\"565a8987a16e860316942d32d74bd50c_h3_10\">git pull</h3><p data-lake-id=\"ed74be64a5e06e3ce79ba78b44b8adfe_p_116\"><br /></p><p data-lake-id=\"772040cdae550550ccee8614ce00ea7b_p_117\">拉取远程分支，同步远程仓库的提交历史到本地仓库</p><p data-lake-id=\"29c1f9f3d7ddd7828bcbdb5345f90158_p_118\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20pull%20%5B%3Coptions%3E%5D%20%5B%3Crepository%3E%20%5B%3Crefspec%3E...%5D%5D%22%2C%22id%22%3A%22UBEMd%22%7D\"></card><p data-lake-id=\"649530dfe6472825a73f37a542e2e465_p_119\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E9%80%9A%E5%B8%B8%E6%9D%A5%E8%AF%B4%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84%20pull%20%E8%A1%8C%E4%B8%BA%E7%AD%89%E5%90%8C%E4%BA%8E%20git%20fetch%20%2B%20git%20merge%5Cn%23%20%E4%B8%8B%E9%9D%A2%E8%BF%99%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%AD%89%E5%90%8C%E4%BA%8E%20git%20fetch%20origin%20master%20%26%26%20git%20merge%20origin%2Fmaster%5Cngit%20pull%20origin%20master%5Cn%5Cn%23%20%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%8F%98%E5%9F%BA%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B%E4%B8%8D%E5%AE%B9%E6%98%93%E5%8F%97%E5%88%B0%E5%BD%B1%E5%93%8D%5Cn%23%20%E4%B8%8B%E9%9D%A2%E8%BF%99%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%AD%89%E5%90%8C%E4%BA%8E%20git%20fetch%20origin%20master%20%26%26%20git%20rebase%20origin%2Fmaster%5Cngit%20pull%20--rebase%20origin%20master%22%2C%22id%22%3A%22iBu20%22%7D\"></card><p data-lake-id=\"a4740d4bfa04da5081d466fc1a05e14e_p_120\"><br /></p><h3 id=\"2968dbdd\" data-lake-id=\"44b36002483365bbd9c60e4c8cc66712_h3_11\">git tag</h3><p data-lake-id=\"d0c08438d746f74145c64c20ef564288_p_121\"><br /></p><p data-lake-id=\"ce117302a77f173a2df438ead1734f87_p_122\">1、创建 tag</p><p data-lake-id=\"229af124bfdb4f72f7476a537561ed01_p_123\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20tag%20-a%20v1.1.0%20-m%20%5C%22%5C%22%22%2C%22id%22%3A%22pPNvw%22%7D\"></card><p data-lake-id=\"22ec2a6212062c98aa0e4f653f5c3b04_p_124\"><br /></p><p data-lake-id=\"ff59bdd1c34b52c840cd005be913f078_p_125\">2、查看 tag</p><p data-lake-id=\"037180a84ec63c01b315559ed5a15c1d_p_126\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20tag%22%2C%22id%22%3A%22sESjB%22%7D\"></card><p data-lake-id=\"218526f010699898c9b5afe5bee78564_p_127\"><br /></p><p data-lake-id=\"db2a3e0f7d1db1ad22ed4a6d0f9b9dd3_p_128\">3、推送到远程</p><p data-lake-id=\"95d2789c2734df969b06fab66880adbb_p_129\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20push%20origin%20--tags%22%2C%22id%22%3A%22rqpmR%22%7D\"></card><p data-lake-id=\"d2111bc79f3924932d5ab50f8af2ecbc_p_130\"><br /></p><p data-lake-id=\"617bc70910e6d0ab07b30aee76684b5d_p_131\">4、删除本地 tag</p><p data-lake-id=\"2f49e0ddefda4b24fada2a6edd68033d_p_132\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20tag%20-d%20v1.0.0%22%2C%22id%22%3A%22SoaFj%22%7D\"></card><p data-lake-id=\"ec0f52fa0be53a0503a5f45678d7af64_p_133\"><br /></p><p data-lake-id=\"884e5f0c9213d7d0976fb2297db87c91_p_134\">5、删除远程 tag</p><p data-lake-id=\"f8654ab62d3ffca1147edabe4e605303_p_135\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20push%20origin%20%3Arefs%2Ftags%2Fv1.0.0%22%2C%22id%22%3A%22uQqBl%22%7D\"></card><p data-lake-id=\"1b28de05b104a11bb389f3b3c60b9570_p_136\"><br /></p><h2 id=\"d1595401\" data-lake-id=\"206b202e8065b74af86e15433911b0af_h2_3\">.git 仓库元数据</h2><p data-lake-id=\"f474938634c47815c9cafa361ce29c41_p_137\"><br /></p><p data-lake-id=\"f8fbe4a5e4107eef43677b2b15952584_p_138\">每一个 git 的代码仓库目录下，都会有一个 <code>.git</code> 的文件夹，其中包含的重要文件包含以下：</p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A10%2C%22cols%22%3A3%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22193%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22333%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22223%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%96%87%E4%BB%B6%2F%E6%96%87%E4%BB%B6%E5%A4%B9%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%90%AB%E4%B9%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Econfig*%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Edescription%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%8F%8F%E8%BF%B0%EF%BC%8C%E4%BB%85%E4%BE%9B%20Git%20Web%20%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3EHEAD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%BD%93%E5%89%8D%E8%A2%AB%E6%A3%80%E5%87%BA%E7%9A%84%E5%88%86%E6%94%AF%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Eindex%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%9A%82%E5%AD%98%E5%8C%BA%E4%BF%A1%E6%81%AF%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Ehooks%2F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%88%96%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E9%92%A9%E5%AD%90%E8%84%9A%E6%9C%AC%EF%BC%88hook%20scripts%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Einfo%2F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%85%A8%E5%B1%80%E6%80%A7%E6%8E%92%E9%99%A4%EF%BC%88global%20exclude%EF%BC%89%E6%96%87%E4%BB%B6%EF%BC%8C%E4%B8%8D%E5%B8%8C%E6%9C%9B%E8%A2%AB%E8%AE%B0%E5%BD%95%E5%9C%A8%20.gitignore%20%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%BF%BD%E7%95%A5%E6%A8%A1%E5%BC%8F%EF%BC%88ignored%20patterns%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Eobjects%2F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%86%85%E5%AE%B9%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Erefs%2F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%95%B0%E6%8D%AE%EF%BC%88%E5%88%86%E6%94%AF%EF%BC%89%E7%9A%84%E6%8F%90%E4%BA%A4%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8C%87%E9%92%88%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%22x7oD7%22%7D\"></card><p data-lake-id=\"a8e4ffc9b0db855a66f6153499a950d0_p_139\"><br /></p><h2 id=\"7c99e281\" data-lake-id=\"0c51af1ad1a9a8d33f665934a1fbb224_h2_4\">进阶技巧</h2><p data-lake-id=\"91cea5fb3ce029632e4cd2ba40ed2467_p_140\"><br /></p><h3 id=\"d653f1cb\" data-lake-id=\"3098081fbf6d90c801b6c976ea8b49dd_h3_12\">修改 commit 历史</h3><p data-lake-id=\"6a77d5641d799908d669ed274c8503e1_p_141\"><br /></p><p data-lake-id=\"190fc98d19d85aef99c454ad03ac8e49_p_142\">使用 git rebase 进行历史修改，假定修改最近 3 条历史，操作步骤如下：</p><p data-lake-id=\"ecbf2a7b370d7c1f11409dc2caadd396_p_143\"><br /></p><p data-lake-id=\"559eba1b9473b55c763fc5676d47d5a8_p_144\">1、`git rebase -i HEAD~3`</p><p data-lake-id=\"bdbce808fca59ee263677a643219090a_p_145\"><br /></p><p data-lake-id=\"8806ee660a9c4f05249c2c7e60ab7a57_p_146\">运行此命令会提供一个提交列表，如下所示，其中 commit 记录是时间逆序排列的；</p><p data-lake-id=\"7e0f4c425a469a407bb6094b1048bd2a_p_147\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22pick%20f7f3f6d%20changed%20my%20name%20a%20bit%5Cnpick%20310154e%20updated%20README%20formatting%20and%20added%20blame%5Cnpick%20a5f4a0d%20added%20cat-file%5Cnpick%20a5f412a0d%20added%20cat-file1%5Cn%5Cn%23%20Rebase%20710f0f8..a5f4a0d%20onto%20710f0f8%5Cn%23%5Cn%23%20Commands%3A%5Cn%23%20%20p%2C%20pick%20%3D%20use%20commit%5Cn%23%20%20e%2C%20edit%20%3D%20use%20commit%2C%20but%20stop%20for%20amending%5Cn%23%20%20s%2C%20squash%20%3D%20use%20commit%2C%20but%20meld%20into%20previous%20commit%5Cn%23%5Cn%23%20If%20you%20remove%20a%20line%20here%20THAT%20COMMIT%20WILL%20BE%20LOST.%5Cn%23%20However%2C%20if%20you%20remove%20everything%2C%20the%20rebase%20will%20be%20aborted.%5Cn%23%5Cn%5Cn%3A2%2C%204%20s%2Fpick%2Fs%2Fg%22%2C%22id%22%3A%22yknuM%22%7D\"></card><p data-lake-id=\"fd8dd5e29cc68951de3711296b3ec5da_p_148\"><br /></p><p data-lake-id=\"cffaae5359788e047feccc37cb4359cd_p_149\">2、编辑上述列表文件，在需要更改的 commit 前，将 <code>pick</code> 修改为 <code>edit</code> ，如果需要压缩，可设置为 <span style=\"color: #4F4F4F;\"><span style=\"background-color: #FFFFFF;\"><code>squash</code></span></span><span style=\"color: #4F4F4F;\"><span style=\"background-color: #FFFFFF;\"> </span></span>保存退出，进入到 rebase 流程；</p><p data-lake-id=\"66d65f3a5b8e94e695d6df7f3989a5f6_p_150\"><br /></p><p data-lake-id=\"e096a00a6b7efaf3c06bc6b6efb37c21_p_151\">3、通过 <code>git commit --amend --author</code> 对历史记录依次修改和持续进行 rebase；</p><p data-lake-id=\"f15456644c6b1005375e99dd194ebf41_p_152\"><br /></p><h3 id=\"b65fd098\" data-lake-id=\"c67b34dd9ae8649376f941cae5b566dd_h3_13\">添加指定文件</h3><p data-lake-id=\"d6aad01cce7555ee21c55669cd02505b_p_153\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20ls-files%20src%2F%20%7C%20grep%20'%5C%5C.css%24'%20%7C%20xargs%20git%20add%22%2C%22id%22%3A%22o89Wy%22%7D\"></card><p data-lake-id=\"ce225d72190bb5bc96c7675d82aeb159_p_154\"><br /></p><h3 id=\"160944bd\" data-lake-id=\"582ec3ac108b27951b3731998f182f9a_h3_14\">删除所有 commit 中的某些文件</h3><p data-lake-id=\"21145fbd4b460925834eb32e00b394d5_p_155\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%5Cngit%20filter-branch%20--force%20--index-filter%20'git%20rm%20--cached%20--ignore-unmatch%20-r%20build'%20--prune-empty%20--tag-name-filter%20cat%20--%20--all%5Cn%5Cn%23%20%E8%A7%A6%E5%8F%91%20GC%5Cngit%20reflog%20expire%20--expire%3Dnow%20--all%20%26%26%20git%20gc%20--prune%3Dnow%20--aggressive%22%2C%22id%22%3A%22c6y9V%22%7D\"></card><p data-lake-id=\"f055c5eaf69ffd994712ed724c58c065_p_156\"><br /></p><h3 id=\"5317a015\" data-lake-id=\"1da3614c9d179ba18eb357c0391c6f0e_h3_15\">git stash</h3><p data-lake-id=\"b68200708c960efa87d95f272f623cc5_p_157\"><br /></p><p data-lake-id=\"49ae5b4c45caa52fc4fde135ec6d078d_p_158\">使用 stash 可以将当工作区更改的临时存放起来，等一番 git 操作（比如 merge / rebase 等）之后，再将这部分更改重新放回工作区。</p><p data-lake-id=\"e2e19f3807b1a26de6bfd8d5d8f8346a_p_159\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E4%B8%B4%E6%97%B6%E5%AD%98%E6%94%BE%EF%BC%8C%E4%B8%B4%E6%97%B6%E5%AD%98%E6%94%BE%E5%8C%BA%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%88%E7%9A%84%E7%BB%93%E6%9E%84%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E6%AC%A1%E4%B8%B4%E6%97%B6%E5%AD%98%E6%94%BE%EF%BC%8C%E9%81%B5%E5%BE%AA%E5%90%8E%E5%85%A5%E5%85%88%E5%87%BA%E7%9A%84%E5%8E%9F%E5%88%99%5Cngit%20stash%5Cn%23%20%E9%87%8D%E6%96%B0%E6%94%BE%E5%9B%9E%E5%88%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%5Cngit%20stash%20pop%22%2C%22id%22%3A%22spE79%22%7D\"></card><p data-lake-id=\"b0d1fb541c750b95e1b76e1c686fea12_p_160\"><br /></p><h2 id=\"2e307a62\" data-lake-id=\"e0cc256d99fe5454a4f76dbdf994e010_h2_5\">附录</h2><p data-lake-id=\"651309cbfbecc7836ba00bb10131bced_p_161\"><br /></p><ul data-lake-id=\"ee5a07fdb66cf26dbdd19bf4530d0e79_ul_1\"><li data-lake-id=\"21acfae8a9785fd52ba7e81f0b0c4816_li_4\"><p data-lake-id=\"b23b6f698191f27aeb4032ab70cd95c8_p_162\"><a href=\"https://github.com/Gazler/githug\" target=\"_blank\">githug</a>, 一个专门为 git 学习路径设计的游戏</p></li></ul><ul data-lake-id=\"036405d8e0edb30b27e7428c8dc1b086_ul_2\"><li data-lake-id=\"5082a0684bf71fadb5d9ce03978573d5_li_5\"><p data-lake-id=\"3f2b1a94a3aea9877ada13d36ad61185_p_163\"><a href=\"https://github.com/stevemao/awesome-git-addons\" target=\"_blank\">awesome-git-addons</a>, git 命令行工具扩展的合集</p></li></ul><ul data-lake-id=\"0007dd3b44ad881c12ce810edd9c82e7_ul_3\"><li data-lake-id=\"c5aab03c5090b015457350523e52b44d_li_6\"><p data-lake-id=\"8e0059eb2388d143c5d22a6c72355980_p_164\"><a href=\"https://github.com/git-tips/tips\" target=\"_blank\">git-tips</a>, 常用使用场景和技巧集合</p></li></ul><ul data-lake-id=\"31867c3057aa2e9544b04ac6b84ed637_ul_4\"><li data-lake-id=\"1b9b5ea92be95a6c2a289e4f072438d3_li_7\"><p data-lake-id=\"192c1599645b4878d6e79226c700ed1f_p_165\"><a href=\"https://github.com/jesseduffield/lazygit\" target=\"_blank\">lazygit</a>, 懒人专用的 git 命令行程序</p></li></ul><p data-lake-id=\"a964985d3a0719f64ee67db676d49377_p_166\"><br /></p><h2 id=\"d64d6855\" data-lake-id=\"4fb492779b7cee62bfd1d12e82b60a48_h2_6\">其他用途</h2><p data-lake-id=\"fff1d53cf87be1ed0758fa6eab740c40_p_167\"><br /></p><h3 id=\"2d3ad16e\" data-lake-id=\"f897fb5e5f59741fd66743159f05e6a3_h3_16\">issue 评论</h3><p data-lake-id=\"f1c8ecc8b9af30fe449b5f1cb67a7baf_p_168\"><br /></p><ul data-lake-id=\"4dc0ab1b90b4dc03bc35a0d0fa298b1f_ul_5\"><li data-lake-id=\"b4bc163c09166425051c9b7d8b2b3230_li_8\"><p data-lake-id=\"a509ba2d38884bb156fc970b047d49ef_p_169\"><a href=\"https://github.com/imsun/gitment\" target=\"_blank\">gitment</a>, github issue 社会化评论插件</p></li></ul><ul data-lake-id=\"959451bbb3e53a071bf43c1270c85c36_ul_6\"><li data-lake-id=\"287a946f2c773d8c13be883570fde472_li_9\"><p data-lake-id=\"33a8f1948a5be9a67bc26139c15c0022_p_170\"><a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\">gittalk</a>, github issue 社会化评论插件，感觉稍微好看一点点</p></li></ul><p data-lake-id=\"c82f591337f789ed81cef7d9c961abe3_p_171\"><br /></p><p data-lake-id=\"7c99e1264b141371ec53052f1b9bd8a1_p_172\"><br /></p><p data-lake-id=\"78b96904bed30c073b2e45e0e72b5f12_p_173\"><br /></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p data-lake-id=\"9ed3128bc0d64343c4c9b20798f0d21f_p_0\">tags: [git]</p><p data-lake-id=\"b6379efd4078eec94c8d8bc2efba3efe_p_1\">date: 2019-03-28</p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22O3mBA%22%7D\"></card><p data-lake-id=\"2b2b3e7dc122d1502f582c0c8b7958d8_p_2\"><br /></p><p data-lake-id=\"a3503574d17f33ade4448178351c02fa_p_3\">个人整理的一些常用的 Git 概念和命令集合，方便速查和快速解决某些场景下的问题，覆盖了日常开发和协同工作下的一部分场景，不只是命令行的介绍。欢迎关注<a href=\"https://www.yuque.com/yinzhi/blog/lfmcil\" target=\"_blank\">语雀原文</a>，持续更新！</p><p data-lake-id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\"><br /></p><h2 id=\"0b133c66\" data-lake-id=\"fc01b66098729952c08217daeb7e7977_h2_0\">精简入门</h2><p data-lake-id=\"7467903a77e4c43e92d4f196903d0bbe_p_5\"><br /></p><p data-lake-id=\"cfeedfba5ad314b0f460c27ecd3045e2_p_6\">1、克隆仓库</p><p data-lake-id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\"><br /></p><p data-lake-id=\"86a5f4c052823d2818150bf0c3d30019_p_8\">克隆仓库会下载仓库完整的文件、分支和历史记录。</p><p data-lake-id=\"eadc4ec477465f1f239730d987d394b1_p_9\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20clone%20%5B%3Coptions%3E%5D%20%5B--%5D%20%3Crepo%3E%20%5B%3Cdir%3E%5D%22%2C%22id%22%3A%229W1GY%22%7D\"></card><p data-lake-id=\"042da541aac17f869693ba89ebd10d8e_p_10\"><br /></p><p data-lake-id=\"3977176c2c6fdd6c6bad4edb7aab174c_p_11\">&lt;!-- more --&gt;</p><p data-lake-id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%85%8B%E9%9A%86%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BB%93%E5%BA%93%E5%88%B0%20.%2Fgit-learning%20%E7%9B%AE%E5%BD%95%E4%B8%8B%5Cngit%20clone%20git%40github.com%3Ax-cold%2Fgit-learning.git%5Cn%23%20%E5%8F%AA%E5%85%8B%E9%9A%86%20dev%20%E5%88%86%E6%94%AF%E5%88%B0%20.%2Fdev%20%E7%9B%AE%E5%BD%95%E4%B8%8B%5Cngit%20clone%20-b%20dev%20git%40github.com%3Ax-cold%2Fgit-learning.git%20dev%22%2C%22id%22%3A%22GfypA%22%7D\"></card><p data-lake-id=\"2369fafe89fae403079018df6f36b51b_p_13\"><br /></p><p data-lake-id=\"5a17770302edffe59d1ddd594875ec28_p_14\">2、将文件变更记录写入到本地的<span style=\"color: #333333;\"><span style=\"background-color: #FFFFFF;\">索引库</span></span></p><p data-lake-id=\"c53070088aadb43ef468f61fca8ca22a_p_15\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20add%20%5B%3Coptions%3E%5D%20%5B--%5D%20%3Cpathspec%3E...%22%2C%22id%22%3A%22bqdOX%22%7D\"></card><p data-lake-id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E6%B7%BB%E5%8A%A0%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%5Cngit%20add%20.%5Cn%23%20%E6%B7%BB%E5%8A%A0%E9%83%A8%E5%88%86%E6%96%87%E4%BB%B6%5Cngit%20add%20src%2F%20app%2F%20index.js%22%2C%22id%22%3A%22TUvN9%22%7D\"></card><p data-lake-id=\"c5eaf555cee01ec836fc749258c6179d_p_17\"><br /></p><p data-lake-id=\"f05142fc336562bb62f95efe8798fdec_p_18\">3、提交变更到工作区</p><p data-lake-id=\"bac67e7fcdfb0acc75b3cf54e2dd1141_p_19\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20commit%20%5B%3Coptions%3E%5D%20%5B--%5D%20%3Cpathspec%3E...%22%2C%22id%22%3A%22m1LRP%22%7D\"></card><p data-lake-id=\"db841a6e995b001085603629a3ace379_p_20\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E6%9C%80%E6%99%AE%E9%80%9A%E7%9A%84%E6%8F%90%E4%BA%A4%5Cngit%20commit%20-m%20%5C%22feat%3A%20support%20canvas%5C%22%5Cn%23%20%E4%BF%AE%E6%94%B9%E5%BD%93%E5%89%8D%E7%9A%84%20commit%20message%5Cngit%20commit%20--amend%5Cn%23%20%E9%87%8D%E7%BD%AE%E5%BD%93%E5%89%8D%E7%9A%84%20commit%20author%20%E5%92%8C%20message%5Cngit%20commit%20--amend%20--reset-author%20%22%2C%22id%22%3A%22vByX9%22%7D\"></card><p data-lake-id=\"54d418504a63791b75a5f497078fa24a_p_21\"><br /></p><p data-lake-id=\"00a98ea94e8ed7c59652bf67fa37a9e9_p_22\">4、推送代码到远程仓库</p><p data-lake-id=\"4547a4b65fb57fca5301c6973643450c_p_23\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20push%20%5B%3Coptions%3E%5D%20%5B%3Crepository%3E%20%5B%3Crefspec%3E...%5D%5D%22%2C%22id%22%3A%223rRLe%22%7D\"></card><p data-lake-id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%20master%20%E5%88%86%E6%94%AF%5Cngit%20push%20origin%20master%5Cn%23%20%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%20dev%20%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E7%9A%84%20master%20%E5%88%86%E6%94%AF%5Cngit%20push%20origin%20master%3Adev%22%2C%22id%22%3A%22P6Yrw%22%7D\"></card><p data-lake-id=\"3afe72986fc83f6913935faccbcf69b2_p_25\"><br /></p><h2 id=\"af75a264\" data-lake-id=\"d2a5c595f7dca4a206396c7360e8579f_h2_1\">聊聊设计</h2><p data-lake-id=\"b57de0a6a045efefe71d109094be9ddc_p_26\"><br /></p><p data-lake-id=\"80cacdeabf55070274ec5a162824eece_p_27\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F103147%2F1553735304999-5c646d62-6d36-45d9-9ae1-ffdf4b5d6e67.png%22%2C%22originWidth%22%3A1024%2C%22originHeight%22%3A837%2C%22name%22%3A%22image.png%22%2C%22size%22%3A67634%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22margin%22%3A%7B%22top%22%3Afalse%2C%22bottom%22%3Afalse%7D%2C%22width%22%3A1024%2C%22height%22%3A837%7D\"></card></p><p data-lake-id=\"ae63fb760cf20bab17ded668e908f9d3_p_28\" style=\"text-align: center;\">图像来自维基百科</p><p data-lake-id=\"d8f02fc6e1d9d5e68b5ff128662a6b29_p_29\"><br /></p><p data-lake-id=\"535773e08f045555e6c332bbbb80fde2_p_30\"><span>Git 是一个分布式的版本控制工具，因此远程和本地可以视为两个独立的 Git 仓库。</span>上图是一张经典的 Git 中的数据流与存储级别的介绍<span>，</span>其中储存级别主要包含几部分：</p><p data-lake-id=\"e2e9b10bfede90e88bd47291199e0b55_p_31\"><br /></p><ul data-lake-id=\"abce4b28910a70b77001569472f18af7_ul_0\"><li data-lake-id=\"d75263098cf28af05daddaab27f5b5f2_li_0\">工作区 (Working Files)，指的是我们时刻在编辑的文件的目录，通常来说我们修改文件都是在工作区体现的</li><li data-lake-id=\"08cdf53a1997267dc49c5b7933add113_li_1\">暂存区（Stage），暂存将本地的修改，然后提交到本地仓库</li><li data-lake-id=\"66e730a75f2dfaea279bb85a90003871_li_2\">本地仓库（Local）</li><li data-lake-id=\"eebc549f6454ebae232725cbabb25958_li_3\">远程仓库（Remote）</li></ul><p data-lake-id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\"><br /></p><p data-lake-id=\"dadbb619705f4582673344d23dea1d09_p_33\">由此不难看出整体的数据流动，就是一条从：工作区 -&gt; 暂存区 -&gt; 本地仓库 -&gt; 远程仓库 的双向数据流通道。</p><p data-lake-id=\"39abba9494ef6da94608fbd0e487aa60_p_34\"><br /></p><h2 id=\"0dfbe902\" data-lake-id=\"eed30c2083d002ce01f17926da36bcbb_h2_2\">常用命令</h2><h3 id=\"04900ddb\" data-lake-id=\"497198b039a2cdbbe3a7b6e0a8d20136_h3_0\">git init</h3><p data-lake-id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\"><br /></p><p data-lake-id=\"25a422c7ff505e0ab46166fbe28b533d_p_36\">创建一个空白的 git 仓库</p><p data-lake-id=\"ab57135091a86c42cc63ec67ac068a45_p_37\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20init%22%2C%22id%22%3A%22dF24s%22%7D\"></card><p data-lake-id=\"82f45866a429f6224b2e92c65bfda254_p_38\"><br /></p><h3 id=\"73e58b95\" data-lake-id=\"98541dd7f58d36950993a626aa1eed52_h3_1\">git add</h3><p data-lake-id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20add%20%5B%3Coptions%3E%5D%20%5B--%5D%20%3Cpathspec%3E...%22%2C%22id%22%3A%22EMR0q%22%7D\"></card><p data-lake-id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\"><br /></p><h3 id=\"5f9e613a\" data-lake-id=\"dbb53fe2c92fab2d53ca1aa3049e555f_h3_2\">git commit</h3><p data-lake-id=\"d9d31f80b21bee6005ee4bb0be1d9a6b_p_41\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20commit%20%5B%3Coptions%3E%5D%20%5B--%5D%20%3Cpathspec%3E...%22%2C%22id%22%3A%223rTA7%22%7D\"></card><p data-lake-id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\"><br /></p><h3 id=\"da5508cb\" data-lake-id=\"196c484004a40c3b66fb7bc3cd386bde_h3_3\">git remote</h3><p data-lake-id=\"4930f2b57b08d977b4a7a79433f23490_p_43\"><br /></p><p data-lake-id=\"d658f725cfb158f42be8f548c342e384_p_44\">remote 指的是本地的 git 仓库关联的远程 git 仓库。</p><p data-lake-id=\"0e4b859961c17882302ca1144adad96d_p_45\"><br /></p><p data-lake-id=\"d5318dc63e7d0faa5fe2c8443c062d2f_p_46\">1、查看远程仓库信息</p><p data-lake-id=\"478231c71c811ff5f728eef1ada97581_p_47\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20remote%22%2C%22id%22%3A%225sARr%22%7D\"></card><p data-lake-id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\"><br /></p><p data-lake-id=\"1dcbde7ea266ac66338a8158e6ba3e1f_p_49\">2、看远程仓库详细信息</p><p data-lake-id=\"4108a5bc411c7547dc6876b612b07f81_p_50\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20remote%20-v%22%2C%22id%22%3A%22JPsWM%22%7D\"></card><p data-lake-id=\"d3ff43f9faa22377838e1e2c0834a861_p_51\"><br /></p><p data-lake-id=\"4ba62ab05319ed2c42144f5bf6422fb2_p_52\">3、删除远程仓库</p><p data-lake-id=\"0c6a7643ebb3931744a90899eb00ce0b_p_53\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20remote%20remove%20%3Cname%3E%22%2C%22id%22%3A%22oBnLI%22%7D\"></card><p data-lake-id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E7%A7%BB%E9%99%A4%E5%90%8D%E5%AD%97%E4%B8%BA%20origin%20%E7%9A%84%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%5Cngit%20remote%20remove%20origin%22%2C%22id%22%3A%22mBtnQ%22%7D\"></card><p data-lake-id=\"7188e3d4590c731c34019643bbb3ba96_p_55\"><br /></p><p data-lake-id=\"733c4107a1a54e99d80ec65afa1168d6_p_56\">4、添加远程仓库</p><p data-lake-id=\"67592880a847e874a0da3af4d564ef1f_p_57\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20remote%20add%20%5B-t%20%3Cbranch%3E%5D%20%5B-m%20%3Cmaster%3E%5D%20%5B-f%5D%20%5B--tags%20%7C%20--no-tags%5D%20%5B--mirror%3D%3Cfetch%7Cpush%3E%5D%20%3Cname%3E%20%3Curl%3E%22%2C%22id%22%3A%22N3Lg7%22%7D\"></card><p data-lake-id=\"e3c9bad72638009a374744280c63ecc6_p_58\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20remote%20origin%20git%40github.com%3Ax-cold%2Fgit-learning.git%22%2C%22id%22%3A%228YiQb%22%7D\"></card><p data-lake-id=\"1b325e2e939e9ae8679222558eaaceb6_p_59\"><br /></p><h3 id=\"57bbe662\" data-lake-id=\"930af256e5a71a9ead80ea32978fd18c_h3_4\">git branch</h3><p data-lake-id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\"><br /></p><p data-lake-id=\"d2ed6529fc9c95df33cdcaa71f2a9f27_p_61\">1、列出本地存在的分支</p><p data-lake-id=\"9b034733f43578c770243b15c945bc07_p_62\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%22%2C%22id%22%3A%22zjC0E%22%7D\"></card><p data-lake-id=\"87e34965e50e2c8e31ce44a85667e8dd_p_63\"><br /></p><p data-lake-id=\"d7994b4343d9fc631f6ef70e2c646e8e_p_64\">2、列出远程分支</p><p data-lake-id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20-r%22%2C%22id%22%3A%22mVhNp%22%7D\"></card><p data-lake-id=\"cf44cb59378505901ec625cdc88d7d91_p_66\"><br /></p><p data-lake-id=\"0e7ed0f821001ce3cbf47d45f2fc160d_p_67\">3、列出本地和远程分支</p><p data-lake-id=\"f67c084ec5a7dd840c4c56ee24cc368e_p_68\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20-a%22%2C%22id%22%3A%22POWoN%22%7D\"></card><p data-lake-id=\"956e0d4312e941b77cd57ec35c294aff_p_69\"><br /></p><p data-lake-id=\"a71f2fcf190defe5e404822bdd23d006_p_70\">4、创建本地分支</p><p data-lake-id=\"b7f5c253c3fb3956b40638fc0613cbf9_p_71\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20%5BbranchName%5D%20%20(remoteBranch)%22%2C%22id%22%3A%22MPlsk%22%7D\"></card><p data-lake-id=\"200b796b4b1f5a36aa12caae6b6fa3d8_p_72\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%9F%BA%E4%BA%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%20dev%20%E5%88%86%E6%94%AF%EF%BC%8C%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%9A%84%20feature%2Fcanvas%20%E5%88%86%E6%94%AF%5Cngit%20branch%20feature%2Fcanvas%20dev%22%2C%22id%22%3A%22zwdoZ%22%7D\"></card><p data-lake-id=\"7e9db6e1dddd1090f9cbf7742b89f0d6_p_73\"><br /></p><p data-lake-id=\"9db9b98bed544367d59fa6ca74f9381d_p_74\">5、分支重命名</p><p data-lake-id=\"cee026a6997be2fe2ca3b5d6e2ce2bf0_p_75\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20%5B%3Coptions%3E%5D%20(-m%20%7C%20-M)%20%5B%3Cold-branch%3E%5D%20%3Cnew-branch%3E%22%2C%22id%22%3A%22SCAy7%22%7D\"></card><p data-lake-id=\"391eee0f96cca26f6e7df243706d21bf_p_76\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E4%BF%AE%E6%94%B9%20feature%2Fcanvas%20%E5%88%86%E6%94%AF%E5%90%8D%E4%B8%BA%20feature%2Fcanvas2%5Cngit%20branch%20-M%20feature%2Fcanvas%20feature%2Fcanvas2%22%2C%22id%22%3A%22jVXwe%22%7D\"></card><p data-lake-id=\"9fc1a1e32cf7c324fef5888bc3009382_p_77\"><br /></p><p data-lake-id=\"ce3ef9d0eef22521a499a1252bf36783_p_78\">6、删除本地分支</p><p data-lake-id=\"f855fcce122120d1233c03106e601338_p_79\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20-d%20%7C%20-D%20%5BbranchName%5D%22%2C%22id%22%3A%22pBn9M%22%7D\"></card><p data-lake-id=\"cacc5e28cdefa24e262c83e0ab2a3ade_p_80\"><br /></p><p data-lake-id=\"e333c5912d5c42b0a3a56b7ca134c07b_p_81\">7、删除远程分支</p><p data-lake-id=\"ede07f6666baf1587414d7171c5dd877_p_82\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20%5B%3Coptions%3E%5D%20%5B-r%5D%20(-d%20%7C%20-D)%20%3Cbranch-name%3E.%22%2C%22id%22%3A%220Viv0%22%7D\"></card><p data-lake-id=\"187832c794b601f7094c1a9b20086a6b_p_83\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%88%A0%E9%99%A4%20feature%2Fcanvas2%20%E5%88%86%E6%94%AF%5Cngit%20branch%20-d%20feature%2Fcanvas2%22%2C%22id%22%3A%22muDT4%22%7D\"></card><p data-lake-id=\"470257ffbff08ad0eedbc557452f8c66_p_84\"><br /></p><p data-lake-id=\"22477ea4a7bab33a2ee9c7f37679d523_p_85\">8、设置默认上游及分支</p><p data-lake-id=\"c07d4a2054239914d4a014d7d64fcf23_p_86\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20branch%20--set-upstream%20%3ClocalBranch%3E%20%3Cremote%3E%2F%3CremoteBranch%3E%22%2C%22id%22%3A%22kbtLO%22%7D\"></card><p data-lake-id=\"bd67236b6b40e1ddeba66aa4c905c5af_p_87\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E4%BB%A5%E5%90%8E%E5%8F%AA%E9%9C%80%E8%A6%81%E5%9C%A8%20dev%20%E5%88%86%E6%94%AF%E6%89%A7%E8%A1%8C%20git%20push%20(%E6%97%A0%E9%9C%80%E9%A2%9D%E5%A4%96%E7%9A%84%E5%8F%82%E6%95%B0)%20%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%8F%90%E4%BA%A4%E5%88%B0%20origin%2Fdev%5Cngit%20branch%20--set-upstream%20dev%20origin%2Fdev%22%2C%22id%22%3A%226sxNn%22%7D\"></card><p data-lake-id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\"><br /></p><h3 id=\"386668d1\" data-lake-id=\"3656d6c33ad30c0dc766550a027c603f_h3_5\">git checkout</h3><p data-lake-id=\"ab51a4ad9cb9ee48199bb5c9fc6715a2_p_89\"><br /></p><p data-lake-id=\"ea4381cd2a5c397389b46222ff9442f9_p_90\">检出分支:</p><p data-lake-id=\"2585884a100de0fae153ff935c1040bf_p_91\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20checkout%20%5B%3Coptions%3E%5D%20%3Cbranch%3E%22%2C%22id%22%3A%22PU5L5%22%7D\"></card><p data-lake-id=\"f82a35c2fca60d6b3bdc5c1000201985_p_92\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%88%87%E6%8D%A2%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%B0%20dev%20%E5%88%86%E6%94%AF%5Cngit%20checkout%20dev%5Cn%23%20%E5%9F%BA%E4%BA%8E%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%9B%E5%BB%BA%20test%20%E5%88%86%E6%94%AF%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%B0%86%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2%E5%88%B0%20test%20%E5%88%86%E6%94%AF%5Cngit%20checkout%20-b%20test%22%2C%22id%22%3A%2221As1%22%7D\"></card><p data-lake-id=\"92499751fabe053dd037c1574d6f4fb2_p_93\"><br /></p><p data-lake-id=\"bd94fa12acead2cb6228f66868ef3f73_p_94\">除开用于分支切换，checkout 还可以用于恢复<strong>未添加到本地工作区，但是被修改过的文件。</strong></p><p data-lake-id=\"45f9c401f99c8bc813e223381c98f09b_p_95\"><strong><br /></strong></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%B0%86%20index.js%20%E6%81%A2%E5%A4%8D%E5%88%B0%E5%BD%93%E5%89%8D%20commit%20%E7%9A%84%E5%86%85%E5%AE%B9%5Cngit%20checkout%20index.js%22%2C%22id%22%3A%224hB2o%22%7D\"></card><p data-lake-id=\"cd1514dfedaab485e5767b166731e116_p_96\"><br /></p><h3 id=\"89b6da3d\" data-lake-id=\"a12e32ab022ecf76deede9c72264a2ff_h3_6\">git merge</h3><p data-lake-id=\"d6a51c95a901676ffc113c140e74f091_p_97\"><br /></p><p data-lake-id=\"a25f438f8dd04baf21b7d5e00cd7057c_p_98\">合并分支:</p><p data-lake-id=\"680207cd112f221e8bb2a2adf8b5ef15_p_99\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20merge%20%5B%3Coptions%3E%5D%20%5B%3Ccommit%3E...%5D%22%2C%22id%22%3A%222UXo6%22%7D\"></card><p data-lake-id=\"ec69cd8d8f73ee437722723e0adf1fa7_p_100\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%90%88%E5%B9%B6%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%20master%20%E5%88%86%E6%94%AF%E5%88%B0%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%5Cngit%20merge%20origin%2Fmaster%22%2C%22id%22%3A%22WWdgA%22%7D\"></card><p data-lake-id=\"01884230bc631815ce050c63d5156a8c_p_101\"><br /></p><h3 id=\"5c874c8c\" data-lake-id=\"ab40770755c09c0e00ac80e022b064e4_h3_7\">git rebase</h3><p data-lake-id=\"a2c2ab33193f15adcdff2e08f718d7c2_p_102\"><br /></p><p data-lake-id=\"74336c34260a8796a2e9edf065b284d4_p_103\">变基，是一种常用且有风险的操作，会改变提交历史，谨慎使用！</p><p data-lake-id=\"9bd2d97c6b7de4b9f89a01020f0acbdc_p_104\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20rebase%20%5Cnwhile(%E5%AD%98%E5%9C%A8%E5%86%B2%E7%AA%81)%20%7B%5Cn%20%20%20%20git%20status%5Cn%20%20%20%20%E6%89%BE%E5%88%B0%E5%BD%93%E5%89%8D%E5%86%B2%E7%AA%81%E6%96%87%E4%BB%B6%EF%BC%8C%E7%BC%96%E8%BE%91%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81%5Cn%20%20%20%20git%20add%20-u%5Cn%20%20%20%20git%20rebase%20--continue%5Cn%20%20%20%20if(%20git%20rebase%20--abort%20)%5Cn%20%20%20%20%20%20%20%20break%3B%20%5Cn%7D%22%2C%22id%22%3A%22nI5BG%22%7D\"></card><p data-lake-id=\"702e00ceee7e1a86732f5fe484305638_p_105\"><br /></p><h3 id=\"b8180c6e\" data-lake-id=\"5fc0f8e4c2aa96cd29681897ad2412f0_h3_8\">git cherry-pick</h3><p data-lake-id=\"32e4b810a1a3b020b0a0d082442d55f7_p_106\"><br /></p><p data-lake-id=\"174854b2afcf8d2723f1f28fb5f28357_p_107\">魔法级的命令，<span>cherry-pick 可以提取 N 个的提交记录，合入稳定版本的分支上。</span></p><p data-lake-id=\"c6ea08d82bf830d4344bc47c75959696_p_108\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20cherry-pick%20%5B%3Coptions%3E%5D%20%3Ccommit-ish%3E...%22%2C%22id%22%3A%22E7812%22%7D\"></card><p data-lake-id=\"db6a3a7f6005176b48ff149f30b21edd_p_109\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E6%8C%91%E9%80%89%20371c2%20%E5%8D%95%E4%B8%AA%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%EF%BC%8C%E5%90%88%E5%85%A5%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%5Cngit%20cherry-pick%20371c2%5Cn%23%20%E6%8C%91%E9%80%89%E5%87%BA%20371c2%20%E5%88%B0%20971209%20%E7%9A%84%E6%89%80%E6%9C%89%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%EF%BC%8C%E5%B9%B6%E5%90%88%E5%85%A5%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%5Cngit%20cherry-pick%20371c2%E2%80%A6971209%22%2C%22id%22%3A%220elxh%22%7D\"></card><p data-lake-id=\"e9ce31f642ab705821fd192984e0da5b_p_110\"><br /></p><h3 id=\"0380e71d\" data-lake-id=\"cc341f2c4a593c75442288823e812dda_h3_9\">git push</h3><p data-lake-id=\"7df9b20b6b924d2fc8c9e5079bc8d88d_p_111\"><br /></p><p data-lake-id=\"b1cdfcbea2f330fa8f2f9c2604f50e3d_p_112\">推送到远程仓库，同步本地仓库的提交历史到远程仓库</p><p data-lake-id=\"45e36abc53ce1dcd83cb64d5bdb2b960_p_113\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20push%20%5B%3Coptions%3E%5D%20%5B%3Crepository%3E%20%5B%3Crefspec%3E...%5D%5D%22%2C%22id%22%3A%22WI7cq%22%7D\"></card><p data-lake-id=\"22c0deb23b61b42a2425aabf1c1bdedf_p_114\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%20master%20%E5%88%86%E6%94%AF%5Cngit%20push%20origin%20master%5Cn%23%20%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%20dev%20%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E7%9A%84%20master%20%E5%88%86%E6%94%AF%5Cngit%20push%20origin%20master%3Adev%5Cn%23%20%E6%8F%90%E4%BA%A4%E5%8D%95%E4%B8%AA%20tag%5Cngit%20push%20origin%20publish%2F1.0.0%5Cn%23%20%E6%8F%90%E4%BA%A4%E6%89%80%E6%9C%89%20tag%5Cngit%20push%20origin%20--tags%22%2C%22id%22%3A%226b7JR%22%7D\"></card><p data-lake-id=\"bdad9f83e0239c83aaf356c272a6c0ea_p_115\"><br /></p><h3 id=\"6f808f5a\" data-lake-id=\"565a8987a16e860316942d32d74bd50c_h3_10\">git pull</h3><p data-lake-id=\"ed74be64a5e06e3ce79ba78b44b8adfe_p_116\"><br /></p><p data-lake-id=\"772040cdae550550ccee8614ce00ea7b_p_117\">拉取远程分支，同步远程仓库的提交历史到本地仓库</p><p data-lake-id=\"29c1f9f3d7ddd7828bcbdb5345f90158_p_118\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20pull%20%5B%3Coptions%3E%5D%20%5B%3Crepository%3E%20%5B%3Crefspec%3E...%5D%5D%22%2C%22id%22%3A%22UBEMd%22%7D\"></card><p data-lake-id=\"649530dfe6472825a73f37a542e2e465_p_119\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E9%80%9A%E5%B8%B8%E6%9D%A5%E8%AF%B4%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84%20pull%20%E8%A1%8C%E4%B8%BA%E7%AD%89%E5%90%8C%E4%BA%8E%20git%20fetch%20%2B%20git%20merge%5Cn%23%20%E4%B8%8B%E9%9D%A2%E8%BF%99%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%AD%89%E5%90%8C%E4%BA%8E%20git%20fetch%20origin%20master%20%26%26%20git%20merge%20origin%2Fmaster%5Cngit%20pull%20origin%20master%5Cn%5Cn%23%20%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%8F%98%E5%9F%BA%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B%E4%B8%8D%E5%AE%B9%E6%98%93%E5%8F%97%E5%88%B0%E5%BD%B1%E5%93%8D%5Cn%23%20%E4%B8%8B%E9%9D%A2%E8%BF%99%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%AD%89%E5%90%8C%E4%BA%8E%20git%20fetch%20origin%20master%20%26%26%20git%20rebase%20origin%2Fmaster%5Cngit%20pull%20--rebase%20origin%20master%22%2C%22id%22%3A%22iBu20%22%7D\"></card><p data-lake-id=\"a4740d4bfa04da5081d466fc1a05e14e_p_120\"><br /></p><h3 id=\"2968dbdd\" data-lake-id=\"44b36002483365bbd9c60e4c8cc66712_h3_11\">git tag</h3><p data-lake-id=\"d0c08438d746f74145c64c20ef564288_p_121\"><br /></p><p data-lake-id=\"ce117302a77f173a2df438ead1734f87_p_122\">1、创建 tag</p><p data-lake-id=\"229af124bfdb4f72f7476a537561ed01_p_123\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20tag%20-a%20v1.1.0%20-m%20%5C%22%5C%22%22%2C%22id%22%3A%22pPNvw%22%7D\"></card><p data-lake-id=\"22ec2a6212062c98aa0e4f653f5c3b04_p_124\"><br /></p><p data-lake-id=\"ff59bdd1c34b52c840cd005be913f078_p_125\">2、查看 tag</p><p data-lake-id=\"037180a84ec63c01b315559ed5a15c1d_p_126\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20tag%22%2C%22id%22%3A%22sESjB%22%7D\"></card><p data-lake-id=\"218526f010699898c9b5afe5bee78564_p_127\"><br /></p><p data-lake-id=\"db2a3e0f7d1db1ad22ed4a6d0f9b9dd3_p_128\">3、推送到远程</p><p data-lake-id=\"95d2789c2734df969b06fab66880adbb_p_129\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20push%20origin%20--tags%22%2C%22id%22%3A%22rqpmR%22%7D\"></card><p data-lake-id=\"d2111bc79f3924932d5ab50f8af2ecbc_p_130\"><br /></p><p data-lake-id=\"617bc70910e6d0ab07b30aee76684b5d_p_131\">4、删除本地 tag</p><p data-lake-id=\"2f49e0ddefda4b24fada2a6edd68033d_p_132\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20tag%20-d%20v1.0.0%22%2C%22id%22%3A%22SoaFj%22%7D\"></card><p data-lake-id=\"ec0f52fa0be53a0503a5f45678d7af64_p_133\"><br /></p><p data-lake-id=\"884e5f0c9213d7d0976fb2297db87c91_p_134\">5、删除远程 tag</p><p data-lake-id=\"f8654ab62d3ffca1147edabe4e605303_p_135\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20push%20origin%20%3Arefs%2Ftags%2Fv1.0.0%22%2C%22id%22%3A%22uQqBl%22%7D\"></card><p data-lake-id=\"1b28de05b104a11bb389f3b3c60b9570_p_136\"><br /></p><h2 id=\"d1595401\" data-lake-id=\"206b202e8065b74af86e15433911b0af_h2_3\">.git 仓库元数据</h2><p data-lake-id=\"f474938634c47815c9cafa361ce29c41_p_137\"><br /></p><p data-lake-id=\"f8fbe4a5e4107eef43677b2b15952584_p_138\">每一个 git 的代码仓库目录下，都会有一个 <code>.git</code> 的文件夹，其中包含的重要文件包含以下：</p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A10%2C%22cols%22%3A3%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22193%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22333%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22223%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%96%87%E4%BB%B6%2F%E6%96%87%E4%BB%B6%E5%A4%B9%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%90%AB%E4%B9%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Econfig*%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Edescription%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%8F%8F%E8%BF%B0%EF%BC%8C%E4%BB%85%E4%BE%9B%20Git%20Web%20%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3EHEAD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%BD%93%E5%89%8D%E8%A2%AB%E6%A3%80%E5%87%BA%E7%9A%84%E5%88%86%E6%94%AF%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Eindex%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%9A%82%E5%AD%98%E5%8C%BA%E4%BF%A1%E6%81%AF%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Ehooks%2F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%88%96%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E9%92%A9%E5%AD%90%E8%84%9A%E6%9C%AC%EF%BC%88hook%20scripts%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Einfo%2F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%85%A8%E5%B1%80%E6%80%A7%E6%8E%92%E9%99%A4%EF%BC%88global%20exclude%EF%BC%89%E6%96%87%E4%BB%B6%EF%BC%8C%E4%B8%8D%E5%B8%8C%E6%9C%9B%E8%A2%AB%E8%AE%B0%E5%BD%95%E5%9C%A8%20.gitignore%20%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%BF%BD%E7%95%A5%E6%A8%A1%E5%BC%8F%EF%BC%88ignored%20patterns%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Eobjects%2F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%86%85%E5%AE%B9%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3Erefs%2F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%95%B0%E6%8D%AE%EF%BC%88%E5%88%86%E6%94%AF%EF%BC%89%E7%9A%84%E6%8F%90%E4%BA%A4%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8C%87%E9%92%88%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%22x7oD7%22%7D\"></card><p data-lake-id=\"a8e4ffc9b0db855a66f6153499a950d0_p_139\"><br /></p><h2 id=\"7c99e281\" data-lake-id=\"0c51af1ad1a9a8d33f665934a1fbb224_h2_4\">进阶技巧</h2><p data-lake-id=\"91cea5fb3ce029632e4cd2ba40ed2467_p_140\"><br /></p><h3 id=\"d653f1cb\" data-lake-id=\"3098081fbf6d90c801b6c976ea8b49dd_h3_12\">修改 commit 历史</h3><p data-lake-id=\"6a77d5641d799908d669ed274c8503e1_p_141\"><br /></p><p data-lake-id=\"190fc98d19d85aef99c454ad03ac8e49_p_142\">使用 git rebase 进行历史修改，假定修改最近 3 条历史，操作步骤如下：</p><p data-lake-id=\"ecbf2a7b370d7c1f11409dc2caadd396_p_143\"><br /></p><p data-lake-id=\"559eba1b9473b55c763fc5676d47d5a8_p_144\">1、`git rebase -i HEAD~3`</p><p data-lake-id=\"bdbce808fca59ee263677a643219090a_p_145\"><br /></p><p data-lake-id=\"8806ee660a9c4f05249c2c7e60ab7a57_p_146\">运行此命令会提供一个提交列表，如下所示，其中 commit 记录是时间逆序排列的；</p><p data-lake-id=\"7e0f4c425a469a407bb6094b1048bd2a_p_147\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22pick%20f7f3f6d%20changed%20my%20name%20a%20bit%5Cnpick%20310154e%20updated%20README%20formatting%20and%20added%20blame%5Cnpick%20a5f4a0d%20added%20cat-file%5Cnpick%20a5f412a0d%20added%20cat-file1%5Cn%5Cn%23%20Rebase%20710f0f8..a5f4a0d%20onto%20710f0f8%5Cn%23%5Cn%23%20Commands%3A%5Cn%23%20%20p%2C%20pick%20%3D%20use%20commit%5Cn%23%20%20e%2C%20edit%20%3D%20use%20commit%2C%20but%20stop%20for%20amending%5Cn%23%20%20s%2C%20squash%20%3D%20use%20commit%2C%20but%20meld%20into%20previous%20commit%5Cn%23%5Cn%23%20If%20you%20remove%20a%20line%20here%20THAT%20COMMIT%20WILL%20BE%20LOST.%5Cn%23%20However%2C%20if%20you%20remove%20everything%2C%20the%20rebase%20will%20be%20aborted.%5Cn%23%5Cn%5Cn%3A2%2C%204%20s%2Fpick%2Fs%2Fg%22%2C%22id%22%3A%22yknuM%22%7D\"></card><p data-lake-id=\"fd8dd5e29cc68951de3711296b3ec5da_p_148\"><br /></p><p data-lake-id=\"cffaae5359788e047feccc37cb4359cd_p_149\">2、编辑上述列表文件，在需要更改的 commit 前，将 <code>pick</code> 修改为 <code>edit</code> ，如果需要压缩，可设置为 <span style=\"color: #4F4F4F;\"><span style=\"background-color: #FFFFFF;\"><code>squash</code></span></span><span style=\"color: #4F4F4F;\"><span style=\"background-color: #FFFFFF;\"> </span></span>保存退出，进入到 rebase 流程；</p><p data-lake-id=\"66d65f3a5b8e94e695d6df7f3989a5f6_p_150\"><br /></p><p data-lake-id=\"e096a00a6b7efaf3c06bc6b6efb37c21_p_151\">3、通过 <code>git commit --amend --author</code> 对历史记录依次修改和持续进行 rebase；</p><p data-lake-id=\"f15456644c6b1005375e99dd194ebf41_p_152\"><br /></p><h3 id=\"b65fd098\" data-lake-id=\"c67b34dd9ae8649376f941cae5b566dd_h3_13\">添加指定文件</h3><p data-lake-id=\"d6aad01cce7555ee21c55669cd02505b_p_153\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22git%20ls-files%20src%2F%20%7C%20grep%20'%5C%5C.css%24'%20%7C%20xargs%20git%20add%22%2C%22id%22%3A%22o89Wy%22%7D\"></card><p data-lake-id=\"ce225d72190bb5bc96c7675d82aeb159_p_154\"><br /></p><h3 id=\"160944bd\" data-lake-id=\"582ec3ac108b27951b3731998f182f9a_h3_14\">删除所有 commit 中的某些文件</h3><p data-lake-id=\"21145fbd4b460925834eb32e00b394d5_p_155\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%5Cngit%20filter-branch%20--force%20--index-filter%20'git%20rm%20--cached%20--ignore-unmatch%20-r%20build'%20--prune-empty%20--tag-name-filter%20cat%20--%20--all%5Cn%5Cn%23%20%E8%A7%A6%E5%8F%91%20GC%5Cngit%20reflog%20expire%20--expire%3Dnow%20--all%20%26%26%20git%20gc%20--prune%3Dnow%20--aggressive%22%2C%22id%22%3A%22c6y9V%22%7D\"></card><p data-lake-id=\"f055c5eaf69ffd994712ed724c58c065_p_156\"><br /></p><h3 id=\"5317a015\" data-lake-id=\"1da3614c9d179ba18eb357c0391c6f0e_h3_15\">git stash</h3><p data-lake-id=\"b68200708c960efa87d95f272f623cc5_p_157\"><br /></p><p data-lake-id=\"49ae5b4c45caa52fc4fde135ec6d078d_p_158\">使用 stash 可以将当工作区更改的临时存放起来，等一番 git 操作（比如 merge / rebase 等）之后，再将这部分更改重新放回工作区。</p><p data-lake-id=\"e2e19f3807b1a26de6bfd8d5d8f8346a_p_159\"><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%20%E4%B8%B4%E6%97%B6%E5%AD%98%E6%94%BE%EF%BC%8C%E4%B8%B4%E6%97%B6%E5%AD%98%E6%94%BE%E5%8C%BA%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%88%E7%9A%84%E7%BB%93%E6%9E%84%EF%BC%8C%E6%94%AF%E6%8C%81%E5%A4%9A%E6%AC%A1%E4%B8%B4%E6%97%B6%E5%AD%98%E6%94%BE%EF%BC%8C%E9%81%B5%E5%BE%AA%E5%90%8E%E5%85%A5%E5%85%88%E5%87%BA%E7%9A%84%E5%8E%9F%E5%88%99%5Cngit%20stash%5Cn%23%20%E9%87%8D%E6%96%B0%E6%94%BE%E5%9B%9E%E5%88%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%5Cngit%20stash%20pop%22%2C%22id%22%3A%22spE79%22%7D\"></card><p data-lake-id=\"b0d1fb541c750b95e1b76e1c686fea12_p_160\"><br /></p><h2 id=\"2e307a62\" data-lake-id=\"e0cc256d99fe5454a4f76dbdf994e010_h2_5\">附录</h2><p data-lake-id=\"651309cbfbecc7836ba00bb10131bced_p_161\"><br /></p><ul data-lake-id=\"ee5a07fdb66cf26dbdd19bf4530d0e79_ul_1\"><li data-lake-id=\"21acfae8a9785fd52ba7e81f0b0c4816_li_4\"><p data-lake-id=\"b23b6f698191f27aeb4032ab70cd95c8_p_162\"><a href=\"https://github.com/Gazler/githug\" target=\"_blank\">githug</a>, 一个专门为 git 学习路径设计的游戏</p></li></ul><ul data-lake-id=\"036405d8e0edb30b27e7428c8dc1b086_ul_2\"><li data-lake-id=\"5082a0684bf71fadb5d9ce03978573d5_li_5\"><p data-lake-id=\"3f2b1a94a3aea9877ada13d36ad61185_p_163\"><a href=\"https://github.com/stevemao/awesome-git-addons\" target=\"_blank\">awesome-git-addons</a>, git 命令行工具扩展的合集</p></li></ul><ul data-lake-id=\"0007dd3b44ad881c12ce810edd9c82e7_ul_3\"><li data-lake-id=\"c5aab03c5090b015457350523e52b44d_li_6\"><p data-lake-id=\"8e0059eb2388d143c5d22a6c72355980_p_164\"><a href=\"https://github.com/git-tips/tips\" target=\"_blank\">git-tips</a>, 常用使用场景和技巧集合</p></li></ul><ul data-lake-id=\"31867c3057aa2e9544b04ac6b84ed637_ul_4\"><li data-lake-id=\"1b9b5ea92be95a6c2a289e4f072438d3_li_7\"><p data-lake-id=\"192c1599645b4878d6e79226c700ed1f_p_165\"><a href=\"https://github.com/jesseduffield/lazygit\" target=\"_blank\">lazygit</a>, 懒人专用的 git 命令行程序</p></li></ul><p data-lake-id=\"a964985d3a0719f64ee67db676d49377_p_166\"><br /></p><h2 id=\"d64d6855\" data-lake-id=\"4fb492779b7cee62bfd1d12e82b60a48_h2_6\">其他用途</h2><p data-lake-id=\"fff1d53cf87be1ed0758fa6eab740c40_p_167\"><br /></p><h3 id=\"2d3ad16e\" data-lake-id=\"f897fb5e5f59741fd66743159f05e6a3_h3_16\">issue 评论</h3><p data-lake-id=\"f1c8ecc8b9af30fe449b5f1cb67a7baf_p_168\"><br /></p><ul data-lake-id=\"4dc0ab1b90b4dc03bc35a0d0fa298b1f_ul_5\"><li data-lake-id=\"b4bc163c09166425051c9b7d8b2b3230_li_8\"><p data-lake-id=\"a509ba2d38884bb156fc970b047d49ef_p_169\"><a href=\"https://github.com/imsun/gitment\" target=\"_blank\">gitment</a>, github issue 社会化评论插件</p></li></ul><ul data-lake-id=\"959451bbb3e53a071bf43c1270c85c36_ul_6\"><li data-lake-id=\"287a946f2c773d8c13be883570fde472_li_9\"><p data-lake-id=\"33a8f1948a5be9a67bc26139c15c0022_p_170\"><a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\">gittalk</a>, github issue 社会化评论插件，感觉稍微好看一点点</p></li></ul><p data-lake-id=\"c82f591337f789ed81cef7d9c961abe3_p_171\"><br /></p><p data-lake-id=\"7c99e1264b141371ec53052f1b9bd8a1_p_172\"><br /></p><p data-lake-id=\"78b96904bed30c073b2e45e0e72b5f12_p_173\"><br /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 1,
    "comments_count": 1,
    "content_updated_at": "2021-04-08T12:27:22.000Z",
    "deleted_at": null,
    "created_at": "2019-03-28T02:00:32.000Z",
    "updated_at": "2021-04-08T12:27:22.000Z",
    "published_at": "2021-04-08T12:27:22.000Z",
    "first_published_at": "2019-03-28T02:01:37.000Z",
    "word_count": 2144,
    "cover": "https://cdn.nlark.com/yuque/0/2019/png/103147/1553735304999-5c646d62-6d36-45d9-9ae1-ffdf4b5d6e67.png",
    "description": "tags: [git]date: 2019-03-28个人整理的一些常用的 Git 概念和命令集合，方便速查和快速解决某些场景下的问题，覆盖了日常开发和协同工作下的一部分场景，不只是命令行的介绍。欢迎关注语雀原文，持续更新！精简入门1、克隆仓库克隆仓库会下载仓库完整的文件、分支和历史记录。gi...",
    "custom_description": null,
    "hits": 861,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 783883,
    "slug": "doib49",
    "title": "如何用语雀写博客？",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 24,
      "content_updated_at": "2022-02-12T14:18:05.792Z",
      "updated_at": "2022-02-12T14:18:05.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 12,
        "public_books_count": 5,
        "followers_count": 94,
        "following_count": 31,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2022-02-12T09:08:14.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 12,
      "public_books_count": 5,
      "followers_count": 94,
      "following_count": 31,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2022-02-12T09:08:14.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"zv2lxl\"></a>\n## 前言\n\n过去我总是以用什么工具来写文档（文章）而纠结，直到遇见了[语雀](https://www.yuque.com/)协作平台。\n\n[yuque-blog](https://github.com/x-cold/yuque-blog) 是最近这几个周末用业余时间设计和实现的一个博客系统，核心目标是：“在语雀上（和你的小伙伴一起）编辑文章，在自己的网站上展示文章”。它基于语雀，实现了博客内容页面的自定义输出，支持同构直出、离线访问等特性；技术架构上，我选用了 beidou (基于 eggjs 的同构框架) 作为后端框架，前端框架采取了常见的 React 全家(半)桶。\n\n[yuque-hexo](https://github.com/x-cold/yuque-hexo) 是用于下载语雀的文章到 hexo 的文章目录下的一款命令行工具。\n\n<!-- more -->\n\n<a name=\"ghgwlq\"></a>\n## 调研阶段\n\n常见的博客平台根据其形态大致分为以下几类：\n\n- 无后台（静态部署）\n\n   - 静态页面 + 静态内容\n\n   - 静态页面 + 动态内容管理\n\n- 有后台\n\n\n一般来说，在服务器资源允许的条件下，有后台的博客系统（基于 PHP 的 WordPress，使用 Node.js 的 Ghost）是比较普遍的方案，通常情况都会提供一个内容管理的后台管理页面，让写者集中在写作本身，没有太多额外的（技术性）操作；下面可以在几方面稍微对比一下，不同方案下的优劣；\n\n| ​ | 完全静态 | 静态页面+第三方内容管理 | 完全动态 |\n| --- | --- | --- | --- |\n| 经典案例 | GIthub Pages（Hexo / Hugo） | Github Pages + Github Issue<br />Github Pages + Serverless | WordPress / Ghost / Calypso / Typecho |\n| 内容管理 | + | ++ | +++ |\n| 团队协作 | ++ | +++ | +++ |\n| 文章编辑 | + | ++ | +++ |\n| RSS 订阅 | +++ | +++ | +++ |\n| 可扩展性 | + | ++ | +++ |\n| 社会化生态 | +++ | +++ | +++ |\n| 首屏加载 | +++ | + | ++ |\n| 缓存加载 | ++ | +++ | ++ |\n| SEO | +++ | + | +++ |\n| 性能 | +++ | ++ | + |\n| 环境简易程度 | +++（静态文件服务器） | ++（静态文件服务器+第三方内容管理系统） | +（独立部署的 HTTP 服务） |\n\n<a name=\"c8rbcf\"></a>\n## 灵光乍现\n\n语雀是一款拥有非常优秀的编辑 / 阅读体验，支持团队协作的知识创作平台；TXD 团队博客包含前端、视觉、交互同学积累的精华文章，由于成员背景原因（设计写代码？？?），方案 1 和 方案 2 显然不是最佳的选择（设计师的学习成本和内容维护难易度），加上团队里面日常工作中使用语雀来编辑文档和知识仓库梳理，为了降低写作者的学习成本，以及提供良好的编辑体验，决定基于语雀去开发一套完全动态的博客系统。\n\n其中实现的主要的特性如下：\n\n- 优秀的文档编辑和管理体验（Powered by 语雀）\n\n- 极速输出博客页面\n\n- 可定制的博客主题\n\n- 支持服务端渲染\n\n- 支持 PWA 及离线访问\n\n- 便捷的运维体验，提供一键部署的 Docker 镜像\n\n\n<a name=\"ugu4uf\"></a>\n## 脑洞大开\n\n对于一些有专业背景的同学而言，Github Pages 是最好的博客载体，其要求我们能够提供一个可以输出静态页面的版本；考虑到大多数同学原有的一些基础建设，决定不再重复制作轮子，于是便基于 hexo 开始设计和思考，经过了一系列的预研工作（看源码、找参考……），最终一把梭开发了一个无侵入的命令行小工具 [yuque-hexo](https://github.com/x-cold/yuque-hexo)，只负责同步语雀的文章，下载到本地后生成对应的 hexo 的文章（markdown 文件），对原有的逻辑没有做任何的改造，纯粹的进行了功能扩展。\n\n<a name=\"yecgrz\"></a>\n## 总结\n\n言归正传，适合自己的才是最好的，体验一款好的产品，再到利用这个产品来扩展到一些相似的场景下，然后系统性的对该场景下的各种设计进行了调研分析和总结，从而达到提升体验和效率的目的。\n\n\n\n",
    "body_draft": "<a name=\"zv2lxl\"></a>\n## 前言\n\n过去我总是以用什么工具来写文档（文章）而纠结，直到遇见了[语雀](https://www.yuque.com/)协作平台。\n\n[yuque-blog](https://github.com/x-cold/yuque-blog) 是最近这几个周末用业余时间设计和实现的一个博客系统，核心目标是：“在语雀上（和你的小伙伴一起）编辑文章，在自己的网站上展示文章”。它基于语雀，实现了博客内容页面的自定义输出，支持同构直出、离线访问等特性；技术架构上，我选用了 beidou (基于 eggjs 的同构框架) 作为后端框架，前端框架采取了常见的 React 全家(半)桶。\n\n[yuque-hexo](https://github.com/x-cold/yuque-hexo) 是用于下载语雀的文章到 hexo 的文章目录下的一款命令行工具。\n\n<!-- more -->\n\n<a name=\"ghgwlq\"></a>\n## 调研阶段\n\n常见的博客平台根据其形态大致分为以下几类：\n\n- 无后台（静态部署）\n\n   - 静态页面 + 静态内容\n\n   - 静态页面 + 动态内容管理\n\n- 有后台\n\n\n一般来说，在服务器资源允许的条件下，有后台的博客系统（基于 PHP 的 WordPress，使用 Node.js 的 Ghost）是比较普遍的方案，通常情况都会提供一个内容管理的后台管理页面，让写者集中在写作本身，没有太多额外的（技术性）操作；下面可以在几方面稍微对比一下，不同方案下的优劣；\n\n| ​ | 完全静态 | 静态页面+第三方内容管理 | 完全动态 |\n| --- | --- | --- | --- |\n| 经典案例 | GIthub Pages（Hexo / Hugo） | Github Pages + Github Issue<br />Github Pages + Serverless | WordPress / Ghost / Calypso / Typecho |\n| 内容管理 | + | ++ | +++ |\n| 团队协作 | ++ | +++ | +++ |\n| 文章编辑 | + | ++ | +++ |\n| RSS 订阅 | +++ | +++ | +++ |\n| 可扩展性 | + | ++ | +++ |\n| 社会化生态 | +++ | +++ | +++ |\n| 首屏加载 | +++ | + | ++ |\n| 缓存加载 | ++ | +++ | ++ |\n| SEO | +++ | + | +++ |\n| 性能 | +++ | ++ | + |\n| 环境简易程度 | +++（静态文件服务器） | ++（静态文件服务器+第三方内容管理系统） | +（独立部署的 HTTP 服务） |\n\n<a name=\"c8rbcf\"></a>\n## 灵光乍现\n\n语雀是一款拥有非常优秀的编辑 / 阅读体验，支持团队协作的知识创作平台；TXD 团队博客包含前端、视觉、交互同学积累的精华文章，由于成员背景原因（设计写代码？？?），方案 1 和 方案 2 显然不是最佳的选择（设计师的学习成本和内容维护难易度），加上团队里面日常工作中使用语雀来编辑文档和知识仓库梳理，为了降低写作者的学习成本，以及提供良好的编辑体验，决定基于语雀去开发一套完全动态的博客系统。\n\n其中实现的主要的特性如下：\n\n- 优秀的文档编辑和管理体验（Powered by 语雀）\n\n- 极速输出博客页面\n\n- 可定制的博客主题\n\n- 支持服务端渲染\n\n- 支持 PWA 及离线访问\n\n- 便捷的运维体验，提供一键部署的 Docker 镜像\n\n\n<a name=\"ugu4uf\"></a>\n## 脑洞大开\n\n对于一些有专业背景的同学而言，Github Pages 是最好的博客载体，其要求我们能够提供一个可以输出静态页面的版本；考虑到大多数同学原有的一些基础建设，决定不再重复制作轮子，于是便基于 hexo 开始设计和思考，经过了一系列的预研工作（看源码、找参考……），最终一把梭开发了一个无侵入的命令行小工具 [yuque-hexo](https://github.com/x-cold/yuque-hexo)，只负责同步语雀的文章，下载到本地后生成对应的 hexo 的文章（markdown 文件），对原有的逻辑没有做任何的改造，纯粹的进行了功能扩展。\n\n<a name=\"yecgrz\"></a>\n## 总结\n\n言归正传，适合自己的才是最好的，体验一款好的产品，再到利用这个产品来扩展到一些相似的场景下，然后系统性的对该场景下的各种设计进行了调研分析和总结，从而达到提升体验和效率的目的。\n\n\n\n",
    "body_html": "<!doctype html><h2 id=\"zv2lxl\"><a href=\"#zv2lxl\"></a>前言</h2><p><br /></p><p>过去我总是以用什么工具来写文档（文章）而纠结，直到遇见了<a href=\"https://www.yuque.com/\" target=\"_blank\">语雀</a>协作平台。</p><p><br /></p><p><a href=\"https://github.com/x-cold/yuque-blog\" target=\"_blank\">yuque-blog</a> 是最近这几个周末用业余时间设计和实现的一个博客系统，核心目标是：“在语雀上（和你的小伙伴一起）编辑文章，在自己的网站上展示文章”。它基于语雀，实现了博客内容页面的自定义输出，支持同构直出、离线访问等特性；技术架构上，我选用了 beidou (基于 eggjs 的同构框架) 作为后端框架，前端框架采取了常见的 React 全家(半)桶。</p><p><br /></p><p><a href=\"https://github.com/x-cold/yuque-hexo\" target=\"_blank\">yuque-hexo</a> 是用于下载语雀的文章到 hexo 的文章目录下的一款命令行工具。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h2 id=\"ghgwlq\"><a href=\"#ghgwlq\"></a>调研阶段</h2><p><br /></p><p>常见的博客平台根据其形态大致分为以下几类：</p><p><br /></p><ul><li><p>无后台（静态部署）</p></li></ul><ul data-lake-indent=\"1\"><li><p>静态页面 + 静态内容</p></li></ul><ul data-lake-indent=\"1\"><li><p>静态页面 + 动态内容管理</p></li></ul><ul><li><p>有后台</p></li></ul><p><br /></p><p>一般来说，在服务器资源允许的条件下，有后台的博客系统（基于 PHP 的 WordPress，使用 Node.js 的 Ghost）是比较普遍的方案，通常情况都会提供一个内容管理的后台管理页面，让写者集中在写作本身，没有太多额外的（技术性）操作；下面可以在几方面稍微对比一下，不同方案下的优劣；</p><table class=\"lake-table\" style=\"width: 750px;\"><colgroup><col width=\"188\"></col><col width=\"188\"></col><col width=\"188\"></col><col width=\"188\"></col></colgroup><tbody><tr><td><p>​</p></td><td><p>完全静态</p></td><td><p>静态页面+第三方内容管理</p></td><td><p>完全动态</p></td></tr><tr><td><p>经典案例</p></td><td><p>GIthub Pages（Hexo / Hugo）</p></td><td><p>Github Pages + Github Issue</p><p>Github Pages + Serverless</p></td><td><p>WordPress / Ghost / Calypso / Typecho</p></td></tr><tr><td><p>内容管理</p></td><td><p>+</p></td><td><p>++</p></td><td><p>+++</p></td></tr><tr><td><p>团队协作</p></td><td><p>++</p></td><td><p>+++</p></td><td><p>+++</p></td></tr><tr><td><p>文章编辑</p></td><td><p>+</p></td><td><p>++</p></td><td><p>+++</p></td></tr><tr><td><p>RSS 订阅</p></td><td><p>+++</p></td><td><p>+++</p></td><td><p>+++</p></td></tr><tr><td><p>可扩展性</p></td><td><p>+</p></td><td><p>++</p></td><td><p>+++</p></td></tr><tr><td><p>社会化生态</p></td><td><p>+++</p></td><td><p>+++</p></td><td><p>+++</p></td></tr><tr><td><p>首屏加载</p></td><td><p>+++</p></td><td><p>+</p></td><td><p>++</p></td></tr><tr><td><p>缓存加载</p></td><td><p>++</p></td><td><p>+++</p></td><td><p>++</p></td></tr><tr><td><p>SEO</p></td><td><p>+++</p></td><td><p>+</p></td><td><p>+++</p></td></tr><tr><td><p>性能</p></td><td><p>+++</p></td><td><p>++</p></td><td><p>+</p></td></tr><tr><td><p>环境简易程度</p></td><td><p>+++（静态文件服务器）</p></td><td><p>++（静态文件服务器+第三方内容管理系统）</p></td><td><p>+（独立部署的 HTTP 服务）</p></td></tr></tbody></table><h2 id=\"c8rbcf\"><a href=\"#c8rbcf\"></a>灵光乍现</h2><p><br /></p><p>语雀是一款拥有非常优秀的编辑 / 阅读体验，支持团队协作的知识创作平台；TXD 团队博客包含前端、视觉、交互同学积累的精华文章，由于成员背景原因（设计写代码？？?），方案 1 和 方案 2 显然不是最佳的选择（设计师的学习成本和内容维护难易度），加上团队里面日常工作中使用语雀来编辑文档和知识仓库梳理，为了降低写作者的学习成本，以及提供良好的编辑体验，决定基于语雀去开发一套完全动态的博客系统。</p><p><br /></p><p>其中实现的主要的特性如下：</p><p><br /></p><ul><li><p>优秀的文档编辑和管理体验（Powered by 语雀）</p></li></ul><ul><li><p>极速输出博客页面</p></li></ul><ul><li><p>可定制的博客主题</p></li></ul><ul><li><p>支持服务端渲染</p></li></ul><ul><li><p>支持 PWA 及离线访问</p></li></ul><ul><li><p>便捷的运维体验，提供一键部署的 Docker 镜像</p></li></ul><p><br /></p><h2 id=\"ugu4uf\"><a href=\"#ugu4uf\"></a>脑洞大开</h2><p><br /></p><p>对于一些有专业背景的同学而言，Github Pages 是最好的博客载体，其要求我们能够提供一个可以输出静态页面的版本；考虑到大多数同学原有的一些基础建设，决定不再重复制作轮子，于是便基于 hexo 开始设计和思考，经过了一系列的预研工作（看源码、找参考……），最终一把梭开发了一个无侵入的命令行小工具 <a href=\"https://github.com/x-cold/yuque-hexo\" target=\"_blank\">yuque-hexo</a>，只负责同步语雀的文章，下载到本地后生成对应的 hexo 的文章（markdown 文件），对原有的逻辑没有做任何的改造，纯粹的进行了功能扩展。</p><p><br /></p><h2 id=\"yecgrz\"><a href=\"#yecgrz\"></a>总结</h2><p><br /></p><p>言归正传，适合自己的才是最好的，体验一款好的产品，再到利用这个产品来扩展到一些相似的场景下，然后系统性的对该场景下的各种设计进行了调研分析和总结，从而达到提升体验和效率的目的。</p><p><br /></p><p><br /></p><p><br /></p>",
    "body_lake": "<!doctype lake><h2 id=\"zv2lxl\"><a href=\"#zv2lxl\" id=\"前言\"></a>前言</h2><p><br /></p><p>过去我总是以用什么工具来写文档（文章）而纠结，直到遇见了<a href=\"https://www.yuque.com/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">语雀</a>协作平台。</p><p><br /></p><p><a href=\"https://github.com/x-cold/yuque-blog\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">yuque-blog</a> 是最近这几个周末用业余时间设计和实现的一个博客系统，核心目标是：“在语雀上（和你的小伙伴一起）编辑文章，在自己的网站上展示文章”。它基于语雀，实现了博客内容页面的自定义输出，支持同构直出、离线访问等特性；技术架构上，我选用了 beidou (基于 eggjs 的同构框架) 作为后端框架，前端框架采取了常见的 React 全家(半)桶。</p><p><br /></p><p><a href=\"https://github.com/x-cold/yuque-hexo\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">yuque-hexo</a> 是用于下载语雀的文章到 hexo 的文章目录下的一款命令行工具。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h2 id=\"ghgwlq\"><a href=\"#ghgwlq\" id=\"调研阶段\"></a>调研阶段</h2><p><br /></p><p>常见的博客平台根据其形态大致分为以下几类：</p><p><br /></p><ul><li><p>无后台（静态部署）</p></li></ul><ul data-lake-indent=\"1\"><li><p>静态页面 + 静态内容</p></li></ul><ul data-lake-indent=\"1\"><li><p>静态页面 + 动态内容管理</p></li></ul><ul><li><p>有后台</p></li></ul><p><br /></p><p>一般来说，在服务器资源允许的条件下，有后台的博客系统（基于 PHP 的 WordPress，使用 Node.js 的 Ghost）是比较普遍的方案，通常情况都会提供一个内容管理的后台管理页面，让写者集中在写作本身，没有太多额外的（技术性）操作；下面可以在几方面稍微对比一下，不同方案下的优劣；</p><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%22388f802a%22%2C%22rows%22%3A13%2C%22cols%22%3A4%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22188%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22188%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22188%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22188%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E2%80%8B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%AE%8C%E5%85%A8%E9%9D%99%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%2B%E7%AC%AC%E4%B8%89%E6%96%B9%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%AE%8C%E5%85%A8%E5%8A%A8%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3EGIthub%20Pages%EF%BC%88Hexo%20%2F%20Hugo%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3EGithub%20Pages%20%2B%20Github%20Issue%3C%2Fp%3E%3Cp%3EGithub%20Pages%20%2B%20Serverless%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3EWordPress%20%2F%20Ghost%20%2F%20Calypso%20%2F%20Typecho%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3ERSS%20%E8%AE%A2%E9%98%85%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E7%A4%BE%E4%BC%9A%E5%8C%96%E7%94%9F%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E7%BC%93%E5%AD%98%E5%8A%A0%E8%BD%BD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3ESEO%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E6%80%A7%E8%83%BD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E7%8E%AF%E5%A2%83%E7%AE%80%E6%98%93%E7%A8%8B%E5%BA%A6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%EF%BC%88%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%EF%BC%88%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%2B%E7%AC%AC%E4%B8%89%E6%96%B9%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%EF%BC%88%E7%8B%AC%E7%AB%8B%E9%83%A8%E7%BD%B2%E7%9A%84%20HTTP%20%E6%9C%8D%E5%8A%A1%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%7D\"></card><h2 id=\"c8rbcf\"><a href=\"#c8rbcf\" id=\"灵光乍现\"></a>灵光乍现</h2><p><br /></p><p>语雀是一款拥有非常优秀的编辑 / 阅读体验，支持团队协作的知识创作平台；TXD 团队博客包含前端、视觉、交互同学积累的精华文章，由于成员背景原因（设计写代码？？?），方案 1 和 方案 2 显然不是最佳的选择（设计师的学习成本和内容维护难易度），加上团队里面日常工作中使用语雀来编辑文档和知识仓库梳理，为了降低写作者的学习成本，以及提供良好的编辑体验，决定基于语雀去开发一套完全动态的博客系统。</p><p><br /></p><p>其中实现的主要的特性如下：</p><p><br /></p><ul><li><p>优秀的文档编辑和管理体验（Powered by 语雀）</p></li></ul><ul><li><p>极速输出博客页面</p></li></ul><ul><li><p>可定制的博客主题</p></li></ul><ul><li><p>支持服务端渲染</p></li></ul><ul><li><p>支持 PWA 及离线访问</p></li></ul><ul><li><p>便捷的运维体验，提供一键部署的 Docker 镜像</p></li></ul><p><br /></p><h2 id=\"ugu4uf\"><a href=\"#ugu4uf\" id=\"脑洞大开\"></a>脑洞大开</h2><p><br /></p><p>对于一些有专业背景的同学而言，Github Pages 是最好的博客载体，其要求我们能够提供一个可以输出静态页面的版本；考虑到大多数同学原有的一些基础建设，决定不再重复制作轮子，于是便基于 hexo 开始设计和思考，经过了一系列的预研工作（看源码、找参考……），最终一把梭开发了一个无侵入的命令行小工具 <a href=\"https://github.com/x-cold/yuque-hexo\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">yuque-hexo</a>，只负责同步语雀的文章，下载到本地后生成对应的 hexo 的文章（markdown 文件），对原有的逻辑没有做任何的改造，纯粹的进行了功能扩展。</p><p><br /></p><h2 id=\"yecgrz\"><a href=\"#yecgrz\" id=\"总结\"></a>总结</h2><p><br /></p><p>言归正传，适合自己的才是最好的，体验一款好的产品，再到利用这个产品来扩展到一些相似的场景下，然后系统性的对该场景下的各种设计进行了调研分析和总结，从而达到提升体验和效率的目的。</p><p><br /></p><p><br /></p><p><br /></p>",
    "body_draft_lake": "<!doctype lake><h2 id=\"zv2lxl\"><a href=\"#zv2lxl\" id=\"前言\"></a>前言</h2><p><br /></p><p>过去我总是以用什么工具来写文档（文章）而纠结，直到遇见了<a href=\"https://www.yuque.com/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">语雀</a>协作平台。</p><p><br /></p><p><a href=\"https://github.com/x-cold/yuque-blog\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">yuque-blog</a> 是最近这几个周末用业余时间设计和实现的一个博客系统，核心目标是：“在语雀上（和你的小伙伴一起）编辑文章，在自己的网站上展示文章”。它基于语雀，实现了博客内容页面的自定义输出，支持同构直出、离线访问等特性；技术架构上，我选用了 beidou (基于 eggjs 的同构框架) 作为后端框架，前端框架采取了常见的 React 全家(半)桶。</p><p><br /></p><p><a href=\"https://github.com/x-cold/yuque-hexo\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">yuque-hexo</a> 是用于下载语雀的文章到 hexo 的文章目录下的一款命令行工具。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h2 id=\"ghgwlq\"><a href=\"#ghgwlq\" id=\"调研阶段\"></a>调研阶段</h2><p><br /></p><p>常见的博客平台根据其形态大致分为以下几类：</p><p><br /></p><ul><li><p>无后台（静态部署）</p></li></ul><ul data-lake-indent=\"1\"><li><p>静态页面 + 静态内容</p></li></ul><ul data-lake-indent=\"1\"><li><p>静态页面 + 动态内容管理</p></li></ul><ul><li><p>有后台</p></li></ul><p><br /></p><p>一般来说，在服务器资源允许的条件下，有后台的博客系统（基于 PHP 的 WordPress，使用 Node.js 的 Ghost）是比较普遍的方案，通常情况都会提供一个内容管理的后台管理页面，让写者集中在写作本身，没有太多额外的（技术性）操作；下面可以在几方面稍微对比一下，不同方案下的优劣；</p><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%22388f802a%22%2C%22rows%22%3A13%2C%22cols%22%3A4%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22188%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22188%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22188%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22188%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E2%80%8B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%AE%8C%E5%85%A8%E9%9D%99%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%2B%E7%AC%AC%E4%B8%89%E6%96%B9%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%AE%8C%E5%85%A8%E5%8A%A8%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3EGIthub%20Pages%EF%BC%88Hexo%20%2F%20Hugo%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3EGithub%20Pages%20%2B%20Github%20Issue%3C%2Fp%3E%3Cp%3EGithub%20Pages%20%2B%20Serverless%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3EWordPress%20%2F%20Ghost%20%2F%20Calypso%20%2F%20Typecho%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3ERSS%20%E8%AE%A2%E9%98%85%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E7%A4%BE%E4%BC%9A%E5%8C%96%E7%94%9F%E6%80%81%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E7%BC%93%E5%AD%98%E5%8A%A0%E8%BD%BD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3ESEO%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E6%80%A7%E8%83%BD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E7%8E%AF%E5%A2%83%E7%AE%80%E6%98%93%E7%A8%8B%E5%BA%A6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%2B%EF%BC%88%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%2B%EF%BC%88%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%2B%E7%AC%AC%E4%B8%89%E6%96%B9%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%2B%EF%BC%88%E7%8B%AC%E7%AB%8B%E9%83%A8%E7%BD%B2%E7%9A%84%20HTTP%20%E6%9C%8D%E5%8A%A1%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%7D\"></card><h2 id=\"c8rbcf\"><a href=\"#c8rbcf\" id=\"灵光乍现\"></a>灵光乍现</h2><p><br /></p><p>语雀是一款拥有非常优秀的编辑 / 阅读体验，支持团队协作的知识创作平台；TXD 团队博客包含前端、视觉、交互同学积累的精华文章，由于成员背景原因（设计写代码？？?），方案 1 和 方案 2 显然不是最佳的选择（设计师的学习成本和内容维护难易度），加上团队里面日常工作中使用语雀来编辑文档和知识仓库梳理，为了降低写作者的学习成本，以及提供良好的编辑体验，决定基于语雀去开发一套完全动态的博客系统。</p><p><br /></p><p>其中实现的主要的特性如下：</p><p><br /></p><ul><li><p>优秀的文档编辑和管理体验（Powered by 语雀）</p></li></ul><ul><li><p>极速输出博客页面</p></li></ul><ul><li><p>可定制的博客主题</p></li></ul><ul><li><p>支持服务端渲染</p></li></ul><ul><li><p>支持 PWA 及离线访问</p></li></ul><ul><li><p>便捷的运维体验，提供一键部署的 Docker 镜像</p></li></ul><p><br /></p><h2 id=\"ugu4uf\"><a href=\"#ugu4uf\" id=\"脑洞大开\"></a>脑洞大开</h2><p><br /></p><p>对于一些有专业背景的同学而言，Github Pages 是最好的博客载体，其要求我们能够提供一个可以输出静态页面的版本；考虑到大多数同学原有的一些基础建设，决定不再重复制作轮子，于是便基于 hexo 开始设计和思考，经过了一系列的预研工作（看源码、找参考……），最终一把梭开发了一个无侵入的命令行小工具 <a href=\"https://github.com/x-cold/yuque-hexo\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">yuque-hexo</a>，只负责同步语雀的文章，下载到本地后生成对应的 hexo 的文章（markdown 文件），对原有的逻辑没有做任何的改造，纯粹的进行了功能扩展。</p><p><br /></p><h2 id=\"yecgrz\"><a href=\"#yecgrz\" id=\"总结\"></a>总结</h2><p><br /></p><p>言归正传，适合自己的才是最好的，体验一款好的产品，再到利用这个产品来扩展到一些相似的场景下，然后系统性的对该场景下的各种设计进行了调研分析和总结，从而达到提升体验和效率的目的。</p><p><br /></p><p><br /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 27,
    "comments_count": 7,
    "content_updated_at": "2019-02-02T04:19:34.000Z",
    "deleted_at": null,
    "created_at": "2018-08-25T06:48:56.000Z",
    "updated_at": "2021-05-18T06:48:07.000Z",
    "published_at": "2019-02-02T04:19:34.000Z",
    "first_published_at": null,
    "word_count": 1018,
    "cover": null,
    "description": "前言过去我总是以用什么工具来写文档（文章）而纠结，直到遇见了语雀协作平台。yuque-blog 是最近这几个周末用业余时间设计和实现的一个博客系统，核心目标是：“在语雀上（和你的小伙伴一起）编辑文章，在自己的网站上展示文章”。它基于语雀，实现了博客内容页面的自定义输出，支持同构直出、离线访问等...",
    "custom_description": null,
    "hits": 1623,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 760043,
    "slug": "gdquyk",
    "title": "Javascript 模块化指北",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 24,
      "content_updated_at": "2022-02-12T14:18:05.792Z",
      "updated_at": "2022-02-12T14:18:05.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 12,
        "public_books_count": 5,
        "followers_count": 94,
        "following_count": 31,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2022-02-12T09:08:14.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 12,
      "public_books_count": 5,
      "followers_count": 94,
      "following_count": 31,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2022-02-12T09:08:14.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [javascript, 模块化]<br />date: 2018-08-10\n\n---\n\n<a name=\"k2g2vk\"></a>\n## 前言\n\n随着 Web 技术的蓬勃发展和依赖的基础设施日益完善，前端领域逐渐从浏览器扩展至服务端（Node.js），桌面端（PC、Android、iOS），乃至于物联网设备（IoT），其中 JavaScript 承载着这些应用程序的核心部分，随着其规模化和复杂度的成倍增长，其软件工程体系也随之建立起来（协同开发、单元测试、需求和缺陷管理等），模块化编程的需求日益迫切；\n\nJavaScript 对模块化编程的支持尚未形成规范，难以堪此重任；一时间，江湖侠士挺身而出，一路披荆斩棘，从刀耕火种过渡到面向未来的模块化方案；\n\n更多关于我的文章和项目，欢迎关注 [@x-cold](https://github.com/x-cold)\n\n<!-- more -->\n\n<a name=\"b59c9e0f\"></a>\n## 概念\n\n模块化编程就是通过组合一些**相对独立可复用的模块**来进行功能的实现，其最核心的两部分是**定义模块**和**引入模块**；\n\n- 定义模块时，每个模块内部的执行逻辑是不被外部感知的，只是导出（暴露）出部分方法和数据；\n- 引入模块时，同步 / 异步去加载待引入的代码，执行并获取到其暴露的方法和数据；\n\n<a name=\"a43e3fa9\"></a>\n## 刀耕火种\n\n尽管 JavaScript 语言层面并未提供模块化的解决方案，但利用其可**面向对象**的语言特性，外加**设计模式**加持，能够实现一些简单的模块化的架构；经典的一个案例是利用单例模式模式去实现模块化，可以对模块进行较好的封装，只暴露部分信息给需要使用模块的地方；\n\n```javascript\n// Define a module\nvar moduleA = (function ($, doc) {\n  var methodA = function() {};\n  var dataA = {};\n  return {\n    methodA: methodA,\n    dataA: dataA\n  };\n})(jQuery, document);\n// Use a module\nvar result = moduleA.mehodA();\n```\n\n直观来看，通过立即执行函数（IIFE）来声明依赖以及导出数据，这与当下的模块化方案并无巨大的差异，可本质上却有千差万别，无法满足的一些重要的特性；\n\n- 定义模块时，声明的依赖不是强制自动引入的，即在定义该模块之前，必须手动引入依赖的模块代码；\n- 定义模块时，其代码就已经完成执行过程，无法实现按需加载；\n- 跨文件使用模块时，需要将模块挂载到全局变量（window）上；\n\n<a name=\"04152650\"></a>\n## AMD & CMD 二分天下\n\n> 题外话：由于年代久远，这两种模块化方案逐渐淡出历史舞台，具体特性不再细聊；\n\n\n为了解决”刀耕火种”时代存留的需求，AMD 和 CMD 模块化规范问世，解决了在浏览器端的异步模块化编程的需求，**其最核心的原理是通过动态加载 script 和事件监听的方式来异步加载模块；**\n\nAMD 和 CMD 最具代表的两个作品分别对应 require.js 和 sea.js；其主要区别在于依赖声明和依赖加载的时机，其中 require.js 默认在声明时执行， sea.js 推崇懒加载和按需使用；另外值得一提的是，CMD 规范的写法和 CommonJS 极为相近，只需稍作修改，就能在 CommonJS 中使用。参考下面的 Case 更有助于理解；\n\n```javascript\n// AMD\ndefine(['./a','./b'], function (moduleA, moduleB) {\n  // 依赖前置\n  moduleA.mehodA();\n  console.log(moduleB.dataB);\n  // 导出数据\n  return {};\n});\n \n// CMD\ndefine(function (requie, exports, module) {\n  // 依赖就近\n  var moduleA = require('./a');\n  moduleA.mehodA();     \n  // 按需加载\n  if (needModuleB) {\n    var moduleB = requie('./b');\n    moduleB.methodB();\n  }\n  // 导出数据\n  exports = {};\n});\n```\n\n<a name=\"CommonJS\"></a>\n## CommonJS\n\n2009 年 ry 发布 Node.js 的第一个版本，CommonJS 作为其中最核心的特性之一，适用于服务端下的场景；历年来的考察和时间的洗礼，以及前端工程化对其的充分支持，CommonJS 被广泛运用于 Node.js 和浏览器；\n\n```javascript\n// Core Module\nconst cp = require('child_process');\n// Npm Module\nconst axios = require('axios');\n// Custom Module\nconst foo = require('./foo');\nmodule.exports = { axios };\nexports.foo = foo;\n```\n\n<a name=\"8ba16db9\"></a>\n### 规范\n\n- module (Object): 模块本身\n- exports (*): 模块的导出部分，即暴露出来的内容\n- require (Function): 加载模块的函数，获得目标模块的导出值（基础类型为复制，引用类型为浅拷贝），可以加载内置模块、npm 模块和自定义模块\n\n<a name=\"38164c8b\"></a>\n### 实现\n\n1、模块定义\n\n默认任意 .node .js .json 文件都是符合规范的模块；\n\n2、引入模块\n\n首先从缓存（require.cache）优先读取模块，如果未命中缓存，则进行路径分析，然后按照不同类型的模块处理：\n\n- 内置模块，直接从内存加载；\n- 外部模块，首先进行文件寻址定位，然后进行编译和执行，最终得到对应的导出值；\n\n其中在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装，结果如下：\n\n```javascript\n(function (exports, require, module, __filename, __dirname) {\n    var circle = require('./circle.js');\n    console.log('The area of a circle of radius 4 is ' + circle.area(4));\n});\n```\n\n<a name=\"8bd1ad55\"></a>\n### 特性总结\n\n- 同步执行模块声明和引入逻辑，分析一些复杂的依赖引用（如循环依赖）时需注意；\n- 缓存机制，性能更优，同时限制了内存占用；\n- Module 模块可供改造的灵活度高，可以实现一些定制需求（如热更新、任意文件类型模块支持）；\n\n<a name=\"8404e3ba\"></a>\n## ES Module（推荐使用）\n\nES Module 是语言层面的模块化方案，由 ES 2015 提出，其规范与 CommonJS 比之 ，导出的值都可以看成是一个具备多个属性或者方法的对象，可以实现互相兼容；但写法上 ES Module 更简洁，跟 Python 接近；\n\n```javascript\nimport fs from 'fs';\nimport color from 'color';\nimport service, { getArticles } from '../service'; \nexport default service;\nexport const getArticles = getArticles;\n```\n\n主要差异在于：\n\n- ES Module 会对静态代码分析，即在代码编译时进行模块的加载，在运行时之前就已经确定了依赖关系（可解决循环引用的问题）；\n- ES Module 关键字：`import` `export` 以及独有的 `default` 关键字，确定默认的导出值；\n- ES Module 中导出的值是一个 `只读的值的引用` ，无论基础类型和复杂类型，而在 CommonJS 中 require 的是值的拷贝，其中复杂类型是值的浅拷贝；\n\n```javascript\n// a.js\nexport let a = 1;\nexport function caculate() {\n  a++;\n};\n\n// b.js\nimport { a, caculate } from 'a.js';\n\nconsole.log(a); // 1\ncaculate();\nconsole.log(a); // 2\n\na = 2; // Syntax Error: \"a\" is read-only\n```\n\n<a name=\"UMD\"></a>\n## UMD\n\n通过一层自执行函数来兼容各种模块化规范的写法，兼容 AMD / CMD / CommonJS 等模块化规范，贴上代码胜过千言万语，需要特别注意的是 ES Module 由于会对静态代码进行分析，故这种运行时的方案无法使用，此时通过 CommonJS 进行兼容；\n\n```javascript\n(function (global, factory) {\n  if (typeof exports === 'object') {   \n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    this.eventUtil = factory();\n  }\n})(this, function (exports) {\n  // Define Module\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = 42;\n});\n```\n\n<a name=\"ebe15728\"></a>\n## 构建工具中的实现\n\n为了在浏览器环境中运行模块化的代码，需要借助一些模块化打包的工具进行打包（ 以 webpack 为例），定义了项目入口之后，会先快速地进行依赖的分析，然后将所有依赖的模块转换成浏览器兼容的对应模块化规范的实现；\n\n<a name=\"cc5efae8\"></a>\n### 模块化的基础\n\n从上面的介绍中，我们已经对其规范和实现有了一定的了解；在浏览器中，要实现 CommonJS 规范，只需要实现 module / exports / require / global 这几个属性，由于浏览器中是无法访问文件系统的，因此 require 过程中的文件定位需要改造为加载对应的 JS 片段（webpack 采用的方式为通过函数传参实现依赖的引入）。具体实现可以参考：[tiny-browser-require](https://github.com/ruanyf/tiny-browser-require)。\n\nwebpack 打包出来的代码快照如下，注意看注释中的时序；\n\n```javascript\n(function (modules) {\n  // The module cache\n  var installedModules = {};\n  // The require function\n  function __webpack_require__(moduleId) {}\n  return __webpack_require__(0); // ---> 0\n})\n({\n  0: function (module, exports, __webpack_require__) {\n    // Define module A\n    var moduleB = __webpack_require__(1); // ---> 1\n  },\n  1: function (module, exports, __webpack_require__) {\n    // Define module B\n    exports = {}; // ---> 2\n  }\n});\n```\n\n实际上，ES Module 的处理同 CommonJS 相差无几，只是在定义模块和引入模块时会去处理 __esModule 标识，从而兼容其在语法上的差异。\n\n<a name=\"92bb1c20\"></a>\n### 异步和扩展\n\n1、浏览器环境下，网络资源受到较大的限制，因此打包出来的文件如果体积巨大，对页面性能的损耗极大，因此需要对构建的目标文件进行拆分，同时模块也需要支持动态加载；\n\nwebpack 提供了两个方法 require.ensure() 和 import() （推荐使用）进行模块的动态加载，至于其中的原理，跟上面提及的 AMD & CMD 所见略同，import() 执行后返回一个 Promise 对象，其中所做的工作无非也是动态新增 script 标签，然后通过 onload / onerror 事件进一步处理。\n\n2、由于 require 函数是完全自定义的，我们可以在模块化中实现更多的特性，比如通过修改 require.resolve 或 Module._extensions 扩展支持的文件类型，使得 css / .jsx / .vue / 图片等文件也能为模块化所使用；\n\n<a name=\"e31a6f29\"></a>\n## 附录1：特性一览表\n| 模块化规范 | 加载方式 | 加载时机 | 运行环境 | 备注 |\n| --- | --- | --- | --- | --- |\n| AMD | 异步 | 运行时 | 浏览器 |  |\n| CMD | 异步 | 运行时 | 浏览器 | 依赖基于[静态分析](https://github.com/seajs/seajs/blob/1.0.0/src/fn-define.js#L72)，require 时已经 module ready |\n| CommonJS | 同步/异步 | 运行时 | 浏览器 / Node |  |\n| ES Module | 同步/异步 | 编译阶段 | 浏览器 / Node | 通过 import() 实现异步加载 |\n\n\n\n<a name=\"f8215f17\"></a>\n## 附录2：参考\n\n- AMD 模块化规范: [https://github.com/amdjs/amdjs-api/wiki/AMD](https://github.com/amdjs/amdjs-api/wiki/AMD)\n- CMD 模块定义规范：[https://github.com/seajs/seajs/issues/242](https://github.com/seajs/seajs/issues/242)\n- webpack 模块相关文档: [https://webpack.js.org/concepts/modules/](https://webpack.js.org/concepts/modules/)\n- 浏览器加载 CommonJS 模块的原理与实现：[http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html](http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html)\n\n",
    "body_draft": "tags: [javascript, 模块化]<br />date: 2018-08-10\n\n---\n\n<a name=\"k2g2vk\"></a>\n## 前言\n\n随着 Web 技术的蓬勃发展和依赖的基础设施日益完善，前端领域逐渐从浏览器扩展至服务端（Node.js），桌面端（PC、Android、iOS），乃至于物联网设备（IoT），其中 JavaScript 承载着这些应用程序的核心部分，随着其规模化和复杂度的成倍增长，其软件工程体系也随之建立起来（协同开发、单元测试、需求和缺陷管理等），模块化编程的需求日益迫切；\n\nJavaScript 对模块化编程的支持尚未形成规范，难以堪此重任；一时间，江湖侠士挺身而出，一路披荆斩棘，从刀耕火种过渡到面向未来的模块化方案；\n\n更多关于我的文章和项目，欢迎关注 [@x-cold](https://github.com/x-cold)\n\n<!-- more -->\n\n<a name=\"b59c9e0f\"></a>\n## 概念\n\n模块化编程就是通过组合一些**相对独立可复用的模块**来进行功能的实现，其最核心的两部分是**定义模块**和**引入模块**；\n\n- 定义模块时，每个模块内部的执行逻辑是不被外部感知的，只是导出（暴露）出部分方法和数据；\n- 引入模块时，同步 / 异步去加载待引入的代码，执行并获取到其暴露的方法和数据；\n\n<a name=\"a43e3fa9\"></a>\n## 刀耕火种\n\n尽管 JavaScript 语言层面并未提供模块化的解决方案，但利用其可**面向对象**的语言特性，外加**设计模式**加持，能够实现一些简单的模块化的架构；经典的一个案例是利用单例模式模式去实现模块化，可以对模块进行较好的封装，只暴露部分信息给需要使用模块的地方；\n\n```javascript\n// Define a module\nvar moduleA = (function ($, doc) {\n  var methodA = function() {};\n  var dataA = {};\n  return {\n    methodA: methodA,\n    dataA: dataA\n  };\n})(jQuery, document);\n// Use a module\nvar result = moduleA.mehodA();\n```\n\n直观来看，通过立即执行函数（IIFE）来声明依赖以及导出数据，这与当下的模块化方案并无巨大的差异，可本质上却有千差万别，无法满足的一些重要的特性；\n\n- 定义模块时，声明的依赖不是强制自动引入的，即在定义该模块之前，必须手动引入依赖的模块代码；\n- 定义模块时，其代码就已经完成执行过程，无法实现按需加载；\n- 跨文件使用模块时，需要将模块挂载到全局变量（window）上；\n\n<a name=\"04152650\"></a>\n## AMD & CMD 二分天下\n\n> 题外话：由于年代久远，这两种模块化方案逐渐淡出历史舞台，具体特性不再细聊；\n\n\n为了解决”刀耕火种”时代存留的需求，AMD 和 CMD 模块化规范问世，解决了在浏览器端的异步模块化编程的需求，**其最核心的原理是通过动态加载 script 和事件监听的方式来异步加载模块；**\n\nAMD 和 CMD 最具代表的两个作品分别对应 require.js 和 sea.js；其主要区别在于依赖声明和依赖加载的时机，其中 require.js 默认在声明时执行， sea.js 推崇懒加载和按需使用；另外值得一提的是，CMD 规范的写法和 CommonJS 极为相近，只需稍作修改，就能在 CommonJS 中使用。参考下面的 Case 更有助于理解；\n\n```javascript\n// AMD\ndefine(['./a','./b'], function (moduleA, moduleB) {\n  // 依赖前置\n  moduleA.mehodA();\n  console.log(moduleB.dataB);\n  // 导出数据\n  return {};\n});\n \n// CMD\ndefine(function (requie, exports, module) {\n  // 依赖就近\n  var moduleA = require('./a');\n  moduleA.mehodA();     \n  // 按需加载\n  if (needModuleB) {\n    var moduleB = requie('./b');\n    moduleB.methodB();\n  }\n  // 导出数据\n  exports = {};\n});\n```\n\n<a name=\"CommonJS\"></a>\n## CommonJS\n\n2009 年 ry 发布 Node.js 的第一个版本，CommonJS 作为其中最核心的特性之一，适用于服务端下的场景；历年来的考察和时间的洗礼，以及前端工程化对其的充分支持，CommonJS 被广泛运用于 Node.js 和浏览器；\n\n```javascript\n// Core Module\nconst cp = require('child_process');\n// Npm Module\nconst axios = require('axios');\n// Custom Module\nconst foo = require('./foo');\nmodule.exports = { axios };\nexports.foo = foo;\n```\n\n<a name=\"8ba16db9\"></a>\n### 规范\n\n- module (Object): 模块本身\n- exports (*): 模块的导出部分，即暴露出来的内容\n- require (Function): 加载模块的函数，获得目标模块的导出值（基础类型为复制，引用类型为浅拷贝），可以加载内置模块、npm 模块和自定义模块\n\n<a name=\"38164c8b\"></a>\n### 实现\n\n1、模块定义\n\n默认任意 .node .js .json 文件都是符合规范的模块；\n\n2、引入模块\n\n首先从缓存（require.cache）优先读取模块，如果未命中缓存，则进行路径分析，然后按照不同类型的模块处理：\n\n- 内置模块，直接从内存加载；\n- 外部模块，首先进行文件寻址定位，然后进行编译和执行，最终得到对应的导出值；\n\n其中在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装，结果如下：\n\n```javascript\n(function (exports, require, module, __filename, __dirname) {\n    var circle = require('./circle.js');\n    console.log('The area of a circle of radius 4 is ' + circle.area(4));\n});\n```\n\n<a name=\"8bd1ad55\"></a>\n### 特性总结\n\n- 同步执行模块声明和引入逻辑，分析一些复杂的依赖引用（如循环依赖）时需注意；\n- 缓存机制，性能更优，同时限制了内存占用；\n- Module 模块可供改造的灵活度高，可以实现一些定制需求（如热更新、任意文件类型模块支持）；\n\n<a name=\"8404e3ba\"></a>\n## ES Module（推荐使用）\n\nES Module 是语言层面的模块化方案，由 ES 2015 提出，其规范与 CommonJS 比之 ，导出的值都可以看成是一个具备多个属性或者方法的对象，可以实现互相兼容；但写法上 ES Module 更简洁，跟 Python 接近；\n\n```javascript\nimport fs from 'fs';\nimport color from 'color';\nimport service, { getArticles } from '../service'; \nexport default service;\nexport const getArticles = getArticles;\n```\n\n主要差异在于：\n\n- ES Module 会对静态代码分析，即在代码编译时进行模块的加载，在运行时之前就已经确定了依赖关系（可解决循环引用的问题）；\n- ES Module 关键字：`import` `export` 以及独有的 `default` 关键字，确定默认的导出值；\n- ES Module 中导出的值是一个 `只读的值的引用` ，无论基础类型和复杂类型，而在 CommonJS 中 require 的是值的拷贝，其中复杂类型是值的浅拷贝；\n\n```javascript\n// a.js\nexport let a = 1;\nexport function caculate() {\n  a++;\n};\n\n// b.js\nimport { a, caculate } from 'a.js';\n\nconsole.log(a); // 1\ncaculate();\nconsole.log(a); // 2\n\na = 2; // Syntax Error: \"a\" is read-only\n```\n\n<a name=\"UMD\"></a>\n## UMD\n\n通过一层自执行函数来兼容各种模块化规范的写法，兼容 AMD / CMD / CommonJS 等模块化规范，贴上代码胜过千言万语，需要特别注意的是 ES Module 由于会对静态代码进行分析，故这种运行时的方案无法使用，此时通过 CommonJS 进行兼容；\n\n```javascript\n(function (global, factory) {\n  if (typeof exports === 'object') {   \n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    this.eventUtil = factory();\n  }\n})(this, function (exports) {\n  // Define Module\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = 42;\n});\n```\n\n<a name=\"ebe15728\"></a>\n## 构建工具中的实现\n\n为了在浏览器环境中运行模块化的代码，需要借助一些模块化打包的工具进行打包（ 以 webpack 为例），定义了项目入口之后，会先快速地进行依赖的分析，然后将所有依赖的模块转换成浏览器兼容的对应模块化规范的实现；\n\n<a name=\"cc5efae8\"></a>\n### 模块化的基础\n\n从上面的介绍中，我们已经对其规范和实现有了一定的了解；在浏览器中，要实现 CommonJS 规范，只需要实现 module / exports / require / global 这几个属性，由于浏览器中是无法访问文件系统的，因此 require 过程中的文件定位需要改造为加载对应的 JS 片段（webpack 采用的方式为通过函数传参实现依赖的引入）。具体实现可以参考：[tiny-browser-require](https://github.com/ruanyf/tiny-browser-require)。\n\nwebpack 打包出来的代码快照如下，注意看注释中的时序；\n\n```javascript\n(function (modules) {\n  // The module cache\n  var installedModules = {};\n  // The require function\n  function __webpack_require__(moduleId) {}\n  return __webpack_require__(0); // ---> 0\n})\n({\n  0: function (module, exports, __webpack_require__) {\n    // Define module A\n    var moduleB = __webpack_require__(1); // ---> 1\n  },\n  1: function (module, exports, __webpack_require__) {\n    // Define module B\n    exports = {}; // ---> 2\n  }\n});\n```\n\n实际上，ES Module 的处理同 CommonJS 相差无几，只是在定义模块和引入模块时会去处理 __esModule 标识，从而兼容其在语法上的差异。\n\n<a name=\"92bb1c20\"></a>\n### 异步和扩展\n\n1、浏览器环境下，网络资源受到较大的限制，因此打包出来的文件如果体积巨大，对页面性能的损耗极大，因此需要对构建的目标文件进行拆分，同时模块也需要支持动态加载；\n\nwebpack 提供了两个方法 require.ensure() 和 import() （推荐使用）进行模块的动态加载，至于其中的原理，跟上面提及的 AMD & CMD 所见略同，import() 执行后返回一个 Promise 对象，其中所做的工作无非也是动态新增 script 标签，然后通过 onload / onerror 事件进一步处理。\n\n2、由于 require 函数是完全自定义的，我们可以在模块化中实现更多的特性，比如通过修改 require.resolve 或 Module._extensions 扩展支持的文件类型，使得 css / .jsx / .vue / 图片等文件也能为模块化所使用；\n\n<a name=\"e31a6f29\"></a>\n## 附录1：特性一览表\n| 模块化规范 | 加载方式 | 加载时机 | 运行环境 | 备注 |\n| --- | --- | --- | --- | --- |\n| AMD | 异步 | 运行时 | 浏览器 |  |\n| CMD | 异步 | 运行时 | 浏览器 | 依赖基于[静态分析](https://github.com/seajs/seajs/blob/1.0.0/src/fn-define.js#L72)，require 时已经 module ready |\n| CommonJS | 同步/异步 | 运行时 | 浏览器 / Node |  |\n| ES Module | 同步/异步 | 编译阶段 | 浏览器 / Node | 通过 import() 实现异步加载 |\n\n\n\n<a name=\"f8215f17\"></a>\n## 附录2：参考\n\n- AMD 模块化规范: [https://github.com/amdjs/amdjs-api/wiki/AMD](https://github.com/amdjs/amdjs-api/wiki/AMD)\n- CMD 模块定义规范：[https://github.com/seajs/seajs/issues/242](https://github.com/seajs/seajs/issues/242)\n- webpack 模块相关文档: [https://webpack.js.org/concepts/modules/](https://webpack.js.org/concepts/modules/)\n- 浏览器加载 CommonJS 模块的原理与实现：[http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html](http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html)\n\n",
    "body_html": "<!doctype html><div data-lake-element=\"root\" class=\"lake-engine lake-typography-traditional\" data-parser-by=\"lake2html\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">tags: [javascript, 模块化]</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">date: 2018-08-10</p><div data-card-type=\"block\" data-lake-card=\"hr\" data-card-value=\"data:%7B%22id%22%3A%2212XA3%22%7D\" id=\"12XA3\"><hr style=\"background-color: rgb(232, 232, 232); border: 1px solid transparent; margin: 18px 0px;\"></div><h2 id=\"k2g2vk\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><a href=\"#k2g2vk\"></a>前言</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">随着 Web 技术的蓬勃发展和依赖的基础设施日益完善，前端领域逐渐从浏览器扩展至服务端（Node.js），桌面端（PC、Android、iOS），乃至于物联网设备（IoT），其中 JavaScript 承载着这些应用程序的核心部分，随着其规模化和复杂度的成倍增长，其软件工程体系也随之建立起来（协同开发、单元测试、需求和缺陷管理等），模块化编程的需求日益迫切；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">JavaScript 对模块化编程的支持尚未形成规范，难以堪此重任；一时间，江湖侠士挺身而出，一路披荆斩棘，从刀耕火种过渡到面向未来的模块化方案；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">更多关于我的文章和项目，欢迎关注&nbsp;<a href=\"https://github.com/x-cold\" target=\"_blank\" rel=\"noopener noreferrer\">@x-cold</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">&lt;!-- more --&gt;</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"b59c9e0f\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#9qopit\" target=\"_blank\"></a>概念</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span>模块化编程就是通过组合一些<strong>相对独立可复用的模块</strong>来进行功能的实现，其最核心的两部分是<strong>定义模块</strong>和<strong>引入模块</strong>；</span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>定义模块时，每个模块内部的执行逻辑是不被外部感知的，只是导出（暴露）出部分方法和数据；</li><li>引入模块时，同步 / 异步去加载待引入的代码，执行并获取到其暴露的方法和数据；</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"a43e3fa9\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#01ifuf\" target=\"_blank\"></a>刀耕火种</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span>尽管 JavaScript 语言层面并未提供模块化的解决方案，但利用其可<strong>面向对象</strong>的语言特性，外加<strong>设计模式</strong>加持，能够实现一些简单的模块化的架构；经典的一个案例是利用单例模式模式去实现模块化，可以对模块进行较好的封装，只暴露部分信息给需要使用模块的地方；</span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" data-card-value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Define%20a%20module%5Cnvar%20moduleA%20%3D%20(function%20(%24%2C%20doc)%20%7B%5Cn%20%20var%20methodA%20%3D%20function()%20%7B%7D%3B%5Cn%20%20var%20dataA%20%3D%20%7B%7D%3B%5Cn%20%20return%20%7B%5Cn%20%20%20%20methodA%3A%20methodA%2C%5Cn%20%20%20%20dataA%3A%20dataA%5Cn%20%20%7D%3B%5Cn%7D)(jQuery%2C%20document)%3B%5Cn%2F%2F%20Use%20a%20module%5Cnvar%20result%20%3D%20moduleA.mehodA()%3B%22%2C%22id%22%3A%22TPpQN%22%7D\" id=\"TPpQN\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Define a module\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">var moduleA = (function ($, doc) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  var methodA = function() {};\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  var dataA = {};\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  return {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    methodA: methodA,\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    dataA: dataA\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  };\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">})(jQuery, document);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Use a module\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">var result = moduleA.mehodA();</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">直观来看，通过立即执行函数（IIFE）来声明依赖以及导出数据，这与当下的模块化方案并无巨大的差异，可本质上却有千差万别，无法满足的一些重要的特性；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>定义模块时，声明的依赖不是强制自动引入的，即在定义该模块之前，必须手动引入依赖的模块代码；</li><li>定义模块时，其代码就已经完成执行过程，无法实现按需加载；</li><li>跨文件使用模块时，需要将模块挂载到全局变量（window）上；</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"04152650\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#9pfbgf\" target=\"_blank\"></a>AMD &amp; CMD 二分天下</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">题外话：由于年代久远，这两种模块化方案逐渐淡出历史舞台，具体特性不再细聊；</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span>为了解决”刀耕火种”时代存留的需求，AMD 和 CMD 模块化规范问世，解决了在浏览器端的异步模块化编程的需求，<strong>其最核心的原理是通过动态加载 script 和事件监听的方式来异步加载模块；</strong></span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">AMD 和 CMD 最具代表的两个作品分别对应 require.js 和 sea.js；其主要区别在于依赖声明和依赖加载的时机，其中 require.js 默认在声明时执行， sea.js 推崇懒加载和按需使用；另外值得一提的是，CMD 规范的写法和 CommonJS 极为相近，只需稍作修改，就能在 CommonJS 中使用。参考下面的 Case 更有助于理解；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" data-card-value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20AMD%5Cndefine(%5B'.%2Fa'%2C'.%2Fb'%5D%2C%20function%20(moduleA%2C%20moduleB)%20%7B%5Cn%20%20%2F%2F%20%E4%BE%9D%E8%B5%96%E5%89%8D%E7%BD%AE%5Cn%20%20moduleA.mehodA()%3B%5Cn%20%20console.log(moduleB.dataB)%3B%5Cn%20%20%2F%2F%20%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%5Cn%20%20return%20%7B%7D%3B%5Cn%7D)%3B%5Cn%20%5Cn%2F%2F%20CMD%5Cndefine(function%20(requie%2C%20exports%2C%20module)%20%7B%5Cn%20%20%2F%2F%20%E4%BE%9D%E8%B5%96%E5%B0%B1%E8%BF%91%5Cn%20%20var%20moduleA%20%3D%20require('.%2Fa')%3B%5Cn%20%20moduleA.mehodA()%3B%20%20%20%20%20%5Cn%20%20%2F%2F%20%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD%5Cn%20%20if%20(needModuleB)%20%7B%5Cn%20%20%20%20var%20moduleB%20%3D%20requie('.%2Fb')%3B%5Cn%20%20%20%20moduleB.methodB()%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%5Cn%20%20exports%20%3D%20%7B%7D%3B%5Cn%7D)%3B%22%2C%22id%22%3A%229TR2Y%22%7D\" id=\"9TR2Y\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// AMD\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">define(['./a','./b'], function (moduleA, moduleB) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  // 依赖前置\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  moduleA.mehodA();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  console.log(moduleB.dataB);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  // 导出数据\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  return {};\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">});\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"> \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// CMD\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">define(function (requie, exports, module) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  // 依赖就近\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  var moduleA = require('./a');\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  moduleA.mehodA();     \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  // 按需加载\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  if (needModuleB) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    var moduleB = requie('./b');\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    moduleB.methodB();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  // 导出数据\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  exports = {};\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">});</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"CommonJS\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#wzgpnz\" target=\"_blank\"></a><a target=\"_blank\"></a>CommonJS</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">2009 年 ry 发布 Node.js 的第一个版本，CommonJS 作为其中最核心的特性之一，适用于服务端下的场景；历年来的考察和时间的洗礼，以及前端工程化对其的充分支持，CommonJS 被广泛运用于 Node.js 和浏览器；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" data-card-value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Core%20Module%5Cnconst%20cp%20%3D%20require('child_process')%3B%5Cn%2F%2F%20Npm%20Module%5Cnconst%20axios%20%3D%20require('axios')%3B%5Cn%2F%2F%20Custom%20Module%5Cnconst%20foo%20%3D%20require('.%2Ffoo')%3B%5Cnmodule.exports%20%3D%20%7B%20axios%20%7D%3B%5Cnexports.foo%20%3D%20foo%3B%22%2C%22id%22%3A%22xaqFT%22%7D\" id=\"xaqFT\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Core Module\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const cp = require('child_process');\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Npm Module\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const axios = require('axios');\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Custom Module\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">const foo = require('./foo');\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">module.exports = { axios };\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">exports.foo = foo;</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"8ba16db9\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#0d7dii\" target=\"_blank\"></a>规范</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>module (Object): 模块本身</li><li>exports (*): 模块的导出部分，即暴露出来的内容</li><li>require (Function): 加载模块的函数，获得目标模块的导出值（基础类型为复制，引用类型为浅拷贝），可以加载内置模块、npm 模块和自定义模块</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"38164c8b\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#1w9atp\" target=\"_blank\"></a>实现</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">1、模块定义</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">默认任意 .node .js .json 文件都是符合规范的模块；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">2、引入模块</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">首先从缓存（require.cache）优先读取模块，如果未命中缓存，则进行路径分析，然后按照不同类型的模块处理：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>内置模块，直接从内存加载；</li><li>外部模块，首先进行文件寻址定位，然后进行编译和执行，最终得到对应的导出值；</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">其中在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装，结果如下：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" data-card-value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function%20(exports%2C%20require%2C%20module%2C%20__filename%2C%20__dirname)%20%7B%5Cn%20%20%20%20var%20circle%20%3D%20require('.%2Fcircle.js')%3B%5Cn%20%20%20%20console.log('The%20area%20of%20a%20circle%20of%20radius%204%20is%20'%20%2B%20circle.area(4))%3B%5Cn%7D)%3B%22%2C%22id%22%3A%22Qazze%22%7D\" id=\"Qazze\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">(function (exports, require, module, __filename, __dirname) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    var circle = require('./circle.js');\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    console.log('The area of a circle of radius 4 is ' + circle.area(4));\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">});</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"8bd1ad55\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#c8gglt\" target=\"_blank\"></a>特性总结</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>同步执行模块声明和引入逻辑，分析一些复杂的依赖引用（如循环依赖）时需注意；</li><li>缓存机制，性能更优，同时限制了内存占用；</li><li>Module 模块可供改造的灵活度高，可以实现一些定制需求（如热更新、任意文件类型模块支持）；</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"8404e3ba\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#r463xi\" target=\"_blank\"></a>ES Module（推荐使用）</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><span>ES Module 是语言层面的模块化方案，由 ES 2015 提出，其规范与 CommonJS 比之 ，导出的值<span style=\"color: #1A1A1A;\"><span>都可以看成是一个具备多个属性或者方法的对象</span></span>，可以实现互相兼容；但写法上 ES Module 更简洁，跟 Python 接近；</span></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" data-card-value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20fs%20from%20'fs'%3B%5Cnimport%20color%20from%20'color'%3B%5Cnimport%20service%2C%20%7B%20getArticles%20%7D%20from%20'..%2Fservice'%3B%20%5Cnexport%20default%20service%3B%5Cnexport%20const%20getArticles%20%3D%20getArticles%3B%22%2C%22id%22%3A%22JuhFd%22%7D\" id=\"JuhFd\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import fs from 'fs';\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import color from 'color';\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import service, { getArticles } from '../service'; \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">export default service;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">export const getArticles = getArticles;</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">主要差异在于：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><span>ES Module 会对<span style=\"color: #1A1A1A;\"><span>静态代码分析，即在代码编译时进行模块的加载，在运行时之前就已经确定了依赖关系（可解决循环引用的问题）；</span></span></span></li><li><span>ES Module 关键字：<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">import</code>&nbsp;<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">export</code>&nbsp;以及独有的&nbsp;<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">default</code>&nbsp;关键字，确定默认的导出值；</span></li><li><span style=\"color: #1A1A1A;\"><span>ES Module 中导出的值是一个&nbsp;</span></span><code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\"><span style=\"color: #1A1A1A;\"><span>只读的值的引用</span></span></code>&nbsp;<span style=\"color: #1A1A1A;\"><span>，无论基础类型和复杂类型，而在 CommonJS 中 require 的是值的拷贝，其中复杂类型是值的浅拷贝；</span></span></li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" data-card-value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20a.js%5Cnexport%20let%20a%20%3D%201%3B%5Cnexport%20function%20caculate()%20%7B%5Cn%20%20a%2B%2B%3B%5Cn%7D%3B%5Cn%5Cn%2F%2F%20b.js%5Cnimport%20%7B%20a%2C%20caculate%20%7D%20from%20'a.js'%3B%5Cn%5Cnconsole.log(a)%3B%20%2F%2F%201%5Cncaculate()%3B%5Cnconsole.log(a)%3B%20%2F%2F%202%5Cn%5Cna%20%3D%202%3B%20%2F%2F%20Syntax%20Error%3A%20%5C%22a%5C%22%20is%20read-only%22%2C%22id%22%3A%228I8Sx%22%7D\" id=\"8I8Sx\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// a.js\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">export let a = 1;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">export function caculate() {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  a++;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">};\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// b.js\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">import { a, caculate } from 'a.js';\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">console.log(a); // 1\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">caculate();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">console.log(a); // 2\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">a = 2; // Syntax Error: \"a\" is read-only</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"UMD\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#tfbfmg\" target=\"_blank\"></a><a target=\"_blank\"></a>UMD</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">通过一层自执行函数来兼容各种模块化规范的写法，兼容 AMD / CMD / CommonJS 等模块化规范，贴上代码胜过千言万语，需要特别注意的是 ES Module 由于会对静态代码进行分析，故这种运行时的方案无法使用，此时通过 CommonJS 进行兼容；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" data-card-value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function%20(global%2C%20factory)%20%7B%5Cn%20%20if%20(typeof%20exports%20%3D%3D%3D%20'object')%20%7B%20%20%20%5Cn%20%20%20%20module.exports%20%3D%20factory()%3B%5Cn%20%20%7D%20else%20if%20(typeof%20define%20%3D%3D%3D%20'function'%20%26%26%20define.amd)%20%7B%5Cn%20%20%20%20define(factory)%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20this.eventUtil%20%3D%20factory()%3B%5Cn%20%20%7D%5Cn%7D)(this%2C%20function%20(exports)%20%7B%5Cn%20%20%2F%2F%20Define%20Module%5Cn%20%20Object.defineProperty(exports%2C%20%5C%22__esModule%5C%22%2C%20%7B%5Cn%20%20%20%20value%3A%20true%5Cn%20%20%7D)%3B%5Cn%20%20exports.default%20%3D%2042%3B%5Cn%7D)%3B%22%2C%22id%22%3A%22PS5FM%22%7D\" id=\"PS5FM\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">(function (global, factory) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  if (typeof exports === 'object') {   \n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    module.exports = factory();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  } else if (typeof define === 'function' &amp;&amp; define.amd) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    define(factory);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  } else {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    this.eventUtil = factory();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">})(this, function (exports) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  // Define Module\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  Object.defineProperty(exports, \"__esModule\", {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    value: true\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  });\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  exports.default = 42;\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">});</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"ebe15728\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#8gdlgf\" target=\"_blank\"></a>构建工具中的实现</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">为了在浏览器环境中运行模块化的代码，需要借助一些模块化打包的工具进行打包（ 以 webpack 为例），定义了项目入口之后，会先快速地进行依赖的分析，然后将所有依赖的模块转换成浏览器兼容的对应模块化规范的实现；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"cc5efae8\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#7sinnb\" target=\"_blank\"></a>模块化的基础</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">从上面的介绍中，我们已经对其规范和实现有了一定的了解；在浏览器中，要实现 CommonJS 规范，只需要实现 module / exports / require / global 这几个属性，由于浏览器中是无法访问文件系统的，因此 require 过程中的文件定位需要改造为加载对应的 JS 片段（webpack 采用的方式为通过函数传参实现依赖的引入）。具体实现可以参考：<a target=\"_blank\" href=\"https://github.com/ruanyf/tiny-browser-require\" rel=\"noopener noreferrer\">tiny-browser-require</a>。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">webpack 打包出来的代码快照如下，注意看注释中的时序；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" data-card-value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function%20(modules)%20%7B%5Cn%20%20%2F%2F%20The%20module%20cache%5Cn%20%20var%20installedModules%20%3D%20%7B%7D%3B%5Cn%20%20%2F%2F%20The%20require%20function%5Cn%20%20function%20__webpack_require__(moduleId)%20%7B%7D%5Cn%20%20return%20__webpack_require__(0)%3B%20%2F%2F%20---%3E%200%5Cn%7D)%5Cn(%7B%5Cn%20%200%3A%20function%20(module%2C%20exports%2C%20__webpack_require__)%20%7B%5Cn%20%20%20%20%2F%2F%20Define%20module%20A%5Cn%20%20%20%20var%20moduleB%20%3D%20__webpack_require__(1)%3B%20%2F%2F%20---%3E%201%5Cn%20%20%7D%2C%5Cn%20%201%3A%20function%20(module%2C%20exports%2C%20__webpack_require__)%20%7B%5Cn%20%20%20%20%2F%2F%20Define%20module%20B%5Cn%20%20%20%20exports%20%3D%20%7B%7D%3B%20%2F%2F%20---%3E%202%5Cn%20%20%7D%5Cn%7D)%3B%22%2C%22id%22%3A%22hlkYq%22%7D\" id=\"hlkYq\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(0, 0, 0); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">(function (modules) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  // The module cache\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  var installedModules = {};\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  // The require function\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  function __webpack_require__(moduleId) {}\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  return __webpack_require__(0); // ---&gt; 0\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">})\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">({\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  0: function (module, exports, __webpack_require__) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    // Define module A\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    var moduleB = __webpack_require__(1); // ---&gt; 1\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  },\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  1: function (module, exports, __webpack_require__) {\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    // Define module B\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">    exports = {}; // ---&gt; 2\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">  }\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">});</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">实际上，ES Module 的处理同 CommonJS 相差无几，只是在定义模块和引入模块时会去处理 __esModule 标识，从而兼容其在语法上的差异。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h3 id=\"92bb1c20\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#oc2kgy\" target=\"_blank\"></a>异步和扩展</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">1、浏览器环境下，网络资源受到较大的限制，因此打包出来的文件如果体积巨大，对页面性能的损耗极大，因此需要对构建的目标文件进行拆分，同时模块也需要支持动态加载；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">webpack 提供了两个方法 require.ensure() 和 import() （推荐使用）进行模块的动态加载，至于其中的原理，跟上面提及的 AMD &amp; CMD 所见略同，import() 执行后返回一个 Promise 对象，其中所做的工作无非也是动态新增 script 标签，然后通过 onload / onerror 事件进一步处理。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">2、由于 require 函数是完全自定义的，我们可以在模块化中实现更多的特性，比如通过修改 require.resolve 或 Module._extensions 扩展支持的文件类型，使得 css / .jsx / .vue / 图片等文件也能为模块化所使用；</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><h2 id=\"e31a6f29\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#wyfbct\" target=\"_blank\"></a>附录1：特性一览表</h2><div data-card-type=\"block\" data-lake-card=\"table\" data-card-value=\"data:%7B%22rows%22%3A5%2C%22cols%22%3A5%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20752px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22124%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%2295%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%2298%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22156%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22272%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%8A%A0%E8%BD%BD%E6%97%B6%E6%9C%BA%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%A4%87%E6%B3%A8%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3EAMD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E6%97%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3ECMD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E6%97%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cspan%20style%3D%5C%22color%3A%20%23262626%3B%20background-color%3A%20%23FFFFFF%3B%5C%22%3E%E4%BE%9D%E8%B5%96%E5%9F%BA%E4%BA%8E%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2Fseajs%2Fseajs%2Fblob%2F1.0.0%2Fsrc%2Ffn-define.js%23L72%5C%22%20target%3D%5C%22_blank%5C%22%3E%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%3C%2Fa%3E%3C%2Fspan%3E%3Cspan%20style%3D%5C%22color%3A%20%23262626%3B%20background-color%3A%20%23FFFFFF%3B%5C%22%3E%EF%BC%8Crequire%20%E6%97%B6%E5%B7%B2%E7%BB%8F%20module%20ready%3C%2Fspan%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3ECommonJS%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%90%8C%E6%AD%A5%2F%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E6%97%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%20%2F%20Node%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3EES%20Module%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%90%8C%E6%AD%A5%2F%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%20%2F%20Node%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E9%80%9A%E8%BF%87%20import()%20%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%22BJi1w%22%7D\" id=\"BJi1w\"><table class=\"lake-table\" style=\"width: 752px; outline: none; border-collapse: collapse;\"><colgroup><col width=\"124\" span=\"1\"><col width=\"95\" span=\"1\"><col width=\"98\" span=\"1\"><col width=\"156\" span=\"1\"><col width=\"272\" span=\"1\"></colgroup><tbody><tr style=\"height: 33px;\"><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">模块化规范</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">加载方式</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">加载时机</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">运行环境</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">备注</p></td></tr><tr style=\"height: 33px;\"><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">AMD</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">异步</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">运行时</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">浏览器</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p></td></tr><tr style=\"height: 33px;\"><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">CMD</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">异步</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">运行时</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">浏览器</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><span style=\"color: #262626; background-color: #FFFFFF;\">依赖基于<a href=\"https://github.com/seajs/seajs/blob/1.0.0/src/fn-define.js#L72\" target=\"_blank\" rel=\"noopener noreferrer\">静态分析</a></span><span style=\"color: #262626; background-color: #FFFFFF;\">，require 时已经 module ready</span></td></tr><tr style=\"height: 33px;\"><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">CommonJS</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">同步/异步</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">运行时</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">浏览器 / Node</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p></td></tr><tr style=\"height: 33px;\"><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">ES Module</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">同步/异步</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">编译阶段</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">浏览器 / Node</p></td><td rowspan=\"1\" colspan=\"1\" style=\"vertical-align: top; min-width: 90px; font-size: 14px; white-space: normal; word-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\">通过 import() 实现异步加载</p></td></tr></tbody></table></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><a target=\"_blank\"></a></p><h2 id=\"f8215f17\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 24px; line-height: 32px;\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#f67zmx\" target=\"_blank\"></a>附录2：参考</h2><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>AMD 模块化规范:&nbsp;<a target=\"_blank\" href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" rel=\"noopener noreferrer\">https://github.com/amdjs/amdjs-api/wiki/AMD</a></li><li>CMD 模块定义规范：<a target=\"_blank\" href=\"https://github.com/seajs/seajs/issues/242\" rel=\"noopener noreferrer\">https://github.com/seajs/seajs/issues/242</a></li><li>webpack 模块相关文档:&nbsp;<a target=\"_blank\" href=\"https://webpack.js.org/concepts/modules/\" rel=\"noopener noreferrer\">https://webpack.js.org/concepts/modules/</a></li><li>浏览器加载 CommonJS 模块的原理与实现：<a target=\"_blank\" href=\"http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html\" rel=\"noopener noreferrer\">http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html</a></li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; line-height: 1.74; margin: 0px;\"><br></p></div>",
    "body_lake": "<!doctype lake><p>tags: [javascript, 模块化]</p><p>date: 2018-08-10</p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%2212XA3%22%7D\"></card><h2 id=\"k2g2vk\"><a href=\"#k2g2vk\"></a>前言</h2><p><br /></p><p>随着 Web 技术的蓬勃发展和依赖的基础设施日益完善，前端领域逐渐从浏览器扩展至服务端（Node.js），桌面端（PC、Android、iOS），乃至于物联网设备（IoT），其中 JavaScript 承载着这些应用程序的核心部分，随着其规模化和复杂度的成倍增长，其软件工程体系也随之建立起来（协同开发、单元测试、需求和缺陷管理等），模块化编程的需求日益迫切；</p><p><br /></p><p>JavaScript 对模块化编程的支持尚未形成规范，难以堪此重任；一时间，江湖侠士挺身而出，一路披荆斩棘，从刀耕火种过渡到面向未来的模块化方案；</p><p><br /></p><p>更多关于我的文章和项目，欢迎关注 <a href=\"https://github.com/x-cold\" target=\"_blank\">@x-cold</a></p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h2 id=\"b59c9e0f\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#9qopit\" target=\"_blank\"></a>概念</h2><p><br /></p><p><span>模块化编程就是通过组合一些<strong>相对独立可复用的模块</strong>来进行功能的实现，其最核心的两部分是<strong>定义模块</strong>和<strong>引入模块</strong>；</span></p><p><br /></p><ul><li>定义模块时，每个模块内部的执行逻辑是不被外部感知的，只是导出（暴露）出部分方法和数据；</li><li>引入模块时，同步 / 异步去加载待引入的代码，执行并获取到其暴露的方法和数据；</li></ul><p><br /></p><h2 id=\"a43e3fa9\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#01ifuf\" target=\"_blank\"></a>刀耕火种</h2><p><br /></p><p><span>尽管 JavaScript 语言层面并未提供模块化的解决方案，但利用其可<strong>面向对象</strong>的语言特性，外加<strong>设计模式</strong>加持，能够实现一些简单的模块化的架构；经典的一个案例是利用单例模式模式去实现模块化，可以对模块进行较好的封装，只暴露部分信息给需要使用模块的地方；</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Define%20a%20module%5Cnvar%20moduleA%20%3D%20(function%20(%24%2C%20doc)%20%7B%5Cn%20%20var%20methodA%20%3D%20function()%20%7B%7D%3B%5Cn%20%20var%20dataA%20%3D%20%7B%7D%3B%5Cn%20%20return%20%7B%5Cn%20%20%20%20methodA%3A%20methodA%2C%5Cn%20%20%20%20dataA%3A%20dataA%5Cn%20%20%7D%3B%5Cn%7D)(jQuery%2C%20document)%3B%5Cn%2F%2F%20Use%20a%20module%5Cnvar%20result%20%3D%20moduleA.mehodA()%3B%22%2C%22id%22%3A%22TPpQN%22%7D\"></card><p><br /></p><p>直观来看，通过立即执行函数（IIFE）来声明依赖以及导出数据，这与当下的模块化方案并无巨大的差异，可本质上却有千差万别，无法满足的一些重要的特性；</p><p><br /></p><ul><li>定义模块时，声明的依赖不是强制自动引入的，即在定义该模块之前，必须手动引入依赖的模块代码；</li><li>定义模块时，其代码就已经完成执行过程，无法实现按需加载；</li><li>跨文件使用模块时，需要将模块挂载到全局变量（window）上；</li></ul><p><br /></p><h2 id=\"04152650\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#9pfbgf\" target=\"_blank\"></a>AMD &amp; CMD 二分天下</h2><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>题外话：由于年代久远，这两种模块化方案逐渐淡出历史舞台，具体特性不再细聊；</p></blockquote><p><br /></p><p><span>为了解决”刀耕火种”时代存留的需求，AMD 和 CMD 模块化规范问世，解决了在浏览器端的异步模块化编程的需求，<strong>其最核心的原理是通过动态加载 script 和事件监听的方式来异步加载模块；</strong></span></p><p><br /></p><p>AMD 和 CMD 最具代表的两个作品分别对应 require.js 和 sea.js；其主要区别在于依赖声明和依赖加载的时机，其中 require.js 默认在声明时执行， sea.js 推崇懒加载和按需使用；另外值得一提的是，CMD 规范的写法和 CommonJS 极为相近，只需稍作修改，就能在 CommonJS 中使用。参考下面的 Case 更有助于理解；</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20AMD%5Cndefine(%5B'.%2Fa'%2C'.%2Fb'%5D%2C%20function%20(moduleA%2C%20moduleB)%20%7B%5Cn%20%20%2F%2F%20%E4%BE%9D%E8%B5%96%E5%89%8D%E7%BD%AE%5Cn%20%20moduleA.mehodA()%3B%5Cn%20%20console.log(moduleB.dataB)%3B%5Cn%20%20%2F%2F%20%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%5Cn%20%20return%20%7B%7D%3B%5Cn%7D)%3B%5Cn%20%5Cn%2F%2F%20CMD%5Cndefine(function%20(requie%2C%20exports%2C%20module)%20%7B%5Cn%20%20%2F%2F%20%E4%BE%9D%E8%B5%96%E5%B0%B1%E8%BF%91%5Cn%20%20var%20moduleA%20%3D%20require('.%2Fa')%3B%5Cn%20%20moduleA.mehodA()%3B%20%20%20%20%20%5Cn%20%20%2F%2F%20%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD%5Cn%20%20if%20(needModuleB)%20%7B%5Cn%20%20%20%20var%20moduleB%20%3D%20requie('.%2Fb')%3B%5Cn%20%20%20%20moduleB.methodB()%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%5Cn%20%20exports%20%3D%20%7B%7D%3B%5Cn%7D)%3B%22%2C%22id%22%3A%229TR2Y%22%7D\"></card><p><br /></p><h2 id=\"CommonJS\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#wzgpnz\" target=\"_blank\"></a><a target=\"_blank\"></a>CommonJS</h2><p><br /></p><p>2009 年 ry 发布 Node.js 的第一个版本，CommonJS 作为其中最核心的特性之一，适用于服务端下的场景；历年来的考察和时间的洗礼，以及前端工程化对其的充分支持，CommonJS 被广泛运用于 Node.js 和浏览器；</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Core%20Module%5Cnconst%20cp%20%3D%20require('child_process')%3B%5Cn%2F%2F%20Npm%20Module%5Cnconst%20axios%20%3D%20require('axios')%3B%5Cn%2F%2F%20Custom%20Module%5Cnconst%20foo%20%3D%20require('.%2Ffoo')%3B%5Cnmodule.exports%20%3D%20%7B%20axios%20%7D%3B%5Cnexports.foo%20%3D%20foo%3B%22%2C%22id%22%3A%22xaqFT%22%7D\"></card><p><br /></p><h3 id=\"8ba16db9\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#0d7dii\" target=\"_blank\"></a>规范</h3><p><br /></p><ul><li>module (Object): 模块本身</li><li>exports (*): 模块的导出部分，即暴露出来的内容</li><li>require (Function): 加载模块的函数，获得目标模块的导出值（基础类型为复制，引用类型为浅拷贝），可以加载内置模块、npm 模块和自定义模块</li></ul><p><br /></p><h3 id=\"38164c8b\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#1w9atp\" target=\"_blank\"></a>实现</h3><p><br /></p><p>1、模块定义</p><p><br /></p><p>默认任意 .node .js .json 文件都是符合规范的模块；</p><p><br /></p><p>2、引入模块</p><p><br /></p><p>首先从缓存（require.cache）优先读取模块，如果未命中缓存，则进行路径分析，然后按照不同类型的模块处理：</p><p><br /></p><ul><li>内置模块，直接从内存加载；</li><li>外部模块，首先进行文件寻址定位，然后进行编译和执行，最终得到对应的导出值；</li></ul><p><br /></p><p>其中在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装，结果如下：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function%20(exports%2C%20require%2C%20module%2C%20__filename%2C%20__dirname)%20%7B%5Cn%20%20%20%20var%20circle%20%3D%20require('.%2Fcircle.js')%3B%5Cn%20%20%20%20console.log('The%20area%20of%20a%20circle%20of%20radius%204%20is%20'%20%2B%20circle.area(4))%3B%5Cn%7D)%3B%22%2C%22id%22%3A%22Qazze%22%7D\"></card><p><br /></p><h3 id=\"8bd1ad55\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#c8gglt\" target=\"_blank\"></a>特性总结</h3><p><br /></p><ul><li>同步执行模块声明和引入逻辑，分析一些复杂的依赖引用（如循环依赖）时需注意；</li><li>缓存机制，性能更优，同时限制了内存占用；</li><li>Module 模块可供改造的灵活度高，可以实现一些定制需求（如热更新、任意文件类型模块支持）；</li></ul><p><br /></p><h2 id=\"8404e3ba\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#r463xi\" target=\"_blank\"></a>ES Module（推荐使用）</h2><p><br /></p><p><span>ES Module 是语言层面的模块化方案，由 ES 2015 提出，其规范与 CommonJS 比之 ，导出的值<span style=\"color: #1A1A1A;\"><span>都可以看成是一个具备多个属性或者方法的对象</span></span>，可以实现互相兼容；但写法上 ES Module 更简洁，跟 Python 接近；</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20fs%20from%20'fs'%3B%5Cnimport%20color%20from%20'color'%3B%5Cnimport%20service%2C%20%7B%20getArticles%20%7D%20from%20'..%2Fservice'%3B%20%5Cnexport%20default%20service%3B%5Cnexport%20const%20getArticles%20%3D%20getArticles%3B%22%2C%22id%22%3A%22JuhFd%22%7D\"></card><p><br /></p><p>主要差异在于：</p><p><br /></p><ul><li><span>ES Module 会对<span style=\"color: #1A1A1A;\"><span>静态代码分析，即在代码编译时进行模块的加载，在运行时之前就已经确定了依赖关系（可解决循环引用的问题）；</span></span></span></li><li><span>ES Module 关键字：<code>import</code> <code>export</code> 以及独有的 <code>default</code> 关键字，确定默认的导出值；</span></li><li><span style=\"color: #1A1A1A;\"><span>ES Module 中导出的值是一个 </span></span><code><span style=\"color: #1A1A1A;\"><span>只读的值的引用</span></span></code> <span style=\"color: #1A1A1A;\"><span>，无论基础类型和复杂类型，而在 CommonJS 中 require 的是值的拷贝，其中复杂类型是值的浅拷贝；</span></span></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20a.js%5Cnexport%20let%20a%20%3D%201%3B%5Cnexport%20function%20caculate()%20%7B%5Cn%20%20a%2B%2B%3B%5Cn%7D%3B%5Cn%5Cn%2F%2F%20b.js%5Cnimport%20%7B%20a%2C%20caculate%20%7D%20from%20'a.js'%3B%5Cn%5Cnconsole.log(a)%3B%20%2F%2F%201%5Cncaculate()%3B%5Cnconsole.log(a)%3B%20%2F%2F%202%5Cn%5Cna%20%3D%202%3B%20%2F%2F%20Syntax%20Error%3A%20%5C%22a%5C%22%20is%20read-only%22%2C%22id%22%3A%228I8Sx%22%7D\"></card><p><br /></p><h2 id=\"UMD\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#tfbfmg\" target=\"_blank\"></a><a target=\"_blank\"></a>UMD</h2><p><br /></p><p>通过一层自执行函数来兼容各种模块化规范的写法，兼容 AMD / CMD / CommonJS 等模块化规范，贴上代码胜过千言万语，需要特别注意的是 ES Module 由于会对静态代码进行分析，故这种运行时的方案无法使用，此时通过 CommonJS 进行兼容；</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function%20(global%2C%20factory)%20%7B%5Cn%20%20if%20(typeof%20exports%20%3D%3D%3D%20'object')%20%7B%20%20%20%5Cn%20%20%20%20module.exports%20%3D%20factory()%3B%5Cn%20%20%7D%20else%20if%20(typeof%20define%20%3D%3D%3D%20'function'%20%26%26%20define.amd)%20%7B%5Cn%20%20%20%20define(factory)%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20this.eventUtil%20%3D%20factory()%3B%5Cn%20%20%7D%5Cn%7D)(this%2C%20function%20(exports)%20%7B%5Cn%20%20%2F%2F%20Define%20Module%5Cn%20%20Object.defineProperty(exports%2C%20%5C%22__esModule%5C%22%2C%20%7B%5Cn%20%20%20%20value%3A%20true%5Cn%20%20%7D)%3B%5Cn%20%20exports.default%20%3D%2042%3B%5Cn%7D)%3B%22%2C%22id%22%3A%22PS5FM%22%7D\"></card><p><br /></p><h2 id=\"ebe15728\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#8gdlgf\" target=\"_blank\"></a>构建工具中的实现</h2><p><br /></p><p>为了在浏览器环境中运行模块化的代码，需要借助一些模块化打包的工具进行打包（ 以 webpack 为例），定义了项目入口之后，会先快速地进行依赖的分析，然后将所有依赖的模块转换成浏览器兼容的对应模块化规范的实现；</p><p><br /></p><h3 id=\"cc5efae8\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#7sinnb\" target=\"_blank\"></a>模块化的基础</h3><p><br /></p><p>从上面的介绍中，我们已经对其规范和实现有了一定的了解；在浏览器中，要实现 CommonJS 规范，只需要实现 module / exports / require / global 这几个属性，由于浏览器中是无法访问文件系统的，因此 require 过程中的文件定位需要改造为加载对应的 JS 片段（webpack 采用的方式为通过函数传参实现依赖的引入）。具体实现可以参考：<a target=\"_blank\" href=\"https://github.com/ruanyf/tiny-browser-require\">tiny-browser-require</a>。</p><p><br /></p><p>webpack 打包出来的代码快照如下，注意看注释中的时序；</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function%20(modules)%20%7B%5Cn%20%20%2F%2F%20The%20module%20cache%5Cn%20%20var%20installedModules%20%3D%20%7B%7D%3B%5Cn%20%20%2F%2F%20The%20require%20function%5Cn%20%20function%20__webpack_require__(moduleId)%20%7B%7D%5Cn%20%20return%20__webpack_require__(0)%3B%20%2F%2F%20---%3E%200%5Cn%7D)%5Cn(%7B%5Cn%20%200%3A%20function%20(module%2C%20exports%2C%20__webpack_require__)%20%7B%5Cn%20%20%20%20%2F%2F%20Define%20module%20A%5Cn%20%20%20%20var%20moduleB%20%3D%20__webpack_require__(1)%3B%20%2F%2F%20---%3E%201%5Cn%20%20%7D%2C%5Cn%20%201%3A%20function%20(module%2C%20exports%2C%20__webpack_require__)%20%7B%5Cn%20%20%20%20%2F%2F%20Define%20module%20B%5Cn%20%20%20%20exports%20%3D%20%7B%7D%3B%20%2F%2F%20---%3E%202%5Cn%20%20%7D%5Cn%7D)%3B%22%2C%22id%22%3A%22hlkYq%22%7D\"></card><p><br /></p><p>实际上，ES Module 的处理同 CommonJS 相差无几，只是在定义模块和引入模块时会去处理 __esModule 标识，从而兼容其在语法上的差异。</p><p><br /></p><h3 id=\"92bb1c20\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#oc2kgy\" target=\"_blank\"></a>异步和扩展</h3><p><br /></p><p>1、浏览器环境下，网络资源受到较大的限制，因此打包出来的文件如果体积巨大，对页面性能的损耗极大，因此需要对构建的目标文件进行拆分，同时模块也需要支持动态加载；</p><p><br /></p><p>webpack 提供了两个方法 require.ensure() 和 import() （推荐使用）进行模块的动态加载，至于其中的原理，跟上面提及的 AMD &amp; CMD 所见略同，import() 执行后返回一个 Promise 对象，其中所做的工作无非也是动态新增 script 标签，然后通过 onload / onerror 事件进一步处理。</p><p><br /></p><p>2、由于 require 函数是完全自定义的，我们可以在模块化中实现更多的特性，比如通过修改 require.resolve 或 Module._extensions 扩展支持的文件类型，使得 css / .jsx / .vue / 图片等文件也能为模块化所使用；</p><p><br /></p><h2 id=\"e31a6f29\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#wyfbct\" target=\"_blank\"></a>附录1：特性一览表</h2><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A5%2C%22cols%22%3A5%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20752px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22124%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%2295%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%2298%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22156%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22272%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%8A%A0%E8%BD%BD%E6%97%B6%E6%9C%BA%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%A4%87%E6%B3%A8%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3EAMD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E6%97%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3ECMD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E6%97%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cspan%20style%3D%5C%22color%3A%20%23262626%3B%20background-color%3A%20%23FFFFFF%3B%5C%22%3E%E4%BE%9D%E8%B5%96%E5%9F%BA%E4%BA%8E%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2Fseajs%2Fseajs%2Fblob%2F1.0.0%2Fsrc%2Ffn-define.js%23L72%5C%22%20target%3D%5C%22_blank%5C%22%3E%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%3C%2Fa%3E%3C%2Fspan%3E%3Cspan%20style%3D%5C%22color%3A%20%23262626%3B%20background-color%3A%20%23FFFFFF%3B%5C%22%3E%EF%BC%8Crequire%20%E6%97%B6%E5%B7%B2%E7%BB%8F%20module%20ready%3C%2Fspan%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3ECommonJS%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%90%8C%E6%AD%A5%2F%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E6%97%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%20%2F%20Node%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3EES%20Module%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%90%8C%E6%AD%A5%2F%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%20%2F%20Node%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E9%80%9A%E8%BF%87%20import()%20%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%22BJi1w%22%7D\"></card><p><br /></p><p><a target=\"_blank\"></a></p><h2 id=\"f8215f17\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#f67zmx\" target=\"_blank\"></a>附录2：参考</h2><p><br /></p><ul><li>AMD 模块化规范: <a target=\"_blank\" href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\">https://github.com/amdjs/amdjs-api/wiki/AMD</a></li><li>CMD 模块定义规范：<a target=\"_blank\" href=\"https://github.com/seajs/seajs/issues/242\">https://github.com/seajs/seajs/issues/242</a></li><li>webpack 模块相关文档: <a target=\"_blank\" href=\"https://webpack.js.org/concepts/modules/\">https://webpack.js.org/concepts/modules/</a></li><li>浏览器加载 CommonJS 模块的原理与实现：<a target=\"_blank\" href=\"http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html\">http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html</a></li></ul><p><br /></p>",
    "body_draft_lake": "<!doctype lake><p>tags: [javascript, 模块化]</p><p>date: 2018-08-10</p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%2212XA3%22%7D\"></card><h2 id=\"k2g2vk\"><a href=\"#k2g2vk\"></a>前言</h2><p><br /></p><p>随着 Web 技术的蓬勃发展和依赖的基础设施日益完善，前端领域逐渐从浏览器扩展至服务端（Node.js），桌面端（PC、Android、iOS），乃至于物联网设备（IoT），其中 JavaScript 承载着这些应用程序的核心部分，随着其规模化和复杂度的成倍增长，其软件工程体系也随之建立起来（协同开发、单元测试、需求和缺陷管理等），模块化编程的需求日益迫切；</p><p><br /></p><p>JavaScript 对模块化编程的支持尚未形成规范，难以堪此重任；一时间，江湖侠士挺身而出，一路披荆斩棘，从刀耕火种过渡到面向未来的模块化方案；</p><p><br /></p><p>更多关于我的文章和项目，欢迎关注 <a href=\"https://github.com/x-cold\" target=\"_blank\">@x-cold</a></p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h2 id=\"b59c9e0f\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#9qopit\" target=\"_blank\"></a>概念</h2><p><br /></p><p><span>模块化编程就是通过组合一些<strong>相对独立可复用的模块</strong>来进行功能的实现，其最核心的两部分是<strong>定义模块</strong>和<strong>引入模块</strong>；</span></p><p><br /></p><ul><li>定义模块时，每个模块内部的执行逻辑是不被外部感知的，只是导出（暴露）出部分方法和数据；</li><li>引入模块时，同步 / 异步去加载待引入的代码，执行并获取到其暴露的方法和数据；</li></ul><p><br /></p><h2 id=\"a43e3fa9\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#01ifuf\" target=\"_blank\"></a>刀耕火种</h2><p><br /></p><p><span>尽管 JavaScript 语言层面并未提供模块化的解决方案，但利用其可<strong>面向对象</strong>的语言特性，外加<strong>设计模式</strong>加持，能够实现一些简单的模块化的架构；经典的一个案例是利用单例模式模式去实现模块化，可以对模块进行较好的封装，只暴露部分信息给需要使用模块的地方；</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Define%20a%20module%5Cnvar%20moduleA%20%3D%20(function%20(%24%2C%20doc)%20%7B%5Cn%20%20var%20methodA%20%3D%20function()%20%7B%7D%3B%5Cn%20%20var%20dataA%20%3D%20%7B%7D%3B%5Cn%20%20return%20%7B%5Cn%20%20%20%20methodA%3A%20methodA%2C%5Cn%20%20%20%20dataA%3A%20dataA%5Cn%20%20%7D%3B%5Cn%7D)(jQuery%2C%20document)%3B%5Cn%2F%2F%20Use%20a%20module%5Cnvar%20result%20%3D%20moduleA.mehodA()%3B%22%2C%22id%22%3A%22TPpQN%22%7D\"></card><p><br /></p><p>直观来看，通过立即执行函数（IIFE）来声明依赖以及导出数据，这与当下的模块化方案并无巨大的差异，可本质上却有千差万别，无法满足的一些重要的特性；</p><p><br /></p><ul><li>定义模块时，声明的依赖不是强制自动引入的，即在定义该模块之前，必须手动引入依赖的模块代码；</li><li>定义模块时，其代码就已经完成执行过程，无法实现按需加载；</li><li>跨文件使用模块时，需要将模块挂载到全局变量（window）上；</li></ul><p><br /></p><h2 id=\"04152650\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#9pfbgf\" target=\"_blank\"></a>AMD &amp; CMD 二分天下</h2><p><br /></p><blockquote style=\"padding-left: 1em;\"><p>题外话：由于年代久远，这两种模块化方案逐渐淡出历史舞台，具体特性不再细聊；</p></blockquote><p><br /></p><p><span>为了解决”刀耕火种”时代存留的需求，AMD 和 CMD 模块化规范问世，解决了在浏览器端的异步模块化编程的需求，<strong>其最核心的原理是通过动态加载 script 和事件监听的方式来异步加载模块；</strong></span></p><p><br /></p><p>AMD 和 CMD 最具代表的两个作品分别对应 require.js 和 sea.js；其主要区别在于依赖声明和依赖加载的时机，其中 require.js 默认在声明时执行， sea.js 推崇懒加载和按需使用；另外值得一提的是，CMD 规范的写法和 CommonJS 极为相近，只需稍作修改，就能在 CommonJS 中使用。参考下面的 Case 更有助于理解；</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20AMD%5Cndefine(%5B'.%2Fa'%2C'.%2Fb'%5D%2C%20function%20(moduleA%2C%20moduleB)%20%7B%5Cn%20%20%2F%2F%20%E4%BE%9D%E8%B5%96%E5%89%8D%E7%BD%AE%5Cn%20%20moduleA.mehodA()%3B%5Cn%20%20console.log(moduleB.dataB)%3B%5Cn%20%20%2F%2F%20%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%5Cn%20%20return%20%7B%7D%3B%5Cn%7D)%3B%5Cn%20%5Cn%2F%2F%20CMD%5Cndefine(function%20(requie%2C%20exports%2C%20module)%20%7B%5Cn%20%20%2F%2F%20%E4%BE%9D%E8%B5%96%E5%B0%B1%E8%BF%91%5Cn%20%20var%20moduleA%20%3D%20require('.%2Fa')%3B%5Cn%20%20moduleA.mehodA()%3B%20%20%20%20%20%5Cn%20%20%2F%2F%20%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD%5Cn%20%20if%20(needModuleB)%20%7B%5Cn%20%20%20%20var%20moduleB%20%3D%20requie('.%2Fb')%3B%5Cn%20%20%20%20moduleB.methodB()%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%5Cn%20%20exports%20%3D%20%7B%7D%3B%5Cn%7D)%3B%22%2C%22id%22%3A%229TR2Y%22%7D\"></card><p><br /></p><h2 id=\"CommonJS\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#wzgpnz\" target=\"_blank\"></a><a target=\"_blank\"></a>CommonJS</h2><p><br /></p><p>2009 年 ry 发布 Node.js 的第一个版本，CommonJS 作为其中最核心的特性之一，适用于服务端下的场景；历年来的考察和时间的洗礼，以及前端工程化对其的充分支持，CommonJS 被广泛运用于 Node.js 和浏览器；</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20Core%20Module%5Cnconst%20cp%20%3D%20require('child_process')%3B%5Cn%2F%2F%20Npm%20Module%5Cnconst%20axios%20%3D%20require('axios')%3B%5Cn%2F%2F%20Custom%20Module%5Cnconst%20foo%20%3D%20require('.%2Ffoo')%3B%5Cnmodule.exports%20%3D%20%7B%20axios%20%7D%3B%5Cnexports.foo%20%3D%20foo%3B%22%2C%22id%22%3A%22xaqFT%22%7D\"></card><p><br /></p><h3 id=\"8ba16db9\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#0d7dii\" target=\"_blank\"></a>规范</h3><p><br /></p><ul><li>module (Object): 模块本身</li><li>exports (*): 模块的导出部分，即暴露出来的内容</li><li>require (Function): 加载模块的函数，获得目标模块的导出值（基础类型为复制，引用类型为浅拷贝），可以加载内置模块、npm 模块和自定义模块</li></ul><p><br /></p><h3 id=\"38164c8b\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#1w9atp\" target=\"_blank\"></a>实现</h3><p><br /></p><p>1、模块定义</p><p><br /></p><p>默认任意 .node .js .json 文件都是符合规范的模块；</p><p><br /></p><p>2、引入模块</p><p><br /></p><p>首先从缓存（require.cache）优先读取模块，如果未命中缓存，则进行路径分析，然后按照不同类型的模块处理：</p><p><br /></p><ul><li>内置模块，直接从内存加载；</li><li>外部模块，首先进行文件寻址定位，然后进行编译和执行，最终得到对应的导出值；</li></ul><p><br /></p><p>其中在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装，结果如下：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function%20(exports%2C%20require%2C%20module%2C%20__filename%2C%20__dirname)%20%7B%5Cn%20%20%20%20var%20circle%20%3D%20require('.%2Fcircle.js')%3B%5Cn%20%20%20%20console.log('The%20area%20of%20a%20circle%20of%20radius%204%20is%20'%20%2B%20circle.area(4))%3B%5Cn%7D)%3B%22%2C%22id%22%3A%22Qazze%22%7D\"></card><p><br /></p><h3 id=\"8bd1ad55\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#c8gglt\" target=\"_blank\"></a>特性总结</h3><p><br /></p><ul><li>同步执行模块声明和引入逻辑，分析一些复杂的依赖引用（如循环依赖）时需注意；</li><li>缓存机制，性能更优，同时限制了内存占用；</li><li>Module 模块可供改造的灵活度高，可以实现一些定制需求（如热更新、任意文件类型模块支持）；</li></ul><p><br /></p><h2 id=\"8404e3ba\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#r463xi\" target=\"_blank\"></a>ES Module（推荐使用）</h2><p><br /></p><p><span>ES Module 是语言层面的模块化方案，由 ES 2015 提出，其规范与 CommonJS 比之 ，导出的值<span style=\"color: #1A1A1A;\"><span>都可以看成是一个具备多个属性或者方法的对象</span></span>，可以实现互相兼容；但写法上 ES Module 更简洁，跟 Python 接近；</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20fs%20from%20'fs'%3B%5Cnimport%20color%20from%20'color'%3B%5Cnimport%20service%2C%20%7B%20getArticles%20%7D%20from%20'..%2Fservice'%3B%20%5Cnexport%20default%20service%3B%5Cnexport%20const%20getArticles%20%3D%20getArticles%3B%22%2C%22id%22%3A%22JuhFd%22%7D\"></card><p><br /></p><p>主要差异在于：</p><p><br /></p><ul><li><span>ES Module 会对<span style=\"color: #1A1A1A;\"><span>静态代码分析，即在代码编译时进行模块的加载，在运行时之前就已经确定了依赖关系（可解决循环引用的问题）；</span></span></span></li><li><span>ES Module 关键字：<code>import</code> <code>export</code> 以及独有的 <code>default</code> 关键字，确定默认的导出值；</span></li><li><span style=\"color: #1A1A1A;\"><span>ES Module 中导出的值是一个 </span></span><code><span style=\"color: #1A1A1A;\"><span>只读的值的引用</span></span></code> <span style=\"color: #1A1A1A;\"><span>，无论基础类型和复杂类型，而在 CommonJS 中 require 的是值的拷贝，其中复杂类型是值的浅拷贝；</span></span></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20a.js%5Cnexport%20let%20a%20%3D%201%3B%5Cnexport%20function%20caculate()%20%7B%5Cn%20%20a%2B%2B%3B%5Cn%7D%3B%5Cn%5Cn%2F%2F%20b.js%5Cnimport%20%7B%20a%2C%20caculate%20%7D%20from%20'a.js'%3B%5Cn%5Cnconsole.log(a)%3B%20%2F%2F%201%5Cncaculate()%3B%5Cnconsole.log(a)%3B%20%2F%2F%202%5Cn%5Cna%20%3D%202%3B%20%2F%2F%20Syntax%20Error%3A%20%5C%22a%5C%22%20is%20read-only%22%2C%22id%22%3A%228I8Sx%22%7D\"></card><p><br /></p><h2 id=\"UMD\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#tfbfmg\" target=\"_blank\"></a><a target=\"_blank\"></a>UMD</h2><p><br /></p><p>通过一层自执行函数来兼容各种模块化规范的写法，兼容 AMD / CMD / CommonJS 等模块化规范，贴上代码胜过千言万语，需要特别注意的是 ES Module 由于会对静态代码进行分析，故这种运行时的方案无法使用，此时通过 CommonJS 进行兼容；</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function%20(global%2C%20factory)%20%7B%5Cn%20%20if%20(typeof%20exports%20%3D%3D%3D%20'object')%20%7B%20%20%20%5Cn%20%20%20%20module.exports%20%3D%20factory()%3B%5Cn%20%20%7D%20else%20if%20(typeof%20define%20%3D%3D%3D%20'function'%20%26%26%20define.amd)%20%7B%5Cn%20%20%20%20define(factory)%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20this.eventUtil%20%3D%20factory()%3B%5Cn%20%20%7D%5Cn%7D)(this%2C%20function%20(exports)%20%7B%5Cn%20%20%2F%2F%20Define%20Module%5Cn%20%20Object.defineProperty(exports%2C%20%5C%22__esModule%5C%22%2C%20%7B%5Cn%20%20%20%20value%3A%20true%5Cn%20%20%7D)%3B%5Cn%20%20exports.default%20%3D%2042%3B%5Cn%7D)%3B%22%2C%22id%22%3A%22PS5FM%22%7D\"></card><p><br /></p><h2 id=\"ebe15728\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#8gdlgf\" target=\"_blank\"></a>构建工具中的实现</h2><p><br /></p><p>为了在浏览器环境中运行模块化的代码，需要借助一些模块化打包的工具进行打包（ 以 webpack 为例），定义了项目入口之后，会先快速地进行依赖的分析，然后将所有依赖的模块转换成浏览器兼容的对应模块化规范的实现；</p><p><br /></p><h3 id=\"cc5efae8\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#7sinnb\" target=\"_blank\"></a>模块化的基础</h3><p><br /></p><p>从上面的介绍中，我们已经对其规范和实现有了一定的了解；在浏览器中，要实现 CommonJS 规范，只需要实现 module / exports / require / global 这几个属性，由于浏览器中是无法访问文件系统的，因此 require 过程中的文件定位需要改造为加载对应的 JS 片段（webpack 采用的方式为通过函数传参实现依赖的引入）。具体实现可以参考：<a target=\"_blank\" href=\"https://github.com/ruanyf/tiny-browser-require\">tiny-browser-require</a>。</p><p><br /></p><p>webpack 打包出来的代码快照如下，注意看注释中的时序；</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function%20(modules)%20%7B%5Cn%20%20%2F%2F%20The%20module%20cache%5Cn%20%20var%20installedModules%20%3D%20%7B%7D%3B%5Cn%20%20%2F%2F%20The%20require%20function%5Cn%20%20function%20__webpack_require__(moduleId)%20%7B%7D%5Cn%20%20return%20__webpack_require__(0)%3B%20%2F%2F%20---%3E%200%5Cn%7D)%5Cn(%7B%5Cn%20%200%3A%20function%20(module%2C%20exports%2C%20__webpack_require__)%20%7B%5Cn%20%20%20%20%2F%2F%20Define%20module%20A%5Cn%20%20%20%20var%20moduleB%20%3D%20__webpack_require__(1)%3B%20%2F%2F%20---%3E%201%5Cn%20%20%7D%2C%5Cn%20%201%3A%20function%20(module%2C%20exports%2C%20__webpack_require__)%20%7B%5Cn%20%20%20%20%2F%2F%20Define%20module%20B%5Cn%20%20%20%20exports%20%3D%20%7B%7D%3B%20%2F%2F%20---%3E%202%5Cn%20%20%7D%5Cn%7D)%3B%22%2C%22id%22%3A%22hlkYq%22%7D\"></card><p><br /></p><p>实际上，ES Module 的处理同 CommonJS 相差无几，只是在定义模块和引入模块时会去处理 __esModule 标识，从而兼容其在语法上的差异。</p><p><br /></p><h3 id=\"92bb1c20\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#oc2kgy\" target=\"_blank\"></a>异步和扩展</h3><p><br /></p><p>1、浏览器环境下，网络资源受到较大的限制，因此打包出来的文件如果体积巨大，对页面性能的损耗极大，因此需要对构建的目标文件进行拆分，同时模块也需要支持动态加载；</p><p><br /></p><p>webpack 提供了两个方法 require.ensure() 和 import() （推荐使用）进行模块的动态加载，至于其中的原理，跟上面提及的 AMD &amp; CMD 所见略同，import() 执行后返回一个 Promise 对象，其中所做的工作无非也是动态新增 script 标签，然后通过 onload / onerror 事件进一步处理。</p><p><br /></p><p>2、由于 require 函数是完全自定义的，我们可以在模块化中实现更多的特性，比如通过修改 require.resolve 或 Module._extensions 扩展支持的文件类型，使得 css / .jsx / .vue / 图片等文件也能为模块化所使用；</p><p><br /></p><h2 id=\"e31a6f29\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#wyfbct\" target=\"_blank\"></a>附录1：特性一览表</h2><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A5%2C%22cols%22%3A5%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20752px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22124%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%2295%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%2298%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22156%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22272%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%8A%A0%E8%BD%BD%E6%97%B6%E6%9C%BA%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%A4%87%E6%B3%A8%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3EAMD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E6%97%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3ECMD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E6%97%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cspan%20style%3D%5C%22color%3A%20%23262626%3B%20background-color%3A%20%23FFFFFF%3B%5C%22%3E%E4%BE%9D%E8%B5%96%E5%9F%BA%E4%BA%8E%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2Fseajs%2Fseajs%2Fblob%2F1.0.0%2Fsrc%2Ffn-define.js%23L72%5C%22%20target%3D%5C%22_blank%5C%22%3E%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%3C%2Fa%3E%3C%2Fspan%3E%3Cspan%20style%3D%5C%22color%3A%20%23262626%3B%20background-color%3A%20%23FFFFFF%3B%5C%22%3E%EF%BC%8Crequire%20%E6%97%B6%E5%B7%B2%E7%BB%8F%20module%20ready%3C%2Fspan%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3ECommonJS%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%90%8C%E6%AD%A5%2F%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E8%BF%90%E8%A1%8C%E6%97%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%20%2F%20Node%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3EES%20Module%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E5%90%8C%E6%AD%A5%2F%E5%BC%82%E6%AD%A5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E6%B5%8F%E8%A7%88%E5%99%A8%20%2F%20Node%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20rowspan%3D%5C%221%5C%22%20colspan%3D%5C%221%5C%22%20style%3D%5C%22vertical-align%3A%20top%3B%5C%22%3E%3Cp%3E%E9%80%9A%E8%BF%87%20import()%20%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%22BJi1w%22%7D\"></card><p><br /></p><p><a target=\"_blank\"></a></p><h2 id=\"f8215f17\"><a href=\"https://yuque.antfin-inc.com/txd-team/blog/gvfha7#f67zmx\" target=\"_blank\"></a>附录2：参考</h2><p><br /></p><ul><li>AMD 模块化规范: <a target=\"_blank\" href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\">https://github.com/amdjs/amdjs-api/wiki/AMD</a></li><li>CMD 模块定义规范：<a target=\"_blank\" href=\"https://github.com/seajs/seajs/issues/242\">https://github.com/seajs/seajs/issues/242</a></li><li>webpack 模块相关文档: <a target=\"_blank\" href=\"https://webpack.js.org/concepts/modules/\">https://webpack.js.org/concepts/modules/</a></li><li>浏览器加载 CommonJS 模块的原理与实现：<a target=\"_blank\" href=\"http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html\">http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html</a></li></ul><p><br /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 3,
    "comments_count": 2,
    "content_updated_at": "2019-04-28T13:34:42.000Z",
    "deleted_at": null,
    "created_at": "2018-08-09T08:27:39.000Z",
    "updated_at": "2022-01-13T03:19:15.000Z",
    "published_at": "2019-04-28T13:37:39.000Z",
    "first_published_at": null,
    "word_count": 2496,
    "cover": null,
    "description": "tags: [javascript, 模块化]date: 2018-08-10前言随着 Web 技术的蓬勃发展和依赖的基础设施日益完善，前端领域逐渐从浏览器扩展至服务端（Node.js），桌面端（PC、Android、iOS），乃至于物联网设备（IoT），其中 JavaScript 承载着这些...",
    "custom_description": null,
    "hits": 412,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709061,
    "slug": "bo4na0",
    "title": "你可能不知道的 Date 类",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 24,
      "content_updated_at": "2022-02-12T14:18:05.792Z",
      "updated_at": "2022-02-12T14:18:05.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 12,
        "public_books_count": 5,
        "followers_count": 94,
        "following_count": 31,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2022-02-12T09:08:14.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 12,
      "public_books_count": 5,
      "followers_count": 94,
      "following_count": 31,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2022-02-12T09:08:14.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "categories:\n\n- [javascript, Date]\n\ntags: [javascript, 时间处理]<br />date: 2017-12-17\n\n---\n\nDate 是 JS 中的重要的一个内置对象，其实例主要用于处理时间和日期，其时间基于 1970-1-1 (世界标准时间)起的毫秒数，时间戳长度为 13 位（不同于 Unix 时间戳的长度 10 位）。对于日期和时间，我们有无数个使用场景，因此需要特别注意一些细节和约定。\n\n<a name=\"bw68yn\"></a>\n### 1. 构造函数\n\n通过 new Date() 可以进行实例化，得到一个 Date 对象实例，值得注意的是如果直接执行 `Date()` ，将得到一个时间字符串。\n\n```javascript\nnew Date();\nnew Date(value);\nnew Date(dateString);\nnew Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);\n```\n\n<!-- more -->\n\n其中对构造函数的参数说明(参考 MDN )：\n\n- 如果没有输入任何参数，则Date的构造器会依据系统设置的当前时间来创建一个Date对象。\n\n- 如果提供了至少两个参数，其余的参数均会默认设置为1（如果没有提供day参数）或者0。\n\n- JavaScript的时间是由世界标准时间（UTC）1970年1月1日开始，用毫秒计时，一天由86,400,000毫秒组成。Date对象的范围是-100,000,000天至100,000,000天（等效的毫秒值）。\n\n- JavaScript的Date对象为跨平台提供了统一的行为。时间属性可以在不同的系统中表示相同的时刻，而如果使用了本地时间对象，则反映当地的时间。\n\n- JavaScript 的Date对象提供了数个UTC时间的方法，也相应提供了当地时间的方法。UTC，也就是我们所说的格林威治时间，指的是time中的世界时间标准。而当地时间则是指执行JavaScript的客户端电脑所设置的时间。\n\n- 以一个函数的形式来调用JavaScript的Date对象（i.e., 不使用 new 操作符）会返回一个代表当前日期和时间的字符串。\n\n\n<a name=\"iw21ng\"></a>\n### 2. 空值处理\n\n```javascript\n// 以chrome为例\nnew Date();\n// Mon Oct 23 2017 23:38:02 GMT+0800 (CST)\n\nnew Date(false);\n// Thu Jan 01 1970 08:00:00 GMT+0800 (CST)\n\nnew Date(0);\n// Thu Jan 01 1970 08:00:00 GMT+0800 (CST)\n\nnew Date(null);\n// Thu Jan 01 1970 08:00:00 GMT+0800 (CST)\n\nnew Date('');\n// Invalid Date\n\nnew Date(undefined);\n// Invalid Date\n```\n\n<a name=\"4i55ic\"></a>\n### 3. 特别提示\n\n[Firefox]\n\n不支持带 '-' 的完整时间，比如 new Date('2012-07-08 00:00:00') 为无效的值，而 new Date('2012-07-08') 是正确的值。\n\n[month]\n\n- new Date(year, month, ……) 中的month从0开始计算\n\n\n<a name=\"tfq1kl\"></a>\n### 4. 值的边界\n\n不同执行环境下的边界值有差异， Chrome 下甚至连负值都能支持。在实际生产环境中，不仅需要考虑时间的展示，还需要考虑其存储、计算等，因此在特定的场景下，我们需要尽可能考虑到数据库和浏览器中 Date 的有效范围。\n\n以数据库 `Derby` 存储时间为例，其边界为：\n\n| 说明 | 边界值 |\n| --- | --- |\n| 最小的日期 | 0001-01-01 |\n| 最大的日期 | 9999-12-31 |\n| 最小的时间 | 00:00:00 |\n| 最大的时间 | 24:00:00 |\n| 最小的时间戳 | 0001-01-01-00.00.00.000000 |\n| 最大的时间戳 | 9999-12-31-23.59.59.999999 |\n\n\n在 `mysql` 中，其范围定义为 `1000-01-01`to`9999-12-31`；<br />在 `js` 中，时间戳的最小值为 `-8640000000000000` 即公元前 271,821 年 4 月 20 日，最大值为 `8640000000000000`，即 275,760 年 9 月 13 日。规范中时间范围为 1970/1/1 前后 `100,000,000` 天。\n\n<a name=\"316knr\"></a>\n### 5. 2038 年虫\n\n听说，2038 年之后时间戳不够用了。\n\n> 在计算机应用上，2038年问题可能会导致某些软件在2038年无法正常工作。所有使用UNIX时间表示时间的程序都将受其影响，因为它们以自1970年1月1日经过的秒数（忽略闰秒）来表示时间。这种时间表示法在类Unix（Unix-like）操作系统上是一个标准，并会影响以其C编程语言开发给其他大部份操作系统使用的软件。在大部份的32位操作系统上，此“time_t”数据模式使用一个有正负号的32位元整数(signedint32)存储计算的秒数。依照此“time_t”标准，在此格式能被表示的最后时间是2038年1月19日03:14:07，星期二（UTC）。超过此一瞬间，时间将会被掩盖（wrap around）且在内部被表示为一个负数，并造成程序无法工作，因为它们无法将此时间识别为2038年，而可能会依个别实作而跳回1970年或1901年。错误的计算及动作可能因此产生。\n\n\n实际上参考第 4 部分，Date 的上限绰绰有余，大家可以拿起手头的设备测试一下 2038 年会出现怎样的异状。\n\n<a name=\"rgszhm\"></a>\n### 6. 参考\n\n1、EmacScript 语言规范 - [http://ecma-international.org/ecma-262/5.1/#sec-15.9](http://ecma-international.org/ecma-262/5.1/#sec-15.9)<br />2、Mysql 时间范围 - [https://dev.mysql.com/doc/refman/5.5/en/datetime.html](https://dev.mysql.com/doc/refman/5.5/en/datetime.html)<br />3、JS 时间戳边界 - [https://stackoverflow.com/questions/11526504/minimum-and-maximum-date](https://stackoverflow.com/questions/11526504/minimum-and-maximum-date)\n\n<a name=\"kkpnsm\"></a>\n### 7. 库\n\n- [moment](https://github.com/moment/moment) - 重量级时间处理库，支持时间解析、格式化、计算等，功能强大，支持浏览器和 Node.js，压缩后体积约为 16.3 KB\n\n- [date-fns](https://github.com/date-fns/date-fns) - 较 moment 更轻量级的事件处理库，体积更小\n\n- [dayjs](https://github.com/iamkun/dayjs) - 更轻量级的 moment.js\n\n\n",
    "body_draft": "categories:\n\n- [javascript, Date]\n\ntags: [javascript, 时间处理]<br />date: 2017-12-17\n\n---\n\nDate 是 JS 中的重要的一个内置对象，其实例主要用于处理时间和日期，其时间基于 1970-1-1 (世界标准时间)起的毫秒数，时间戳长度为 13 位（不同于 Unix 时间戳的长度 10 位）。对于日期和时间，我们有无数个使用场景，因此需要特别注意一些细节和约定。\n\n<a name=\"bw68yn\"></a>\n### 1. 构造函数\n\n通过 new Date() 可以进行实例化，得到一个 Date 对象实例，值得注意的是如果直接执行 `Date()` ，将得到一个时间字符串。\n\n```javascript\nnew Date();\nnew Date(value);\nnew Date(dateString);\nnew Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);\n```\n\n<!-- more -->\n\n其中对构造函数的参数说明(参考 MDN )：\n\n- 如果没有输入任何参数，则Date的构造器会依据系统设置的当前时间来创建一个Date对象。\n\n- 如果提供了至少两个参数，其余的参数均会默认设置为1（如果没有提供day参数）或者0。\n\n- JavaScript的时间是由世界标准时间（UTC）1970年1月1日开始，用毫秒计时，一天由86,400,000毫秒组成。Date对象的范围是-100,000,000天至100,000,000天（等效的毫秒值）。\n\n- JavaScript的Date对象为跨平台提供了统一的行为。时间属性可以在不同的系统中表示相同的时刻，而如果使用了本地时间对象，则反映当地的时间。\n\n- JavaScript 的Date对象提供了数个UTC时间的方法，也相应提供了当地时间的方法。UTC，也就是我们所说的格林威治时间，指的是time中的世界时间标准。而当地时间则是指执行JavaScript的客户端电脑所设置的时间。\n\n- 以一个函数的形式来调用JavaScript的Date对象（i.e., 不使用 new 操作符）会返回一个代表当前日期和时间的字符串。\n\n\n<a name=\"iw21ng\"></a>\n### 2. 空值处理\n\n```javascript\n// 以chrome为例\nnew Date();\n// Mon Oct 23 2017 23:38:02 GMT+0800 (CST)\n\nnew Date(false);\n// Thu Jan 01 1970 08:00:00 GMT+0800 (CST)\n\nnew Date(0);\n// Thu Jan 01 1970 08:00:00 GMT+0800 (CST)\n\nnew Date(null);\n// Thu Jan 01 1970 08:00:00 GMT+0800 (CST)\n\nnew Date('');\n// Invalid Date\n\nnew Date(undefined);\n// Invalid Date\n```\n\n<a name=\"4i55ic\"></a>\n### 3. 特别提示\n\n[Firefox]\n\n不支持带 '-' 的完整时间，比如 new Date('2012-07-08 00:00:00') 为无效的值，而 new Date('2012-07-08') 是正确的值。\n\n[month]\n\n- new Date(year, month, ……) 中的month从0开始计算\n\n\n<a name=\"tfq1kl\"></a>\n### 4. 值的边界\n\n不同执行环境下的边界值有差异， Chrome 下甚至连负值都能支持。在实际生产环境中，不仅需要考虑时间的展示，还需要考虑其存储、计算等，因此在特定的场景下，我们需要尽可能考虑到数据库和浏览器中 Date 的有效范围。\n\n以数据库 `Derby` 存储时间为例，其边界为：\n\n| 说明 | 边界值 |\n| --- | --- |\n| 最小的日期 | 0001-01-01 |\n| 最大的日期 | 9999-12-31 |\n| 最小的时间 | 00:00:00 |\n| 最大的时间 | 24:00:00 |\n| 最小的时间戳 | 0001-01-01-00.00.00.000000 |\n| 最大的时间戳 | 9999-12-31-23.59.59.999999 |\n\n\n在 `mysql` 中，其范围定义为 `1000-01-01`to`9999-12-31`；<br />在 `js` 中，时间戳的最小值为 `-8640000000000000` 即公元前 271,821 年 4 月 20 日，最大值为 `8640000000000000`，即 275,760 年 9 月 13 日。规范中时间范围为 1970/1/1 前后 `100,000,000` 天。\n\n<a name=\"316knr\"></a>\n### 5. 2038 年虫\n\n听说，2038 年之后时间戳不够用了。\n\n> 在计算机应用上，2038年问题可能会导致某些软件在2038年无法正常工作。所有使用UNIX时间表示时间的程序都将受其影响，因为它们以自1970年1月1日经过的秒数（忽略闰秒）来表示时间。这种时间表示法在类Unix（Unix-like）操作系统上是一个标准，并会影响以其C编程语言开发给其他大部份操作系统使用的软件。在大部份的32位操作系统上，此“time_t”数据模式使用一个有正负号的32位元整数(signedint32)存储计算的秒数。依照此“time_t”标准，在此格式能被表示的最后时间是2038年1月19日03:14:07，星期二（UTC）。超过此一瞬间，时间将会被掩盖（wrap around）且在内部被表示为一个负数，并造成程序无法工作，因为它们无法将此时间识别为2038年，而可能会依个别实作而跳回1970年或1901年。错误的计算及动作可能因此产生。\n\n\n实际上参考第 4 部分，Date 的上限绰绰有余，大家可以拿起手头的设备测试一下 2038 年会出现怎样的异状。\n\n<a name=\"rgszhm\"></a>\n### 6. 参考\n\n1、EmacScript 语言规范 - [http://ecma-international.org/ecma-262/5.1/#sec-15.9](http://ecma-international.org/ecma-262/5.1/#sec-15.9)<br />2、Mysql 时间范围 - [https://dev.mysql.com/doc/refman/5.5/en/datetime.html](https://dev.mysql.com/doc/refman/5.5/en/datetime.html)<br />3、JS 时间戳边界 - [https://stackoverflow.com/questions/11526504/minimum-and-maximum-date](https://stackoverflow.com/questions/11526504/minimum-and-maximum-date)\n\n<a name=\"kkpnsm\"></a>\n### 7. 库\n\n- [moment](https://github.com/moment/moment) - 重量级时间处理库，支持时间解析、格式化、计算等，功能强大，支持浏览器和 Node.js，压缩后体积约为 16.3 KB\n\n- [date-fns](https://github.com/date-fns/date-fns) - 较 moment 更轻量级的事件处理库，体积更小\n\n- [dayjs](https://github.com/iamkun/dayjs) - 更轻量级的 moment.js\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content-editor-core lake-engine lake-typography-traditional\" data-lake-element=\"root\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">categories:</p><ul start=\"-\" lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li>[javascript, Date]</li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">tags: [javascript, 时间处理]</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">date: 2017-12-17</p><div data-card-type=\"block\" data-lake-card=\"hr\" id=\"pBkTe\"><hr style=\"background-color: rgb(232, 232, 232); border: 1px solid transparent; margin: 18px 0px;\"></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">Date 是 JS 中的重要的一个内置对象，其实例主要用于处理时间和日期，其时间基于 1970-1-1 (世界标准时间)起的毫秒数，时间戳长度为 13 位（不同于 Unix 时间戳的长度 10 位）。对于日期和时间，我们有无数个使用场景，因此需要特别注意一些细节和约定。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"bw68yn\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">1. 构造函数</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">通过 new Date() 可以进行实例化，得到一个 Date 对象实例，值得注意的是如果直接执行 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Date()</code> ，将得到一个时间字符串。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"35ab5454\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Date</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Date</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">value</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Date</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">dateString</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Date</span>(<span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">year</span>, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">month</span>[, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">day</span>[, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">hour</span>[, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">minutes</span>[, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">seconds</span>[, <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">milliseconds</span>]]]]]);</span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">&lt;!-- more --&gt;</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">其中对构造函数的参数说明(参考 MDN )：</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">如果没有输入任何参数，则Date的构造器会依据系统设置的当前时间来创建一个Date对象。</p></li></ul><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">如果提供了至少两个参数，其余的参数均会默认设置为1（如果没有提供day参数）或者0。</p></li></ul><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JavaScript的时间是由世界标准时间（UTC）1970年1月1日开始，用毫秒计时，一天由86,400,000毫秒组成。Date对象的范围是-100,000,000天至100,000,000天（等效的毫秒值）。</p></li></ul><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JavaScript的Date对象为跨平台提供了统一的行为。时间属性可以在不同的系统中表示相同的时刻，而如果使用了本地时间对象，则反映当地的时间。</p></li></ul><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">JavaScript 的Date对象提供了数个UTC时间的方法，也相应提供了当地时间的方法。UTC，也就是我们所说的格林威治时间，指的是time中的世界时间标准。而当地时间则是指执行JavaScript的客户端电脑所设置的时间。</p></li></ul><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">以一个函数的形式来调用JavaScript的Date对象（i.e., 不使用 new 操作符）会返回一个代表当前日期和时间的字符串。</p></li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"iw21ng\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">2. 空值处理</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><div data-card-type=\"block\" data-lake-card=\"codeblock\" id=\"e0e38380\"><div class=\"lake-codeblock-content\" style=\"border: 1px solid rgb(232, 232, 232); max-width: 750px; color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: rgb(249, 249, 249);\"><div class=\"\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 16px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><pre class=\"cm-s-default\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// 以chrome为例</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Date</span>();\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Mon Oct 23 2017 23:38:02 GMT+0800 (CST)</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Date</span>(<span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">false</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Thu Jan 01 1970 08:00:00 GMT+0800 (CST)</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Date</span>(<span class=\"cm-number\" style=\"color: rgb(0, 92, 197); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">0</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-1\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Thu Jan 01 1970 08:00:00 GMT+0800 (CST)</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Date</span>(<span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">null</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Thu Jan 01 1970 08:00:00 GMT+0800 (CST)</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Date</span>(<span class=\"cm-string\" style=\"color: rgb(102, 153, 0); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">''</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Invalid Date</span>\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-keyword\" style=\"color: rgb(215, 58, 73); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">new</span> <span class=\"cm-variable\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">Date</span>(<span class=\"cm-atom\" style=\"color: rgb(153, 0, 85); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">undefined</span>);\n</span></span><span class=\"lake-preview-line\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"lake-preview-line-number lake-lm-pad-level-0\" style=\"color: rgb(191, 191, 191); margin: 0px 8px 0px 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"></span><span class=\"lake-preview-codeblock-content\" style=\"color: rgb(89, 89, 89); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\"><span class=\"cm-comment\" style=\"color: rgb(106, 115, 125); margin: 0px; padding: 0px; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0);\">// Invalid Date</span></span></span></pre></div></div></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"4i55ic\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">3. 特别提示</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">[Firefox]</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">不支持带 '-' 的完整时间，比如 new Date('2012-07-08 00:00:00') 为无效的值，而 new Date('2012-07-08') 是正确的值。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">[month]</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">new Date(year, month, ……) 中的month从0开始计算</p></li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"tfq1kl\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">4. 值的边界</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">不同执行环境下的边界值有差异， Chrome 下甚至连负值都能支持。在实际生产环境中，不仅需要考虑时间的展示，还需要考虑其存储、计算等，因此在特定的场景下，我们需要尽可能考虑到数据库和浏览器中 Date 的有效范围。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">以数据库 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">Derby</code> 存储时间为例，其边界为：</p><div data-card-type=\"block\" data-lake-card=\"table\" id=\"5c7e79b7\"><table class=\"lake-table\" style=\"width: 750px; outline: none; border-collapse: collapse;\"><colgroup><col width=\"375\" span=\"1\"><col width=\"375\" span=\"1\"></colgroup><tbody><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">说明</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">边界值</p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">最小的日期</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">0001-01-01</p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">最大的日期</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">9999-12-31</p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">最小的时间</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">00:00:00</p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">最大的时间</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">24:00:00</p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">最小的时间戳</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">0001-01-01-00.00.00.000000</p></td></tr><tr style=\"height: 33px;\"><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">最大的时间戳</p></td><td style=\"min-width: 90px; font-size: 14px; white-space: normal; overflow-wrap: break-word; border: 1px solid rgb(217, 217, 217); padding: 4px 8px; cursor: default;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">9999-12-31-23.59.59.999999</p></td></tr></tbody></table></div><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">mysql</code> 中，其范围定义为 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">1000-01-01</code>to<code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">9999-12-31</code>；<br>在 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">js</code> 中，时间戳的最小值为 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">-8640000000000000</code> 即公元前 271,821 年 4 月 20 日，最大值为 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">8640000000000000</code>，即 275,760 年 9 月 13 日。规范中时间范围为 1970/1/1 前后 <code style=\"font-family: monospace; font-size: inherit; background-color: rgba(0, 0, 0, 0.06); padding: 0px 2px; border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 2px; line-height: inherit; overflow-wrap: break-word; text-indent: 0px;\">100,000,000</code> 天。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"316knr\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">5. 2038 年虫</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">听说，2038 年之后时间戳不够用了。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><blockquote style=\"margin-top: 5px; margin-bottom: 5px; padding-left: 1em; margin-left: 0px; border-left: 3px solid rgb(238, 238, 238); opacity: 0.6;\"><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">在计算机应用上，2038年问题可能会导致某些软件在2038年无法正常工作。所有使用UNIX时间表示时间的程序都将受其影响，因为它们以自1970年1月1日经过的秒数（忽略闰秒）来表示时间。这种时间表示法在类Unix（Unix-like）操作系统上是一个标准，并会影响以其C编程语言开发给其他大部份操作系统使用的软件。在大部份的32位操作系统上，此“time_t”数据模式使用一个有正负号的32位元整数(signedint32)存储计算的秒数。依照此“time_t”标准，在此格式能被表示的最后时间是2038年1月19日03:14:07，星期二（UTC）。超过此一瞬间，时间将会被掩盖（wrap around）且在内部被表示为一个负数，并造成程序无法工作，因为它们无法将此时间识别为2038年，而可能会依个别实作而跳回1970年或1901年。错误的计算及动作可能因此产生。</p></blockquote><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">实际上参考第 4 部分，Date 的上限绰绰有余，大家可以拿起手头的设备测试一下 2038 年会出现怎样的异状。</p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"rgszhm\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">6. 参考</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">1、EmacScript 语言规范 - <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-15.9\" target=\"_blank\">http://ecma-international.org/ecma-262/5.1/#sec-15.9</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">2、Mysql 时间范围 - <a href=\"https://dev.mysql.com/doc/refman/5.5/en/datetime.html\" target=\"_blank\">https://dev.mysql.com/doc/refman/5.5/en/datetime.html</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\">3、JS 时间戳边界 - <a href=\"https://stackoverflow.com/questions/11526504/minimum-and-maximum-date\" target=\"_blank\">https://stackoverflow.com/questions/11526504/minimum-and-maximum-date</a></p><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><h3 id=\"kkpnsm\" style=\"padding: 7px 0px; margin: 0px; font-weight: 700; font-size: 20px; line-height: 28px;\">7. 库</h3><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/moment/moment\" target=\"_blank\">moment</a> - 重量级时间处理库，支持时间解析、格式化、计算等，功能强大，支持浏览器和 Node.js，压缩后体积约为 16.3 KB</p></li></ul><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/date-fns/date-fns\" target=\"_blank\">date-fns</a> - 较 moment 更轻量级的事件处理库，体积更小</p></li></ul><ul lake-indent=\"0\" style=\"list-style-type: disc; margin: 0px; padding-left: 23px; font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word;\"><li><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><a href=\"https://github.com/iamkun/dayjs\" target=\"_blank\">dayjs</a> - 更轻量级的 moment.js</p></li></ul><p style=\"font-size: 14px; color: rgb(38, 38, 38); line-height: 1.74; letter-spacing: 0.05em; outline-style: none; overflow-wrap: break-word; margin: 0px;\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p>categories:</p><ul><li>[javascript, Date]</li></ul><p>tags: [javascript, 时间处理]</p><p>date: 2017-12-17</p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22pBkTe%22%7D\"></card><p>Date 是 JS 中的重要的一个内置对象，其实例主要用于处理时间和日期，其时间基于 1970-1-1 (世界标准时间)起的毫秒数，时间戳长度为 13 位（不同于 Unix 时间戳的长度 10 位）。对于日期和时间，我们有无数个使用场景，因此需要特别注意一些细节和约定。</p><p><br /></p><h3 id=\"bw68yn\">1. 构造函数</h3><p><br /></p><p>通过 new Date() 可以进行实例化，得到一个 Date 对象实例，值得注意的是如果直接执行 <code>Date()</code> ，将得到一个时间字符串。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2235ab5454%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22new%20Date()%3B%5Cnnew%20Date(value)%3B%5Cnnew%20Date(dateString)%3B%5Cnnew%20Date(year%2C%20month%5B%2C%20day%5B%2C%20hour%5B%2C%20minutes%5B%2C%20seconds%5B%2C%20milliseconds%5D%5D%5D%5D%5D)%3B%22%7D\"></card><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p>其中对构造函数的参数说明(参考 MDN )：</p><p><br /></p><ul><li><p>如果没有输入任何参数，则Date的构造器会依据系统设置的当前时间来创建一个Date对象。</p></li></ul><ul><li><p>如果提供了至少两个参数，其余的参数均会默认设置为1（如果没有提供day参数）或者0。</p></li></ul><ul><li><p>JavaScript的时间是由世界标准时间（UTC）1970年1月1日开始，用毫秒计时，一天由86,400,000毫秒组成。Date对象的范围是-100,000,000天至100,000,000天（等效的毫秒值）。</p></li></ul><ul><li><p>JavaScript的Date对象为跨平台提供了统一的行为。时间属性可以在不同的系统中表示相同的时刻，而如果使用了本地时间对象，则反映当地的时间。</p></li></ul><ul><li><p>JavaScript 的Date对象提供了数个UTC时间的方法，也相应提供了当地时间的方法。UTC，也就是我们所说的格林威治时间，指的是time中的世界时间标准。而当地时间则是指执行JavaScript的客户端电脑所设置的时间。</p></li></ul><ul><li><p>以一个函数的形式来调用JavaScript的Date对象（i.e., 不使用 new 操作符）会返回一个代表当前日期和时间的字符串。</p></li></ul><p><br /></p><h3 id=\"iw21ng\">2. 空值处理</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22e0e38380%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E4%BB%A5chrome%E4%B8%BA%E4%BE%8B%5Cnnew%20Date()%3B%5Cn%2F%2F%20Mon%20Oct%2023%202017%2023%3A38%3A02%20GMT%2B0800%20(CST)%5Cn%5Cnnew%20Date(false)%3B%5Cn%2F%2F%20Thu%20Jan%2001%201970%2008%3A00%3A00%20GMT%2B0800%20(CST)%5Cn%5Cnnew%20Date(0)%3B%5Cn%2F%2F%20Thu%20Jan%2001%201970%2008%3A00%3A00%20GMT%2B0800%20(CST)%5Cn%5Cnnew%20Date(null)%3B%5Cn%2F%2F%20Thu%20Jan%2001%201970%2008%3A00%3A00%20GMT%2B0800%20(CST)%5Cn%5Cnnew%20Date('')%3B%5Cn%2F%2F%20Invalid%20Date%5Cn%5Cnnew%20Date(undefined)%3B%5Cn%2F%2F%20Invalid%20Date%22%7D\"></card><p><br /></p><h3 id=\"4i55ic\">3. 特别提示</h3><p><br /></p><p>[Firefox]</p><p><br /></p><p>不支持带 '-' 的完整时间，比如 new Date('2012-07-08 00:00:00') 为无效的值，而 new Date('2012-07-08') 是正确的值。</p><p><br /></p><p>[month]</p><p><br /></p><ul><li><p>new Date(year, month, ……) 中的month从0开始计算</p></li></ul><p><br /></p><h3 id=\"tfq1kl\">4. 值的边界</h3><p><br /></p><p>不同执行环境下的边界值有差异， Chrome 下甚至连负值都能支持。在实际生产环境中，不仅需要考虑时间的展示，还需要考虑其存储、计算等，因此在特定的场景下，我们需要尽可能考虑到数据库和浏览器中 Date 的有效范围。</p><p><br /></p><p>以数据库 <code>Derby</code> 存储时间为例，其边界为：</p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A7%2C%22cols%22%3A2%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22375%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22375%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E8%AF%B4%E6%98%8E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E8%BE%B9%E7%95%8C%E5%80%BC%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%B0%8F%E7%9A%84%E6%97%A5%E6%9C%9F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E0001-01-01%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%A4%A7%E7%9A%84%E6%97%A5%E6%9C%9F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E9999-12-31%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%B0%8F%E7%9A%84%E6%97%B6%E9%97%B4%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E00%3A00%3A00%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%A4%A7%E7%9A%84%E6%97%B6%E9%97%B4%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E24%3A00%3A00%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%B0%8F%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E0001-01-01-00.00.00.000000%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%A4%A7%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E9999-12-31-23.59.59.999999%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%225c7e79b7%22%7D\"></card><p><br /></p><p>在 <code>mysql</code> 中，其范围定义为 <code>1000-01-01</code>to<code>9999-12-31</code>；<br />在 <code>js</code> 中，时间戳的最小值为 <code>-8640000000000000</code> 即公元前 271,821 年 4 月 20 日，最大值为 <code>8640000000000000</code>，即 275,760 年 9 月 13 日。规范中时间范围为 1970/1/1 前后 <code>100,000,000</code> 天。</p><p><br /></p><h3 id=\"316knr\">5. 2038 年虫</h3><p><br /></p><p>听说，2038 年之后时间戳不够用了。</p><p><br /></p><blockquote><p>在计算机应用上，2038年问题可能会导致某些软件在2038年无法正常工作。所有使用UNIX时间表示时间的程序都将受其影响，因为它们以自1970年1月1日经过的秒数（忽略闰秒）来表示时间。这种时间表示法在类Unix（Unix-like）操作系统上是一个标准，并会影响以其C编程语言开发给其他大部份操作系统使用的软件。在大部份的32位操作系统上，此“time_t”数据模式使用一个有正负号的32位元整数(signedint32)存储计算的秒数。依照此“time_t”标准，在此格式能被表示的最后时间是2038年1月19日03:14:07，星期二（UTC）。超过此一瞬间，时间将会被掩盖（wrap around）且在内部被表示为一个负数，并造成程序无法工作，因为它们无法将此时间识别为2038年，而可能会依个别实作而跳回1970年或1901年。错误的计算及动作可能因此产生。</p></blockquote><p><br /></p><p>实际上参考第 4 部分，Date 的上限绰绰有余，大家可以拿起手头的设备测试一下 2038 年会出现怎样的异状。</p><p><br /></p><h3 id=\"rgszhm\">6. 参考</h3><p><br /></p><p>1、EmacScript 语言规范 - <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-15.9\" target=\"_blank\">http://ecma-international.org/ecma-262/5.1/#sec-15.9</a></p><p>2、Mysql 时间范围 - <a href=\"https://dev.mysql.com/doc/refman/5.5/en/datetime.html\" target=\"_blank\">https://dev.mysql.com/doc/refman/5.5/en/datetime.html</a></p><p>3、JS 时间戳边界 - <a href=\"https://stackoverflow.com/questions/11526504/minimum-and-maximum-date\" target=\"_blank\">https://stackoverflow.com/questions/11526504/minimum-and-maximum-date</a></p><p><br /></p><h3 id=\"kkpnsm\">7. 库</h3><p><br /></p><ul><li><p><a href=\"https://github.com/moment/moment\" target=\"_blank\">moment</a> - 重量级时间处理库，支持时间解析、格式化、计算等，功能强大，支持浏览器和 Node.js，压缩后体积约为 16.3 KB</p></li></ul><ul><li><p><a href=\"https://github.com/date-fns/date-fns\" target=\"_blank\">date-fns</a> - 较 moment 更轻量级的事件处理库，体积更小</p></li></ul><ul><li><p><a href=\"https://github.com/iamkun/dayjs\" target=\"_blank\">dayjs</a> - 更轻量级的 moment.js</p></li></ul><p><br /></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"traditional\" /><p>categories:</p><ul><li>[javascript, Date]</li></ul><p>tags: [javascript, 时间处理]</p><p>date: 2017-12-17</p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22pBkTe%22%7D\"></card><p>Date 是 JS 中的重要的一个内置对象，其实例主要用于处理时间和日期，其时间基于 1970-1-1 (世界标准时间)起的毫秒数，时间戳长度为 13 位（不同于 Unix 时间戳的长度 10 位）。对于日期和时间，我们有无数个使用场景，因此需要特别注意一些细节和约定。</p><p><br /></p><h3 id=\"bw68yn\">1. 构造函数</h3><p><br /></p><p>通过 new Date() 可以进行实例化，得到一个 Date 对象实例，值得注意的是如果直接执行 <code>Date()</code> ，将得到一个时间字符串。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2235ab5454%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22new%20Date()%3B%5Cnnew%20Date(value)%3B%5Cnnew%20Date(dateString)%3B%5Cnnew%20Date(year%2C%20month%5B%2C%20day%5B%2C%20hour%5B%2C%20minutes%5B%2C%20seconds%5B%2C%20milliseconds%5D%5D%5D%5D%5D)%3B%22%7D\"></card><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p>其中对构造函数的参数说明(参考 MDN )：</p><p><br /></p><ul><li><p>如果没有输入任何参数，则Date的构造器会依据系统设置的当前时间来创建一个Date对象。</p></li></ul><ul><li><p>如果提供了至少两个参数，其余的参数均会默认设置为1（如果没有提供day参数）或者0。</p></li></ul><ul><li><p>JavaScript的时间是由世界标准时间（UTC）1970年1月1日开始，用毫秒计时，一天由86,400,000毫秒组成。Date对象的范围是-100,000,000天至100,000,000天（等效的毫秒值）。</p></li></ul><ul><li><p>JavaScript的Date对象为跨平台提供了统一的行为。时间属性可以在不同的系统中表示相同的时刻，而如果使用了本地时间对象，则反映当地的时间。</p></li></ul><ul><li><p>JavaScript 的Date对象提供了数个UTC时间的方法，也相应提供了当地时间的方法。UTC，也就是我们所说的格林威治时间，指的是time中的世界时间标准。而当地时间则是指执行JavaScript的客户端电脑所设置的时间。</p></li></ul><ul><li><p>以一个函数的形式来调用JavaScript的Date对象（i.e., 不使用 new 操作符）会返回一个代表当前日期和时间的字符串。</p></li></ul><p><br /></p><h3 id=\"iw21ng\">2. 空值处理</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22e0e38380%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E4%BB%A5chrome%E4%B8%BA%E4%BE%8B%5Cnnew%20Date()%3B%5Cn%2F%2F%20Mon%20Oct%2023%202017%2023%3A38%3A02%20GMT%2B0800%20(CST)%5Cn%5Cnnew%20Date(false)%3B%5Cn%2F%2F%20Thu%20Jan%2001%201970%2008%3A00%3A00%20GMT%2B0800%20(CST)%5Cn%5Cnnew%20Date(0)%3B%5Cn%2F%2F%20Thu%20Jan%2001%201970%2008%3A00%3A00%20GMT%2B0800%20(CST)%5Cn%5Cnnew%20Date(null)%3B%5Cn%2F%2F%20Thu%20Jan%2001%201970%2008%3A00%3A00%20GMT%2B0800%20(CST)%5Cn%5Cnnew%20Date('')%3B%5Cn%2F%2F%20Invalid%20Date%5Cn%5Cnnew%20Date(undefined)%3B%5Cn%2F%2F%20Invalid%20Date%22%7D\"></card><p><br /></p><h3 id=\"4i55ic\">3. 特别提示</h3><p><br /></p><p>[Firefox]</p><p><br /></p><p>不支持带 '-' 的完整时间，比如 new Date('2012-07-08 00:00:00') 为无效的值，而 new Date('2012-07-08') 是正确的值。</p><p><br /></p><p>[month]</p><p><br /></p><ul><li><p>new Date(year, month, ……) 中的month从0开始计算</p></li></ul><p><br /></p><h3 id=\"tfq1kl\">4. 值的边界</h3><p><br /></p><p>不同执行环境下的边界值有差异， Chrome 下甚至连负值都能支持。在实际生产环境中，不仅需要考虑时间的展示，还需要考虑其存储、计算等，因此在特定的场景下，我们需要尽可能考虑到数据库和浏览器中 Date 的有效范围。</p><p><br /></p><p>以数据库 <code>Derby</code> 存储时间为例，其边界为：</p><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A7%2C%22cols%22%3A2%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22375%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22375%5C%22%20span%3D%5C%221%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E8%AF%B4%E6%98%8E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E8%BE%B9%E7%95%8C%E5%80%BC%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%B0%8F%E7%9A%84%E6%97%A5%E6%9C%9F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E0001-01-01%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%A4%A7%E7%9A%84%E6%97%A5%E6%9C%9F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E9999-12-31%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%B0%8F%E7%9A%84%E6%97%B6%E9%97%B4%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E00%3A00%3A00%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%A4%A7%E7%9A%84%E6%97%B6%E9%97%B4%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E24%3A00%3A00%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%B0%8F%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E0001-01-01-00.00.00.000000%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%3Cp%3E%E6%9C%80%E5%A4%A7%E7%9A%84%E6%97%B6%E9%97%B4%E6%88%B3%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E9999-12-31-23.59.59.999999%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%225c7e79b7%22%7D\"></card><p><br /></p><p>在 <code>mysql</code> 中，其范围定义为 <code>1000-01-01</code>to<code>9999-12-31</code>；<br />在 <code>js</code> 中，时间戳的最小值为 <code>-8640000000000000</code> 即公元前 271,821 年 4 月 20 日，最大值为 <code>8640000000000000</code>，即 275,760 年 9 月 13 日。规范中时间范围为 1970/1/1 前后 <code>100,000,000</code> 天。</p><p><br /></p><h3 id=\"316knr\">5. 2038 年虫</h3><p><br /></p><p>听说，2038 年之后时间戳不够用了。</p><p><br /></p><blockquote><p>在计算机应用上，2038年问题可能会导致某些软件在2038年无法正常工作。所有使用UNIX时间表示时间的程序都将受其影响，因为它们以自1970年1月1日经过的秒数（忽略闰秒）来表示时间。这种时间表示法在类Unix（Unix-like）操作系统上是一个标准，并会影响以其C编程语言开发给其他大部份操作系统使用的软件。在大部份的32位操作系统上，此“time_t”数据模式使用一个有正负号的32位元整数(signedint32)存储计算的秒数。依照此“time_t”标准，在此格式能被表示的最后时间是2038年1月19日03:14:07，星期二（UTC）。超过此一瞬间，时间将会被掩盖（wrap around）且在内部被表示为一个负数，并造成程序无法工作，因为它们无法将此时间识别为2038年，而可能会依个别实作而跳回1970年或1901年。错误的计算及动作可能因此产生。</p></blockquote><p><br /></p><p>实际上参考第 4 部分，Date 的上限绰绰有余，大家可以拿起手头的设备测试一下 2038 年会出现怎样的异状。</p><p><br /></p><h3 id=\"rgszhm\">6. 参考</h3><p><br /></p><p>1、EmacScript 语言规范 - <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-15.9\" target=\"_blank\">http://ecma-international.org/ecma-262/5.1/#sec-15.9</a></p><p>2、Mysql 时间范围 - <a href=\"https://dev.mysql.com/doc/refman/5.5/en/datetime.html\" target=\"_blank\">https://dev.mysql.com/doc/refman/5.5/en/datetime.html</a></p><p>3、JS 时间戳边界 - <a href=\"https://stackoverflow.com/questions/11526504/minimum-and-maximum-date\" target=\"_blank\">https://stackoverflow.com/questions/11526504/minimum-and-maximum-date</a></p><p><br /></p><h3 id=\"kkpnsm\">7. 库</h3><p><br /></p><ul><li><p><a href=\"https://github.com/moment/moment\" target=\"_blank\">moment</a> - 重量级时间处理库，支持时间解析、格式化、计算等，功能强大，支持浏览器和 Node.js，压缩后体积约为 16.3 KB</p></li></ul><ul><li><p><a href=\"https://github.com/date-fns/date-fns\" target=\"_blank\">date-fns</a> - 较 moment 更轻量级的事件处理库，体积更小</p></li></ul><ul><li><p><a href=\"https://github.com/iamkun/dayjs\" target=\"_blank\">dayjs</a> - 更轻量级的 moment.js</p></li></ul><p><br /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2020-03-22T02:52:21.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:49:02.000Z",
    "updated_at": "2020-03-22T02:52:22.000Z",
    "published_at": "2020-03-22T02:52:21.000Z",
    "first_published_at": null,
    "word_count": 1387,
    "cover": null,
    "description": "categories:[javascript, Date]tags: [javascript, 时间处理]date: 2017-12-17Date 是 JS 中的重要的一个内置对象，其实例主要用于处理时间和日期，其时间基于 1970-1-1 (世界标准时间)起的毫秒数，时间戳长度为 13 位（...",
    "custom_description": null,
    "hits": 198,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709060,
    "slug": "iov5sg",
    "title": "一套Vue的单页模板：N3-admin",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [javascript, vue, N3-components]<br />date: 2017-08-13\n\n---\n\n趁着周末偷来一点闲，总结近期的工作和学习，想着该花点心思把N3-admin这套基于N3-components的单页应用模板简单的给介绍一下。\n\n> 项目路径: [https://github.com/N3-components/N3-admin](https://github.com/N3-components/N3-admin)<br />ps: 本项目不同于vue-admin等模板项目介绍大量的组件，基础组件的用法请参考：[https://n3-components.github.io/N3-components/](https://n3-components.github.io/N3-components/)\n\n\n<a name=\"o929fd\"></a>\n## 1、概述\n\n首先N3-admin是一个基于 vue / vuex / vue-router / N3 / axios 的单页应用，适用于单页应用的快速上手，并不仅限于N3-components的使用，而是提供一个**比较完善的项目构建的思路和结构**，提供给初学者学习。同时也是一套可扩展的Vue单页应用开发模板。\n\n<!-- more -->\n\n项目工程基于Vue-cli，因此大部分同学都能快速上手和理解，往下介绍一下特性和结构。\n\n<a name=\"rfs6co\"></a>\n## 2、特性\n\n- [x] 项目工程相关\n  - 开发环境；静态文件服务器、HTTP代理、热更新\n\n  - 生产构建：代码编译提取压缩合并混淆hash命名base64~\n\n  - eslint\n\n  - babel\n\n  - webpack 2.x\n\n- [x] vue\n  - 组件分级 [路由级组件、复用型组件、基础组件(N3)]\n\n  - Vue扩展 [filters、directives等]\n\n- [x] vue-router\n  - 二级路由\n\n  - 转场动画\n\n  - 路由拦截器\n\n- [x] vuex\n  - 多模块(module)支持\n\n- [x] axios\n  - 支持多实例\n\n  - 请求、响应拦截器\n\n  - Vue 扩展，通过实例的方法可访问\n\n- [x] layout 布局\n- [x] 全局进度条 Nprogress\n- [x] css 预处理\n  - less\n\n  - postcss\n\n  - [] stylus         <=  仅需安装预处理器和loader\n\n  - [] sass / scss    <=  仅需安装预处理器和loader\n\n- [x] API 调用支持\n  - 接口配置\n\n  - [x] mock\n\n\n<a name=\"ikq0zs\"></a>\n## 3、布局方式\n\n> 二级路由下生效\n\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283697133-97fca5d9-8f9c-4b07-9e93-55e49b950117.png#width=747)\n\n<a name=\"6qzrsw\"></a>\n## 4、文件结构\n\n```\n.\n├── README.md                           <=  项目介绍\n├── build                               <=  工程构建相关 <Vue-cli>\n│   ├── build.js                        <=  构建脚本\n│   ├── check-versions.js               <=  Node Npm版本检查\n│   ├── dev-client.js                   <=  开发客户端：浏览器刷新\n│   ├── dev-server.js                   <=  开发服务器：静态文件服务器、代理、热更新\n│   ├── utils.js                        <=  utils\n│   ├── webpack.base.conf.js            <=  webpack基础配置\n│   ├── webpack.dev.conf.js             <=  webpack开发配置\n│   └── webpack.prod.conf.js            <=  webpack生产配置\n├── config                              <=  工程构建配置：开发服务器端口、代理，静态资源打包位置等\n│   ├── dev.env.js                      <=  开发环境配置\n│   ├── index.js                        <=  入口\n│   ├── prod.env.js                     <=  生产环境配置\n│   └── test.env.js                     <=  测试环境配置\n├── index.html                          <=  单页应用入口\n├── package-lock.json                   <=  Npm Package 版本锁\n├── package.json                        <=  Npm Package 配置\n├── src                                 <=  项目源代码\n│   ├── App.vue                         <=  Vue 根组件\n│   ├── api.js                          <=  api 配置\n│   ├── assets                          <=  静态资源\n│   │   ├── font\n│   │   │   ├── iconfont.eot\n│   │   │   ├── iconfont.svg\n│   │   │   ├── iconfont.ttf\n│   │   │   └── iconfont.woff\n│   │   ├── images\n│   │   │   └── logo.png\n│   │   ├── logo.png\n│   │   └── styles\n│   │       └── base.css\n│   ├── config.js                       <=  项目配置\n│   ├── extend                          <=  Vue 扩展相关\n│   │   ├── filters.js                  <=  全局过滤器\n│   │   ├── directive.js                <=  全局指令\n│   │   └── index.js                    <=  扩展入口\n│   ├── layout                          <=  布局组件\n│   │   ├── container.vue\n│   │   ├── header.vue\n│   │   ├── index.vue\n│   │   ├── levelbar.vue\n│   │   └── navbar.vue\n│   ├── main.js                         <=  Vue 入口\n│   ├── mock                            <=  Mock\n│   ├── router                          <=  路由配置\n│   │   ├── index.js\n│   │   └── routes.js\n│   ├── store                           <=  Vuex\n│   │   ├── actions\n│   │   │   └── user.js\n│   │   ├── index.js\n│   │   ├── modules\n│   │   │   ├── app.js\n│   │   │   └── user.js\n│   │   └── mutation-types.js\n│   ├── style                           <=  样式文件 \n│   │   └── define.less\n│   ├── utils                           <=  utils\n│   │   ├── axios.js                    <=  axios\n│   │   ├── const.js                    <=  常量\n│   │   ├── index.js\n│   │   └── storage.js                  <=  storage\n│   └── widgets                         <=  可复用组件\n│   └── views                           <=  路由级别的组件\n│       ├── Login.vue\n│       ├── form\n│       │   └── index.vue\n│       ├── table\n│       │   └── index.vue\n│       └── test\n│           └── query.vue\n├── static                              <=  服务器静态资源\n│   └── favicon.ico\n└── test                                <=  测试文件夹  \n    └── unit\n        ├── index.js\n        ├── karma.conf.js\n        └── specs\n            └── Hello.spec.js\n```\n\n<a name=\"mgo0eg\"></a>\n## 5、使用说明\n\n- 开发环境\n\n\n```\nnpm run dev\n```\n\n- 生产环境\n\n\n```\nnpm run build\n```\n\n<a name=\"zkqutn\"></a>\n## 6、效果图\n\n- 总览\n\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283709889-82696a81-067e-4481-ac8a-6ecfc91a3909.png#width=747)\n\n- 登录\n\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283720334-3d42f6eb-8edd-4d3a-9a98-ab8655c1d06f.png#width=747)\n\n- Table\n\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283730540-8cb186d9-ee7f-44fb-a9ae-c8c015731e22.png#width=747)\n\n- Form\n\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283737892-39a531dc-d7a2-4e2d-8e06-3a649841ed24.png#width=747)\n",
    "body_draft": "tags: [javascript, vue, N3-components]\ndate: 2017-08-13\n\n---\n\n趁着周末偷来一点闲，总结近期的工作和学习，想着该花点心思把N3-admin这套基于N3-components的单页应用模板简单的给介绍一下。\n\n> 项目路径: [https://github.com/N3-components/N3-admin](https://github.com/N3-components/N3-admin)\n> ps: 本项目不同于vue-admin等模板项目介绍大量的组件，基础组件的用法请参考：[https://n3-components.github.io/N3-components/](https://n3-components.github.io/N3-components/)\n\n## <a name=\"o929fd\"></a>1、概述\n\n首先N3-admin是一个基于 vue / vuex / vue-router / N3 / axios 的单页应用，适用于单页应用的快速上手，并不仅限于N3-components的使用，而是提供一个__比较完善的项目构建的思路和结构__，提供给初学者学习。同时也是一套可扩展的Vue单页应用开发模板。\n\n<!-- more -->\n\n项目工程基于Vue-cli，因此大部分同学都能快速上手和理解，往下介绍一下特性和结构。\n\n## <a name=\"rfs6co\"></a>2、特性\n\n* [x] 项目工程相关\n    * 开发环境；静态文件服务器、HTTP代理、热更新\n    * 生产构建：代码编译提取压缩合并混淆hash命名base64~\n    * eslint\n    * babel\n    * webpack 2.x\n* [x] vue\n    * 组件分级 [路由级组件、复用型组件、基础组件(N3)]\n    * Vue扩展 [filters、directives等]\n* [x] vue-router\n    * 二级路由\n    * 转场动画\n    * 路由拦截器\n* [x] vuex\n    * 多模块(module)支持\n* [x] axios\n    * 支持多实例\n    * 请求、响应拦截器\n    * Vue 扩展，通过实例的方法可访问\n* [x] layout 布局\n* [x] 全局进度条 Nprogress\n* [x] css 预处理\n    * less\n    * postcss\n    * [] stylus         <=  仅需安装预处理器和loader\n    * [] sass / scss    <=  仅需安装预处理器和loader\n* [x] API 调用支持\n    * 接口配置\n    * [x] mock\n\n## <a name=\"ikq0zs\"></a>3、布局方式\n\n> 二级路由下生效\n\n\n\n![image.png | left | 747x572](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283697133-97fca5d9-8f9c-4b07-9e93-55e49b950117.png \"\")\n\n\n## <a name=\"6qzrsw\"></a>4、文件结构\n\n```\n.\n├── README.md                           <=  项目介绍\n├── build                               <=  工程构建相关 <Vue-cli>\n│   ├── build.js                        <=  构建脚本\n│   ├── check-versions.js               <=  Node Npm版本检查\n│   ├── dev-client.js                   <=  开发客户端：浏览器刷新\n│   ├── dev-server.js                   <=  开发服务器：静态文件服务器、代理、热更新\n│   ├── utils.js                        <=  utils\n│   ├── webpack.base.conf.js            <=  webpack基础配置\n│   ├── webpack.dev.conf.js             <=  webpack开发配置\n│   └── webpack.prod.conf.js            <=  webpack生产配置\n├── config                              <=  工程构建配置：开发服务器端口、代理，静态资源打包位置等\n│   ├── dev.env.js                      <=  开发环境配置\n│   ├── index.js                        <=  入口\n│   ├── prod.env.js                     <=  生产环境配置\n│   └── test.env.js                     <=  测试环境配置\n├── index.html                          <=  单页应用入口\n├── package-lock.json                   <=  Npm Package 版本锁\n├── package.json                        <=  Npm Package 配置\n├── src                                 <=  项目源代码\n│   ├── App.vue                         <=  Vue 根组件\n│   ├── api.js                          <=  api 配置\n│   ├── assets                          <=  静态资源\n│   │   ├── font\n│   │   │   ├── iconfont.eot\n│   │   │   ├── iconfont.svg\n│   │   │   ├── iconfont.ttf\n│   │   │   └── iconfont.woff\n│   │   ├── images\n│   │   │   └── logo.png\n│   │   ├── logo.png\n│   │   └── styles\n│   │       └── base.css\n│   ├── config.js                       <=  项目配置\n│   ├── extend                          <=  Vue 扩展相关\n│   │   ├── filters.js                  <=  全局过滤器\n│   │   ├── directive.js                <=  全局指令\n│   │   └── index.js                    <=  扩展入口\n│   ├── layout                          <=  布局组件\n│   │   ├── container.vue\n│   │   ├── header.vue\n│   │   ├── index.vue\n│   │   ├── levelbar.vue\n│   │   └── navbar.vue\n│   ├── main.js                         <=  Vue 入口\n│   ├── mock                            <=  Mock\n│   ├── router                          <=  路由配置\n│   │   ├── index.js\n│   │   └── routes.js\n│   ├── store                           <=  Vuex\n│   │   ├── actions\n│   │   │   └── user.js\n│   │   ├── index.js\n│   │   ├── modules\n│   │   │   ├── app.js\n│   │   │   └── user.js\n│   │   └── mutation-types.js\n│   ├── style                           <=  样式文件 \n│   │   └── define.less\n│   ├── utils                           <=  utils\n│   │   ├── axios.js                    <=  axios\n│   │   ├── const.js                    <=  常量\n│   │   ├── index.js\n│   │   └── storage.js                  <=  storage\n│   └── widgets                         <=  可复用组件\n│   └── views                           <=  路由级别的组件\n│       ├── Login.vue\n│       ├── form\n│       │   └── index.vue\n│       ├── table\n│       │   └── index.vue\n│       └── test\n│           └── query.vue\n├── static                              <=  服务器静态资源\n│   └── favicon.ico\n└── test                                <=  测试文件夹  \n    └── unit\n        ├── index.js\n        ├── karma.conf.js\n        └── specs\n            └── Hello.spec.js\n```\n\n## <a name=\"mgo0eg\"></a>5、使用说明\n\n* 开发环境\n\n```\nnpm run dev\n```\n\n* 生产环境\n\n```\nnpm run build\n```\n\n## <a name=\"zkqutn\"></a>6、效果图\n\n* 总览\n\n\n\n![image.png | left | 747x297](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283709889-82696a81-067e-4481-ac8a-6ecfc91a3909.png \"\")\n\n\n* 登录\n\n\n\n![image.png | left | 747x374](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283720334-3d42f6eb-8edd-4d3a-9a98-ab8655c1d06f.png \"\")\n\n\n* Table\n\n\n\n![image.png | left | 747x304](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283730540-8cb186d9-ee7f-44fb-a9ae-c8c015731e22.png \"\")\n\n\n* Form\n\n\n\n![image.png | left | 747x164](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283737892-39a531dc-d7a2-4e2d-8e06-3a649841ed24.png \"\")\n\n",
    "body_html": "<p>tags: [javascript, vue, N3-components]</p><p>date: 2017-08-13</p><hr /><p>趁着周末偷来一点闲，总结近期的工作和学习，想着该花点心思把N3-admin这套基于N3-components的单页应用模板简单的给介绍一下。</p><p><br /></p><blockquote><p>项目路径: <a href=\"https://github.com/N3-components/N3-admin\" target=\"_blank\">https://github.com/N3-components/N3-admin</a><br />ps: 本项目不同于vue-admin等模板项目介绍大量的组件，基础组件的用法请参考：<a href=\"https://n3-components.github.io/N3-components/\" target=\"_blank\">https://n3-components.github.io/N3-components/</a></p></blockquote><p><br /></p><h2 id=\"o929fd\"><a href=\"#o929fd\"></a>1、概述</h2><p><br /></p><p>首先N3-admin是一个基于 vue / vuex / vue-router / N3 / axios 的单页应用，适用于单页应用的快速上手，并不仅限于N3-components的使用，而是提供一个<strong>比较完善的项目构建的思路和结构</strong>，提供给初学者学习。同时也是一套可扩展的Vue单页应用开发模板。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p>项目工程基于Vue-cli，因此大部分同学都能快速上手和理解，往下介绍一下特性和结构。</p><p><br /></p><h2 id=\"rfs6co\"><a href=\"#rfs6co\"></a>2、特性</h2><p><br /></p><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><input type=\"checkbox\" checked=\"checked\" />项目工程相关</li></ul><ul data-lake-indent=\"1\"><li><p>开发环境；静态文件服务器、HTTP代理、热更新</p></li></ul><ul data-lake-indent=\"1\"><li><p>生产构建：代码编译提取压缩合并混淆hash命名base64~</p></li></ul><ul data-lake-indent=\"1\"><li><p>eslint</p></li></ul><ul data-lake-indent=\"1\"><li><p>babel</p></li></ul><ul data-lake-indent=\"1\"><li><p>webpack 2.x</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><input type=\"checkbox\" checked=\"checked\" />vue</li></ul><ul data-lake-indent=\"1\"><li><p>组件分级 [路由级组件、复用型组件、基础组件(N3)]</p></li></ul><ul data-lake-indent=\"1\"><li><p>Vue扩展 [filters、directives等]</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><input type=\"checkbox\" checked=\"checked\" />vue-router</li></ul><ul data-lake-indent=\"1\"><li><p>二级路由</p></li></ul><ul data-lake-indent=\"1\"><li><p>转场动画</p></li></ul><ul data-lake-indent=\"1\"><li><p>路由拦截器</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><input type=\"checkbox\" checked=\"checked\" />vuex</li></ul><ul data-lake-indent=\"1\"><li><p>多模块(module)支持</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><input type=\"checkbox\" checked=\"checked\" />axios</li></ul><ul data-lake-indent=\"1\"><li><p>支持多实例</p></li></ul><ul data-lake-indent=\"1\"><li><p>请求、响应拦截器</p></li></ul><ul data-lake-indent=\"1\"><li><p>Vue 扩展，通过实例的方法可访问</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><input type=\"checkbox\" checked=\"checked\" />layout 布局</li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><input type=\"checkbox\" checked=\"checked\" />全局进度条 Nprogress</li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><input type=\"checkbox\" checked=\"checked\" />css 预处理</li></ul><ul data-lake-indent=\"1\"><li><p>less</p></li></ul><ul data-lake-indent=\"1\"><li><p>postcss</p></li></ul><ul data-lake-indent=\"1\"><li><p>[] stylus         &lt;=  仅需安装预处理器和loader</p></li></ul><ul data-lake-indent=\"1\"><li><p>[] sass / scss    &lt;=  仅需安装预处理器和loader</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><input type=\"checkbox\" checked=\"checked\" />API 调用支持</li></ul><ul data-lake-indent=\"1\"><li><p>接口配置</p></li></ul><ul data-lake-indent=\"1\"><li><p>[x] mock</p></li></ul><p><br /></p><h2 id=\"ikq0zs\"><a href=\"#ikq0zs\"></a>3、布局方式</h2><p><br /></p><blockquote><p>二级路由下生效</p></blockquote><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283697133-97fca5d9-8f9c-4b07-9e93-55e49b950117.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p><p><br /></p><h2 id=\"6qzrsw\"><a href=\"#6qzrsw\"></a>4、文件结构</h2><p><br /></p><pre><code>.\n├── README.md                           &lt;=  项目介绍\n├── build                               &lt;=  工程构建相关 &lt;Vue-cli&gt;\n│   ├── build.js                        &lt;=  构建脚本\n│   ├── check-versions.js               &lt;=  Node Npm版本检查\n│   ├── dev-client.js                   &lt;=  开发客户端：浏览器刷新\n│   ├── dev-server.js                   &lt;=  开发服务器：静态文件服务器、代理、热更新\n│   ├── utils.js                        &lt;=  utils\n│   ├── webpack.base.conf.js            &lt;=  webpack基础配置\n│   ├── webpack.dev.conf.js             &lt;=  webpack开发配置\n│   └── webpack.prod.conf.js            &lt;=  webpack生产配置\n├── config                              &lt;=  工程构建配置：开发服务器端口、代理，静态资源打包位置等\n│   ├── dev.env.js                      &lt;=  开发环境配置\n│   ├── index.js                        &lt;=  入口\n│   ├── prod.env.js                     &lt;=  生产环境配置\n│   └── test.env.js                     &lt;=  测试环境配置\n├── index.html                          &lt;=  单页应用入口\n├── package-lock.json                   &lt;=  Npm Package 版本锁\n├── package.json                        &lt;=  Npm Package 配置\n├── src                                 &lt;=  项目源代码\n│   ├── App.vue                         &lt;=  Vue 根组件\n│   ├── api.js                          &lt;=  api 配置\n│   ├── assets                          &lt;=  静态资源\n│   │   ├── font\n│   │   │   ├── iconfont.eot\n│   │   │   ├── iconfont.svg\n│   │   │   ├── iconfont.ttf\n│   │   │   └── iconfont.woff\n│   │   ├── images\n│   │   │   └── logo.png\n│   │   ├── logo.png\n│   │   └── styles\n│   │       └── base.css\n│   ├── config.js                       &lt;=  项目配置\n│   ├── extend                          &lt;=  Vue 扩展相关\n│   │   ├── filters.js                  &lt;=  全局过滤器\n│   │   ├── directive.js                &lt;=  全局指令\n│   │   └── index.js                    &lt;=  扩展入口\n│   ├── layout                          &lt;=  布局组件\n│   │   ├── container.vue\n│   │   ├── header.vue\n│   │   ├── index.vue\n│   │   ├── levelbar.vue\n│   │   └── navbar.vue\n│   ├── main.js                         &lt;=  Vue 入口\n│   ├── mock                            &lt;=  Mock\n│   ├── router                          &lt;=  路由配置\n│   │   ├── index.js\n│   │   └── routes.js\n│   ├── store                           &lt;=  Vuex\n│   │   ├── actions\n│   │   │   └── user.js\n│   │   ├── index.js\n│   │   ├── modules\n│   │   │   ├── app.js\n│   │   │   └── user.js\n│   │   └── mutation-types.js\n│   ├── style                           &lt;=  样式文件 \n│   │   └── define.less\n│   ├── utils                           &lt;=  utils\n│   │   ├── axios.js                    &lt;=  axios\n│   │   ├── const.js                    &lt;=  常量\n│   │   ├── index.js\n│   │   └── storage.js                  &lt;=  storage\n│   └── widgets                         &lt;=  可复用组件\n│   └── views                           &lt;=  路由级别的组件\n│       ├── Login.vue\n│       ├── form\n│       │   └── index.vue\n│       ├── table\n│       │   └── index.vue\n│       └── test\n│           └── query.vue\n├── static                              &lt;=  服务器静态资源\n│   └── favicon.ico\n└── test                                &lt;=  测试文件夹  \n    └── unit\n        ├── index.js\n        ├── karma.conf.js\n        └── specs\n            └── Hello.spec.js</code></pre><p><br /></p><h2 id=\"mgo0eg\"><a href=\"#mgo0eg\"></a>5、使用说明</h2><p><br /></p><ul><li><p>开发环境</p></li></ul><p><br /></p><pre><code>npm run dev</code></pre><p><br /></p><ul><li><p>生产环境</p></li></ul><p><br /></p><pre><code>npm run build</code></pre><p><br /></p><h2 id=\"zkqutn\"><a href=\"#zkqutn\"></a>6、效果图</h2><p><br /></p><ul><li><p>总览</p></li></ul><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283709889-82696a81-067e-4481-ac8a-6ecfc91a3909.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p><p><br /></p><ul><li><p>登录</p></li></ul><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283720334-3d42f6eb-8edd-4d3a-9a98-ab8655c1d06f.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p><p><br /></p><ul><li><p>Table</p></li></ul><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283730540-8cb186d9-ee7f-44fb-a9ae-c8c015731e22.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p><p><br /></p><ul><li><p>Form</p></li></ul><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283737892-39a531dc-d7a2-4e2d-8e06-3a649841ed24.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p>",
    "body_lake": "<!doctype lake><p>tags: [javascript, vue, N3-components]</p><p>date: 2017-08-13</p><card type=\"block\" name=\"hr\"></card><p>趁着周末偷来一点闲，总结近期的工作和学习，想着该花点心思把N3-admin这套基于N3-components的单页应用模板简单的给介绍一下。</p><p><br /></p><blockquote><p>项目路径: <a href=\"https://github.com/N3-components/N3-admin\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://github.com/N3-components/N3-admin</a><br />ps: 本项目不同于vue-admin等模板项目介绍大量的组件，基础组件的用法请参考：<a href=\"https://n3-components.github.io/N3-components/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://n3-components.github.io/N3-components/</a></p></blockquote><p><br /></p><h2 id=\"o929fd\"><a href=\"#o929fd\" id=\"1、概述\"></a>1、概述</h2><p><br /></p><p>首先N3-admin是一个基于 vue / vuex / vue-router / N3 / axios 的单页应用，适用于单页应用的快速上手，并不仅限于N3-components的使用，而是提供一个<strong>比较完善的项目构建的思路和结构</strong>，提供给初学者学习。同时也是一套可扩展的Vue单页应用开发模板。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p>项目工程基于Vue-cli，因此大部分同学都能快速上手和理解，往下介绍一下特性和结构。</p><p><br /></p><h2 id=\"rfs6co\"><a href=\"#rfs6co\" id=\"2、特性\"></a>2、特性</h2><p><br /></p><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card>项目工程相关</li></ul><ul data-lake-indent=\"1\"><li><p>开发环境；静态文件服务器、HTTP代理、热更新</p></li></ul><ul data-lake-indent=\"1\"><li><p>生产构建：代码编译提取压缩合并混淆hash命名base64~</p></li></ul><ul data-lake-indent=\"1\"><li><p>eslint</p></li></ul><ul data-lake-indent=\"1\"><li><p>babel</p></li></ul><ul data-lake-indent=\"1\"><li><p>webpack 2.x</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card>vue</li></ul><ul data-lake-indent=\"1\"><li><p>组件分级 [路由级组件、复用型组件、基础组件(N3)]</p></li></ul><ul data-lake-indent=\"1\"><li><p>Vue扩展 [filters、directives等]</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card>vue-router</li></ul><ul data-lake-indent=\"1\"><li><p>二级路由</p></li></ul><ul data-lake-indent=\"1\"><li><p>转场动画</p></li></ul><ul data-lake-indent=\"1\"><li><p>路由拦截器</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card>vuex</li></ul><ul data-lake-indent=\"1\"><li><p>多模块(module)支持</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card>axios</li></ul><ul data-lake-indent=\"1\"><li><p>支持多实例</p></li></ul><ul data-lake-indent=\"1\"><li><p>请求、响应拦截器</p></li></ul><ul data-lake-indent=\"1\"><li><p>Vue 扩展，通过实例的方法可访问</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card>layout 布局</li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card>全局进度条 Nprogress</li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card>css 预处理</li></ul><ul data-lake-indent=\"1\"><li><p>less</p></li></ul><ul data-lake-indent=\"1\"><li><p>postcss</p></li></ul><ul data-lake-indent=\"1\"><li><p>[] stylus         &lt;=  仅需安装预处理器和loader</p></li></ul><ul data-lake-indent=\"1\"><li><p>[] sass / scss    &lt;=  仅需安装预处理器和loader</p></li></ul><ul class=\"lake-list\"><li class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card>API 调用支持</li></ul><ul data-lake-indent=\"1\"><li><p>接口配置</p></li></ul><ul data-lake-indent=\"1\"><li><p>[x] mock</p></li></ul><p><br /></p><h2 id=\"ikq0zs\"><a href=\"#ikq0zs\" id=\"3、布局方式\"></a>3、布局方式</h2><p><br /></p><blockquote><p>二级路由下生效</p></blockquote><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530283697133-97fca5d9-8f9c-4b07-9e93-55e49b950117.png%22%2C%22width%22%3A747%7D\"></card></p><p><br /></p><h2 id=\"6qzrsw\"><a href=\"#6qzrsw\" id=\"4、文件结构\"></a>4、文件结构</h2><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22945d0a9c%22%2C%22code%22%3A%22.%5Cn%E2%94%9C%E2%94%80%E2%94%80%20README.md%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D%5Cn%E2%94%9C%E2%94%80%E2%94%80%20build%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA%E7%9B%B8%E5%85%B3%20%3CVue-cli%3E%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20build.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E6%9E%84%E5%BB%BA%E8%84%9A%E6%9C%AC%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20check-versions.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20Node%20Npm%E7%89%88%E6%9C%AC%E6%A3%80%E6%9F%A5%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20dev-client.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%BC%80%E5%8F%91%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%88%B7%E6%96%B0%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20dev-server.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%9A%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81%E4%BB%A3%E7%90%86%E3%80%81%E7%83%AD%E6%9B%B4%E6%96%B0%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20utils.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20utils%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20webpack.base.conf.js%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20webpack%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20webpack.dev.conf.js%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20webpack%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20webpack.prod.conf.js%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20webpack%E7%94%9F%E4%BA%A7%E9%85%8D%E7%BD%AE%5Cn%E2%94%9C%E2%94%80%E2%94%80%20config%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%B7%A5%E7%A8%8B%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE%EF%BC%9A%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3%E3%80%81%E4%BB%A3%E7%90%86%EF%BC%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%89%93%E5%8C%85%E4%BD%8D%E7%BD%AE%E7%AD%89%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20dev.env.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%85%A5%E5%8F%A3%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20prod.env.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20test.env.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%5Cn%E2%94%9C%E2%94%80%E2%94%80%20index.html%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E5%85%A5%E5%8F%A3%5Cn%E2%94%9C%E2%94%80%E2%94%80%20package-lock.json%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20Npm%20Package%20%E7%89%88%E6%9C%AC%E9%94%81%5Cn%E2%94%9C%E2%94%80%E2%94%80%20package.json%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20Npm%20Package%20%E9%85%8D%E7%BD%AE%5Cn%E2%94%9C%E2%94%80%E2%94%80%20src%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E9%A1%B9%E7%9B%AE%E6%BA%90%E4%BB%A3%E7%A0%81%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20App.vue%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20Vue%20%E6%A0%B9%E7%BB%84%E4%BB%B6%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20api.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20api%20%E9%85%8D%E7%BD%AE%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20assets%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20font%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20iconfont.eot%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20iconfont.svg%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20iconfont.ttf%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20iconfont.woff%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20images%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20logo.png%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20logo.png%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20styles%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20base.css%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20config.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20extend%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20Vue%20%E6%89%A9%E5%B1%95%E7%9B%B8%E5%85%B3%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20filters.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%85%A8%E5%B1%80%E8%BF%87%E6%BB%A4%E5%99%A8%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20directive.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%85%A8%E5%B1%80%E6%8C%87%E4%BB%A4%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20index.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E6%89%A9%E5%B1%95%E5%85%A5%E5%8F%A3%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20layout%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%B8%83%E5%B1%80%E7%BB%84%E4%BB%B6%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20container.vue%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20header.vue%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20index.vue%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20levelbar.vue%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20navbar.vue%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20main.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20Vue%20%E5%85%A5%E5%8F%A3%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20mock%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20Mock%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20router%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20routes.js%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20store%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20Vuex%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20actions%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20user.js%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20modules%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20app.js%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20user.js%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20mutation-types.js%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20style%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6%20%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20define.less%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20utils%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20utils%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20axios.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20axios%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20const.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%B8%B8%E9%87%8F%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20storage.js%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20storage%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20widgets%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%BB%84%E4%BB%B6%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20views%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E8%B7%AF%E7%94%B1%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BB%84%E4%BB%B6%5Cn%E2%94%82%C2%A0%C2%A0%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20Login.vue%5Cn%E2%94%82%C2%A0%C2%A0%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20form%5Cn%E2%94%82%C2%A0%C2%A0%20%20%20%20%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20index.vue%5Cn%E2%94%82%C2%A0%C2%A0%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20table%5Cn%E2%94%82%C2%A0%C2%A0%20%20%20%20%20%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20index.vue%5Cn%E2%94%82%C2%A0%C2%A0%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20test%5Cn%E2%94%82%C2%A0%C2%A0%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20query.vue%5Cn%E2%94%9C%E2%94%80%E2%94%80%20static%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%5Cn%E2%94%82%C2%A0%C2%A0%20%E2%94%94%E2%94%80%E2%94%80%20favicon.ico%5Cn%E2%94%94%E2%94%80%E2%94%80%20test%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%3D%20%20%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6%E5%A4%B9%20%20%5Cn%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20unit%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20karma.conf.js%5Cn%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20specs%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20Hello.spec.js%22%7D\"></card><p><br /></p><h2 id=\"mgo0eg\"><a href=\"#mgo0eg\" id=\"5、使用说明\"></a>5、使用说明</h2><p><br /></p><ul><li><p>开发环境</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%225ee06c7b%22%2C%22code%22%3A%22npm%20run%20dev%22%7D\"></card><p><br /></p><ul><li><p>生产环境</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22d23ca73d%22%2C%22code%22%3A%22npm%20run%20build%22%7D\"></card><p><br /></p><h2 id=\"zkqutn\"><a href=\"#zkqutn\" id=\"6、效果图\"></a>6、效果图</h2><p><br /></p><ul><li><p>总览</p></li></ul><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530283709889-82696a81-067e-4481-ac8a-6ecfc91a3909.png%22%2C%22width%22%3A747%7D\"></card></p><p><br /></p><ul><li><p>登录</p></li></ul><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530283720334-3d42f6eb-8edd-4d3a-9a98-ab8655c1d06f.png%22%2C%22width%22%3A747%7D\"></card></p><p><br /></p><ul><li><p>Table</p></li></ul><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530283730540-8cb186d9-ee7f-44fb-a9ae-c8c015731e22.png%22%2C%22width%22%3A747%7D\"></card></p><p><br /></p><ul><li><p>Form</p></li></ul><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530283737892-39a531dc-d7a2-4e2d-8e06-3a649841ed24.png%22%2C%22width%22%3A747%7D\"></card></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [javascript, vue, N3-components]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2017-08-13\"],[\"hr\",{\"id\":\"vmm3bd\"}],[\"div\",{\"data-type\":\"p\"},\"趁着周末偷来一点闲，总结近期的工作和学习，想着该花点心思把N3-admin这套基于N3-components的单页应用模板简单的给介绍一下。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"blockquote\",[\"div\",{\"data-type\":\"p\"},\"项目路径: \",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/N3-components/N3-admin\"},\"https://github.com/N3-components/N3-admin\"],\"\\nps: 本项目不同于vue-admin等模板项目介绍大量的组件，基础组件的用法请参考：\",[\"a\",{\"title\":\"\",\"href\":\"https://n3-components.github.io/N3-components/\"},\"https://n3-components.github.io/N3-components/\"],\"\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"o929fd\"},\"1、概述\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"首先N3-admin是一个基于 vue / vuex / vue-router / N3 / axios 的单页应用，适用于单页应用的快速上手，并不仅限于N3-components的使用，而是提供一个\",[\"strong\",{},\"比较完善的项目构建的思路和结构\"],\"，提供给初学者学习。同时也是一套可扩展的Vue单页应用开发模板。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"项目工程基于Vue-cli，因此大部分同学都能快速上手和理解，往下介绍一下特性和结构。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"rfs6co\"},\"2、特性\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{\"type\":\"task-list\",\"checked\":true},[\"div\",{\"data-type\":\"p\"},\"项目工程相关\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"开发环境；静态文件服务器、HTTP代理、热更新\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"生产构建：代码编译提取压缩合并混淆hash命名base64~\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"eslint\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"babel\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"webpack 2.x\"]]]],[\"li\",{\"type\":\"task-list\",\"checked\":true},[\"div\",{\"data-type\":\"p\"},\"vue\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"组件分级 [路由级组件、复用型组件、基础组件(N3)]\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Vue扩展 [filters、directives等]\"]]]],[\"li\",{\"type\":\"task-list\",\"checked\":true},[\"div\",{\"data-type\":\"p\"},\"vue-router\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"二级路由\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"转场动画\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"路由拦截器\"]]]],[\"li\",{\"type\":\"task-list\",\"checked\":true},[\"div\",{\"data-type\":\"p\"},\"vuex\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"多模块(module)支持\"]]]],[\"li\",{\"type\":\"task-list\",\"checked\":true},[\"div\",{\"data-type\":\"p\"},\"axios\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"支持多实例\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"请求、响应拦截器\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Vue 扩展，通过实例的方法可访问\"]]]],[\"li\",{\"type\":\"task-list\",\"checked\":true},[\"div\",{\"data-type\":\"p\"},\"layout 布局\"]],[\"li\",{\"type\":\"task-list\",\"checked\":true},[\"div\",{\"data-type\":\"p\"},\"全局进度条 Nprogress\"]],[\"li\",{\"type\":\"task-list\",\"checked\":true},[\"div\",{\"data-type\":\"p\"},\"css 预处理\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"less\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"postcss\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"[] stylus         <=  仅需安装预处理器和loader\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"[] sass / scss    <=  仅需安装预处理器和loader\"]]]],[\"li\",{\"type\":\"task-list\",\"checked\":true},[\"div\",{\"data-type\":\"p\"},\"API 调用支持\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"接口配置\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"[x] mock\"]]]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"ikq0zs\"},\"3、布局方式\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"blockquote\",[\"div\",{\"data-type\":\"p\"},\"二级路由下生效\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"n4ssgm\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283697133-97fca5d9-8f9c-4b07-9e93-55e49b950117.png\",\"width\":747,\"height\":572,\"size\":58441,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"6qzrsw\"},\"4、文件结构\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\".\\n\",\"├── README.md                           <=  项目介绍\\n\",\"├── build                               <=  工程构建相关 <Vue-cli>\\n\",\"│   ├── build.js                        <=  构建脚本\\n\",\"│   ├── check-versions.js               <=  Node Npm版本检查\\n\",\"│   ├── dev-client.js                   <=  开发客户端：浏览器刷新\\n\",\"│   ├── dev-server.js                   <=  开发服务器：静态文件服务器、代理、热更新\\n\",\"│   ├── utils.js                        <=  utils\\n\",\"│   ├── webpack.base.conf.js            <=  webpack基础配置\\n\",\"│   ├── webpack.dev.conf.js             <=  webpack开发配置\\n\",\"│   └── webpack.prod.conf.js            <=  webpack生产配置\\n\",\"├── config                              <=  工程构建配置：开发服务器端口、代理，静态资源打包位置等\\n\",\"│   ├── dev.env.js                      <=  开发环境配置\\n\",\"│   ├── index.js                        <=  入口\\n\",\"│   ├── prod.env.js                     <=  生产环境配置\\n\",\"│   └── test.env.js                     <=  测试环境配置\\n\",\"├── index.html                          <=  单页应用入口\\n\",\"├── package-lock.json                   <=  Npm Package 版本锁\\n\",\"├── package.json                        <=  Npm Package 配置\\n\",\"├── src                                 <=  项目源代码\\n\",\"│   ├── App.vue                         <=  Vue 根组件\\n\",\"│   ├── api.js                          <=  api 配置\\n\",\"│   ├── assets                          <=  静态资源\\n\",\"│   │   ├── font\\n\",\"│   │   │   ├── iconfont.eot\\n\",\"│   │   │   ├── iconfont.svg\\n\",\"│   │   │   ├── iconfont.ttf\\n\",\"│   │   │   └── iconfont.woff\\n\",\"│   │   ├── images\\n\",\"│   │   │   └── logo.png\\n\",\"│   │   ├── logo.png\\n\",\"│   │   └── styles\\n\",\"│   │       └── base.css\\n\",\"│   ├── config.js                       <=  项目配置\\n\",\"│   ├── extend                          <=  Vue 扩展相关\\n\",\"│   │   ├── filters.js                  <=  全局过滤器\\n\",\"│   │   ├── directive.js                <=  全局指令\\n\",\"│   │   └── index.js                    <=  扩展入口\\n\",\"│   ├── layout                          <=  布局组件\\n\",\"│   │   ├── container.vue\\n\",\"│   │   ├── header.vue\\n\",\"│   │   ├── index.vue\\n\",\"│   │   ├── levelbar.vue\\n\",\"│   │   └── navbar.vue\\n\",\"│   ├── main.js                         <=  Vue 入口\\n\",\"│   ├── mock                            <=  Mock\\n\",\"│   ├── router                          <=  路由配置\\n\",\"│   │   ├── index.js\\n\",\"│   │   └── routes.js\\n\",\"│   ├── store                           <=  Vuex\\n\",\"│   │   ├── actions\\n\",\"│   │   │   └── user.js\\n\",\"│   │   ├── index.js\\n\",\"│   │   ├── modules\\n\",\"│   │   │   ├── app.js\\n\",\"│   │   │   └── user.js\\n\",\"│   │   └── mutation-types.js\\n\",\"│   ├── style                           <=  样式文件 \\n\",\"│   │   └── define.less\\n\",\"│   ├── utils                           <=  utils\\n\",\"│   │   ├── axios.js                    <=  axios\\n\",\"│   │   ├── const.js                    <=  常量\\n\",\"│   │   ├── index.js\\n\",\"│   │   └── storage.js                  <=  storage\\n\",\"│   └── widgets                         <=  可复用组件\\n\",\"│   └── views                           <=  路由级别的组件\\n\",\"│       ├── Login.vue\\n\",\"│       ├── form\\n\",\"│       │   └── index.vue\\n\",\"│       ├── table\\n\",\"│       │   └── index.vue\\n\",\"│       └── test\\n\",\"│           └── query.vue\\n\",\"├── static                              <=  服务器静态资源\\n\",\"│   └── favicon.ico\\n\",\"└── test                                <=  测试文件夹  \\n\",\"    └── unit\\n\",\"        ├── index.js\\n\",\"        ├── karma.conf.js\\n\",\"        └── specs\\n\",\"            └── Hello.spec.js\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"mgo0eg\"},\"5、使用说明\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"开发环境\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"npm run dev\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"生产环境\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"npm run build\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"zkqutn\"},\"6、效果图\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"总览\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"5zt7gw\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283709889-82696a81-067e-4481-ac8a-6ecfc91a3909.png\",\"width\":747,\"height\":297,\"size\":204711,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"登录\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"3292di\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283720334-3d42f6eb-8edd-4d3a-9a98-ab8655c1d06f.png\",\"width\":747,\"height\":374,\"size\":162853,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Table\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"3u0uao\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283730540-8cb186d9-ee7f-44fb-a9ae-c8c015731e22.png\",\"width\":747,\"height\":304,\"size\":187690,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Form\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"e1mdgh\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283737892-39a531dc-d7a2-4e2d-8e06-3a649841ed24.png\",\"width\":747,\"height\":164,\"size\":46598,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-18T12:14:37.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:47:31.000Z",
    "updated_at": "2019-10-21T06:04:06.000Z",
    "published_at": "2019-02-18T12:14:37.000Z",
    "first_published_at": null,
    "word_count": 1094,
    "cover": null,
    "description": "tags: [javascript, vue, N3-components]date: 2017-08-13趁着周末偷来一点闲，总结近期的工作和学习，想着该花点心思把N3-admin这套基于N3-components的单页应用模板简单的给介绍一下。项目路径: https://github.co...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709057,
    "slug": "ha07x2",
    "title": "深入 node node.js 到 windows 环境变量",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [javascript, node.js, windows, 环境变量]<br />date: 2017-08-19\n\n---\n\n<a name=\"bs4ibp\"></a>\n## 导读\n\n兴许所有程序员都有命名困难症，在考虑变量、常量、方法、类、文件等命名时，总会千方百计尝试一些语义化的方式去实现。\n\n曾经有那么一段时间，一些node初学的同学遇到了同样的问题：Hello World 跑不动！！！\n\n<a name=\"pyovmr\"></a>\n## 0. 谜之 Hello World\n\n问题的起源非常简单，当我们在编写一个入门程序时，就会迅速想起那句脍炙人口的语句：\n\n```javascript\nconsole.log('Hello World');\n```\n\n于是乎，顺手保存为node.js，紧接着尝试以`node node.js`来运行该示例程序。毫无疑问，在cmd环境下，会遇到如下的报错：\n\n<!-- more -->\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283568108-6e8cae58-4157-416f-a72f-3ab1e987d86d.png#width=565)\n\n\n（PS：实际上无论是Mac、Linux用户，亦或是WIndows中使用Powershell或其他终端环境的同学都无法与此问题完美邂逅）\n\n<a name=\"revyzg\"></a>\n## 1. 初步分析\n\n此时此刻，心中一阵失落，居然连入门的示例程序都无法运行，不禁一阵瞎想：是否该放弃node.js了？\n\n言归正传，细心的同学会发现，报错的源头来自`Windows Script Host`，下简称`WSH`，我们不难查到它是 Windows 操作系统脚本语言程序（script，即：脚本）的运行环境。\n\n<a name=\"cpxapg\"></a>\n## 2. 执行了什么？\n\n简单分析一下`node node.js`这条命令，我们会很自然地认定为：执行node.exe程序，参数为node.js。\n\n然而实际上，真正执行的程序却变成`WSH`，前面执行的命令`node node.js`并没有任何跟调起`WSH`相关的逻辑，因此为何调起了`WSH`成为了解谜的关键。\n\n顺蔓摸瓜，由于`WSH`正好是执行脚本的服务，而js恰恰又是脚本的一种，不妨假设`node.js`这个脚本文件就是罪魁祸首。然后创建一个`test.js`的副本，尝试执行它：\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283579297-58c3fa0b-a64b-48c6-b48e-2d2d95788c1b.png#width=573)\n\n<a name=\"wgicug\"></a>\n### 2.1 执行程序的路径\n\n根据试验的结果不难猜出`node node.js`命令实际执行了`node.js`这个脚本文件，从而调起`WSH`服务，进而出现上图的报错。\n\n顺水推舟可确定`node node.js`等价于`.\\node.js node.js`，即命令执行的文件完整的路径为：`E:\\test\\node.js`。\n\n（PS：各位看官切莫介怀''作为路径分隔符，毕竟在cmd下'/'担任参数分隔符的要职）\n\n<a name=\"lh6byo\"></a>\n### 2.2 补全程序的路径\n\n先讲讲通用的说法，无论是 * nix 、OS/2 、DOS 亦或是 windows，其terminal都可以通过一个特殊的环境变量`PATH`进行“补全”（关于环境变量的详细内容本文不作介绍）。\n\n接下来我们通过ping命令先做简要说明：\n\n<a name=\"18wgxt\"></a>\n#### 2.2.1 定位程序的路径\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283587792-4ced2a94-ce79-49de-8ff3-2fc6864b9c1d.png#width=462)\n\n很明显，在任何一台正常的机器上，这条命令执行后都能得到期待的结果。此时我们可以看到该cmd进程下的`PATH`环境变量中包含`C:\\WINDOWS\\system32`，通过对`PATH`中的元素(文件夹路径)即可将ping程序的路径补全为：`C:\\WINDOWS\\system32\\ping`。（在 * nix 系统下依然通用）\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283599104-8cb6d3a0-8146-4013-8050-c72dc48774a3.png#width=747)\n\n<a name=\"6803ix\"></a>\n#### 2.2.2 补全后缀名(仅windows、dos)\n\n由于windows的可执行的概念和 * nix 略有不同，因此在windows平台下还需要对程序进行后缀名的补全。\n\n其中在 * inx下，只需保证文件的结构符合规范，并且拥有可执行权限，就可以执行；而在windows下，还需要考虑其后缀名及执行方式（实际上是一种打开方式的策略）。\n\n```\nE:\\test>echo %PATHEXT%\n.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW;.CPL\n```\n\n最终我们补全的程序路径为：`C:\\WINDOWS\\system32\\ping.exe`，\n\n<a name=\"gsrbge\"></a>\n#### 2.2.3 特别注意(仅windows、dos)\n\n针对于cmd环境，当前目录也会作为路径补全的一部分，并且优先级最高。在当前目录下，我们创建一个`ping.bat`的脚本，并填充以下内容：\n\n```bash\n@echo off\n:: 输出完整的路径和文件名及后缀\necho %~dpnx0\n```\n\n执行结果如下图，原来的`ping.exe`的动作明显被覆盖了。\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283614729-6819eb33-989b-4506-8bed-b1adbcf1e8fe.png#width=569)\n\n<a name=\"sl0woo\"></a>\n#### 2.2.4 小结\n\n我们也额外地发现windows的默认可执行的后缀名包含`.JS`，由此可推断最初的那条`node node.js`命令最终补全的程序路径为：`E:\\test\\node.js`\n\n<a name=\"gpfwgw\"></a>\n## 3 打开方式？\n\n从2.2.4的结论中能显而易见的推导出命令执行的程序为`node.js`脚本文件，那么它为什么是通过`WSH`去执行的呢？\n\n答案其实很明显，有个通俗易懂的概念，叫做打开方式，而windows的打开方式由`assoc`和`ftype`确定。\n\n<a name=\"s6hrwf\"></a>\n### 3.1 后缀名与打开方式\n\n尝试性的跑一跑`assoc`命令，发现其控制着后缀名与打开方式`ftype`的关系。\n\n```bat\nassoc | findstr .js\n```\n\n运行结果：\n\n```bat\n.js=JSFile\n.json=VisualStudio.json.14.0\n.jsonld=VisualStudio.jsonld.14.0\n.jsx=VisualStudio.jsx.14.0\n.jsxbin=JSXBINFile\n.jsxinc=JSXINCFile\n```\n\n不难看出`.js`文件将会通过`JSFile`这个打开方式去执行。\n\n<a name=\"i9gzih\"></a>\n### 3.2 打开方式与执行程序\n\n类似的，我们也可以运行一下ftype命令，其定义了可执行程序以及调用的参数。\n\n```bat\nftype | findstr \"JS\"\n```\n\n运行结果：\n\n```\nJSEFile=C:\\Windows\\System32\\WScript.exe \"%1\" %*\nJSFile=C:\\Windows\\System32\\WScript.exe \"%1\" %*\nJSXFile=\"C:\\Program Files (x86)\\Adobe\\Adobe Utilities - CS6\\ExtendScript Toolkit CS6\\ExtendScript Toolkit.exe\" -run \"%1\"\n```\n\n其中最关键的信息为`JSFile=C:\\Windows\\System32\\WScript.exe \"%1\" %*`，含义是通过`WScript.exe`执行js脚本，并将原来的参数传递过去。\n\n最终`node node.js`等价于`E:\\test\\node.js node.js`。\n\n<a name=\"e1buxd\"></a>\n### 3.3 怎么破？\n\n- 发动想象力吧，别再叫`node.js`了~\n\n- 是时候切换到 * inx 或者升级到powershell了~\n\n- 如果不介意使用绝对路径的话……\n\n\n<a name=\"fgo9hh\"></a>\n## 4. 扩展学习\n\n操作系统层面通过`PATH`等环境变量进行资源定位的思路实际上也被广泛应用在各种场景下，下面也举两个常见的栗子说明一下。\n\n<a name=\"lvw4dm\"></a>\n### 4.1 npm 包定位\n\nCommonJS 规范中通过`require`去加载模块时，通过路径补全的策略（详情推荐阅读《深入浅出Node.js》），可以省略模块的路径，后缀名，甚至连/index也能自动补全。\n\n<a name=\"t4egqi\"></a>\n### 4.2 webpack资源定位\n\n嘿，resolve中的extensions、alias等思路是否也如出一辙呢？\n\n<a name=\"fqyqxe\"></a>\n## 5. 总结\n\n全文原创·此文为随走随记，全文思维略带感情请勿拍砖。\n",
    "body_draft": "tags: [javascript, node.js, windows, 环境变量]\ndate: 2017-08-19\n\n---\n\n## <a name=\"bs4ibp\"></a>导读\n\n兴许所有程序员都有命名困难症，在考虑变量、常量、方法、类、文件等命名时，总会千方百计尝试一些语义化的方式去实现。\n\n曾经有那么一段时间，一些node初学的同学遇到了同样的问题：Hello World 跑不动！！！\n\n## <a name=\"pyovmr\"></a>0. 谜之 Hello World\n\n问题的起源非常简单，当我们在编写一个入门程序时，就会迅速想起那句脍炙人口的语句：\n\n```js\nconsole.log('Hello World');\n```\n\n于是乎，顺手保存为node.js，紧接着尝试以`node node.js`来运行该示例程序。毫无疑问，在cmd环境下，会遇到如下的报错：\n\n<!-- more -->\n\n\n\n![image.png | left | 565x416](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283568108-6e8cae58-4157-416f-a72f-3ab1e987d86d.png \"\")\n\n\n\n（PS：实际上无论是Mac、Linux用户，亦或是WIndows中使用Powershell或其他终端环境的同学都无法与此问题完美邂逅）\n\n## <a name=\"revyzg\"></a>1. 初步分析\n\n此时此刻，心中一阵失落，居然连入门的示例程序都无法运行，不禁一阵瞎想：是否该放弃node.js了？\n\n言归正传，细心的同学会发现，报错的源头来自`Windows Script Host`，下简称`WSH`，我们不难查到它是 Windows 操作系统脚本语言程序（script，即：脚本）的运行环境。\n\n## <a name=\"cpxapg\"></a>2. 执行了什么？\n\n简单分析一下`node node.js`这条命令，我们会很自然地认定为：执行node.exe程序，参数为node.js。\n\n然而实际上，真正执行的程序却变成`WSH`，前面执行的命令`node node.js`并没有任何跟调起`WSH`相关的逻辑，因此为何调起了`WSH`成为了解谜的关键。\n\n顺蔓摸瓜，由于`WSH`正好是执行脚本的服务，而js恰恰又是脚本的一种，不妨假设`node.js`这个脚本文件就是罪魁祸首。然后创建一个`test.js`的副本，尝试执行它：\n\n\n\n![image.png | left | 573x328](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283579297-58c3fa0b-a64b-48c6-b48e-2d2d95788c1b.png \"\")\n\n\n### <a name=\"wgicug\"></a>2.1 执行程序的路径\n\n根据试验的结果不难猜出`node node.js`命令实际执行了`node.js`这个脚本文件，从而调起`WSH`服务，进而出现上图的报错。\n\n顺水推舟可确定`node node.js`等价于`.\\node.js node.js`，即命令执行的文件完整的路径为：`E:\\test\\node.js`。\n\n（PS：各位看官切莫介怀''作为路径分隔符，毕竟在cmd下'/'担任参数分隔符的要职）\n\n### <a name=\"lh6byo\"></a>2.2 补全程序的路径\n\n先讲讲通用的说法，无论是 \\* nix 、OS/2 、DOS 亦或是 windows，其terminal都可以通过一个特殊的环境变量`PATH`进行“补全”（关于环境变量的详细内容本文不作介绍）。\n\n接下来我们通过ping命令先做简要说明：\n\n#### <a name=\"18wgxt\"></a>2.2.1 定位程序的路径\n\n\n\n![image.png | left | 462x216](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283587792-4ced2a94-ce79-49de-8ff3-2fc6864b9c1d.png \"\")\n\n\n很明显，在任何一台正常的机器上，这条命令执行后都能得到期待的结果。此时我们可以看到该cmd进程下的`PATH`环境变量中包含`C:\\WINDOWS\\system32`，通过对`PATH`中的元素(文件夹路径)即可将ping程序的路径补全为：`C:\\WINDOWS\\system32\\ping`。（在 \\* nix 系统下依然通用）\n\n\n\n![image.png | left | 747x73](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283599104-8cb6d3a0-8146-4013-8050-c72dc48774a3.png \"\")\n\n\n#### <a name=\"6803ix\"></a>2.2.2 补全后缀名(仅windows、dos)\n\n由于windows的可执行的概念和 \\* nix 略有不同，因此在windows平台下还需要对程序进行后缀名的补全。\n\n其中在 \\* inx下，只需保证文件的结构符合规范，并且拥有可执行权限，就可以执行；而在windows下，还需要考虑其后缀名及执行方式（实际上是一种打开方式的策略）。\n\n```\nE:\\test>echo %PATHEXT%\n.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW;.CPL\n```\n\n最终我们补全的程序路径为：`C:\\WINDOWS\\system32\\ping.exe`，\n\n#### <a name=\"gsrbge\"></a>2.2.3 特别注意(仅windows、dos)\n\n针对于cmd环境，当前目录也会作为路径补全的一部分，并且优先级最高。在当前目录下，我们创建一个`ping.bat`的脚本，并填充以下内容：\n\n```bash\n@echo off\n:: 输出完整的路径和文件名及后缀\necho %~dpnx0\n```\n\n执行结果如下图，原来的`ping.exe`的动作明显被覆盖了。\n\n\n\n![image.png | left | 569x92](https://cdn.yuque.com/yuque/0/2018/png/103147/1530283614729-6819eb33-989b-4506-8bed-b1adbcf1e8fe.png \"\")\n\n\n#### <a name=\"sl0woo\"></a>2.2.4 小结\n\n我们也额外地发现windows的默认可执行的后缀名包含`.JS`，由此可推断最初的那条`node node.js`命令最终补全的程序路径为：`E:\\test\\node.js`\n\n## <a name=\"gpfwgw\"></a>3 打开方式？\n\n从2.2.4的结论中能显而易见的推导出命令执行的程序为`node.js`脚本文件，那么它为什么是通过`WSH`去执行的呢？\n\n答案其实很明显，有个通俗易懂的概念，叫做打开方式，而windows的打开方式由`assoc`和`ftype`确定。\n\n### <a name=\"s6hrwf\"></a>3.1 后缀名与打开方式\n\n尝试性的跑一跑`assoc`命令，发现其控制着后缀名与打开方式`ftype`的关系。\n\n```bat\nassoc | findstr .js\n```\n\n运行结果：\n\n```bat\n.js=JSFile\n.json=VisualStudio.json.14.0\n.jsonld=VisualStudio.jsonld.14.0\n.jsx=VisualStudio.jsx.14.0\n.jsxbin=JSXBINFile\n.jsxinc=JSXINCFile\n```\n\n不难看出`.js`文件将会通过`JSFile`这个打开方式去执行。\n\n### <a name=\"i9gzih\"></a>3.2 打开方式与执行程序\n\n类似的，我们也可以运行一下ftype命令，其定义了可执行程序以及调用的参数。\n\n```bat\nftype | findstr \"JS\"\n```\n\n运行结果：\n\n```\nJSEFile=C:\\Windows\\System32\\WScript.exe \"%1\" %*\nJSFile=C:\\Windows\\System32\\WScript.exe \"%1\" %*\nJSXFile=\"C:\\Program Files (x86)\\Adobe\\Adobe Utilities - CS6\\ExtendScript Toolkit CS6\\ExtendScript Toolkit.exe\" -run \"%1\"\n```\n\n其中最关键的信息为`JSFile=C:\\Windows\\System32\\WScript.exe \"%1\" %*`，含义是通过`WScript.exe`执行js脚本，并将原来的参数传递过去。\n\n最终`node node.js`等价于`E:\\test\\node.js node.js`。\n\n### <a name=\"e1buxd\"></a>3.3 怎么破？\n\n* 发动想象力吧，别再叫`node.js`了~\n* 是时候切换到 \\* inx 或者升级到powershell了~\n* 如果不介意使用绝对路径的话……\n\n## <a name=\"fgo9hh\"></a>4. 扩展学习\n\n操作系统层面通过`PATH`等环境变量进行资源定位的思路实际上也被广泛应用在各种场景下，下面也举两个常见的栗子说明一下。\n\n### <a name=\"lvw4dm\"></a>4.1 npm 包定位\n\nCommonJS 规范中通过`require`去加载模块时，通过路径补全的策略（详情推荐阅读《深入浅出Node.js》），可以省略模块的路径，后缀名，甚至连/index也能自动补全。\n\n### <a name=\"t4egqi\"></a>4.2 webpack资源定位\n\n嘿，resolve中的extensions、alias等思路是否也如出一辙呢？\n\n## <a name=\"fqyqxe\"></a>5. 总结\n\n全文原创·此文为随走随记，全文思维略带感情请勿拍砖。\n",
    "body_html": "<p>tags: [javascript, node.js, windows, 环境变量]</p><p>date: 2017-08-19</p><hr /><h2 id=\"bs4ibp\"><a href=\"#bs4ibp\"></a>导读</h2><p><br /></p><p>兴许所有程序员都有命名困难症，在考虑变量、常量、方法、类、文件等命名时，总会千方百计尝试一些语义化的方式去实现。</p><p><br /></p><p>曾经有那么一段时间，一些node初学的同学遇到了同样的问题：Hello World 跑不动！！！</p><p><br /></p><h2 id=\"pyovmr\"><a href=\"#pyovmr\"></a>0. 谜之 Hello World</h2><p><br /></p><p>问题的起源非常简单，当我们在编写一个入门程序时，就会迅速想起那句脍炙人口的语句：</p><p><br /></p><pre data-lang=\"javascript\"><code>console.log('Hello World');</code></pre><p><br /></p><p>于是乎，顺手保存为node.js，紧接着尝试以<code>node node.js</code>来运行该示例程序。毫无疑问，在cmd环境下，会遇到如下的报错：</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283568108-6e8cae58-4157-416f-a72f-3ab1e987d86d.png#width=565\" style=\"max-width: 600px; width: 565px;\" /></p><p><br /></p><p><br /></p><p>（PS：实际上无论是Mac、Linux用户，亦或是WIndows中使用Powershell或其他终端环境的同学都无法与此问题完美邂逅）</p><p><br /></p><h2 id=\"revyzg\"><a href=\"#revyzg\"></a>1. 初步分析</h2><p><br /></p><p>此时此刻，心中一阵失落，居然连入门的示例程序都无法运行，不禁一阵瞎想：是否该放弃node.js了？</p><p><br /></p><p>言归正传，细心的同学会发现，报错的源头来自<code>Windows Script Host</code>，下简称<code>WSH</code>，我们不难查到它是 Windows 操作系统脚本语言程序（script，即：脚本）的运行环境。</p><p><br /></p><h2 id=\"cpxapg\"><a href=\"#cpxapg\"></a>2. 执行了什么？</h2><p><br /></p><p>简单分析一下<code>node node.js</code>这条命令，我们会很自然地认定为：执行node.exe程序，参数为node.js。</p><p><br /></p><p>然而实际上，真正执行的程序却变成<code>WSH</code>，前面执行的命令<code>node node.js</code>并没有任何跟调起<code>WSH</code>相关的逻辑，因此为何调起了<code>WSH</code>成为了解谜的关键。</p><p><br /></p><p>顺蔓摸瓜，由于<code>WSH</code>正好是执行脚本的服务，而js恰恰又是脚本的一种，不妨假设<code>node.js</code>这个脚本文件就是罪魁祸首。然后创建一个<code>test.js</code>的副本，尝试执行它：</p><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283579297-58c3fa0b-a64b-48c6-b48e-2d2d95788c1b.png#width=573\" style=\"max-width: 600px; width: 573px;\" /></p><p><br /></p><h3 id=\"wgicug\"><a href=\"#wgicug\"></a>2.1 执行程序的路径</h3><p><br /></p><p>根据试验的结果不难猜出<code>node node.js</code>命令实际执行了<code>node.js</code>这个脚本文件，从而调起<code>WSH</code>服务，进而出现上图的报错。</p><p><br /></p><p>顺水推舟可确定<code>node node.js</code>等价于<code>.\\node.js node.js</code>，即命令执行的文件完整的路径为：<code>E:\\test\\node.js</code>。</p><p><br /></p><p>（PS：各位看官切莫介怀''作为路径分隔符，毕竟在cmd下'/'担任参数分隔符的要职）</p><p><br /></p><h3 id=\"lh6byo\"><a href=\"#lh6byo\"></a>2.2 补全程序的路径</h3><p><br /></p><p>先讲讲通用的说法，无论是 * nix 、OS/2 、DOS 亦或是 windows，其terminal都可以通过一个特殊的环境变量<code>PATH</code>进行“补全”（关于环境变量的详细内容本文不作介绍）。</p><p><br /></p><p>接下来我们通过ping命令先做简要说明：</p><p><br /></p><h4 id=\"18wgxt\"><a href=\"#18wgxt\"></a>2.2.1 定位程序的路径</h4><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283587792-4ced2a94-ce79-49de-8ff3-2fc6864b9c1d.png#width=462\" style=\"max-width: 600px; width: 462px;\" /></p><p><br /></p><p>很明显，在任何一台正常的机器上，这条命令执行后都能得到期待的结果。此时我们可以看到该cmd进程下的<code>PATH</code>环境变量中包含<code>C:\\WINDOWS\\system32</code>，通过对<code>PATH</code>中的元素(文件夹路径)即可将ping程序的路径补全为：<code>C:\\WINDOWS\\system32\\ping</code>。（在 * nix 系统下依然通用）</p><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283599104-8cb6d3a0-8146-4013-8050-c72dc48774a3.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p><p><br /></p><h4 id=\"6803ix\"><a href=\"#6803ix\"></a>2.2.2 补全后缀名(仅windows、dos)</h4><p><br /></p><p>由于windows的可执行的概念和 * nix 略有不同，因此在windows平台下还需要对程序进行后缀名的补全。</p><p><br /></p><p>其中在 * inx下，只需保证文件的结构符合规范，并且拥有可执行权限，就可以执行；而在windows下，还需要考虑其后缀名及执行方式（实际上是一种打开方式的策略）。</p><p><br /></p><pre><code>E:\\test&gt;echo %PATHEXT%\n.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW;.CPL</code></pre><p><br /></p><p>最终我们补全的程序路径为：<code>C:\\WINDOWS\\system32\\ping.exe</code>，</p><p><br /></p><h4 id=\"gsrbge\"><a href=\"#gsrbge\"></a>2.2.3 特别注意(仅windows、dos)</h4><p><br /></p><p>针对于cmd环境，当前目录也会作为路径补全的一部分，并且优先级最高。在当前目录下，我们创建一个<code>ping.bat</code>的脚本，并填充以下内容：</p><p><br /></p><pre data-lang=\"bash\"><code>@echo off\n:: 输出完整的路径和文件名及后缀\necho %~dpnx0</code></pre><p><br /></p><p>执行结果如下图，原来的<code>ping.exe</code>的动作明显被覆盖了。</p><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283614729-6819eb33-989b-4506-8bed-b1adbcf1e8fe.png#width=569\" style=\"max-width: 600px; width: 569px;\" /></p><p><br /></p><h4 id=\"sl0woo\"><a href=\"#sl0woo\"></a>2.2.4 小结</h4><p><br /></p><p>我们也额外地发现windows的默认可执行的后缀名包含<code>.JS</code>，由此可推断最初的那条<code>node node.js</code>命令最终补全的程序路径为：<code>E:\\test\\node.js</code></p><p><br /></p><h2 id=\"gpfwgw\"><a href=\"#gpfwgw\"></a>3 打开方式？</h2><p><br /></p><p>从2.2.4的结论中能显而易见的推导出命令执行的程序为<code>node.js</code>脚本文件，那么它为什么是通过<code>WSH</code>去执行的呢？</p><p><br /></p><p>答案其实很明显，有个通俗易懂的概念，叫做打开方式，而windows的打开方式由<code>assoc</code>和<code>ftype</code>确定。</p><p><br /></p><h3 id=\"s6hrwf\"><a href=\"#s6hrwf\"></a>3.1 后缀名与打开方式</h3><p><br /></p><p>尝试性的跑一跑<code>assoc</code>命令，发现其控制着后缀名与打开方式<code>ftype</code>的关系。</p><p><br /></p><pre data-lang=\"bat\"><code>assoc | findstr .js</code></pre><p><br /></p><p>运行结果：</p><p><br /></p><pre data-lang=\"bat\"><code>.js=JSFile\n.json=VisualStudio.json.14.0\n.jsonld=VisualStudio.jsonld.14.0\n.jsx=VisualStudio.jsx.14.0\n.jsxbin=JSXBINFile\n.jsxinc=JSXINCFile</code></pre><p><br /></p><p>不难看出<code>.js</code>文件将会通过<code>JSFile</code>这个打开方式去执行。</p><p><br /></p><h3 id=\"i9gzih\"><a href=\"#i9gzih\"></a>3.2 打开方式与执行程序</h3><p><br /></p><p>类似的，我们也可以运行一下ftype命令，其定义了可执行程序以及调用的参数。</p><p><br /></p><pre data-lang=\"bat\"><code>ftype | findstr &quot;JS&quot;</code></pre><p><br /></p><p>运行结果：</p><p><br /></p><pre><code>JSEFile=C:\\Windows\\System32\\WScript.exe &quot;%1&quot; %*\nJSFile=C:\\Windows\\System32\\WScript.exe &quot;%1&quot; %*\nJSXFile=&quot;C:\\Program Files (x86)\\Adobe\\Adobe Utilities - CS6\\ExtendScript Toolkit CS6\\ExtendScript Toolkit.exe&quot; -run &quot;%1&quot;</code></pre><p><br /></p><p>其中最关键的信息为<code>JSFile=C:\\Windows\\System32\\WScript.exe &quot;%1&quot; %*</code>，含义是通过<code>WScript.exe</code>执行js脚本，并将原来的参数传递过去。</p><p><br /></p><p>最终<code>node node.js</code>等价于<code>E:\\test\\node.js node.js</code>。</p><p><br /></p><h3 id=\"e1buxd\"><a href=\"#e1buxd\"></a>3.3 怎么破？</h3><p><br /></p><ul><li><p>发动想象力吧，别再叫<code>node.js</code>了~</p></li></ul><ul><li><p>是时候切换到 * inx 或者升级到powershell了~</p></li></ul><ul><li><p>如果不介意使用绝对路径的话……</p></li></ul><p><br /></p><h2 id=\"fgo9hh\"><a href=\"#fgo9hh\"></a>4. 扩展学习</h2><p><br /></p><p>操作系统层面通过<code>PATH</code>等环境变量进行资源定位的思路实际上也被广泛应用在各种场景下，下面也举两个常见的栗子说明一下。</p><p><br /></p><h3 id=\"lvw4dm\"><a href=\"#lvw4dm\"></a>4.1 npm 包定位</h3><p><br /></p><p>CommonJS 规范中通过<code>require</code>去加载模块时，通过路径补全的策略（详情推荐阅读《深入浅出Node.js》），可以省略模块的路径，后缀名，甚至连/index也能自动补全。</p><p><br /></p><h3 id=\"t4egqi\"><a href=\"#t4egqi\"></a>4.2 webpack资源定位</h3><p><br /></p><p>嘿，resolve中的extensions、alias等思路是否也如出一辙呢？</p><p><br /></p><h2 id=\"fqyqxe\"><a href=\"#fqyqxe\"></a>5. 总结</h2><p><br /></p><p>全文原创·此文为随走随记，全文思维略带感情请勿拍砖。</p>",
    "body_lake": "<!doctype lake><p>tags: [javascript, node.js, windows, 环境变量]</p><p>date: 2017-08-19</p><card type=\"block\" name=\"hr\"></card><h2 id=\"bs4ibp\"><a href=\"#bs4ibp\" id=\"导读\"></a>导读</h2><p><br /></p><p>兴许所有程序员都有命名困难症，在考虑变量、常量、方法、类、文件等命名时，总会千方百计尝试一些语义化的方式去实现。</p><p><br /></p><p>曾经有那么一段时间，一些node初学的同学遇到了同样的问题：Hello World 跑不动！！！</p><p><br /></p><h2 id=\"pyovmr\"><a href=\"#pyovmr\" id=\"0.-谜之-hello-world\"></a>0. 谜之 Hello World</h2><p><br /></p><p>问题的起源非常简单，当我们在编写一个入门程序时，就会迅速想起那句脍炙人口的语句：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22d3767589%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log('Hello%20World')%3B%22%7D\"></card><p><br /></p><p>于是乎，顺手保存为node.js，紧接着尝试以<code>node node.js</code>来运行该示例程序。毫无疑问，在cmd环境下，会遇到如下的报错：</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530283568108-6e8cae58-4157-416f-a72f-3ab1e987d86d.png%22%2C%22width%22%3A565%7D\"></card></p><p><br /></p><p><br /></p><p>（PS：实际上无论是Mac、Linux用户，亦或是WIndows中使用Powershell或其他终端环境的同学都无法与此问题完美邂逅）</p><p><br /></p><h2 id=\"revyzg\"><a href=\"#revyzg\" id=\"1.-初步分析\"></a>1. 初步分析</h2><p><br /></p><p>此时此刻，心中一阵失落，居然连入门的示例程序都无法运行，不禁一阵瞎想：是否该放弃node.js了？</p><p><br /></p><p>言归正传，细心的同学会发现，报错的源头来自<code>Windows Script Host</code>，下简称<code>WSH</code>，我们不难查到它是 Windows 操作系统脚本语言程序（script，即：脚本）的运行环境。</p><p><br /></p><h2 id=\"cpxapg\"><a href=\"#cpxapg\" id=\"2.-执行了什么？\"></a>2. 执行了什么？</h2><p><br /></p><p>简单分析一下<code>node node.js</code>这条命令，我们会很自然地认定为：执行node.exe程序，参数为node.js。</p><p><br /></p><p>然而实际上，真正执行的程序却变成<code>WSH</code>，前面执行的命令<code>node node.js</code>并没有任何跟调起<code>WSH</code>相关的逻辑，因此为何调起了<code>WSH</code>成为了解谜的关键。</p><p><br /></p><p>顺蔓摸瓜，由于<code>WSH</code>正好是执行脚本的服务，而js恰恰又是脚本的一种，不妨假设<code>node.js</code>这个脚本文件就是罪魁祸首。然后创建一个<code>test.js</code>的副本，尝试执行它：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530283579297-58c3fa0b-a64b-48c6-b48e-2d2d95788c1b.png%22%2C%22width%22%3A573%7D\"></card></p><p><br /></p><h3 id=\"wgicug\"><a href=\"#wgicug\" id=\"2.1-执行程序的路径\"></a>2.1 执行程序的路径</h3><p><br /></p><p>根据试验的结果不难猜出<code>node node.js</code>命令实际执行了<code>node.js</code>这个脚本文件，从而调起<code>WSH</code>服务，进而出现上图的报错。</p><p><br /></p><p>顺水推舟可确定<code>node node.js</code>等价于<code>.\\node.js node.js</code>，即命令执行的文件完整的路径为：<code>E:\\test\\node.js</code>。</p><p><br /></p><p>（PS：各位看官切莫介怀''作为路径分隔符，毕竟在cmd下'/'担任参数分隔符的要职）</p><p><br /></p><h3 id=\"lh6byo\"><a href=\"#lh6byo\" id=\"2.2-补全程序的路径\"></a>2.2 补全程序的路径</h3><p><br /></p><p>先讲讲通用的说法，无论是 * nix 、OS/2 、DOS 亦或是 windows，其terminal都可以通过一个特殊的环境变量<code>PATH</code>进行“补全”（关于环境变量的详细内容本文不作介绍）。</p><p><br /></p><p>接下来我们通过ping命令先做简要说明：</p><p><br /></p><h4 id=\"18wgxt\"><a href=\"#18wgxt\" id=\"2.2.1-定位程序的路径\"></a>2.2.1 定位程序的路径</h4><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530283587792-4ced2a94-ce79-49de-8ff3-2fc6864b9c1d.png%22%2C%22width%22%3A462%7D\"></card></p><p><br /></p><p>很明显，在任何一台正常的机器上，这条命令执行后都能得到期待的结果。此时我们可以看到该cmd进程下的<code>PATH</code>环境变量中包含<code>C:\\WINDOWS\\system32</code>，通过对<code>PATH</code>中的元素(文件夹路径)即可将ping程序的路径补全为：<code>C:\\WINDOWS\\system32\\ping</code>。（在 * nix 系统下依然通用）</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530283599104-8cb6d3a0-8146-4013-8050-c72dc48774a3.png%22%2C%22width%22%3A747%7D\"></card></p><p><br /></p><h4 id=\"6803ix\"><a href=\"#6803ix\" id=\"2.2.2-补全后缀名(仅windows、dos)\"></a>2.2.2 补全后缀名(仅windows、dos)</h4><p><br /></p><p>由于windows的可执行的概念和 * nix 略有不同，因此在windows平台下还需要对程序进行后缀名的补全。</p><p><br /></p><p>其中在 * inx下，只需保证文件的结构符合规范，并且拥有可执行权限，就可以执行；而在windows下，还需要考虑其后缀名及执行方式（实际上是一种打开方式的策略）。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22ceddf5bc%22%2C%22code%22%3A%22E%3A%5C%5Ctest%3Eecho%20%25PATHEXT%25%5Cn.COM%3B.EXE%3B.BAT%3B.CMD%3B.VBS%3B.VBE%3B.JS%3B.JSE%3B.WSF%3B.WSH%3B.MSC%3B.PY%3B.PYW%3B.CPL%22%7D\"></card><p><br /></p><p>最终我们补全的程序路径为：<code>C:\\WINDOWS\\system32\\ping.exe</code>，</p><p><br /></p><h4 id=\"gsrbge\"><a href=\"#gsrbge\" id=\"2.2.3-特别注意(仅windows、dos)\"></a>2.2.3 特别注意(仅windows、dos)</h4><p><br /></p><p>针对于cmd环境，当前目录也会作为路径补全的一部分，并且优先级最高。在当前目录下，我们创建一个<code>ping.bat</code>的脚本，并填充以下内容：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%223daf4228%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%40echo%20off%5Cn%3A%3A%20%E8%BE%93%E5%87%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%B7%AF%E5%BE%84%E5%92%8C%E6%96%87%E4%BB%B6%E5%90%8D%E5%8F%8A%E5%90%8E%E7%BC%80%5Cnecho%20%25~dpnx0%22%7D\"></card><p><br /></p><p>执行结果如下图，原来的<code>ping.exe</code>的动作明显被覆盖了。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530283614729-6819eb33-989b-4506-8bed-b1adbcf1e8fe.png%22%2C%22width%22%3A569%7D\"></card></p><p><br /></p><h4 id=\"sl0woo\"><a href=\"#sl0woo\" id=\"2.2.4-小结\"></a>2.2.4 小结</h4><p><br /></p><p>我们也额外地发现windows的默认可执行的后缀名包含<code>.JS</code>，由此可推断最初的那条<code>node node.js</code>命令最终补全的程序路径为：<code>E:\\test\\node.js</code></p><p><br /></p><h2 id=\"gpfwgw\"><a href=\"#gpfwgw\" id=\"3-打开方式？\"></a>3 打开方式？</h2><p><br /></p><p>从2.2.4的结论中能显而易见的推导出命令执行的程序为<code>node.js</code>脚本文件，那么它为什么是通过<code>WSH</code>去执行的呢？</p><p><br /></p><p>答案其实很明显，有个通俗易懂的概念，叫做打开方式，而windows的打开方式由<code>assoc</code>和<code>ftype</code>确定。</p><p><br /></p><h3 id=\"s6hrwf\"><a href=\"#s6hrwf\" id=\"3.1-后缀名与打开方式\"></a>3.1 后缀名与打开方式</h3><p><br /></p><p>尝试性的跑一跑<code>assoc</code>命令，发现其控制着后缀名与打开方式<code>ftype</code>的关系。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22a719ea49%22%2C%22mode%22%3A%22bat%22%2C%22code%22%3A%22assoc%20%7C%20findstr%20.js%22%7D\"></card><p><br /></p><p>运行结果：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%228c4d3326%22%2C%22mode%22%3A%22bat%22%2C%22code%22%3A%22.js%3DJSFile%5Cn.json%3DVisualStudio.json.14.0%5Cn.jsonld%3DVisualStudio.jsonld.14.0%5Cn.jsx%3DVisualStudio.jsx.14.0%5Cn.jsxbin%3DJSXBINFile%5Cn.jsxinc%3DJSXINCFile%22%7D\"></card><p><br /></p><p>不难看出<code>.js</code>文件将会通过<code>JSFile</code>这个打开方式去执行。</p><p><br /></p><h3 id=\"i9gzih\"><a href=\"#i9gzih\" id=\"3.2-打开方式与执行程序\"></a>3.2 打开方式与执行程序</h3><p><br /></p><p>类似的，我们也可以运行一下ftype命令，其定义了可执行程序以及调用的参数。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b4e60f79%22%2C%22mode%22%3A%22bat%22%2C%22code%22%3A%22ftype%20%7C%20findstr%20%5C%22JS%5C%22%22%7D\"></card><p><br /></p><p>运行结果：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2264d37863%22%2C%22code%22%3A%22JSEFile%3DC%3A%5C%5CWindows%5C%5CSystem32%5C%5CWScript.exe%20%5C%22%251%5C%22%20%25*%5CnJSFile%3DC%3A%5C%5CWindows%5C%5CSystem32%5C%5CWScript.exe%20%5C%22%251%5C%22%20%25*%5CnJSXFile%3D%5C%22C%3A%5C%5CProgram%20Files%20(x86)%5C%5CAdobe%5C%5CAdobe%20Utilities%20-%20CS6%5C%5CExtendScript%20Toolkit%20CS6%5C%5CExtendScript%20Toolkit.exe%5C%22%20-run%20%5C%22%251%5C%22%22%7D\"></card><p><br /></p><p>其中最关键的信息为<code>JSFile=C:\\Windows\\System32\\WScript.exe &quot;%1&quot; %*</code>，含义是通过<code>WScript.exe</code>执行js脚本，并将原来的参数传递过去。</p><p><br /></p><p>最终<code>node node.js</code>等价于<code>E:\\test\\node.js node.js</code>。</p><p><br /></p><h3 id=\"e1buxd\"><a href=\"#e1buxd\" id=\"3.3-怎么破？\"></a>3.3 怎么破？</h3><p><br /></p><ul><li><p>发动想象力吧，别再叫<code>node.js</code>了~</p></li></ul><ul><li><p>是时候切换到 * inx 或者升级到powershell了~</p></li></ul><ul><li><p>如果不介意使用绝对路径的话……</p></li></ul><p><br /></p><h2 id=\"fgo9hh\"><a href=\"#fgo9hh\" id=\"4.-扩展学习\"></a>4. 扩展学习</h2><p><br /></p><p>操作系统层面通过<code>PATH</code>等环境变量进行资源定位的思路实际上也被广泛应用在各种场景下，下面也举两个常见的栗子说明一下。</p><p><br /></p><h3 id=\"lvw4dm\"><a href=\"#lvw4dm\" id=\"4.1-npm-包定位\"></a>4.1 npm 包定位</h3><p><br /></p><p>CommonJS 规范中通过<code>require</code>去加载模块时，通过路径补全的策略（详情推荐阅读《深入浅出Node.js》），可以省略模块的路径，后缀名，甚至连/index也能自动补全。</p><p><br /></p><h3 id=\"t4egqi\"><a href=\"#t4egqi\" id=\"4.2-webpack资源定位\"></a>4.2 webpack资源定位</h3><p><br /></p><p>嘿，resolve中的extensions、alias等思路是否也如出一辙呢？</p><p><br /></p><h2 id=\"fqyqxe\"><a href=\"#fqyqxe\" id=\"5.-总结\"></a>5. 总结</h2><p><br /></p><p>全文原创·此文为随走随记，全文思维略带感情请勿拍砖。</p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [javascript, node.js, windows, 环境变量]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2017-08-19\"],[\"hr\",{\"id\":\"6g51ge\"}],[\"h2\",{\"id\":\"bs4ibp\"},\"导读\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"兴许所有程序员都有命名困难症，在考虑变量、常量、方法、类、文件等命名时，总会千方百计尝试一些语义化的方式去实现。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"曾经有那么一段时间，一些node初学的同学遇到了同样的问题：Hello World 跑不动！！！\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"pyovmr\"},\"0. 谜之 Hello World\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"问题的起源非常简单，当我们在编写一个入门程序时，就会迅速想起那句脍炙人口的语句：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"console.log('Hello World');\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"于是乎，顺手保存为node.js，紧接着尝试以\",[\"code\",{},\"node node.js\"],\"来运行该示例程序。毫无疑问，在cmd环境下，会遇到如下的报错：\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"3eazlb\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283568108-6e8cae58-4157-416f-a72f-3ab1e987d86d.png\",\"width\":565,\"height\":416,\"size\":30350,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"（PS：实际上无论是Mac、Linux用户，亦或是WIndows中使用Powershell或其他终端环境的同学都无法与此问题完美邂逅）\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"revyzg\"},\"1. 初步分析\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"此时此刻，心中一阵失落，居然连入门的示例程序都无法运行，不禁一阵瞎想：是否该放弃node.js了？\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"言归正传，细心的同学会发现，报错的源头来自\",[\"code\",{},\"Windows Script Host\"],\"，下简称\",[\"code\",{},\"WSH\"],\"，我们不难查到它是 Windows 操作系统脚本语言程序（script，即：脚本）的运行环境。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"cpxapg\"},\"2. 执行了什么？\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"简单分析一下\",[\"code\",{},\"node node.js\"],\"这条命令，我们会很自然地认定为：执行node.exe程序，参数为node.js。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"然而实际上，真正执行的程序却变成\",[\"code\",{},\"WSH\"],\"，前面执行的命令\",[\"code\",{},\"node node.js\"],\"并没有任何跟调起\",[\"code\",{},\"WSH\"],\"相关的逻辑，因此为何调起了\",[\"code\",{},\"WSH\"],\"成为了解谜的关键。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"顺蔓摸瓜，由于\",[\"code\",{},\"WSH\"],\"正好是执行脚本的服务，而js恰恰又是脚本的一种，不妨假设\",[\"code\",{},\"node.js\"],\"这个脚本文件就是罪魁祸首。然后创建一个\",[\"code\",{},\"test.js\"],\"的副本，尝试执行它：\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"gwufxu\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283579297-58c3fa0b-a64b-48c6-b48e-2d2d95788c1b.png\",\"width\":573,\"height\":328,\"size\":22102,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"wgicug\"},\"2.1 执行程序的路径\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"根据试验的结果不难猜出\",[\"code\",{},\"node node.js\"],\"命令实际执行了\",[\"code\",{},\"node.js\"],\"这个脚本文件，从而调起\",[\"code\",{},\"WSH\"],\"服务，进而出现上图的报错。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"顺水推舟可确定\",[\"code\",{},\"node node.js\"],\"等价于\",[\"code\",{},\".\\\\node.js node.js\"],\"，即命令执行的文件完整的路径为：\",[\"code\",{},\"E:\\\\test\\\\node.js\"],\"。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"（PS：各位看官切莫介怀''作为路径分隔符，毕竟在cmd下'/'担任参数分隔符的要职）\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"lh6byo\"},\"2.2 补全程序的路径\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"先讲讲通用的说法，无论是 * nix 、OS/2 、DOS 亦或是 windows，其terminal都可以通过一个特殊的环境变量\",[\"code\",{},\"PATH\"],\"进行“补全”（关于环境变量的详细内容本文不作介绍）。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"接下来我们通过ping命令先做简要说明：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"18wgxt\"},\"2.2.1 定位程序的路径\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"2hpnwn\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283587792-4ced2a94-ce79-49de-8ff3-2fc6864b9c1d.png\",\"width\":462,\"height\":216,\"size\":21028,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"很明显，在任何一台正常的机器上，这条命令执行后都能得到期待的结果。此时我们可以看到该cmd进程下的\",[\"code\",{},\"PATH\"],\"环境变量中包含\",[\"code\",{},\"C:\\\\WINDOWS\\\\system32\"],\"，通过对\",[\"code\",{},\"PATH\"],\"中的元素(文件夹路径)即可将ping程序的路径补全为：\",[\"code\",{},\"C:\\\\WINDOWS\\\\system32\\\\ping\"],\"。（在 * nix 系统下依然通用）\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"kh1wiz\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283599104-8cb6d3a0-8146-4013-8050-c72dc48774a3.png\",\"width\":747,\"height\":73,\"size\":12032,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"6803ix\"},\"2.2.2 补全后缀名(仅windows、dos)\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"由于windows的可执行的概念和 * nix 略有不同，因此在windows平台下还需要对程序进行后缀名的补全。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"其中在 * inx下，只需保证文件的结构符合规范，并且拥有可执行权限，就可以执行；而在windows下，还需要考虑其后缀名及执行方式（实际上是一种打开方式的策略）。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"E:\\\\test>echo %PATHEXT%\\n\",\".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW;.CPL\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"最终我们补全的程序路径为：\",[\"code\",{},\"C:\\\\WINDOWS\\\\system32\\\\ping.exe\"],\"，\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"gsrbge\"},\"2.2.3 特别注意(仅windows、dos)\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"针对于cmd环境，当前目录也会作为路径补全的一部分，并且优先级最高。在当前目录下，我们创建一个\",[\"code\",{},\"ping.bat\"],\"的脚本，并填充以下内容：\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"bash\"},\"@echo off\\n\",\":: 输出完整的路径和文件名及后缀\\n\",\"echo %~dpnx0\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"执行结果如下图，原来的\",[\"code\",{},\"ping.exe\"],\"的动作明显被覆盖了。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"xrgydg\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530283614729-6819eb33-989b-4506-8bed-b1adbcf1e8fe.png\",\"width\":569,\"height\":92,\"size\":5113,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"sl0woo\"},\"2.2.4 小结\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"我们也额外地发现windows的默认可执行的后缀名包含\",[\"code\",{},\".JS\"],\"，由此可推断最初的那条\",[\"code\",{},\"node node.js\"],\"命令最终补全的程序路径为：\",[\"code\",{},\"E:\\\\test\\\\node.js\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"gpfwgw\"},\"3 打开方式？\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"从2.2.4的结论中能显而易见的推导出命令执行的程序为\",[\"code\",{},\"node.js\"],\"脚本文件，那么它为什么是通过\",[\"code\",{},\"WSH\"],\"去执行的呢？\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"答案其实很明显，有个通俗易懂的概念，叫做打开方式，而windows的打开方式由\",[\"code\",{},\"assoc\"],\"和\",[\"code\",{},\"ftype\"],\"确定。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"s6hrwf\"},\"3.1 后缀名与打开方式\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"尝试性的跑一跑\",[\"code\",{},\"assoc\"],\"命令，发现其控制着后缀名与打开方式\",[\"code\",{},\"ftype\"],\"的关系。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"bat\"},\"assoc | findstr .js\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"运行结果：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"bat\"},\".js=JSFile\\n\",\".json=VisualStudio.json.14.0\\n\",\".jsonld=VisualStudio.jsonld.14.0\\n\",\".jsx=VisualStudio.jsx.14.0\\n\",\".jsxbin=JSXBINFile\\n\",\".jsxinc=JSXINCFile\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"不难看出\",[\"code\",{},\".js\"],\"文件将会通过\",[\"code\",{},\"JSFile\"],\"这个打开方式去执行。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"i9gzih\"},\"3.2 打开方式与执行程序\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"类似的，我们也可以运行一下ftype命令，其定义了可执行程序以及调用的参数。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"bat\"},\"ftype | findstr \\\"JS\\\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"运行结果：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"JSEFile=C:\\\\Windows\\\\System32\\\\WScript.exe \\\"%1\\\" %*\\n\",\"JSFile=C:\\\\Windows\\\\System32\\\\WScript.exe \\\"%1\\\" %*\\n\",\"JSXFile=\\\"C:\\\\Program Files (x86)\\\\Adobe\\\\Adobe Utilities - CS6\\\\ExtendScript Toolkit CS6\\\\ExtendScript Toolkit.exe\\\" -run \\\"%1\\\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"其中最关键的信息为\",[\"code\",{},\"JSFile=C:\\\\Windows\\\\System32\\\\WScript.exe \\\"%1\\\" %*\"],\"，含义是通过\",[\"code\",{},\"WScript.exe\"],\"执行js脚本，并将原来的参数传递过去。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"最终\",[\"code\",{},\"node node.js\"],\"等价于\",[\"code\",{},\"E:\\\\test\\\\node.js node.js\"],\"。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"e1buxd\"},\"3.3 怎么破？\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"发动想象力吧，别再叫\",[\"code\",{},\"node.js\"],\"了~\"]]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"是时候切换到 * inx 或者升级到powershell了~\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"如果不介意使用绝对路径的话……\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"fgo9hh\"},\"4. 扩展学习\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"操作系统层面通过\",[\"code\",{},\"PATH\"],\"等环境变量进行资源定位的思路实际上也被广泛应用在各种场景下，下面也举两个常见的栗子说明一下。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"lvw4dm\"},\"4.1 npm 包定位\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"CommonJS 规范中通过\",[\"code\",{},\"require\"],\"去加载模块时，通过路径补全的策略（详情推荐阅读《深入浅出Node.js》），可以省略模块的路径，后缀名，甚至连/index也能自动补全。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"t4egqi\"},\"4.2 webpack资源定位\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"嘿，resolve中的extensions、alias等思路是否也如出一辙呢？\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"fqyqxe\"},\"5. 总结\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"全文原创·此文为随走随记，全文思维略带感情请勿拍砖。\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 1,
    "comments_count": 0,
    "content_updated_at": "2019-02-18T12:15:41.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:45:14.000Z",
    "updated_at": "2019-06-03T13:05:30.000Z",
    "published_at": "2019-02-18T12:15:41.000Z",
    "first_published_at": null,
    "word_count": 1622,
    "cover": null,
    "description": "tags: [javascript, node.js, windows, 环境变量]date: 2017-08-19导读兴许所有程序员都有命名困难症，在考虑变量、常量、方法、类、文件等命名时，总会千方百计尝试一些语义化的方式去实现。曾经有那么一段时间，一些node初学的同学遇到了同样的问题：H...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709055,
    "slug": "axnx0z",
    "title": "前端人脸检测指南",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [javascript, node.js, 人脸检测, AI]<br />date: 2017-08-10\n\n---\n\n<a name=\"zsa4rb\"></a>\n## 1 背景与场景\n\nShape Detection API 的发布已经有一些时日，其主要的提供的能力是给予前端直接可用的特征检测的接口（包括条形码、人脸、文本检测）。本文将简单的对其进行介绍，对前端进行人脸检测进行普适性的讲解。\n\n![](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d517af25?w=1080&amp;h=697&amp;f=jpeg&amp;s=66957#width=)\n\n<!-- more -->\n\na. 基于特征的人脸检测\n\n例如opencv中内置了基于Viola-Jones目标检测框架的Harr分类器（实际上大多数分类器都是基于学习得到的），只需要载入对应的配置文件（haarcascade_frontalface_alt.xml）就能直接调用detectObject去完成检测过程，同时也支持其他特征的检测（如鼻子、嘴巴等）。\n\nb. 基于学习的人脸检测，其实也是需要通过算子提取的图像中的局部特征，通过对其进行分类、统计、回归等方式得到的具备更精确和快响应的分类器。\n\n<a name=\"tuw9cy\"></a>\n## 2 套路集锦\n\n<a name=\"l2ygpi\"></a>\n### 2.1 后端处理\n\n前端通过网络将资源传输到后端，后端统一处理需要检测的图像或视频流，对后端的架构有一定的挑战，同时网络的延时往往不能给用户带来实时的交互效果。\n\n<a name=\"v9unci\"></a>\n### 2.2 客户端处理\n\n得益于OpenCV在跨语言和跨平台的优势，客户端也能以较低的开发成本的提供人脸检测的能力，并且可以通过JsBridge等方式向web容器提供服务，然而一旦脱离这个容器，孤立的页面将失去这种能力。直到有一天……\n\n<a name=\"ux1dml\"></a>\n### 2.3 开放服务\n\n不知道从啥时候开始，云计算等概念拔地而起，计算的成本日益降低。各大研发团队（如阿里云、Face++）都蠢蠢欲动又不紧不慢的上架了人脸检测服务，甚至还带上了各种特！殊！服！务！，人脸识别、活体识别、证件OCR及人脸对比等等等。\n\n![](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d514a6e1?w=1080&amp;h=466&amp;f=jpeg&amp;s=65212#width=)\n\n尽管不仅提供了客户端的SDK以及前后端的API，但是，怎么说也要讲讲我纯前端的方案吧。\n\n<a name=\"fdf8az\"></a>\n## 3 时代带来了什么\n\n好吧，人脸识别在前端依然是在刀耕火种的远古时代，然而，我们的基础建设已经起步，希望后续的一些相关介绍能为各位看官带来一定的启发。\n\n<a name=\"vlrqlg\"></a>\n### 3.1 Shape Detection API\n\n随着客户端硬件的计算能力逐渐提高，浏览器层面得到的权限也越来越多，由于图像处理需要耗费大量的计算资源，实际上浏览器上也能承担图像检测的一些工作，因此就搞出了个Shape Detection API。\n\n以下几个简单的例子介绍了基本的用法，在尝试编辑并运行这些代码之前，请确保在你的Chrome版本以及该新特性已经被激活，另外该API受同源策略所限制：\n\n> chrome://flags/#enable-experimental-web-platform-features\n\n\n条形码检测：Barcode Detection (For Chrome 56+)\n\n```javascript\nvar barcodeDetector = new BarcodeDetector();\nbarcodeDetector.detect(image)\n  .then(barcodes =&gt; {\n    barcodes.forEach(barcode =&gt; console.log(barcodes.rawValue))\n  })\n  .catch(err =&gt; console.error(err));\n```\n\n人脸检测：Face Detection (For Chrome 56+)\n\n```javascript\nvar faceDetector = new FaceDetector();\nfaceDetector.detect(image)\n  .then(faces =&gt; faces.forEach(face =&gt; console.log(face)))\n  .catch(err =&gt; console.error(err));\n```\n\n文本检测：Text Detection (For Chrome 58+)\n\n```javascript\nvar textDetector = new TextDetector();\ntextDetector.detect(image)\n  .then(boundingBoxes =&gt; {\n    for(let box of boundingBoxes) {\n      speechSynthesis.speak(new SpeechSynthesisUtterance(box.rawValue));\n    }\n  })\n  .catch(err =&gt; console.error(err));\n```\n\n<a name=\"zhx1de\"></a>\n### 3.2 图像中的人脸检测\n\n图像的人脸检测比较简单，只需要传入一个图片的元素，就能直接调起该API进行人脸识别了。然后接住canvas我们可以将检测的结果展示出来。\n\n核心代码：\n\n```javascript\nvar image = document.querySelector('#image');\nvar canvas = document.querySelector('#canvas');\nvar ctx = canvas.getContext(\"2d\");\nvar scale = 1;\n\nimage.onload = function () {\n  ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n  scale = canvas.width / image.width;\n};\n\nfunction detect() {  \n  if (window.FaceDetector == undefined) {\n    console.error('Face Detection not supported');\n    return;\n  } \n  var faceDetector = new FaceDetector();\n  console.time('detect');\n  return faceDetector.detect(image)\n    .then(faces =&gt; {\n      console.log(faces)      // Draw the faces on the &lt;canvas&gt;.\n      var ctx = canvas.getContext(\"2d\");\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = \"red\";\n      for (var i = 0; i &lt; faces.length; i++) {\n        var item = faces[i].boundingBox;\n        ctx.rect(Math.floor(item.x * scale), Math.floor(item.y * scale), Math.floor(item.width * scale), Math.floor(item.height * scale));\n        ctx.stroke();\n      }\n      console.timeEnd('detect');\n    })\n    .catch((e) =&gt; console.error(\"Boo, Face Detection failed: \" + e));\n}\n```\n\n处理效果：\n\n![](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d529f4c9?w=746&amp;h=498&amp;f=jpeg&amp;s=75993#width=)\n\n<a name=\"4or8vk\"></a>\n### 3.3 视频中的人脸检测\n\n视频中的人脸检测跟图像相差不大，通过\n\ngetUserMedia 可以打开摄像头获取视频/麦克风的信息，通过将视频帧进行检测和展示，即可实现视频中的人脸检测。\n\n核心代码如下：\n\n```javascript\nnavigator.mediaDevices.getUserMedia({\n  video: true,    // audio: true\n})\n  .then(function (mediaStream) {\n    video.src = window.URL.createObjectURL(mediaStream);\n    video.onloadedmetadata = function (e) {\n      // Do something with the video here.\n    };\n  })\n  .catch(function (error) {\n    console.log(error.name);\n  });\n\nsetInterval(function () {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.drawImage(video, 0, 0);\n  image.src = canvas.toDataURL('image/png');\n  image.onload = function() {\n    detect();\n  }\n}, 60);\n```\n\n处理效果：\n\n![](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d546b78e?w=320&amp;h=235&amp;f=gif&amp;s=306472#width=)\n\n<a name=\"gqarak\"></a>\n### 3.4 时光倒流到没有API的日子\n\n实际上，在很久很久以前，也有不少解决方案存在。由于硬件条件以及没有硬件加速等限制的情况，一直没有被广泛地投入生产。\n\na. tracking.js\n\ntracking.js 是一款js封装的图像处理的库，为浏览器带来丰富的计算视觉相关的算法和技术，通过它可以实现颜色追踪、人脸检测等功能，具体特性如下：\n\n![](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d502c2e6?w=1080&amp;h=866&amp;f=jpeg&amp;s=60671#width=)\n\nb. jquery.facedetection\n\njquery.facedetection 是一款jquery / zepto 人脸检测插件，基于跨终端能力超强的ccv中的图像分类器和检测器。\n\n<a name=\"q8arod\"></a>\n### 3.5 Node.js & OpenCV\n\nnode-opencv 模块已经发布了有些年头，尽管目前还不能完美兼容v3.x，提供的API也比较有限，但能完美兼容opencv v2.4.x。N-API的到来可能会带来更多的惊喜。\n\n设想一下在一个Electron或者Node-Webkit容器中，我们是否可以通过本地开启websocket服务来实现实时的人脸检测呢？实现的思路代码如下：\n\n后端处理逻辑\n\n```javascript\nimport cv from 'opencv';\n\nconst detectConfigFile = './node_modules/opencv/data/haarcascade_frontalface_alt2.xml';\n// camera properties\nconst camWidth = 320;\nconst camHeight = 240;\nconst camFps = 10;\nconst camInterval = 1000 / camFps;\n// face detection properties\nconst rectColor = [0, 255, 0];\nconst rectThickness = 2;\n// initialize cameraconst camera = new cv.VideoCapture(0);\n\ncamera.setWidth(camWidth);\ncamera.setHeight(camHeight);\nconst frameHandler = (err, im) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    if (err) {\n      return reject(err);\n    }\n    im.detectObject(detectConfigFile, {}, (error, faces) =&gt; {\n      if (error) {\n        return reject(error);\n      }\n      let face;\n      for (let i = 0; i &lt; faces.length; i++) {\n        face = faces[i];\n        im.rectangle([face.x, face.y], [face.width, face.height], rectColor, rectThickness);\n      }\n      return resolve(im);\n    });\n  });\n};\n\nmodule.exports = function (socket) {\n  const frameSocketHanlder = (err, im) =&gt; {\n    return frameHandler(err, im)\n      .then((img) =&gt; {\n        socket.emit('frame', {\n          buffer: img.toBuffer(),\n        });\n      });\n  };\n  const handler = () =&gt; {\n    camera.read(frameSocketHanlder);\n  };\n  setInterval(handler, camInterval);\n};\n```\n\n前端调用接口\n\n```javascript\nsocket.on('frame', function (data) {\n\n  var unit8Arr = new Uint8Array(data.buffer);\n  var str = String.fromCharCode.apply(null, unit8Arr);\n  var base64String = btoa(str);\n\n  img.onload = function () {\n    ctx.drawImage(this, 0, 0, canvas.width, canvas.height);\n  }\n  img.src = 'data:image/png;base64,' + base64String;\n});\n```\n\n<a name=\"gg37oo\"></a>\n### 4.1 未来的发展\n\n这些前沿的技术将会在前端得到更为广泛的应用和支持是毋庸置疑的，未来的图像在前端也会随着传统图像处理->学习+图像处理的方式前进，这一切的功劳离不开基础设施(硬件、浏览器、工具、库等)的逐渐增强和完善，其中包括但不仅限于：\n\n- getUserMedia/Canvas => 图像 / 视频的操作\n\n- Shape Detection API => 图像检测\n\n- Web Workers => 并行计算能力\n\n- ConvNetJS => 深度学习框架\n\n- Tensorflow (原 DeeplearnJS) => 正大力支持 JS\n\n\n<a name=\"3arvrk\"></a>\n### 4.2 实际上并没有那么乐观\n\n4.2.1 准确率\n\n对于正脸(多个)的识别率还是比较高的，但是在侧脸已经有障碍物的情况下，检测的效果并不理想。\n\n4.2.2 处理速度\n\n对于图像中人脸检测的例子2.2，耗费时间300ms+（实际上无法满足大分辨率视频实时处理），是调用Opencv的检测速度100ms的三倍之多。\n\n4.2.3 特性\n\n还有很多需要完善的地方：如不支持眼镜状态、性别、年龄估计、表情识别、人种、笑容、模糊检测等主流服务提供商提供的服务。\n\n<a name=\"xk4qxe\"></a>\n### 4.3 想说又说不完的\n\na. 本文中所有样例的源代码，欢迎 Fork / Star：\n\n> [https://github.com/x-cold/face-detection-browser](https://github.com/x-cold/face-detection-browser)\n\n\n> [https://github.com/x-cold/face-detection-nodejs](https://github.com/x-cold/face-detection-nodejs)\n\n\nb. 关于人脸检测在不同场景的适应性，以及检测消耗的时间暂时没有数据支撑，后面考虑引入PASCAL VOC、AT&T提供的样本进行小规模的测试。\n\n<a name=\"46l0fn\"></a>\n## 5 参考\n\n1. 人脸识别技术大总结(1)：Face Detection & Alignment: [http://blog.jobbole.com/85783/](http://blog.jobbole.com/85783/)\n\n2. 阿里巴巴直播防控中的实人认证技术: [https://xianzhi.aliyun.com/forum/mobile/read/635.html](https://xianzhi.aliyun.com/forum/mobile/read/635.html)\n\n3. 前端在人工智能时代能做些什么？：[https://yq.aliyun.com/articles/153198](https://yq.aliyun.com/articles/153198)\n\n4. ConvNetJS Deep Learning in your browser：[http://cs.stanford.edu/people/karpathy/convnetjs/](http://cs.stanford.edu/people/karpathy/convnetjs/)\n\n5. Face detection using Shape Detection API：[https://paul.kinlan.me/face-detection/](https://paul.kinlan.me/face-detection/)\n\n\n![](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d5529c80?w=1080&amp;h=1044&amp;f=jpeg&amp;s=133429#width=)\n",
    "body_draft": "tags: [javascript, node.js, 人脸检测, AI]\ndate: 2017-08-10\n\n---\n\n## <a name=\"zsa4rb\"></a>1 背景与场景\n\nShape Detection API 的发布已经有一些时日，其主要的提供的能力是给予前端直接可用的特征检测的接口（包括条形码、人脸、文本检测）。本文将简单的对其进行介绍，对前端进行人脸检测进行普适性的讲解。\n\n\n\n![image | left](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d517af25?w=1080&amp;h=697&amp;f=jpeg&amp;s=66957 \"\")\n\n\n<!-- more -->\n\na. 基于特征的人脸检测\n\n例如opencv中内置了基于Viola-Jones目标检测框架的Harr分类器（实际上大多数分类器都是基于学习得到的），只需要载入对应的配置文件（haarcascade\\_frontalface\\_alt.xml）就能直接调用detectObject去完成检测过程，同时也支持其他特征的检测（如鼻子、嘴巴等）。\n\nb. 基于学习的人脸检测，其实也是需要通过算子提取的图像中的局部特征，通过对其进行分类、统计、回归等方式得到的具备更精确和快响应的分类器。\n\n## <a name=\"tuw9cy\"></a>2 套路集锦\n\n### <a name=\"l2ygpi\"></a>2.1 后端处理\n\n前端通过网络将资源传输到后端，后端统一处理需要检测的图像或视频流，对后端的架构有一定的挑战，同时网络的延时往往不能给用户带来实时的交互效果。\n\n### <a name=\"v9unci\"></a>2.2 客户端处理\n\n得益于OpenCV在跨语言和跨平台的优势，客户端也能以较低的开发成本的提供人脸检测的能力，并且可以通过JsBridge等方式向web容器提供服务，然而一旦脱离这个容器，孤立的页面将失去这种能力。直到有一天……\n\n### <a name=\"ux1dml\"></a>2.3 开放服务\n\n不知道从啥时候开始，云计算等概念拔地而起，计算的成本日益降低。各大研发团队（如阿里云、Face++）都蠢蠢欲动又不紧不慢的上架了人脸检测服务，甚至还带上了各种特！殊！服！务！，人脸识别、活体识别、证件OCR及人脸对比等等等。\n\n\n\n![image | left](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d514a6e1?w=1080&amp;h=466&amp;f=jpeg&amp;s=65212 \"\")\n\n\n尽管不仅提供了客户端的SDK以及前后端的API，但是，怎么说也要讲讲我纯前端的方案吧。\n\n## <a name=\"fdf8az\"></a>3 时代带来了什么\n\n好吧，人脸识别在前端依然是在刀耕火种的远古时代，然而，我们的基础建设已经起步，希望后续的一些相关介绍能为各位看官带来一定的启发。\n\n### <a name=\"vlrqlg\"></a>3.1 Shape Detection API\n\n随着客户端硬件的计算能力逐渐提高，浏览器层面得到的权限也越来越多，由于图像处理需要耗费大量的计算资源，实际上浏览器上也能承担图像检测的一些工作，因此就搞出了个Shape Detection API。\n\n以下几个简单的例子介绍了基本的用法，在尝试编辑并运行这些代码之前，请确保在你的Chrome版本以及该新特性已经被激活，另外该API受同源策略所限制：\n\n> chrome://flags/#enable-experimental-web-platform-features\n\n条形码检测：Barcode Detection (For Chrome 56+)\n\n```js\nvar barcodeDetector = new BarcodeDetector();\nbarcodeDetector.detect(image)\n  .then(barcodes =&gt; {\n    barcodes.forEach(barcode =&gt; console.log(barcodes.rawValue))\n  })\n  .catch(err =&gt; console.error(err));\n```\n\n人脸检测：Face Detection (For Chrome 56+)\n\n```js\nvar faceDetector = new FaceDetector();\nfaceDetector.detect(image)\n  .then(faces =&gt; faces.forEach(face =&gt; console.log(face)))\n  .catch(err =&gt; console.error(err));\n```\n\n文本检测：Text Detection (For Chrome 58+)\n\n```js\nvar textDetector = new TextDetector();\ntextDetector.detect(image)\n  .then(boundingBoxes =&gt; {\n    for(let box of boundingBoxes) {\n      speechSynthesis.speak(new SpeechSynthesisUtterance(box.rawValue));\n    }\n  })\n  .catch(err =&gt; console.error(err));\n```\n\n### <a name=\"zhx1de\"></a>3.2 图像中的人脸检测\n\n图像的人脸检测比较简单，只需要传入一个图片的元素，就能直接调起该API进行人脸识别了。然后接住canvas我们可以将检测的结果展示出来。\n\n核心代码：\n\n```js\nvar image = document.querySelector('#image');\nvar canvas = document.querySelector('#canvas');\nvar ctx = canvas.getContext(\"2d\");\nvar scale = 1;\n\nimage.onload = function () {\n  ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n  scale = canvas.width / image.width;\n};\n\nfunction detect() {  \n  if (window.FaceDetector == undefined) {\n    console.error('Face Detection not supported');\n    return;\n  } \n  var faceDetector = new FaceDetector();\n  console.time('detect');\n  return faceDetector.detect(image)\n    .then(faces =&gt; {\n      console.log(faces)      // Draw the faces on the &lt;canvas&gt;.\n      var ctx = canvas.getContext(\"2d\");\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = \"red\";\n      for (var i = 0; i &lt; faces.length; i++) {\n        var item = faces[i].boundingBox;\n        ctx.rect(Math.floor(item.x * scale), Math.floor(item.y * scale), Math.floor(item.width * scale), Math.floor(item.height * scale));\n        ctx.stroke();\n      }\n      console.timeEnd('detect');\n    })\n    .catch((e) =&gt; console.error(\"Boo, Face Detection failed: \" + e));\n}\n```\n\n处理效果：\n\n\n\n![image | left](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d529f4c9?w=746&amp;h=498&amp;f=jpeg&amp;s=75993 \"\")\n\n\n### <a name=\"4or8vk\"></a>3.3 视频中的人脸检测\n\n视频中的人脸检测跟图像相差不大，通过\n\ngetUserMedia 可以打开摄像头获取视频/麦克风的信息，通过将视频帧进行检测和展示，即可实现视频中的人脸检测。\n\n核心代码如下：\n\n```js\nnavigator.mediaDevices.getUserMedia({\n  video: true,    // audio: true\n})\n  .then(function (mediaStream) {\n    video.src = window.URL.createObjectURL(mediaStream);\n    video.onloadedmetadata = function (e) {\n      // Do something with the video here.\n    };\n  })\n  .catch(function (error) {\n    console.log(error.name);\n  });\n\nsetInterval(function () {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.drawImage(video, 0, 0);\n  image.src = canvas.toDataURL('image/png');\n  image.onload = function() {\n    detect();\n  }\n}, 60);\n```\n\n处理效果：\n\n\n\n![image | left](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d546b78e?w=320&amp;h=235&amp;f=gif&amp;s=306472 \"\")\n\n\n### <a name=\"gqarak\"></a>3.4 时光倒流到没有API的日子\n\n实际上，在很久很久以前，也有不少解决方案存在。由于硬件条件以及没有硬件加速等限制的情况，一直没有被广泛地投入生产。\n\na. tracking.js\n\ntracking.js 是一款js封装的图像处理的库，为浏览器带来丰富的计算视觉相关的算法和技术，通过它可以实现颜色追踪、人脸检测等功能，具体特性如下：\n\n\n\n![image | left](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d502c2e6?w=1080&amp;h=866&amp;f=jpeg&amp;s=60671 \"\")\n\n\nb. jquery.facedetection\n\njquery.facedetection 是一款jquery / zepto 人脸检测插件，基于跨终端能力超强的ccv中的图像分类器和检测器。\n\n### <a name=\"q8arod\"></a>3.5 Node.js & OpenCV\n\nnode-opencv 模块已经发布了有些年头，尽管目前还不能完美兼容v3.x，提供的API也比较有限，但能完美兼容opencv v2.4.x。N-API的到来可能会带来更多的惊喜。\n\n设想一下在一个Electron或者Node-Webkit容器中，我们是否可以通过本地开启websocket服务来实现实时的人脸检测呢？实现的思路代码如下：\n\n后端处理逻辑\n\n```js\nimport cv from 'opencv';\n\nconst detectConfigFile = './node_modules/opencv/data/haarcascade_frontalface_alt2.xml';\n// camera properties\nconst camWidth = 320;\nconst camHeight = 240;\nconst camFps = 10;\nconst camInterval = 1000 / camFps;\n// face detection properties\nconst rectColor = [0, 255, 0];\nconst rectThickness = 2;\n// initialize cameraconst camera = new cv.VideoCapture(0);\n\ncamera.setWidth(camWidth);\ncamera.setHeight(camHeight);\nconst frameHandler = (err, im) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    if (err) {\n      return reject(err);\n    }\n    im.detectObject(detectConfigFile, {}, (error, faces) =&gt; {\n      if (error) {\n        return reject(error);\n      }\n      let face;\n      for (let i = 0; i &lt; faces.length; i++) {\n        face = faces[i];\n        im.rectangle([face.x, face.y], [face.width, face.height], rectColor, rectThickness);\n      }\n      return resolve(im);\n    });\n  });\n};\n\nmodule.exports = function (socket) {\n  const frameSocketHanlder = (err, im) =&gt; {\n    return frameHandler(err, im)\n      .then((img) =&gt; {\n        socket.emit('frame', {\n          buffer: img.toBuffer(),\n        });\n      });\n  };\n  const handler = () =&gt; {\n    camera.read(frameSocketHanlder);\n  };\n  setInterval(handler, camInterval);\n};\n```\n\n前端调用接口\n\n```js\nsocket.on('frame', function (data) {\n\n  var unit8Arr = new Uint8Array(data.buffer);\n  var str = String.fromCharCode.apply(null, unit8Arr);\n  var base64String = btoa(str);\n\n  img.onload = function () {\n    ctx.drawImage(this, 0, 0, canvas.width, canvas.height);\n  }\n  img.src = 'data:image/png;base64,' + base64String;\n});\n```\n\n### <a name=\"gg37oo\"></a>4.1 未来的发展\n\n这些前沿的技术将会在前端得到更为广泛的应用和支持是毋庸置疑的，未来的图像在前端也会随着传统图像处理->学习+图像处理的方式前进，这一切的功劳离不开基础设施(硬件、浏览器、工具、库等)的逐渐增强和完善，其中包括但不仅限于：\n\n* getUserMedia/Canvas => 图像 / 视频的操作\n* Shape Detection API => 图像检测\n* Web Workers => 并行计算能力\n* ConvNetJS => 深度学习框架\n* Tensorflow (原 DeeplearnJS) => 正大力支持 JS\n\n### <a name=\"3arvrk\"></a>4.2 实际上并没有那么乐观\n\n4.2.1 准确率\n\n对于正脸(多个)的识别率还是比较高的，但是在侧脸已经有障碍物的情况下，检测的效果并不理想。\n\n4.2.2 处理速度\n\n对于图像中人脸检测的例子2.2，耗费时间300ms+（实际上无法满足大分辨率视频实时处理），是调用Opencv的检测速度100ms的三倍之多。\n\n4.2.3 特性\n\n还有很多需要完善的地方：如不支持眼镜状态、性别、年龄估计、表情识别、人种、笑容、模糊检测等主流服务提供商提供的服务。\n\n### <a name=\"xk4qxe\"></a>4.3 想说又说不完的\n\na. 本文中所有样例的源代码，欢迎 Fork / Star：\n\n> [https://github.com/x-cold/face-detection-browser](https://github.com/x-cold/face-detection-browser)\n\n> [https://github.com/x-cold/face-detection-nodejs](https://github.com/x-cold/face-detection-nodejs)\n\nb. 关于人脸检测在不同场景的适应性，以及检测消耗的时间暂时没有数据支撑，后面考虑引入PASCAL VOC、AT&T提供的样本进行小规模的测试。\n\n## <a name=\"46l0fn\"></a>5 参考\n\n1. 人脸识别技术大总结(1)：Face Detection & Alignment: [http://blog.jobbole.com/85783/](http://blog.jobbole.com/85783/)\n2. 阿里巴巴直播防控中的实人认证技术: [https://xianzhi.aliyun.com/forum/mobile/read/635.html](https://xianzhi.aliyun.com/forum/mobile/read/635.html)\n3. 前端在人工智能时代能做些什么？：[https://yq.aliyun.com/articles/153198](https://yq.aliyun.com/articles/153198)\n4. ConvNetJS Deep Learning in your browser：[http://cs.stanford.edu/people/karpathy/convnetjs/](http://cs.stanford.edu/people/karpathy/convnetjs/)\n5. Face detection using Shape Detection API：[https://paul.kinlan.me/face-detection/](https://paul.kinlan.me/face-detection/)\n\n\n\n![image | left](https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d5529c80?w=1080&amp;h=1044&amp;f=jpeg&amp;s=133429 \"\")\n\n",
    "body_html": "<p>tags: [javascript, node.js, 人脸检测, AI]</p><p>date: 2017-08-10</p><hr /><h2 id=\"zsa4rb\"><a href=\"#zsa4rb\"></a>1 背景与场景</h2><p><br /></p><p>Shape Detection API 的发布已经有一些时日，其主要的提供的能力是给予前端直接可用的特征检测的接口（包括条形码、人脸、文本检测）。本文将简单的对其进行介绍，对前端进行人脸检测进行普适性的讲解。</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d517af25?w=1080&amp;amp;h=697&amp;amp;f=jpeg&amp;amp;s=66957#width=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p>a. 基于特征的人脸检测</p><p><br /></p><p>例如opencv中内置了基于Viola-Jones目标检测框架的Harr分类器（实际上大多数分类器都是基于学习得到的），只需要载入对应的配置文件（haarcascade_frontalface_alt.xml）就能直接调用detectObject去完成检测过程，同时也支持其他特征的检测（如鼻子、嘴巴等）。</p><p><br /></p><p>b. 基于学习的人脸检测，其实也是需要通过算子提取的图像中的局部特征，通过对其进行分类、统计、回归等方式得到的具备更精确和快响应的分类器。</p><p><br /></p><h2 id=\"tuw9cy\"><a href=\"#tuw9cy\"></a>2 套路集锦</h2><p><br /></p><h3 id=\"l2ygpi\"><a href=\"#l2ygpi\"></a>2.1 后端处理</h3><p><br /></p><p>前端通过网络将资源传输到后端，后端统一处理需要检测的图像或视频流，对后端的架构有一定的挑战，同时网络的延时往往不能给用户带来实时的交互效果。</p><p><br /></p><h3 id=\"v9unci\"><a href=\"#v9unci\"></a>2.2 客户端处理</h3><p><br /></p><p>得益于OpenCV在跨语言和跨平台的优势，客户端也能以较低的开发成本的提供人脸检测的能力，并且可以通过JsBridge等方式向web容器提供服务，然而一旦脱离这个容器，孤立的页面将失去这种能力。直到有一天……</p><p><br /></p><h3 id=\"ux1dml\"><a href=\"#ux1dml\"></a>2.3 开放服务</h3><p><br /></p><p>不知道从啥时候开始，云计算等概念拔地而起，计算的成本日益降低。各大研发团队（如阿里云、Face++）都蠢蠢欲动又不紧不慢的上架了人脸检测服务，甚至还带上了各种特！殊！服！务！，人脸识别、活体识别、证件OCR及人脸对比等等等。</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d514a6e1?w=1080&amp;amp;h=466&amp;amp;f=jpeg&amp;amp;s=65212#width=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>尽管不仅提供了客户端的SDK以及前后端的API，但是，怎么说也要讲讲我纯前端的方案吧。</p><p><br /></p><h2 id=\"fdf8az\"><a href=\"#fdf8az\"></a>3 时代带来了什么</h2><p><br /></p><p>好吧，人脸识别在前端依然是在刀耕火种的远古时代，然而，我们的基础建设已经起步，希望后续的一些相关介绍能为各位看官带来一定的启发。</p><p><br /></p><h3 id=\"vlrqlg\"><a href=\"#vlrqlg\"></a>3.1 Shape Detection API</h3><p><br /></p><p>随着客户端硬件的计算能力逐渐提高，浏览器层面得到的权限也越来越多，由于图像处理需要耗费大量的计算资源，实际上浏览器上也能承担图像检测的一些工作，因此就搞出了个Shape Detection API。</p><p><br /></p><p>以下几个简单的例子介绍了基本的用法，在尝试编辑并运行这些代码之前，请确保在你的Chrome版本以及该新特性已经被激活，另外该API受同源策略所限制：</p><p><br /></p><blockquote><p>chrome://flags/#enable-experimental-web-platform-features</p></blockquote><p><br /></p><p>条形码检测：Barcode Detection (For Chrome 56+)</p><p><br /></p><pre data-lang=\"javascript\"><code>var barcodeDetector = new BarcodeDetector();\nbarcodeDetector.detect(image)\n  .then(barcodes =&amp;gt; {\n    barcodes.forEach(barcode =&amp;gt; console.log(barcodes.rawValue))\n  })\n  .catch(err =&amp;gt; console.error(err));</code></pre><p><br /></p><p>人脸检测：Face Detection (For Chrome 56+)</p><p><br /></p><pre data-lang=\"javascript\"><code>var faceDetector = new FaceDetector();\nfaceDetector.detect(image)\n  .then(faces =&amp;gt; faces.forEach(face =&amp;gt; console.log(face)))\n  .catch(err =&amp;gt; console.error(err));</code></pre><p><br /></p><p>文本检测：Text Detection (For Chrome 58+)</p><p><br /></p><pre data-lang=\"javascript\"><code>var textDetector = new TextDetector();\ntextDetector.detect(image)\n  .then(boundingBoxes =&amp;gt; {\n    for(let box of boundingBoxes) {\n      speechSynthesis.speak(new SpeechSynthesisUtterance(box.rawValue));\n    }\n  })\n  .catch(err =&amp;gt; console.error(err));</code></pre><p><br /></p><h3 id=\"zhx1de\"><a href=\"#zhx1de\"></a>3.2 图像中的人脸检测</h3><p><br /></p><p>图像的人脸检测比较简单，只需要传入一个图片的元素，就能直接调起该API进行人脸识别了。然后接住canvas我们可以将检测的结果展示出来。</p><p><br /></p><p>核心代码：</p><p><br /></p><pre data-lang=\"javascript\"><code>var image = document.querySelector('#image');\nvar canvas = document.querySelector('#canvas');\nvar ctx = canvas.getContext(&quot;2d&quot;);\nvar scale = 1;\n\nimage.onload = function () {\n  ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n  scale = canvas.width / image.width;\n};\n\nfunction detect() {  \n  if (window.FaceDetector == undefined) {\n    console.error('Face Detection not supported');\n    return;\n  } \n  var faceDetector = new FaceDetector();\n  console.time('detect');\n  return faceDetector.detect(image)\n    .then(faces =&amp;gt; {\n      console.log(faces)      // Draw the faces on the &amp;lt;canvas&amp;gt;.\n      var ctx = canvas.getContext(&quot;2d&quot;);\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = &quot;red&quot;;\n      for (var i = 0; i &amp;lt; faces.length; i++) {\n        var item = faces[i].boundingBox;\n        ctx.rect(Math.floor(item.x * scale), Math.floor(item.y * scale), Math.floor(item.width * scale), Math.floor(item.height * scale));\n        ctx.stroke();\n      }\n      console.timeEnd('detect');\n    })\n    .catch((e) =&amp;gt; console.error(&quot;Boo, Face Detection failed: &quot; + e));\n}</code></pre><p><br /></p><p>处理效果：</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d529f4c9?w=746&amp;amp;h=498&amp;amp;f=jpeg&amp;amp;s=75993#width=\" style=\"max-width: 600px;\" /></p><p><br /></p><h3 id=\"4or8vk\"><a href=\"#4or8vk\"></a>3.3 视频中的人脸检测</h3><p><br /></p><p>视频中的人脸检测跟图像相差不大，通过</p><p><br /></p><p>getUserMedia 可以打开摄像头获取视频/麦克风的信息，通过将视频帧进行检测和展示，即可实现视频中的人脸检测。</p><p><br /></p><p>核心代码如下：</p><p><br /></p><pre data-lang=\"javascript\"><code>navigator.mediaDevices.getUserMedia({\n  video: true,    // audio: true\n})\n  .then(function (mediaStream) {\n    video.src = window.URL.createObjectURL(mediaStream);\n    video.onloadedmetadata = function (e) {\n      // Do something with the video here.\n    };\n  })\n  .catch(function (error) {\n    console.log(error.name);\n  });\n\nsetInterval(function () {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.drawImage(video, 0, 0);\n  image.src = canvas.toDataURL('image/png');\n  image.onload = function() {\n    detect();\n  }\n}, 60);</code></pre><p><br /></p><p>处理效果：</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d546b78e?w=320&amp;amp;h=235&amp;amp;f=gif&amp;amp;s=306472#width=\" style=\"max-width: 600px;\" /></p><p><br /></p><h3 id=\"gqarak\"><a href=\"#gqarak\"></a>3.4 时光倒流到没有API的日子</h3><p><br /></p><p>实际上，在很久很久以前，也有不少解决方案存在。由于硬件条件以及没有硬件加速等限制的情况，一直没有被广泛地投入生产。</p><p><br /></p><p>a. tracking.js</p><p><br /></p><p>tracking.js 是一款js封装的图像处理的库，为浏览器带来丰富的计算视觉相关的算法和技术，通过它可以实现颜色追踪、人脸检测等功能，具体特性如下：</p><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d502c2e6?w=1080&amp;amp;h=866&amp;amp;f=jpeg&amp;amp;s=60671#width=\" style=\"max-width: 600px;\" /></p><p><br /></p><p>b. jquery.facedetection</p><p><br /></p><p>jquery.facedetection 是一款jquery / zepto 人脸检测插件，基于跨终端能力超强的ccv中的图像分类器和检测器。</p><p><br /></p><h3 id=\"q8arod\"><a href=\"#q8arod\"></a>3.5 Node.js &amp; OpenCV</h3><p><br /></p><p>node-opencv 模块已经发布了有些年头，尽管目前还不能完美兼容v3.x，提供的API也比较有限，但能完美兼容opencv v2.4.x。N-API的到来可能会带来更多的惊喜。</p><p><br /></p><p>设想一下在一个Electron或者Node-Webkit容器中，我们是否可以通过本地开启websocket服务来实现实时的人脸检测呢？实现的思路代码如下：</p><p><br /></p><p>后端处理逻辑</p><p><br /></p><pre data-lang=\"javascript\"><code>import cv from 'opencv';\n\nconst detectConfigFile = './node_modules/opencv/data/haarcascade_frontalface_alt2.xml';\n// camera properties\nconst camWidth = 320;\nconst camHeight = 240;\nconst camFps = 10;\nconst camInterval = 1000 / camFps;\n// face detection properties\nconst rectColor = [0, 255, 0];\nconst rectThickness = 2;\n// initialize cameraconst camera = new cv.VideoCapture(0);\n\ncamera.setWidth(camWidth);\ncamera.setHeight(camHeight);\nconst frameHandler = (err, im) =&amp;gt; {\n  return new Promise((resolve, reject) =&amp;gt; {\n    if (err) {\n      return reject(err);\n    }\n    im.detectObject(detectConfigFile, {}, (error, faces) =&amp;gt; {\n      if (error) {\n        return reject(error);\n      }\n      let face;\n      for (let i = 0; i &amp;lt; faces.length; i++) {\n        face = faces[i];\n        im.rectangle([face.x, face.y], [face.width, face.height], rectColor, rectThickness);\n      }\n      return resolve(im);\n    });\n  });\n};\n\nmodule.exports = function (socket) {\n  const frameSocketHanlder = (err, im) =&amp;gt; {\n    return frameHandler(err, im)\n      .then((img) =&amp;gt; {\n        socket.emit('frame', {\n          buffer: img.toBuffer(),\n        });\n      });\n  };\n  const handler = () =&amp;gt; {\n    camera.read(frameSocketHanlder);\n  };\n  setInterval(handler, camInterval);\n};</code></pre><p><br /></p><p>前端调用接口</p><p><br /></p><pre data-lang=\"javascript\"><code>socket.on('frame', function (data) {\n\n  var unit8Arr = new Uint8Array(data.buffer);\n  var str = String.fromCharCode.apply(null, unit8Arr);\n  var base64String = btoa(str);\n\n  img.onload = function () {\n    ctx.drawImage(this, 0, 0, canvas.width, canvas.height);\n  }\n  img.src = 'data:image/png;base64,' + base64String;\n});</code></pre><p><br /></p><h3 id=\"gg37oo\"><a href=\"#gg37oo\"></a>4.1 未来的发展</h3><p><br /></p><p>这些前沿的技术将会在前端得到更为广泛的应用和支持是毋庸置疑的，未来的图像在前端也会随着传统图像处理-&gt;学习+图像处理的方式前进，这一切的功劳离不开基础设施(硬件、浏览器、工具、库等)的逐渐增强和完善，其中包括但不仅限于：</p><p><br /></p><ul><li><p>getUserMedia/Canvas =&gt; 图像 / 视频的操作</p></li></ul><ul><li><p>Shape Detection API =&gt; 图像检测</p></li></ul><ul><li><p>Web Workers =&gt; 并行计算能力</p></li></ul><ul><li><p>ConvNetJS =&gt; 深度学习框架</p></li></ul><ul><li><p>Tensorflow (原 DeeplearnJS) =&gt; 正大力支持 JS</p></li></ul><p><br /></p><h3 id=\"3arvrk\"><a href=\"#3arvrk\"></a>4.2 实际上并没有那么乐观</h3><p><br /></p><p>4.2.1 准确率</p><p><br /></p><p>对于正脸(多个)的识别率还是比较高的，但是在侧脸已经有障碍物的情况下，检测的效果并不理想。</p><p><br /></p><p>4.2.2 处理速度</p><p><br /></p><p>对于图像中人脸检测的例子2.2，耗费时间300ms+（实际上无法满足大分辨率视频实时处理），是调用Opencv的检测速度100ms的三倍之多。</p><p><br /></p><p>4.2.3 特性</p><p><br /></p><p>还有很多需要完善的地方：如不支持眼镜状态、性别、年龄估计、表情识别、人种、笑容、模糊检测等主流服务提供商提供的服务。</p><p><br /></p><h3 id=\"xk4qxe\"><a href=\"#xk4qxe\"></a>4.3 想说又说不完的</h3><p><br /></p><p>a. 本文中所有样例的源代码，欢迎 Fork / Star：</p><p><br /></p><blockquote><p><a href=\"https://github.com/x-cold/face-detection-browser\" target=\"_blank\">https://github.com/x-cold/face-detection-browser</a></p></blockquote><p><br /></p><blockquote><p><a href=\"https://github.com/x-cold/face-detection-nodejs\" target=\"_blank\">https://github.com/x-cold/face-detection-nodejs</a></p></blockquote><p><br /></p><p>b. 关于人脸检测在不同场景的适应性，以及检测消耗的时间暂时没有数据支撑，后面考虑引入PASCAL VOC、AT&amp;T提供的样本进行小规模的测试。</p><p><br /></p><h2 id=\"46l0fn\"><a href=\"#46l0fn\"></a>5 参考</h2><p><br /></p><ol start=\"1\"><li><p>人脸识别技术大总结(1)：Face Detection &amp; Alignment: <a href=\"http://blog.jobbole.com/85783/\" target=\"_blank\">http://blog.jobbole.com/85783/</a></p></li></ol><ol start=\"2\"><li><p>阿里巴巴直播防控中的实人认证技术: <a href=\"https://xianzhi.aliyun.com/forum/mobile/read/635.html\" target=\"_blank\">https://xianzhi.aliyun.com/forum/mobile/read/635.html</a></p></li></ol><ol start=\"3\"><li><p>前端在人工智能时代能做些什么？：<a href=\"https://yq.aliyun.com/articles/153198\" target=\"_blank\">https://yq.aliyun.com/articles/153198</a></p></li></ol><ol start=\"4\"><li><p>ConvNetJS Deep Learning in your browser：<a href=\"http://cs.stanford.edu/people/karpathy/convnetjs/\" target=\"_blank\">http://cs.stanford.edu/people/karpathy/convnetjs/</a></p></li></ol><ol start=\"5\"><li><p>Face detection using Shape Detection API：<a href=\"https://paul.kinlan.me/face-detection/\" target=\"_blank\">https://paul.kinlan.me/face-detection/</a></p></li></ol><p><br /></p><p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d5529c80?w=1080&amp;amp;h=1044&amp;amp;f=jpeg&amp;amp;s=133429#width=\" style=\"max-width: 600px;\" /></p>",
    "body_lake": "<!doctype lake><p>tags: [javascript, node.js, 人脸检测, AI]</p><p>date: 2017-08-10</p><card type=\"block\" name=\"hr\"></card><h2 id=\"zsa4rb\"><a href=\"#zsa4rb\" id=\"1-背景与场景\"></a>1 背景与场景</h2><p><br /></p><p>Shape Detection API 的发布已经有一些时日，其主要的提供的能力是给予前端直接可用的特征检测的接口（包括条形码、人脸、文本检测）。本文将简单的对其进行介绍，对前端进行人脸检测进行普适性的讲解。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2018%2F4%2F25%2F162fabc3d517af25%3Fw%3D1080%26amp%3Bh%3D697%26amp%3Bf%3Djpeg%26amp%3Bs%3D66957%22%2C%22width%22%3A%22%22%7D\"></card></p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p>a. 基于特征的人脸检测</p><p><br /></p><p>例如opencv中内置了基于Viola-Jones目标检测框架的Harr分类器（实际上大多数分类器都是基于学习得到的），只需要载入对应的配置文件（haarcascade_frontalface_alt.xml）就能直接调用detectObject去完成检测过程，同时也支持其他特征的检测（如鼻子、嘴巴等）。</p><p><br /></p><p>b. 基于学习的人脸检测，其实也是需要通过算子提取的图像中的局部特征，通过对其进行分类、统计、回归等方式得到的具备更精确和快响应的分类器。</p><p><br /></p><h2 id=\"tuw9cy\"><a href=\"#tuw9cy\" id=\"2-套路集锦\"></a>2 套路集锦</h2><p><br /></p><h3 id=\"l2ygpi\"><a href=\"#l2ygpi\" id=\"2.1-后端处理\"></a>2.1 后端处理</h3><p><br /></p><p>前端通过网络将资源传输到后端，后端统一处理需要检测的图像或视频流，对后端的架构有一定的挑战，同时网络的延时往往不能给用户带来实时的交互效果。</p><p><br /></p><h3 id=\"v9unci\"><a href=\"#v9unci\" id=\"2.2-客户端处理\"></a>2.2 客户端处理</h3><p><br /></p><p>得益于OpenCV在跨语言和跨平台的优势，客户端也能以较低的开发成本的提供人脸检测的能力，并且可以通过JsBridge等方式向web容器提供服务，然而一旦脱离这个容器，孤立的页面将失去这种能力。直到有一天……</p><p><br /></p><h3 id=\"ux1dml\"><a href=\"#ux1dml\" id=\"2.3-开放服务\"></a>2.3 开放服务</h3><p><br /></p><p>不知道从啥时候开始，云计算等概念拔地而起，计算的成本日益降低。各大研发团队（如阿里云、Face++）都蠢蠢欲动又不紧不慢的上架了人脸检测服务，甚至还带上了各种特！殊！服！务！，人脸识别、活体识别、证件OCR及人脸对比等等等。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2018%2F4%2F25%2F162fabc3d514a6e1%3Fw%3D1080%26amp%3Bh%3D466%26amp%3Bf%3Djpeg%26amp%3Bs%3D65212%22%2C%22width%22%3A%22%22%7D\"></card></p><p><br /></p><p>尽管不仅提供了客户端的SDK以及前后端的API，但是，怎么说也要讲讲我纯前端的方案吧。</p><p><br /></p><h2 id=\"fdf8az\"><a href=\"#fdf8az\" id=\"3-时代带来了什么\"></a>3 时代带来了什么</h2><p><br /></p><p>好吧，人脸识别在前端依然是在刀耕火种的远古时代，然而，我们的基础建设已经起步，希望后续的一些相关介绍能为各位看官带来一定的启发。</p><p><br /></p><h3 id=\"vlrqlg\"><a href=\"#vlrqlg\" id=\"3.1-shape-detection-api\"></a>3.1 Shape Detection API</h3><p><br /></p><p>随着客户端硬件的计算能力逐渐提高，浏览器层面得到的权限也越来越多，由于图像处理需要耗费大量的计算资源，实际上浏览器上也能承担图像检测的一些工作，因此就搞出了个Shape Detection API。</p><p><br /></p><p>以下几个简单的例子介绍了基本的用法，在尝试编辑并运行这些代码之前，请确保在你的Chrome版本以及该新特性已经被激活，另外该API受同源策略所限制：</p><p><br /></p><blockquote><p>chrome://flags/#enable-experimental-web-platform-features</p></blockquote><p><br /></p><p>条形码检测：Barcode Detection (For Chrome 56+)</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22a726f19e%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20barcodeDetector%20%3D%20new%20BarcodeDetector()%3B%5CnbarcodeDetector.detect(image)%5Cn%20%20.then(barcodes%20%3D%26gt%3B%20%7B%5Cn%20%20%20%20barcodes.forEach(barcode%20%3D%26gt%3B%20console.log(barcodes.rawValue))%5Cn%20%20%7D)%5Cn%20%20.catch(err%20%3D%26gt%3B%20console.error(err))%3B%22%7D\"></card><p><br /></p><p>人脸检测：Face Detection (For Chrome 56+)</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2279cd9365%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20faceDetector%20%3D%20new%20FaceDetector()%3B%5CnfaceDetector.detect(image)%5Cn%20%20.then(faces%20%3D%26gt%3B%20faces.forEach(face%20%3D%26gt%3B%20console.log(face)))%5Cn%20%20.catch(err%20%3D%26gt%3B%20console.error(err))%3B%22%7D\"></card><p><br /></p><p>文本检测：Text Detection (For Chrome 58+)</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%226f3b05e6%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20textDetector%20%3D%20new%20TextDetector()%3B%5CntextDetector.detect(image)%5Cn%20%20.then(boundingBoxes%20%3D%26gt%3B%20%7B%5Cn%20%20%20%20for(let%20box%20of%20boundingBoxes)%20%7B%5Cn%20%20%20%20%20%20speechSynthesis.speak(new%20SpeechSynthesisUtterance(box.rawValue))%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D)%5Cn%20%20.catch(err%20%3D%26gt%3B%20console.error(err))%3B%22%7D\"></card><p><br /></p><h3 id=\"zhx1de\"><a href=\"#zhx1de\" id=\"3.2-图像中的人脸检测\"></a>3.2 图像中的人脸检测</h3><p><br /></p><p>图像的人脸检测比较简单，只需要传入一个图片的元素，就能直接调起该API进行人脸识别了。然后接住canvas我们可以将检测的结果展示出来。</p><p><br /></p><p>核心代码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c6f8a05b%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20image%20%3D%20document.querySelector('%23image')%3B%5Cnvar%20canvas%20%3D%20document.querySelector('%23canvas')%3B%5Cnvar%20ctx%20%3D%20canvas.getContext(%5C%222d%5C%22)%3B%5Cnvar%20scale%20%3D%201%3B%5Cn%5Cnimage.onload%20%3D%20function%20()%20%7B%5Cn%20%20ctx.drawImage(image%2C%200%2C%200%2C%20image.width%2C%20image.height%2C%200%2C%200%2C%20canvas.width%2C%20canvas.height)%3B%5Cn%20%20scale%20%3D%20canvas.width%20%2F%20image.width%3B%5Cn%7D%3B%5Cn%5Cnfunction%20detect()%20%7B%20%20%5Cn%20%20if%20(window.FaceDetector%20%3D%3D%20undefined)%20%7B%5Cn%20%20%20%20console.error('Face%20Detection%20not%20supported')%3B%5Cn%20%20%20%20return%3B%5Cn%20%20%7D%20%5Cn%20%20var%20faceDetector%20%3D%20new%20FaceDetector()%3B%5Cn%20%20console.time('detect')%3B%5Cn%20%20return%20faceDetector.detect(image)%5Cn%20%20%20%20.then(faces%20%3D%26gt%3B%20%7B%5Cn%20%20%20%20%20%20console.log(faces)%20%20%20%20%20%20%2F%2F%20Draw%20the%20faces%20on%20the%20%26lt%3Bcanvas%26gt%3B.%5Cn%20%20%20%20%20%20var%20ctx%20%3D%20canvas.getContext(%5C%222d%5C%22)%3B%5Cn%20%20%20%20%20%20ctx.lineWidth%20%3D%202%3B%5Cn%20%20%20%20%20%20ctx.strokeStyle%20%3D%20%5C%22red%5C%22%3B%5Cn%20%20%20%20%20%20for%20(var%20i%20%3D%200%3B%20i%20%26lt%3B%20faces.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20var%20item%20%3D%20faces%5Bi%5D.boundingBox%3B%5Cn%20%20%20%20%20%20%20%20ctx.rect(Math.floor(item.x%20*%20scale)%2C%20Math.floor(item.y%20*%20scale)%2C%20Math.floor(item.width%20*%20scale)%2C%20Math.floor(item.height%20*%20scale))%3B%5Cn%20%20%20%20%20%20%20%20ctx.stroke()%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20console.timeEnd('detect')%3B%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20.catch((e)%20%3D%26gt%3B%20console.error(%5C%22Boo%2C%20Face%20Detection%20failed%3A%20%5C%22%20%2B%20e))%3B%5Cn%7D%22%7D\"></card><p><br /></p><p>处理效果：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2018%2F4%2F25%2F162fabc3d529f4c9%3Fw%3D746%26amp%3Bh%3D498%26amp%3Bf%3Djpeg%26amp%3Bs%3D75993%22%2C%22width%22%3A%22%22%7D\"></card></p><p><br /></p><h3 id=\"4or8vk\"><a href=\"#4or8vk\" id=\"3.3-视频中的人脸检测\"></a>3.3 视频中的人脸检测</h3><p><br /></p><p>视频中的人脸检测跟图像相差不大，通过</p><p><br /></p><p>getUserMedia 可以打开摄像头获取视频/麦克风的信息，通过将视频帧进行检测和展示，即可实现视频中的人脸检测。</p><p><br /></p><p>核心代码如下：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2244ca1fec%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22navigator.mediaDevices.getUserMedia(%7B%5Cn%20%20video%3A%20true%2C%20%20%20%20%2F%2F%20audio%3A%20true%5Cn%7D)%5Cn%20%20.then(function%20(mediaStream)%20%7B%5Cn%20%20%20%20video.src%20%3D%20window.URL.createObjectURL(mediaStream)%3B%5Cn%20%20%20%20video.onloadedmetadata%20%3D%20function%20(e)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20Do%20something%20with%20the%20video%20here.%5Cn%20%20%20%20%7D%3B%5Cn%20%20%7D)%5Cn%20%20.catch(function%20(error)%20%7B%5Cn%20%20%20%20console.log(error.name)%3B%5Cn%20%20%7D)%3B%5Cn%5CnsetInterval(function%20()%20%7B%5Cn%20%20ctx.clearRect(0%2C%200%2C%20canvas.width%2C%20canvas.height)%3B%5Cn%20%20ctx.drawImage(video%2C%200%2C%200)%3B%5Cn%20%20image.src%20%3D%20canvas.toDataURL('image%2Fpng')%3B%5Cn%20%20image.onload%20%3D%20function()%20%7B%5Cn%20%20%20%20detect()%3B%5Cn%20%20%7D%5Cn%7D%2C%2060)%3B%22%7D\"></card><p><br /></p><p>处理效果：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2018%2F4%2F25%2F162fabc3d546b78e%3Fw%3D320%26amp%3Bh%3D235%26amp%3Bf%3Dgif%26amp%3Bs%3D306472%22%2C%22width%22%3A%22%22%7D\"></card></p><p><br /></p><h3 id=\"gqarak\"><a href=\"#gqarak\" id=\"3.4-时光倒流到没有api的日子\"></a>3.4 时光倒流到没有API的日子</h3><p><br /></p><p>实际上，在很久很久以前，也有不少解决方案存在。由于硬件条件以及没有硬件加速等限制的情况，一直没有被广泛地投入生产。</p><p><br /></p><p>a. tracking.js</p><p><br /></p><p>tracking.js 是一款js封装的图像处理的库，为浏览器带来丰富的计算视觉相关的算法和技术，通过它可以实现颜色追踪、人脸检测等功能，具体特性如下：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2018%2F4%2F25%2F162fabc3d502c2e6%3Fw%3D1080%26amp%3Bh%3D866%26amp%3Bf%3Djpeg%26amp%3Bs%3D60671%22%2C%22width%22%3A%22%22%7D\"></card></p><p><br /></p><p>b. jquery.facedetection</p><p><br /></p><p>jquery.facedetection 是一款jquery / zepto 人脸检测插件，基于跨终端能力超强的ccv中的图像分类器和检测器。</p><p><br /></p><h3 id=\"q8arod\"><a href=\"#q8arod\" id=\"3.5-node.js-&-opencv\"></a>3.5 Node.js &amp; OpenCV</h3><p><br /></p><p>node-opencv 模块已经发布了有些年头，尽管目前还不能完美兼容v3.x，提供的API也比较有限，但能完美兼容opencv v2.4.x。N-API的到来可能会带来更多的惊喜。</p><p><br /></p><p>设想一下在一个Electron或者Node-Webkit容器中，我们是否可以通过本地开启websocket服务来实现实时的人脸检测呢？实现的思路代码如下：</p><p><br /></p><p>后端处理逻辑</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2291d685b8%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20cv%20from%20'opencv'%3B%5Cn%5Cnconst%20detectConfigFile%20%3D%20'.%2Fnode_modules%2Fopencv%2Fdata%2Fhaarcascade_frontalface_alt2.xml'%3B%5Cn%2F%2F%20camera%20properties%5Cnconst%20camWidth%20%3D%20320%3B%5Cnconst%20camHeight%20%3D%20240%3B%5Cnconst%20camFps%20%3D%2010%3B%5Cnconst%20camInterval%20%3D%201000%20%2F%20camFps%3B%5Cn%2F%2F%20face%20detection%20properties%5Cnconst%20rectColor%20%3D%20%5B0%2C%20255%2C%200%5D%3B%5Cnconst%20rectThickness%20%3D%202%3B%5Cn%2F%2F%20initialize%20cameraconst%20camera%20%3D%20new%20cv.VideoCapture(0)%3B%5Cn%5Cncamera.setWidth(camWidth)%3B%5Cncamera.setHeight(camHeight)%3B%5Cnconst%20frameHandler%20%3D%20(err%2C%20im)%20%3D%26gt%3B%20%7B%5Cn%20%20return%20new%20Promise((resolve%2C%20reject)%20%3D%26gt%3B%20%7B%5Cn%20%20%20%20if%20(err)%20%7B%5Cn%20%20%20%20%20%20return%20reject(err)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20im.detectObject(detectConfigFile%2C%20%7B%7D%2C%20(error%2C%20faces)%20%3D%26gt%3B%20%7B%5Cn%20%20%20%20%20%20if%20(error)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20reject(error)%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20let%20face%3B%5Cn%20%20%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%26lt%3B%20faces.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20face%20%3D%20faces%5Bi%5D%3B%5Cn%20%20%20%20%20%20%20%20im.rectangle(%5Bface.x%2C%20face.y%5D%2C%20%5Bface.width%2C%20face.height%5D%2C%20rectColor%2C%20rectThickness)%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20return%20resolve(im)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D)%3B%5Cn%7D%3B%5Cn%5Cnmodule.exports%20%3D%20function%20(socket)%20%7B%5Cn%20%20const%20frameSocketHanlder%20%3D%20(err%2C%20im)%20%3D%26gt%3B%20%7B%5Cn%20%20%20%20return%20frameHandler(err%2C%20im)%5Cn%20%20%20%20%20%20.then((img)%20%3D%26gt%3B%20%7B%5Cn%20%20%20%20%20%20%20%20socket.emit('frame'%2C%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20buffer%3A%20img.toBuffer()%2C%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%7D%3B%5Cn%20%20const%20handler%20%3D%20()%20%3D%26gt%3B%20%7B%5Cn%20%20%20%20camera.read(frameSocketHanlder)%3B%5Cn%20%20%7D%3B%5Cn%20%20setInterval(handler%2C%20camInterval)%3B%5Cn%7D%3B%22%7D\"></card><p><br /></p><p>前端调用接口</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%229d787c4f%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22socket.on('frame'%2C%20function%20(data)%20%7B%5Cn%5Cn%20%20var%20unit8Arr%20%3D%20new%20Uint8Array(data.buffer)%3B%5Cn%20%20var%20str%20%3D%20String.fromCharCode.apply(null%2C%20unit8Arr)%3B%5Cn%20%20var%20base64String%20%3D%20btoa(str)%3B%5Cn%5Cn%20%20img.onload%20%3D%20function%20()%20%7B%5Cn%20%20%20%20ctx.drawImage(this%2C%200%2C%200%2C%20canvas.width%2C%20canvas.height)%3B%5Cn%20%20%7D%5Cn%20%20img.src%20%3D%20'data%3Aimage%2Fpng%3Bbase64%2C'%20%2B%20base64String%3B%5Cn%7D)%3B%22%7D\"></card><p><br /></p><h3 id=\"gg37oo\"><a href=\"#gg37oo\" id=\"4.1-未来的发展\"></a>4.1 未来的发展</h3><p><br /></p><p>这些前沿的技术将会在前端得到更为广泛的应用和支持是毋庸置疑的，未来的图像在前端也会随着传统图像处理-&gt;学习+图像处理的方式前进，这一切的功劳离不开基础设施(硬件、浏览器、工具、库等)的逐渐增强和完善，其中包括但不仅限于：</p><p><br /></p><ul><li><p>getUserMedia/Canvas =&gt; 图像 / 视频的操作</p></li></ul><ul><li><p>Shape Detection API =&gt; 图像检测</p></li></ul><ul><li><p>Web Workers =&gt; 并行计算能力</p></li></ul><ul><li><p>ConvNetJS =&gt; 深度学习框架</p></li></ul><ul><li><p>Tensorflow (原 DeeplearnJS) =&gt; 正大力支持 JS</p></li></ul><p><br /></p><h3 id=\"3arvrk\"><a href=\"#3arvrk\" id=\"4.2-实际上并没有那么乐观\"></a>4.2 实际上并没有那么乐观</h3><p><br /></p><p>4.2.1 准确率</p><p><br /></p><p>对于正脸(多个)的识别率还是比较高的，但是在侧脸已经有障碍物的情况下，检测的效果并不理想。</p><p><br /></p><p>4.2.2 处理速度</p><p><br /></p><p>对于图像中人脸检测的例子2.2，耗费时间300ms+（实际上无法满足大分辨率视频实时处理），是调用Opencv的检测速度100ms的三倍之多。</p><p><br /></p><p>4.2.3 特性</p><p><br /></p><p>还有很多需要完善的地方：如不支持眼镜状态、性别、年龄估计、表情识别、人种、笑容、模糊检测等主流服务提供商提供的服务。</p><p><br /></p><h3 id=\"xk4qxe\"><a href=\"#xk4qxe\" id=\"4.3-想说又说不完的\"></a>4.3 想说又说不完的</h3><p><br /></p><p>a. 本文中所有样例的源代码，欢迎 Fork / Star：</p><p><br /></p><blockquote><p><a href=\"https://github.com/x-cold/face-detection-browser\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://github.com/x-cold/face-detection-browser</a></p></blockquote><p><br /></p><blockquote><p><a href=\"https://github.com/x-cold/face-detection-nodejs\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://github.com/x-cold/face-detection-nodejs</a></p></blockquote><p><br /></p><p>b. 关于人脸检测在不同场景的适应性，以及检测消耗的时间暂时没有数据支撑，后面考虑引入PASCAL VOC、AT&amp;T提供的样本进行小规模的测试。</p><p><br /></p><h2 id=\"46l0fn\"><a href=\"#46l0fn\" id=\"5-参考\"></a>5 参考</h2><p><br /></p><ol start=\"1\"><li><p>人脸识别技术大总结(1)：Face Detection &amp; Alignment: <a href=\"http://blog.jobbole.com/85783/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://blog.jobbole.com/85783/</a></p></li></ol><ol start=\"2\"><li><p>阿里巴巴直播防控中的实人认证技术: <a href=\"https://xianzhi.aliyun.com/forum/mobile/read/635.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://xianzhi.aliyun.com/forum/mobile/read/635.html</a></p></li></ol><ol start=\"3\"><li><p>前端在人工智能时代能做些什么？：<a href=\"https://yq.aliyun.com/articles/153198\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://yq.aliyun.com/articles/153198</a></p></li></ol><ol start=\"4\"><li><p>ConvNetJS Deep Learning in your browser：<a href=\"http://cs.stanford.edu/people/karpathy/convnetjs/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://cs.stanford.edu/people/karpathy/convnetjs/</a></p></li></ol><ol start=\"5\"><li><p>Face detection using Shape Detection API：<a href=\"https://paul.kinlan.me/face-detection/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://paul.kinlan.me/face-detection/</a></p></li></ol><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fuser-gold-cdn.xitu.io%2F2018%2F4%2F25%2F162fabc3d5529c80%3Fw%3D1080%26amp%3Bh%3D1044%26amp%3Bf%3Djpeg%26amp%3Bs%3D133429%22%2C%22width%22%3A%22%22%7D\"></card></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [javascript, node.js, 人脸检测, AI]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2017-08-10\"],[\"hr\",{\"id\":\"0wg1dh\"}],[\"h2\",{\"id\":\"zsa4rb\"},\"1 背景与场景\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Shape Detection API 的发布已经有一些时日，其主要的提供的能力是给予前端直接可用的特征检测的接口（包括条形码、人脸、文本检测）。本文将简单的对其进行介绍，对前端进行人脸检测进行普适性的讲解。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"name\":\"image\",\"caption\":\"\",\"src\":\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d517af25?w=1080&amp;h=697&amp;f=jpeg&amp;s=66957\",\"width\":\"\",\"height\":\"\",\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"a. 基于特征的人脸检测\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"例如opencv中内置了基于Viola-Jones目标检测框架的Harr分类器（实际上大多数分类器都是基于学习得到的），只需要载入对应的配置文件（haarcascade_frontalface_alt.xml）就能直接调用detectObject去完成检测过程，同时也支持其他特征的检测（如鼻子、嘴巴等）。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"b. 基于学习的人脸检测，其实也是需要通过算子提取的图像中的局部特征，通过对其进行分类、统计、回归等方式得到的具备更精确和快响应的分类器。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"tuw9cy\"},\"2 套路集锦\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"l2ygpi\"},\"2.1 后端处理\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"前端通过网络将资源传输到后端，后端统一处理需要检测的图像或视频流，对后端的架构有一定的挑战，同时网络的延时往往不能给用户带来实时的交互效果。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"v9unci\"},\"2.2 客户端处理\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"得益于OpenCV在跨语言和跨平台的优势，客户端也能以较低的开发成本的提供人脸检测的能力，并且可以通过JsBridge等方式向web容器提供服务，然而一旦脱离这个容器，孤立的页面将失去这种能力。直到有一天……\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"ux1dml\"},\"2.3 开放服务\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"不知道从啥时候开始，云计算等概念拔地而起，计算的成本日益降低。各大研发团队（如阿里云、Face++）都蠢蠢欲动又不紧不慢的上架了人脸检测服务，甚至还带上了各种特！殊！服！务！，人脸识别、活体识别、证件OCR及人脸对比等等等。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"name\":\"image\",\"caption\":\"\",\"src\":\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d514a6e1?w=1080&amp;h=466&amp;f=jpeg&amp;s=65212\",\"width\":\"\",\"height\":\"\",\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"尽管不仅提供了客户端的SDK以及前后端的API，但是，怎么说也要讲讲我纯前端的方案吧。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"fdf8az\"},\"3 时代带来了什么\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"好吧，人脸识别在前端依然是在刀耕火种的远古时代，然而，我们的基础建设已经起步，希望后续的一些相关介绍能为各位看官带来一定的启发。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"vlrqlg\"},\"3.1 Shape Detection API\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"随着客户端硬件的计算能力逐渐提高，浏览器层面得到的权限也越来越多，由于图像处理需要耗费大量的计算资源，实际上浏览器上也能承担图像检测的一些工作，因此就搞出了个Shape Detection API。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"以下几个简单的例子介绍了基本的用法，在尝试编辑并运行这些代码之前，请确保在你的Chrome版本以及该新特性已经被激活，另外该API受同源策略所限制：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"blockquote\",[\"div\",{\"data-type\":\"p\"},\"chrome://flags/#enable-experimental-web-platform-features\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"条形码检测：Barcode Detection (For Chrome 56+)\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"var barcodeDetector = new BarcodeDetector();\\n\",\"barcodeDetector.detect(image)\\n\",\"  .then(barcodes =&gt; {\\n\",\"    barcodes.forEach(barcode =&gt; console.log(barcodes.rawValue))\\n\",\"  })\\n\",\"  .catch(err =&gt; console.error(err));\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"人脸检测：Face Detection (For Chrome 56+)\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"var faceDetector = new FaceDetector();\\n\",\"faceDetector.detect(image)\\n\",\"  .then(faces =&gt; faces.forEach(face =&gt; console.log(face)))\\n\",\"  .catch(err =&gt; console.error(err));\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"文本检测：Text Detection (For Chrome 58+)\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"var textDetector = new TextDetector();\\n\",\"textDetector.detect(image)\\n\",\"  .then(boundingBoxes =&gt; {\\n\",\"    for(let box of boundingBoxes) {\\n\",\"      speechSynthesis.speak(new SpeechSynthesisUtterance(box.rawValue));\\n\",\"    }\\n\",\"  })\\n\",\"  .catch(err =&gt; console.error(err));\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"zhx1de\"},\"3.2 图像中的人脸检测\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"图像的人脸检测比较简单，只需要传入一个图片的元素，就能直接调起该API进行人脸识别了。然后接住canvas我们可以将检测的结果展示出来。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"核心代码：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"var image = document.querySelector('#image');\\n\",\"var canvas = document.querySelector('#canvas');\\n\",\"var ctx = canvas.getContext(\\\"2d\\\");\\n\",\"var scale = 1;\\n\",\"\\n\",\"image.onload = function () {\\n\",\"  ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\\n\",\"  scale = canvas.width / image.width;\\n\",\"};\\n\",\"\\n\",\"function detect() {  \\n\",\"  if (window.FaceDetector == undefined) {\\n\",\"    console.error('Face Detection not supported');\\n\",\"    return;\\n\",\"  } \\n\",\"  var faceDetector = new FaceDetector();\\n\",\"  console.time('detect');\\n\",\"  return faceDetector.detect(image)\\n\",\"    .then(faces =&gt; {\\n\",\"      console.log(faces)      // Draw the faces on the &lt;canvas&gt;.\\n\",\"      var ctx = canvas.getContext(\\\"2d\\\");\\n\",\"      ctx.lineWidth = 2;\\n\",\"      ctx.strokeStyle = \\\"red\\\";\\n\",\"      for (var i = 0; i &lt; faces.length; i++) {\\n\",\"        var item = faces[i].boundingBox;\\n\",\"        ctx.rect(Math.floor(item.x * scale), Math.floor(item.y * scale), Math.floor(item.width * scale), Math.floor(item.height * scale));\\n\",\"        ctx.stroke();\\n\",\"      }\\n\",\"      console.timeEnd('detect');\\n\",\"    })\\n\",\"    .catch((e) =&gt; console.error(\\\"Boo, Face Detection failed: \\\" + e));\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"处理效果：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"name\":\"image\",\"caption\":\"\",\"src\":\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d529f4c9?w=746&amp;h=498&amp;f=jpeg&amp;s=75993\",\"width\":\"\",\"height\":\"\",\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"4or8vk\"},\"3.3 视频中的人脸检测\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"视频中的人脸检测跟图像相差不大，通过\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"getUserMedia 可以打开摄像头获取视频/麦克风的信息，通过将视频帧进行检测和展示，即可实现视频中的人脸检测。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"核心代码如下：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"navigator.mediaDevices.getUserMedia({\\n\",\"  video: true,    // audio: true\\n\",\"})\\n\",\"  .then(function (mediaStream) {\\n\",\"    video.src = window.URL.createObjectURL(mediaStream);\\n\",\"    video.onloadedmetadata = function (e) {\\n\",\"      // Do something with the video here.\\n\",\"    };\\n\",\"  })\\n\",\"  .catch(function (error) {\\n\",\"    console.log(error.name);\\n\",\"  });\\n\",\"\\n\",\"setInterval(function () {\\n\",\"  ctx.clearRect(0, 0, canvas.width, canvas.height);\\n\",\"  ctx.drawImage(video, 0, 0);\\n\",\"  image.src = canvas.toDataURL('image/png');\\n\",\"  image.onload = function() {\\n\",\"    detect();\\n\",\"  }\\n\",\"}, 60);\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"处理效果：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"name\":\"image\",\"caption\":\"\",\"src\":\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d546b78e?w=320&amp;h=235&amp;f=gif&amp;s=306472\",\"width\":\"\",\"height\":\"\",\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"gqarak\"},\"3.4 时光倒流到没有API的日子\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"实际上，在很久很久以前，也有不少解决方案存在。由于硬件条件以及没有硬件加速等限制的情况，一直没有被广泛地投入生产。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"a. tracking.js\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"tracking.js 是一款js封装的图像处理的库，为浏览器带来丰富的计算视觉相关的算法和技术，通过它可以实现颜色追踪、人脸检测等功能，具体特性如下：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"name\":\"image\",\"caption\":\"\",\"src\":\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d502c2e6?w=1080&amp;h=866&amp;f=jpeg&amp;s=60671\",\"width\":\"\",\"height\":\"\",\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"b. jquery.facedetection\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"jquery.facedetection 是一款jquery / zepto 人脸检测插件，基于跨终端能力超强的ccv中的图像分类器和检测器。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"q8arod\"},\"3.5 Node.js & OpenCV\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"node-opencv 模块已经发布了有些年头，尽管目前还不能完美兼容v3.x，提供的API也比较有限，但能完美兼容opencv v2.4.x。N-API的到来可能会带来更多的惊喜。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"设想一下在一个Electron或者Node-Webkit容器中，我们是否可以通过本地开启websocket服务来实现实时的人脸检测呢？实现的思路代码如下：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"后端处理逻辑\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"import cv from 'opencv';\\n\",\"\\n\",\"const detectConfigFile = './node_modules/opencv/data/haarcascade_frontalface_alt2.xml';\\n\",\"// camera properties\\n\",\"const camWidth = 320;\\n\",\"const camHeight = 240;\\n\",\"const camFps = 10;\\n\",\"const camInterval = 1000 / camFps;\\n\",\"// face detection properties\\n\",\"const rectColor = [0, 255, 0];\\n\",\"const rectThickness = 2;\\n\",\"// initialize cameraconst camera = new cv.VideoCapture(0);\\n\",\"\\n\",\"camera.setWidth(camWidth);\\n\",\"camera.setHeight(camHeight);\\n\",\"const frameHandler = (err, im) =&gt; {\\n\",\"  return new Promise((resolve, reject) =&gt; {\\n\",\"    if (err) {\\n\",\"      return reject(err);\\n\",\"    }\\n\",\"    im.detectObject(detectConfigFile, {}, (error, faces) =&gt; {\\n\",\"      if (error) {\\n\",\"        return reject(error);\\n\",\"      }\\n\",\"      let face;\\n\",\"      for (let i = 0; i &lt; faces.length; i++) {\\n\",\"        face = faces[i];\\n\",\"        im.rectangle([face.x, face.y], [face.width, face.height], rectColor, rectThickness);\\n\",\"      }\\n\",\"      return resolve(im);\\n\",\"    });\\n\",\"  });\\n\",\"};\\n\",\"\\n\",\"module.exports = function (socket) {\\n\",\"  const frameSocketHanlder = (err, im) =&gt; {\\n\",\"    return frameHandler(err, im)\\n\",\"      .then((img) =&gt; {\\n\",\"        socket.emit('frame', {\\n\",\"          buffer: img.toBuffer(),\\n\",\"        });\\n\",\"      });\\n\",\"  };\\n\",\"  const handler = () =&gt; {\\n\",\"    camera.read(frameSocketHanlder);\\n\",\"  };\\n\",\"  setInterval(handler, camInterval);\\n\",\"};\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"前端调用接口\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"socket.on('frame', function (data) {\\n\",\"\\n\",\"  var unit8Arr = new Uint8Array(data.buffer);\\n\",\"  var str = String.fromCharCode.apply(null, unit8Arr);\\n\",\"  var base64String = btoa(str);\\n\",\"\\n\",\"  img.onload = function () {\\n\",\"    ctx.drawImage(this, 0, 0, canvas.width, canvas.height);\\n\",\"  }\\n\",\"  img.src = 'data:image/png;base64,' + base64String;\\n\",\"});\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"gg37oo\"},\"4.1 未来的发展\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"这些前沿的技术将会在前端得到更为广泛的应用和支持是毋庸置疑的，未来的图像在前端也会随着传统图像处理->学习+图像处理的方式前进，这一切的功劳离不开基础设施(硬件、浏览器、工具、库等)的逐渐增强和完善，其中包括但不仅限于：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"getUserMedia/Canvas => 图像 / 视频的操作\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Shape Detection API => 图像检测\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Web Workers => 并行计算能力\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"ConvNetJS => 深度学习框架\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Tensorflow (原 DeeplearnJS) => 正大力支持 JS\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"3arvrk\"},\"4.2 实际上并没有那么乐观\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"4.2.1 准确率\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"对于正脸(多个)的识别率还是比较高的，但是在侧脸已经有障碍物的情况下，检测的效果并不理想。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"4.2.2 处理速度\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"对于图像中人脸检测的例子2.2，耗费时间300ms+（实际上无法满足大分辨率视频实时处理），是调用Opencv的检测速度100ms的三倍之多。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"4.2.3 特性\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"还有很多需要完善的地方：如不支持眼镜状态、性别、年龄估计、表情识别、人种、笑容、模糊检测等主流服务提供商提供的服务。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"xk4qxe\"},\"4.3 想说又说不完的\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"a. 本文中所有样例的源代码，欢迎 Fork / Star：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"blockquote\",[\"div\",{\"data-type\":\"p\"},\"\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/x-cold/face-detection-browser\"},\"https://github.com/x-cold/face-detection-browser\"],\"\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"blockquote\",[\"div\",{\"data-type\":\"p\"},\"\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/x-cold/face-detection-nodejs\"},\"https://github.com/x-cold/face-detection-nodejs\"],\"\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"b. 关于人脸检测在不同场景的适应性，以及检测消耗的时间暂时没有数据支撑，后面考虑引入PASCAL VOC、AT&T提供的样本进行小规模的测试。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"46l0fn\"},\"5 参考\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"人脸识别技术大总结(1)：Face Detection & Alignment: \",[\"a\",{\"title\":\"\",\"href\":\"http://blog.jobbole.com/85783/\"},\"http://blog.jobbole.com/85783/\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"阿里巴巴直播防控中的实人认证技术: \",[\"a\",{\"title\":\"\",\"href\":\"https://xianzhi.aliyun.com/forum/mobile/read/635.html\"},\"https://xianzhi.aliyun.com/forum/mobile/read/635.html\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"前端在人工智能时代能做些什么？：\",[\"a\",{\"title\":\"\",\"href\":\"https://yq.aliyun.com/articles/153198\"},\"https://yq.aliyun.com/articles/153198\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"ConvNetJS Deep Learning in your browser：\",[\"a\",{\"title\":\"\",\"href\":\"http://cs.stanford.edu/people/karpathy/convnetjs/\"},\"http://cs.stanford.edu/people/karpathy/convnetjs/\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Face detection using Shape Detection API：\",[\"a\",{\"title\":\"\",\"href\":\"https://paul.kinlan.me/face-detection/\"},\"https://paul.kinlan.me/face-detection/\"],\"\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"name\":\"image\",\"caption\":\"\",\"src\":\"https://user-gold-cdn.xitu.io/2018/4/25/162fabc3d5529c80?w=1080&amp;h=1044&amp;f=jpeg&amp;s=133429\",\"width\":\"\",\"height\":\"\",\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-18T12:15:04.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:44:25.000Z",
    "updated_at": "2019-05-21T01:59:10.000Z",
    "published_at": "2019-02-18T12:15:04.000Z",
    "first_published_at": null,
    "word_count": 2337,
    "cover": null,
    "description": "tags: [javascript, node.js, 人脸检测, AI]date: 2017-08-101 背景与场景Shape Detection API 的发布已经有一些时日，其主要的提供的能力是给予前端直接可用的特征检测的接口（包括条形码、人脸、文本检测）。本文将简单的对其进行介绍，对...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709054,
    "slug": "yxbpzt",
    "title": "powershell测试服务器请求时间",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [powershell]<br />date: 2015-02-12\n\n---\n\n<a name=\"roedeh\"></a>\n### 1、使用基本的cmdlet\n\n- Invoke-WebRequest进行HTTP请求测试\n\n\n```powershell\n# 关于Invoke-WebRequest基本用法\nPS > Invoke-WebRequest -Uri \"http://www.baidu.com\"\n```\n\n<!-- more -->\n\n- Measure-Command对上面的命令进行\"计时\"\n\n\n```powershell\nPS > Measure-Command -Expression {Invoke-WebRequest -Uri \"http://www.baidu.com\"}\n```\n\n<a name=\"o0gfrv\"></a>\n### 2、源代码：\n\n```powershell\n$url = \"http://www.baidu.com\"\n# 追踪执行命令耗时\n$timeTaken = Measure-Command -Expression {\n  # 保留请求信息，可用于网络爬虫的实现\n  $site = Invoke-WebRequest -Uri $url\n}\n\n# 获取毫秒数\n$milliseconds = $timeTaken.TotalMilliseconds\n$milliseconds = [Math]::Round($milliseconds, 1)\n\nWrite-Host \"It took $milliseconds ms!\"\n```\n\n<a name=\"nokahz\"></a>\n### 3、小结\n\nPowerShell获取网页信息个人建议的三种解决方案：\n\n- WebClient\n\n- Invoke-WebRequest\n\n- COM组件\"InternetExplorer.Application\"\n\n\n",
    "body_draft": "tags: [powershell]\ndate: 2015-02-12\n\n---\n\n### <a name=\"roedeh\"></a>1、使用基本的cmdlet\n\n* Invoke-WebRequest进行HTTP请求测试\n\n```powershell\n# 关于Invoke-WebRequest基本用法\nPS > Invoke-WebRequest -Uri \"http://www.baidu.com\"\n```\n\n<!-- more -->\n\n* Measure-Command对上面的命令进行\"计时\"\n\n```powershell\nPS > Measure-Command -Expression {Invoke-WebRequest -Uri \"http://www.baidu.com\"}\n```\n\n### <a name=\"o0gfrv\"></a>2、源代码：\n\n```powershell\n$url = \"http://www.baidu.com\"\n# 追踪执行命令耗时\n$timeTaken = Measure-Command -Expression {\n  # 保留请求信息，可用于网络爬虫的实现\n  $site = Invoke-WebRequest -Uri $url\n}\n\n# 获取毫秒数\n$milliseconds = $timeTaken.TotalMilliseconds\n$milliseconds = [Math]::Round($milliseconds, 1)\n\nWrite-Host \"It took $milliseconds ms!\"\n```\n\n### <a name=\"nokahz\"></a>3、小结\n\nPowerShell获取网页信息个人建议的三种解决方案：\n\n* WebClient\n* Invoke-WebRequest\n* COM组件\"InternetExplorer.Application\"\n\n",
    "body_html": "<p>tags: [powershell]</p><p>date: 2015-02-12</p><hr /><h3 id=\"roedeh\"><a href=\"#roedeh\"></a>1、使用基本的cmdlet</h3><p><br /></p><ul><li><p>Invoke-WebRequest进行HTTP请求测试</p></li></ul><p><br /></p><pre data-lang=\"powershell\"><code># 关于Invoke-WebRequest基本用法\nPS &gt; Invoke-WebRequest -Uri &quot;http://www.baidu.com&quot;</code></pre><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><ul><li><p>Measure-Command对上面的命令进行&quot;计时&quot;</p></li></ul><p><br /></p><pre data-lang=\"powershell\"><code>PS &gt; Measure-Command -Expression {Invoke-WebRequest -Uri &quot;http://www.baidu.com&quot;}</code></pre><p><br /></p><h3 id=\"o0gfrv\"><a href=\"#o0gfrv\"></a>2、源代码：</h3><p><br /></p><pre data-lang=\"powershell\"><code>$url = &quot;http://www.baidu.com&quot;\n# 追踪执行命令耗时\n$timeTaken = Measure-Command -Expression {\n  # 保留请求信息，可用于网络爬虫的实现\n  $site = Invoke-WebRequest -Uri $url\n}\n\n# 获取毫秒数\n$milliseconds = $timeTaken.TotalMilliseconds\n$milliseconds = [Math]::Round($milliseconds, 1)\n\nWrite-Host &quot;It took $milliseconds ms!&quot;</code></pre><p><br /></p><h3 id=\"nokahz\"><a href=\"#nokahz\"></a>3、小结</h3><p><br /></p><p>PowerShell获取网页信息个人建议的三种解决方案：</p><p><br /></p><ul><li><p>WebClient</p></li></ul><ul><li><p>Invoke-WebRequest</p></li></ul><ul><li><p>COM组件&quot;InternetExplorer.Application&quot;</p></li></ul><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [powershell]</p><p>date: 2015-02-12</p><card type=\"block\" name=\"hr\"></card><h3 id=\"roedeh\"><a href=\"#roedeh\" id=\"1、使用基本的cmdlet\"></a>1、使用基本的cmdlet</h3><p><br /></p><ul><li><p>Invoke-WebRequest进行HTTP请求测试</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22ff119a7d%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%23%20%E5%85%B3%E4%BA%8EInvoke-WebRequest%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%5CnPS%20%3E%20Invoke-WebRequest%20-Uri%20%5C%22http%3A%2F%2Fwww.baidu.com%5C%22%22%7D\"></card><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><ul><li><p>Measure-Command对上面的命令进行&quot;计时&quot;</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22576bdf4c%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22PS%20%3E%20Measure-Command%20-Expression%20%7BInvoke-WebRequest%20-Uri%20%5C%22http%3A%2F%2Fwww.baidu.com%5C%22%7D%22%7D\"></card><p><br /></p><h3 id=\"o0gfrv\"><a href=\"#o0gfrv\" id=\"2、源代码：\"></a>2、源代码：</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22371c3e48%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%24url%20%3D%20%5C%22http%3A%2F%2Fwww.baidu.com%5C%22%5Cn%23%20%E8%BF%BD%E8%B8%AA%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E8%80%97%E6%97%B6%5Cn%24timeTaken%20%3D%20Measure-Command%20-Expression%20%7B%5Cn%20%20%23%20%E4%BF%9D%E7%95%99%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%8F%AF%E7%94%A8%E4%BA%8E%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%9A%84%E5%AE%9E%E7%8E%B0%5Cn%20%20%24site%20%3D%20Invoke-WebRequest%20-Uri%20%24url%5Cn%7D%5Cn%5Cn%23%20%E8%8E%B7%E5%8F%96%E6%AF%AB%E7%A7%92%E6%95%B0%5Cn%24milliseconds%20%3D%20%24timeTaken.TotalMilliseconds%5Cn%24milliseconds%20%3D%20%5BMath%5D%3A%3ARound(%24milliseconds%2C%201)%5Cn%5CnWrite-Host%20%5C%22It%20took%20%24milliseconds%20ms!%5C%22%22%7D\"></card><p><br /></p><h3 id=\"nokahz\"><a href=\"#nokahz\" id=\"3、小结\"></a>3、小结</h3><p><br /></p><p>PowerShell获取网页信息个人建议的三种解决方案：</p><p><br /></p><ul><li><p>WebClient</p></li></ul><ul><li><p>Invoke-WebRequest</p></li></ul><ul><li><p>COM组件&quot;InternetExplorer.Application&quot;</p></li></ul><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [powershell]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-02-12\"],[\"hr\",{\"id\":\"xqmpiy\"}],[\"h3\",{\"id\":\"roedeh\"},\"1、使用基本的cmdlet\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Invoke-WebRequest进行HTTP请求测试\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"# 关于Invoke-WebRequest基本用法\\n\",\"PS > Invoke-WebRequest -Uri \\\"http://www.baidu.com\\\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Measure-Command对上面的命令进行\\\"计时\\\"\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"PS > Measure-Command -Expression {Invoke-WebRequest -Uri \\\"http://www.baidu.com\\\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"o0gfrv\"},\"2、源代码：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"$url = \\\"http://www.baidu.com\\\"\\n\",\"# 追踪执行命令耗时\\n\",\"$timeTaken = Measure-Command -Expression {\\n\",\"  # 保留请求信息，可用于网络爬虫的实现\\n\",\"  $site = Invoke-WebRequest -Uri $url\\n\",\"}\\n\",\"\\n\",\"# 获取毫秒数\\n\",\"$milliseconds = $timeTaken.TotalMilliseconds\\n\",\"$milliseconds = [Math]::Round($milliseconds, 1)\\n\",\"\\n\",\"Write-Host \\\"It took $milliseconds ms!\\\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"nokahz\"},\"3、小结\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"PowerShell获取网页信息个人建议的三种解决方案：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"WebClient\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Invoke-WebRequest\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"COM组件\\\"InternetExplorer.Application\\\"\"]]],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T09:41:57.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:43:48.000Z",
    "updated_at": "2018-09-15T09:41:57.000Z",
    "published_at": "2018-09-15T09:41:57.000Z",
    "first_published_at": null,
    "word_count": 173,
    "cover": null,
    "description": "tags: [powershell]date: 2015-02-121、使用基本的cmdletInvoke-WebRequest进行HTTP请求测试# 关于Invoke-WebRequest基本用法 PS &gt; Invoke-WebRequest -Uri &quot;http://www.baidu.com&quot; &lt;!-- more --&gt;Measure-Command对上面的命令进行&quot;计时&quot;PS &gt; Measure-Command -Expression...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709053,
    "slug": "qeqnq1",
    "title": "powershell学习之道-文件夹共享及磁盘映射",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [powershell]<br />date: 2015-01-19\n\n---\n\n在Linux环境下，我们很轻易就能得心应手地通过命令操作一切事物，在Windows下，Powershell也算是后起之秀，提供大量的cmdlet以及c#的横向拓展。下面将由小编带领大家通过Powershell实现文件夹共享，当然文中也不会冷落cmd这枚老将。\n\n<a name=\"7a29ll\"></a>\n### 文件夹共享概述\n\n共享文件夹的应用非常广泛，客户端对服务器端进行文件管理，局域网文件直传等等，在linux下，可以简单的安装smaba协议，简单的配置之后即可使用。在windows下，可以通过图形化的操作开启这项功能，当然带着一点极客风格，我们通过powershell（少量出现cmd）来对其进行管理。\n\n<!-- more -->\n\n<a name=\"qbcvan\"></a>\n### 操作步骤\n\n<a name=\"8q9yga\"></a>\n#### 查看共享列表\n\n在powershell内，我们可以通过执行以下cmdlet获取共享信息：\n\n```powershell\nλ Get-WmiObject -Class Win32_Share\n\nName                                      Path                                      Description\n----                                      ----                                      -----------\nADMIN$                                    C:\\Windows                                远程管理\nC$                                        C:\\                                       默认共享\nD$                                        D:\\                                       默认共享\nE$                                        E:\\                                       默认共享\nIPC$                                                                                远程 IPC\nUsers                                     C:\\Users\n```\n\n同理，在cmd下，也可以\n\n```powershell\nλ net share\n\n共享名       资源                            注解\n\n-------------------------------------------------------------------------------\nC$           C:\\                             默认共享\nD$           D:\\                             默认共享\nE$           E:\\                             默认共享\nIPC$                                         远程 IPC\nADMIN$       C:\\Windows                      远程管理\nUsers        C:\\Users\n命令成功完成。\n```\n\n<a name=\"gh75ll\"></a>\n#### 创建一个共享文件夹\n\n**疯狂的Powershell**\n\n```powershell\n# 共享名\n$ShareName = 'TestShare'\n# 共享路径\n$Path = 'D:\\SHARE'\n\nIf (!(Get-WmiObject -Class Win32_Share -Filter \"name='$ShareName'\"))\n{\n\t$Shares = [WMICLASS]\"WIN32_Share\"\n\t$Shares.Create($Path,$ShareName,0).ReturnValue\n}\nelse\n{\n\tWrite-Warning \"$ShareName has been sharing!!\"\n}\n```\n\n如果如果您有远程机器的管理员权限的话，也利用WMI在远程的机器上创建新的共享文件夹，下面是在远程主机上创建共享文件夹的代码：\n\n```powershell\n# 共享名\n$ShareName = 'TestShare'\n# 共享路径\n$Path = 'D:\\SHARE'\n# 远程主机名\n$Server = 'Server'\n\nIf (!(Get-WmiObject -Class Win32_Share -Filter \"name='$ShareName'\"))\n{\n\t$Shares = [WMICLASS]\"\\\\$Server\\root\\cimv2:WIN32_Share\"\n\t$Shares.Create($Path,$ShareName,0).ReturnValue\n}\nelse\n{\n\tWrite-Warning \"$ShareName has been sharing!!\"\n}\n```\n\n**低调的cmd**\n\n```bash\n::建议先查看当前的共享文件夹再进行创建操作\nnet share TestShare=D:\\SHARE /users:25 /remark:\"test share of the a folder\"\n```\n\n我们很轻易地就能将一个文件夹的共享状态开启，我们可以通过UNC路径对其进行访问。创建完文件共享之后，我们来看看怎么使用吧。\n\n<a name=\"i2dbgm\"></a>\n#### 驱动器映射和共享访问\n\n接下来，我们摒弃图形化界面的操作（如果你非喜欢那么做的话，可以通过网上邻居【“网络”】进行查看，或者在计算机图标下右键选择映射网络驱动器），我们来通过命令去启用吧。\n\n**强悍的Powershell**\n\n临时创建一个网络驱动器映射：\n\n```powershell\n(New-Object -ComObject WScript.Network).MapNetworkDrive(\"Z:\", \"\\\\TEST-PC\\USERS\")\n```\n\n创建一个持久化的网络驱动器映射：\n\n```powershell\n# New-PSDrive 加上 -Persist 参数使得驱动器在 PowerShell 之外可见。\n# 要真正地创建一个永久的网络驱动器，请确保加上 -Scope Global。/\n# 如果 New-PSDrive 在全局作用域范围之外运行（例如，在一个脚本中运行），该驱动器只会在脚本运行时出现在文件管理器中。\nNew-PSDrive -Name Z -PSProvider FileSystem -Root \\\\TEST-PC\\USERS -Persist -Scope Global\n```\n\n**小巧的cmd**\n\n```bash\n::下面这条命令虽然可以在cmd使用此磁盘映射，但是不可利用资源管理器加载。\nnet use Z: \\\\TEST-PC\\USERS\n\n::这里是将systemroot文件夹映射为z:驱动器，可利用\"explorer.exe\"加载，可惜不能使用网络路径。\nsubst Z: $env:systemroot\n```\n\n完成如上的工作之后，不出意外，你的资源管理器会出现你想要访问的网络路径的图标。\n\n<a name=\"ls7bwy\"></a>\n#### 删除共享\n\n如果不需要再使用此共享文件夹了，可以卸载掉网络驱动器，并在共享的主机上删除该共享。\n\n**Powershell**\n\n```powershell\n$Shares = Get-WMIObject Win32_Share | Where {$_.Name -eq \"\"}\n\nForeach ($Share in $Shares) {\n   $Share.Delete()\n}\n```\n\n**cmd**\n\n```bash\nnet share TestShare /delete\n```\n\n<a name=\"z5amwe\"></a>\n### 小结\n\n1. 建立共享文件夹需要事先在启用网络共享和发现。\n\n2. 需要提前做好文件夹权限控制以及共享的权限控制。\n\n3. 通过配置cmdkey可以免去身份认证 `cmdkey /add:targetname /user:username /pass:password`\n\n\nPowershell管理共享的相关链接：[https://msdn.microsoft.com/en-us/library/aa394435(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/aa394435(v=vs.85).aspx)\n",
    "body_draft": "tags: [powershell]\ndate: 2015-01-19\n\n---\n\n在Linux环境下，我们很轻易就能得心应手地通过命令操作一切事物，在Windows下，Powershell也算是后起之秀，提供大量的cmdlet以及c#的横向拓展。下面将由小编带领大家通过Powershell实现文件夹共享，当然文中也不会冷落cmd这枚老将。\n\n### <a name=\"7a29ll\"></a>文件夹共享概述\n\n共享文件夹的应用非常广泛，客户端对服务器端进行文件管理，局域网文件直传等等，在linux下，可以简单的安装smaba协议，简单的配置之后即可使用。在windows下，可以通过图形化的操作开启这项功能，当然带着一点极客风格，我们通过powershell（少量出现cmd）来对其进行管理。\n\n<!-- more -->\n\n### <a name=\"qbcvan\"></a>操作步骤\n\n#### <a name=\"8q9yga\"></a>查看共享列表\n\n在powershell内，我们可以通过执行以下cmdlet获取共享信息：\n\n```powershell\nλ Get-WmiObject -Class Win32_Share\n\nName                                      Path                                      Description\n----                                      ----                                      -----------\nADMIN$                                    C:\\Windows                                远程管理\nC$                                        C:\\                                       默认共享\nD$                                        D:\\                                       默认共享\nE$                                        E:\\                                       默认共享\nIPC$                                                                                远程 IPC\nUsers                                     C:\\Users\n```\n\n同理，在cmd下，也可以\n\n```powershell\nλ net share\n\n共享名       资源                            注解\n\n-------------------------------------------------------------------------------\nC$           C:\\                             默认共享\nD$           D:\\                             默认共享\nE$           E:\\                             默认共享\nIPC$                                         远程 IPC\nADMIN$       C:\\Windows                      远程管理\nUsers        C:\\Users\n命令成功完成。\n```\n\n#### <a name=\"gh75ll\"></a>创建一个共享文件夹\n\n__疯狂的Powershell__\n\n```powershell\n# 共享名\n$ShareName = 'TestShare'\n# 共享路径\n$Path = 'D:\\SHARE'\n\nIf (!(Get-WmiObject -Class Win32_Share -Filter \"name='$ShareName'\"))\n{\n\t$Shares = [WMICLASS]\"WIN32_Share\"\n\t$Shares.Create($Path,$ShareName,0).ReturnValue\n}\nelse\n{\n\tWrite-Warning \"$ShareName has been sharing!!\"\n}\n```\n\n如果如果您有远程机器的管理员权限的话，也利用WMI在远程的机器上创建新的共享文件夹，下面是在远程主机上创建共享文件夹的代码：\n\n```powershell\n# 共享名\n$ShareName = 'TestShare'\n# 共享路径\n$Path = 'D:\\SHARE'\n# 远程主机名\n$Server = 'Server'\n\nIf (!(Get-WmiObject -Class Win32_Share -Filter \"name='$ShareName'\"))\n{\n\t$Shares = [WMICLASS]\"\\\\$Server\\root\\cimv2:WIN32_Share\"\n\t$Shares.Create($Path,$ShareName,0).ReturnValue\n}\nelse\n{\n\tWrite-Warning \"$ShareName has been sharing!!\"\n}\n```\n\n__低调的cmd__\n\n```bash\n::建议先查看当前的共享文件夹再进行创建操作\nnet share TestShare=D:\\SHARE /users:25 /remark:\"test share of the a folder\"\n```\n\n我们很轻易地就能将一个文件夹的共享状态开启，我们可以通过UNC路径对其进行访问。创建完文件共享之后，我们来看看怎么使用吧。\n\n#### <a name=\"i2dbgm\"></a>驱动器映射和共享访问\n\n接下来，我们摒弃图形化界面的操作（如果你非喜欢那么做的话，可以通过网上邻居【“网络”】进行查看，或者在计算机图标下右键选择映射网络驱动器），我们来通过命令去启用吧。\n\n__强悍的Powershell__\n\n临时创建一个网络驱动器映射：\n\n```powershell\n(New-Object -ComObject WScript.Network).MapNetworkDrive(\"Z:\", \"\\\\TEST-PC\\USERS\")\n```\n\n创建一个持久化的网络驱动器映射：\n\n```powershell\n# New-PSDrive 加上 -Persist 参数使得驱动器在 PowerShell 之外可见。\n# 要真正地创建一个永久的网络驱动器，请确保加上 -Scope Global。/\n# 如果 New-PSDrive 在全局作用域范围之外运行（例如，在一个脚本中运行），该驱动器只会在脚本运行时出现在文件管理器中。\nNew-PSDrive -Name Z -PSProvider FileSystem -Root \\\\TEST-PC\\USERS -Persist -Scope Global\n```\n\n__小巧的cmd__\n\n```bash\n::下面这条命令虽然可以在cmd使用此磁盘映射，但是不可利用资源管理器加载。\nnet use Z: \\\\TEST-PC\\USERS\n\n::这里是将systemroot文件夹映射为z:驱动器，可利用\"explorer.exe\"加载，可惜不能使用网络路径。\nsubst Z: $env:systemroot\n```\n\n完成如上的工作之后，不出意外，你的资源管理器会出现你想要访问的网络路径的图标。\n\n#### <a name=\"ls7bwy\"></a>删除共享\n\n如果不需要再使用此共享文件夹了，可以卸载掉网络驱动器，并在共享的主机上删除该共享。\n\n__Powershell__\n\n```powershell\n$Shares = Get-WMIObject Win32_Share | Where {$_.Name -eq \"\"}\n\nForeach ($Share in $Shares) {\n   $Share.Delete()\n}\n```\n\n__cmd__\n\n```bash\nnet share TestShare /delete\n```\n\n### <a name=\"z5amwe\"></a>小结\n\n1. 建立共享文件夹需要事先在启用网络共享和发现。\n2. 需要提前做好文件夹权限控制以及共享的权限控制。\n3. 通过配置cmdkey可以免去身份认证 `cmdkey /add:targetname /user:username /pass:password`\n\nPowershell管理共享的相关链接：[https://msdn.microsoft.com/en-us/library/aa394435(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/aa394435(v=vs.85).aspx)\n",
    "body_html": "<p>tags: [powershell]</p><p>date: 2015-01-19</p><hr /><p>在Linux环境下，我们很轻易就能得心应手地通过命令操作一切事物，在Windows下，Powershell也算是后起之秀，提供大量的cmdlet以及c#的横向拓展。下面将由小编带领大家通过Powershell实现文件夹共享，当然文中也不会冷落cmd这枚老将。</p><p><br /></p><h3 id=\"7a29ll\"><a href=\"#7a29ll\"></a>文件夹共享概述</h3><p><br /></p><p>共享文件夹的应用非常广泛，客户端对服务器端进行文件管理，局域网文件直传等等，在linux下，可以简单的安装smaba协议，简单的配置之后即可使用。在windows下，可以通过图形化的操作开启这项功能，当然带着一点极客风格，我们通过powershell（少量出现cmd）来对其进行管理。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"qbcvan\"><a href=\"#qbcvan\"></a>操作步骤</h3><p><br /></p><h4 id=\"8q9yga\"><a href=\"#8q9yga\"></a>查看共享列表</h4><p><br /></p><p>在powershell内，我们可以通过执行以下cmdlet获取共享信息：</p><p><br /></p><pre data-lang=\"powershell\"><code>λ Get-WmiObject -Class Win32_Share\n\nName                                      Path                                      Description\n----                                      ----                                      -----------\nADMIN$                                    C:\\Windows                                远程管理\nC$                                        C:\\                                       默认共享\nD$                                        D:\\                                       默认共享\nE$                                        E:\\                                       默认共享\nIPC$                                                                                远程 IPC\nUsers                                     C:\\Users</code></pre><p><br /></p><p>同理，在cmd下，也可以</p><p><br /></p><pre data-lang=\"powershell\"><code>λ net share\n\n共享名       资源                            注解\n\n-------------------------------------------------------------------------------\nC$           C:\\                             默认共享\nD$           D:\\                             默认共享\nE$           E:\\                             默认共享\nIPC$                                         远程 IPC\nADMIN$       C:\\Windows                      远程管理\nUsers        C:\\Users\n命令成功完成。</code></pre><p><br /></p><h4 id=\"gh75ll\"><a href=\"#gh75ll\"></a>创建一个共享文件夹</h4><p><br /></p><p><strong>疯狂的Powershell</strong></p><p><br /></p><pre data-lang=\"powershell\"><code># 共享名\n$ShareName = 'TestShare'\n# 共享路径\n$Path = 'D:\\SHARE'\n\nIf (!(Get-WmiObject -Class Win32_Share -Filter &quot;name='$ShareName'&quot;))\n{\n\t$Shares = [WMICLASS]&quot;WIN32_Share&quot;\n\t$Shares.Create($Path,$ShareName,0).ReturnValue\n}\nelse\n{\n\tWrite-Warning &quot;$ShareName has been sharing!!&quot;\n}</code></pre><p><br /></p><p>如果如果您有远程机器的管理员权限的话，也利用WMI在远程的机器上创建新的共享文件夹，下面是在远程主机上创建共享文件夹的代码：</p><p><br /></p><pre data-lang=\"powershell\"><code># 共享名\n$ShareName = 'TestShare'\n# 共享路径\n$Path = 'D:\\SHARE'\n# 远程主机名\n$Server = 'Server'\n\nIf (!(Get-WmiObject -Class Win32_Share -Filter &quot;name='$ShareName'&quot;))\n{\n\t$Shares = [WMICLASS]&quot;\\\\$Server\\root\\cimv2:WIN32_Share&quot;\n\t$Shares.Create($Path,$ShareName,0).ReturnValue\n}\nelse\n{\n\tWrite-Warning &quot;$ShareName has been sharing!!&quot;\n}</code></pre><p><br /></p><p><strong>低调的cmd</strong></p><p><br /></p><pre data-lang=\"bash\"><code>::建议先查看当前的共享文件夹再进行创建操作\nnet share TestShare=D:\\SHARE /users:25 /remark:&quot;test share of the a folder&quot;</code></pre><p><br /></p><p>我们很轻易地就能将一个文件夹的共享状态开启，我们可以通过UNC路径对其进行访问。创建完文件共享之后，我们来看看怎么使用吧。</p><p><br /></p><h4 id=\"i2dbgm\"><a href=\"#i2dbgm\"></a>驱动器映射和共享访问</h4><p><br /></p><p>接下来，我们摒弃图形化界面的操作（如果你非喜欢那么做的话，可以通过网上邻居【“网络”】进行查看，或者在计算机图标下右键选择映射网络驱动器），我们来通过命令去启用吧。</p><p><br /></p><p><strong>强悍的Powershell</strong></p><p><br /></p><p>临时创建一个网络驱动器映射：</p><p><br /></p><pre data-lang=\"powershell\"><code>(New-Object -ComObject WScript.Network).MapNetworkDrive(&quot;Z:&quot;, &quot;\\\\TEST-PC\\USERS&quot;)</code></pre><p><br /></p><p>创建一个持久化的网络驱动器映射：</p><p><br /></p><pre data-lang=\"powershell\"><code># New-PSDrive 加上 -Persist 参数使得驱动器在 PowerShell 之外可见。\n# 要真正地创建一个永久的网络驱动器，请确保加上 -Scope Global。/\n# 如果 New-PSDrive 在全局作用域范围之外运行（例如，在一个脚本中运行），该驱动器只会在脚本运行时出现在文件管理器中。\nNew-PSDrive -Name Z -PSProvider FileSystem -Root \\\\TEST-PC\\USERS -Persist -Scope Global</code></pre><p><br /></p><p><strong>小巧的cmd</strong></p><p><br /></p><pre data-lang=\"bash\"><code>::下面这条命令虽然可以在cmd使用此磁盘映射，但是不可利用资源管理器加载。\nnet use Z: \\\\TEST-PC\\USERS\n\n::这里是将systemroot文件夹映射为z:驱动器，可利用&quot;explorer.exe&quot;加载，可惜不能使用网络路径。\nsubst Z: $env:systemroot</code></pre><p><br /></p><p>完成如上的工作之后，不出意外，你的资源管理器会出现你想要访问的网络路径的图标。</p><p><br /></p><h4 id=\"ls7bwy\"><a href=\"#ls7bwy\"></a>删除共享</h4><p><br /></p><p>如果不需要再使用此共享文件夹了，可以卸载掉网络驱动器，并在共享的主机上删除该共享。</p><p><br /></p><p><strong>Powershell</strong></p><p><br /></p><pre data-lang=\"powershell\"><code>$Shares = Get-WMIObject Win32_Share | Where {$_.Name -eq &quot;&quot;}\n\nForeach ($Share in $Shares) {\n   $Share.Delete()\n}</code></pre><p><br /></p><p><strong>cmd</strong></p><p><br /></p><pre data-lang=\"bash\"><code>net share TestShare /delete</code></pre><p><br /></p><h3 id=\"z5amwe\"><a href=\"#z5amwe\"></a>小结</h3><p><br /></p><ol start=\"1\"><li><p>建立共享文件夹需要事先在启用网络共享和发现。</p></li></ol><ol start=\"2\"><li><p>需要提前做好文件夹权限控制以及共享的权限控制。</p></li></ol><ol start=\"3\"><li><p>通过配置cmdkey可以免去身份认证 `cmdkey /add:targetname /user:username /pass:password`</p></li></ol><p><br /></p><p>Powershell管理共享的相关链接：<a href=\"https://msdn.microsoft.com/en-us/library/aa394435(v=vs.85).aspx\" target=\"_blank\">https://msdn.microsoft.com/en-us/library/aa394435(v=vs.85).aspx</a></p>",
    "body_lake": "<!doctype lake><p>tags: [powershell]</p><p>date: 2015-01-19</p><card type=\"block\" name=\"hr\"></card><p>在Linux环境下，我们很轻易就能得心应手地通过命令操作一切事物，在Windows下，Powershell也算是后起之秀，提供大量的cmdlet以及c#的横向拓展。下面将由小编带领大家通过Powershell实现文件夹共享，当然文中也不会冷落cmd这枚老将。</p><p><br /></p><h3 id=\"7a29ll\"><a href=\"#7a29ll\" id=\"文件夹共享概述\"></a>文件夹共享概述</h3><p><br /></p><p>共享文件夹的应用非常广泛，客户端对服务器端进行文件管理，局域网文件直传等等，在linux下，可以简单的安装smaba协议，简单的配置之后即可使用。在windows下，可以通过图形化的操作开启这项功能，当然带着一点极客风格，我们通过powershell（少量出现cmd）来对其进行管理。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"qbcvan\"><a href=\"#qbcvan\" id=\"操作步骤\"></a>操作步骤</h3><p><br /></p><h4 id=\"8q9yga\"><a href=\"#8q9yga\" id=\"查看共享列表\"></a>查看共享列表</h4><p><br /></p><p>在powershell内，我们可以通过执行以下cmdlet获取共享信息：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%227b3de6e7%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%CE%BB%20Get-WmiObject%20-Class%20Win32_Share%5Cn%5CnName%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Path%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Description%5Cn----%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20----%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20-----------%5CnADMIN%24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20C%3A%5C%5CWindows%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%5CnC%24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20C%3A%5C%5C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E9%BB%98%E8%AE%A4%E5%85%B1%E4%BA%AB%5CnD%24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20D%3A%5C%5C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E9%BB%98%E8%AE%A4%E5%85%B1%E4%BA%AB%5CnE%24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20E%3A%5C%5C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E9%BB%98%E8%AE%A4%E5%85%B1%E4%BA%AB%5CnIPC%24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E8%BF%9C%E7%A8%8B%20IPC%5CnUsers%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20C%3A%5C%5CUsers%22%7D\"></card><p><br /></p><p>同理，在cmd下，也可以</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22fcbd0a61%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%CE%BB%20net%20share%5Cn%5Cn%E5%85%B1%E4%BA%AB%E5%90%8D%20%20%20%20%20%20%20%E8%B5%84%E6%BA%90%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E6%B3%A8%E8%A7%A3%5Cn%5Cn-------------------------------------------------------------------------------%5CnC%24%20%20%20%20%20%20%20%20%20%20%20C%3A%5C%5C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E9%BB%98%E8%AE%A4%E5%85%B1%E4%BA%AB%5CnD%24%20%20%20%20%20%20%20%20%20%20%20D%3A%5C%5C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E9%BB%98%E8%AE%A4%E5%85%B1%E4%BA%AB%5CnE%24%20%20%20%20%20%20%20%20%20%20%20E%3A%5C%5C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E9%BB%98%E8%AE%A4%E5%85%B1%E4%BA%AB%5CnIPC%24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E8%BF%9C%E7%A8%8B%20IPC%5CnADMIN%24%20%20%20%20%20%20%20C%3A%5C%5CWindows%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%5CnUsers%20%20%20%20%20%20%20%20C%3A%5C%5CUsers%5Cn%E5%91%BD%E4%BB%A4%E6%88%90%E5%8A%9F%E5%AE%8C%E6%88%90%E3%80%82%22%7D\"></card><p><br /></p><h4 id=\"gh75ll\"><a href=\"#gh75ll\" id=\"创建一个共享文件夹\"></a>创建一个共享文件夹</h4><p><br /></p><p><strong>疯狂的Powershell</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2285929d49%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%23%20%E5%85%B1%E4%BA%AB%E5%90%8D%5Cn%24ShareName%20%3D%20'TestShare'%5Cn%23%20%E5%85%B1%E4%BA%AB%E8%B7%AF%E5%BE%84%5Cn%24Path%20%3D%20'D%3A%5C%5CSHARE'%5Cn%5CnIf%20(!(Get-WmiObject%20-Class%20Win32_Share%20-Filter%20%5C%22name%3D'%24ShareName'%5C%22))%5Cn%7B%5Cn%5Ct%24Shares%20%3D%20%5BWMICLASS%5D%5C%22WIN32_Share%5C%22%5Cn%5Ct%24Shares.Create(%24Path%2C%24ShareName%2C0).ReturnValue%5Cn%7D%5Cnelse%5Cn%7B%5Cn%5CtWrite-Warning%20%5C%22%24ShareName%20has%20been%20sharing!!%5C%22%5Cn%7D%22%7D\"></card><p><br /></p><p>如果如果您有远程机器的管理员权限的话，也利用WMI在远程的机器上创建新的共享文件夹，下面是在远程主机上创建共享文件夹的代码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b17ee87f%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%23%20%E5%85%B1%E4%BA%AB%E5%90%8D%5Cn%24ShareName%20%3D%20'TestShare'%5Cn%23%20%E5%85%B1%E4%BA%AB%E8%B7%AF%E5%BE%84%5Cn%24Path%20%3D%20'D%3A%5C%5CSHARE'%5Cn%23%20%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E5%90%8D%5Cn%24Server%20%3D%20'Server'%5Cn%5CnIf%20(!(Get-WmiObject%20-Class%20Win32_Share%20-Filter%20%5C%22name%3D'%24ShareName'%5C%22))%5Cn%7B%5Cn%5Ct%24Shares%20%3D%20%5BWMICLASS%5D%5C%22%5C%5C%5C%5C%24Server%5C%5Croot%5C%5Ccimv2%3AWIN32_Share%5C%22%5Cn%5Ct%24Shares.Create(%24Path%2C%24ShareName%2C0).ReturnValue%5Cn%7D%5Cnelse%5Cn%7B%5Cn%5CtWrite-Warning%20%5C%22%24ShareName%20has%20been%20sharing!!%5C%22%5Cn%7D%22%7D\"></card><p><br /></p><p><strong>低调的cmd</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%228cb3eae2%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%3A%3A%E5%BB%BA%E8%AE%AE%E5%85%88%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E7%9A%84%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E5%86%8D%E8%BF%9B%E8%A1%8C%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%5Cnnet%20share%20TestShare%3DD%3A%5C%5CSHARE%20%2Fusers%3A25%20%2Fremark%3A%5C%22test%20share%20of%20the%20a%20folder%5C%22%22%7D\"></card><p><br /></p><p>我们很轻易地就能将一个文件夹的共享状态开启，我们可以通过UNC路径对其进行访问。创建完文件共享之后，我们来看看怎么使用吧。</p><p><br /></p><h4 id=\"i2dbgm\"><a href=\"#i2dbgm\" id=\"驱动器映射和共享访问\"></a>驱动器映射和共享访问</h4><p><br /></p><p>接下来，我们摒弃图形化界面的操作（如果你非喜欢那么做的话，可以通过网上邻居【“网络”】进行查看，或者在计算机图标下右键选择映射网络驱动器），我们来通过命令去启用吧。</p><p><br /></p><p><strong>强悍的Powershell</strong></p><p><br /></p><p>临时创建一个网络驱动器映射：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2211fa864b%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22(New-Object%20-ComObject%20WScript.Network).MapNetworkDrive(%5C%22Z%3A%5C%22%2C%20%5C%22%5C%5C%5C%5CTEST-PC%5C%5CUSERS%5C%22)%22%7D\"></card><p><br /></p><p>创建一个持久化的网络驱动器映射：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22e3244369%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%23%20New-PSDrive%20%E5%8A%A0%E4%B8%8A%20-Persist%20%E5%8F%82%E6%95%B0%E4%BD%BF%E5%BE%97%E9%A9%B1%E5%8A%A8%E5%99%A8%E5%9C%A8%20PowerShell%20%E4%B9%8B%E5%A4%96%E5%8F%AF%E8%A7%81%E3%80%82%5Cn%23%20%E8%A6%81%E7%9C%9F%E6%AD%A3%E5%9C%B0%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%B0%B8%E4%B9%85%E7%9A%84%E7%BD%91%E7%BB%9C%E9%A9%B1%E5%8A%A8%E5%99%A8%EF%BC%8C%E8%AF%B7%E7%A1%AE%E4%BF%9D%E5%8A%A0%E4%B8%8A%20-Scope%20Global%E3%80%82%2F%5Cn%23%20%E5%A6%82%E6%9E%9C%20New-PSDrive%20%E5%9C%A8%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%8C%83%E5%9B%B4%E4%B9%8B%E5%A4%96%E8%BF%90%E8%A1%8C%EF%BC%88%E4%BE%8B%E5%A6%82%EF%BC%8C%E5%9C%A8%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%E4%B8%AD%E8%BF%90%E8%A1%8C%EF%BC%89%EF%BC%8C%E8%AF%A5%E9%A9%B1%E5%8A%A8%E5%99%A8%E5%8F%AA%E4%BC%9A%E5%9C%A8%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E6%97%B6%E5%87%BA%E7%8E%B0%E5%9C%A8%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E3%80%82%5CnNew-PSDrive%20-Name%20Z%20-PSProvider%20FileSystem%20-Root%20%5C%5C%5C%5CTEST-PC%5C%5CUSERS%20-Persist%20-Scope%20Global%22%7D\"></card><p><br /></p><p><strong>小巧的cmd</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f44872b8%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%3A%3A%E4%B8%8B%E9%9D%A2%E8%BF%99%E6%9D%A1%E5%91%BD%E4%BB%A4%E8%99%BD%E7%84%B6%E5%8F%AF%E4%BB%A5%E5%9C%A8cmd%E4%BD%BF%E7%94%A8%E6%AD%A4%E7%A3%81%E7%9B%98%E6%98%A0%E5%B0%84%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%88%A9%E7%94%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E5%8A%A0%E8%BD%BD%E3%80%82%5Cnnet%20use%20Z%3A%20%5C%5C%5C%5CTEST-PC%5C%5CUSERS%5Cn%5Cn%3A%3A%E8%BF%99%E9%87%8C%E6%98%AF%E5%B0%86systemroot%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%A0%E5%B0%84%E4%B8%BAz%3A%E9%A9%B1%E5%8A%A8%E5%99%A8%EF%BC%8C%E5%8F%AF%E5%88%A9%E7%94%A8%5C%22explorer.exe%5C%22%E5%8A%A0%E8%BD%BD%EF%BC%8C%E5%8F%AF%E6%83%9C%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E8%B7%AF%E5%BE%84%E3%80%82%5Cnsubst%20Z%3A%20%24env%3Asystemroot%22%7D\"></card><p><br /></p><p>完成如上的工作之后，不出意外，你的资源管理器会出现你想要访问的网络路径的图标。</p><p><br /></p><h4 id=\"ls7bwy\"><a href=\"#ls7bwy\" id=\"删除共享\"></a>删除共享</h4><p><br /></p><p>如果不需要再使用此共享文件夹了，可以卸载掉网络驱动器，并在共享的主机上删除该共享。</p><p><br /></p><p><strong>Powershell</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f05dd05e%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%24Shares%20%3D%20Get-WMIObject%20Win32_Share%20%7C%20Where%20%7B%24_.Name%20-eq%20%5C%22%5C%22%7D%5Cn%5CnForeach%20(%24Share%20in%20%24Shares)%20%7B%5Cn%20%20%20%24Share.Delete()%5Cn%7D%22%7D\"></card><p><br /></p><p><strong>cmd</strong></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22744edf78%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22net%20share%20TestShare%20%2Fdelete%22%7D\"></card><p><br /></p><h3 id=\"z5amwe\"><a href=\"#z5amwe\" id=\"小结\"></a>小结</h3><p><br /></p><ol start=\"1\"><li><p>建立共享文件夹需要事先在启用网络共享和发现。</p></li></ol><ol start=\"2\"><li><p>需要提前做好文件夹权限控制以及共享的权限控制。</p></li></ol><ol start=\"3\"><li><p>通过配置cmdkey可以免去身份认证 `cmdkey /add:targetname /user:username /pass:password`</p></li></ol><p><br /></p><p>Powershell管理共享的相关链接：<a href=\"https://msdn.microsoft.com/en-us/library/aa394435(v=vs.85).aspx\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://msdn.microsoft.com/en-us/library/aa394435(v=vs.85).aspx</a></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [powershell]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-01-19\"],[\"hr\",{\"id\":\"w4fasu\"}],[\"div\",{\"data-type\":\"p\"},\"在Linux环境下，我们很轻易就能得心应手地通过命令操作一切事物，在Windows下，Powershell也算是后起之秀，提供大量的cmdlet以及c#的横向拓展。下面将由小编带领大家通过Powershell实现文件夹共享，当然文中也不会冷落cmd这枚老将。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"7a29ll\"},\"文件夹共享概述\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"共享文件夹的应用非常广泛，客户端对服务器端进行文件管理，局域网文件直传等等，在linux下，可以简单的安装smaba协议，简单的配置之后即可使用。在windows下，可以通过图形化的操作开启这项功能，当然带着一点极客风格，我们通过powershell（少量出现cmd）来对其进行管理。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"qbcvan\"},\"操作步骤\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"8q9yga\"},\"查看共享列表\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"在powershell内，我们可以通过执行以下cmdlet获取共享信息：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"λ Get-WmiObject -Class Win32_Share\\n\",\"\\n\",\"Name                                      Path                                      Description\\n\",\"----                                      ----                                      -----------\\n\",\"ADMIN$                                    C:\\\\Windows                                远程管理\\n\",\"C$                                        C:\\\\                                       默认共享\\n\",\"D$                                        D:\\\\                                       默认共享\\n\",\"E$                                        E:\\\\                                       默认共享\\n\",\"IPC$                                                                                远程 IPC\\n\",\"Users                                     C:\\\\Users\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"同理，在cmd下，也可以\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"λ net share\\n\",\"\\n\",\"共享名       资源                            注解\\n\",\"\\n\",\"-------------------------------------------------------------------------------\\n\",\"C$           C:\\\\                             默认共享\\n\",\"D$           D:\\\\                             默认共享\\n\",\"E$           E:\\\\                             默认共享\\n\",\"IPC$                                         远程 IPC\\n\",\"ADMIN$       C:\\\\Windows                      远程管理\\n\",\"Users        C:\\\\Users\\n\",\"命令成功完成。\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"gh75ll\"},\"创建一个共享文件夹\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"strong\",{},\"疯狂的Powershell\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"# 共享名\\n\",\"$ShareName = 'TestShare'\\n\",\"# 共享路径\\n\",\"$Path = 'D:\\\\SHARE'\\n\",\"\\n\",\"If (!(Get-WmiObject -Class Win32_Share -Filter \\\"name='$ShareName'\\\"))\\n\",\"{\\n\",\"\\t$Shares = [WMICLASS]\\\"WIN32_Share\\\"\\n\",\"\\t$Shares.Create($Path,$ShareName,0).ReturnValue\\n\",\"}\\n\",\"else\\n\",\"{\\n\",\"\\tWrite-Warning \\\"$ShareName has been sharing!!\\\"\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"如果如果您有远程机器的管理员权限的话，也利用WMI在远程的机器上创建新的共享文件夹，下面是在远程主机上创建共享文件夹的代码：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"# 共享名\\n\",\"$ShareName = 'TestShare'\\n\",\"# 共享路径\\n\",\"$Path = 'D:\\\\SHARE'\\n\",\"# 远程主机名\\n\",\"$Server = 'Server'\\n\",\"\\n\",\"If (!(Get-WmiObject -Class Win32_Share -Filter \\\"name='$ShareName'\\\"))\\n\",\"{\\n\",\"\\t$Shares = [WMICLASS]\\\"\\\\\\\\$Server\\\\root\\\\cimv2:WIN32_Share\\\"\\n\",\"\\t$Shares.Create($Path,$ShareName,0).ReturnValue\\n\",\"}\\n\",\"else\\n\",\"{\\n\",\"\\tWrite-Warning \\\"$ShareName has been sharing!!\\\"\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"strong\",{},\"低调的cmd\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"bash\"},\"::建议先查看当前的共享文件夹再进行创建操作\\n\",\"net share TestShare=D:\\\\SHARE /users:25 /remark:\\\"test share of the a folder\\\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"我们很轻易地就能将一个文件夹的共享状态开启，我们可以通过UNC路径对其进行访问。创建完文件共享之后，我们来看看怎么使用吧。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"i2dbgm\"},\"驱动器映射和共享访问\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"接下来，我们摒弃图形化界面的操作（如果你非喜欢那么做的话，可以通过网上邻居【“网络”】进行查看，或者在计算机图标下右键选择映射网络驱动器），我们来通过命令去启用吧。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"strong\",{},\"强悍的Powershell\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"临时创建一个网络驱动器映射：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"(New-Object -ComObject WScript.Network).MapNetworkDrive(\\\"Z:\\\", \\\"\\\\\\\\TEST-PC\\\\USERS\\\")\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"创建一个持久化的网络驱动器映射：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"# New-PSDrive 加上 -Persist 参数使得驱动器在 PowerShell 之外可见。\\n\",\"# 要真正地创建一个永久的网络驱动器，请确保加上 -Scope Global。/\\n\",\"# 如果 New-PSDrive 在全局作用域范围之外运行（例如，在一个脚本中运行），该驱动器只会在脚本运行时出现在文件管理器中。\\n\",\"New-PSDrive -Name Z -PSProvider FileSystem -Root \\\\\\\\TEST-PC\\\\USERS -Persist -Scope Global\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"strong\",{},\"小巧的cmd\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"bash\"},\"::下面这条命令虽然可以在cmd使用此磁盘映射，但是不可利用资源管理器加载。\\n\",\"net use Z: \\\\\\\\TEST-PC\\\\USERS\\n\",\"\\n\",\"::这里是将systemroot文件夹映射为z:驱动器，可利用\\\"explorer.exe\\\"加载，可惜不能使用网络路径。\\n\",\"subst Z: $env:systemroot\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"完成如上的工作之后，不出意外，你的资源管理器会出现你想要访问的网络路径的图标。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"ls7bwy\"},\"删除共享\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"如果不需要再使用此共享文件夹了，可以卸载掉网络驱动器，并在共享的主机上删除该共享。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"strong\",{},\"Powershell\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"$Shares = Get-WMIObject Win32_Share | Where {$_.Name -eq \\\"\\\"}\\n\",\"\\n\",\"Foreach ($Share in $Shares) {\\n\",\"   $Share.Delete()\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"strong\",{},\"cmd\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"bash\"},\"net share TestShare /delete\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"z5amwe\"},\"小结\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"建立共享文件夹需要事先在启用网络共享和发现。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"需要提前做好文件夹权限控制以及共享的权限控制。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"通过配置cmdkey可以免去身份认证 `cmdkey /add:targetname /user:username /pass:password`\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Powershell管理共享的相关链接：\",[\"a\",{\"title\":\"\",\"href\":\"https://msdn.microsoft.com/en-us/library/aa394435(v=vs.85).aspx\"},\"https://msdn.microsoft.com/en-us/library/aa394435(v=vs.85).aspx\"],\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:16:02.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:42:26.000Z",
    "updated_at": "2019-05-30T10:01:12.000Z",
    "published_at": "2018-09-15T08:16:02.000Z",
    "first_published_at": null,
    "word_count": 1113,
    "cover": null,
    "description": "tags: [powershell]date: 2015-01-19在Linux环境下，我们很轻易就能得心应手地通过命令操作一切事物，在Windows下，Powershell也算是后起之秀，提供大量的cmdlet以及c#的横向拓展。下面将由小编带领大家通过Powershell实现文件夹共享，当然文中也不会冷落cmd这枚老将。文件夹共享概述共享文件夹的应用非常广泛，客户端对服务器端进行文件管理，局域网文件直传等等，在linux下，可以简单的安装smaba协议，简单的配置之后即可使用。在windows...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709052,
    "slug": "ynbfpq",
    "title": "WebClient获取网络上的资源",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [powershell]<br />date: 2015-02-15\n\n---\n\nWebClient提供向了 URI 标识的资源发送数据和从 URI 标识的资源接收数据的公共方法.\n\n<a name=\"kczgdx\"></a>\n### 下载网页内容\n\n1.创建WebClient对象：\n\n```powershell\n$web = New-Object System.Net.WebClient\n```\n\n2.设置文本的编码：\n\n```powershell\n$web.Encoding = [System.Text.Encoding]::UTF8\n```\n\n3.下载网页代码\n\n```powershell\n$str = $web.DownloadString(\"http://localhost\")\n$str\n```\n\n<a name=\"0a7vym\"></a>\n### 获取文件资源\n\n```\n$url = \"http://path.to/file\"\n$file = \"\\\\localpath\\to\\file\"\n$web.DownloadFile($url,$file)\n```\n\nWebClient能够实现一个HTTP客户端，进而拓展的应用场景非常丰富，如 web自动化，网络爬虫，异步下载器等，更多关于WebClient的说明请参考：[https://msdn.microsoft.com/zh-cn/library/system.net.webclient(VS.80).aspx](https://msdn.microsoft.com/zh-cn/library/system.net.webclient(VS.80).aspx)\n\n相似知识点：`HttpClient`\n",
    "body_draft": "tags: [powershell]\ndate: 2015-02-15\n\n---\n\nWebClient提供向了 URI 标识的资源发送数据和从 URI 标识的资源接收数据的公共方法.\n\n### <a name=\"kczgdx\"></a>下载网页内容\n\n1.创建WebClient对象：\n\n```powershell\n$web = New-Object System.Net.WebClient\n```\n\n2.设置文本的编码：\n\n```powershell\n$web.Encoding = [System.Text.Encoding]::UTF8\n```\n\n3.下载网页代码\n\n```powershell\n$str = $web.DownloadString(\"http://localhost\")\n$str\n```\n\n### <a name=\"0a7vym\"></a>获取文件资源\n\n```\n$url = \"http://path.to/file\"\n$file = \"\\\\localpath\\to\\file\"\n$web.DownloadFile($url,$file)\n```\n\nWebClient能够实现一个HTTP客户端，进而拓展的应用场景非常丰富，如 web自动化，网络爬虫，异步下载器等，更多关于WebClient的说明请参考：[https://msdn.microsoft.com/zh-cn/library/system.net.webclient(VS.80).aspx](https://msdn.microsoft.com/zh-cn/library/system.net.webclient(VS.80).aspx)\n\n相似知识点：`HttpClient`\n",
    "body_html": "<p>tags: [powershell]</p><p>date: 2015-02-15</p><hr /><p>WebClient提供向了 URI 标识的资源发送数据和从 URI 标识的资源接收数据的公共方法.</p><p><br /></p><h3 id=\"kczgdx\"><a href=\"#kczgdx\"></a>下载网页内容</h3><p><br /></p><p>1.创建WebClient对象：</p><p><br /></p><pre data-lang=\"powershell\"><code>$web = New-Object System.Net.WebClient</code></pre><p><br /></p><p>2.设置文本的编码：</p><p><br /></p><pre data-lang=\"powershell\"><code>$web.Encoding = [System.Text.Encoding]::UTF8</code></pre><p><br /></p><p>3.下载网页代码</p><p><br /></p><pre data-lang=\"powershell\"><code>$str = $web.DownloadString(&quot;http://localhost&quot;)\n$str</code></pre><p><br /></p><h3 id=\"0a7vym\"><a href=\"#0a7vym\"></a>获取文件资源</h3><p><br /></p><pre><code>$url = &quot;http://path.to/file&quot;\n$file = &quot;\\\\localpath\\to\\file&quot;\n$web.DownloadFile($url,$file)</code></pre><p><br /></p><p>WebClient能够实现一个HTTP客户端，进而拓展的应用场景非常丰富，如 web自动化，网络爬虫，异步下载器等，更多关于WebClient的说明请参考：<a href=\"https://msdn.microsoft.com/zh-cn/library/system.net.webclient(VS.80).aspx\" target=\"_blank\">https://msdn.microsoft.com/zh-cn/library/system.net.webclient(VS.80).aspx</a></p><p><br /></p><p>相似知识点：<code>HttpClient</code></p>",
    "body_lake": "<!doctype lake><p>tags: [powershell]</p><p>date: 2015-02-15</p><card type=\"block\" name=\"hr\"></card><p>WebClient提供向了 URI 标识的资源发送数据和从 URI 标识的资源接收数据的公共方法.</p><p><br /></p><h3 id=\"kczgdx\"><a href=\"#kczgdx\" id=\"下载网页内容\"></a>下载网页内容</h3><p><br /></p><p>1.创建WebClient对象：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2222acc0d0%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%24web%20%3D%20New-Object%20System.Net.WebClient%22%7D\"></card><p><br /></p><p>2.设置文本的编码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2275bb88c3%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%24web.Encoding%20%3D%20%5BSystem.Text.Encoding%5D%3A%3AUTF8%22%7D\"></card><p><br /></p><p>3.下载网页代码</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c1b728b3%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%24str%20%3D%20%24web.DownloadString(%5C%22http%3A%2F%2Flocalhost%5C%22)%5Cn%24str%22%7D\"></card><p><br /></p><h3 id=\"0a7vym\"><a href=\"#0a7vym\" id=\"获取文件资源\"></a>获取文件资源</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c5598bba%22%2C%22code%22%3A%22%24url%20%3D%20%5C%22http%3A%2F%2Fpath.to%2Ffile%5C%22%5Cn%24file%20%3D%20%5C%22%5C%5C%5C%5Clocalpath%5C%5Cto%5C%5Cfile%5C%22%5Cn%24web.DownloadFile(%24url%2C%24file)%22%7D\"></card><p><br /></p><p>WebClient能够实现一个HTTP客户端，进而拓展的应用场景非常丰富，如 web自动化，网络爬虫，异步下载器等，更多关于WebClient的说明请参考：<a href=\"https://msdn.microsoft.com/zh-cn/library/system.net.webclient(VS.80).aspx\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://msdn.microsoft.com/zh-cn/library/system.net.webclient(VS.80).aspx</a></p><p><br /></p><p>相似知识点：<code>HttpClient</code></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [powershell]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-02-15\"],[\"hr\",{\"id\":\"mhx1kg\"}],[\"div\",{\"data-type\":\"p\"},\"WebClient提供向了 URI 标识的资源发送数据和从 URI 标识的资源接收数据的公共方法.\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"kczgdx\"},\"下载网页内容\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"1.创建WebClient对象：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"$web = New-Object System.Net.WebClient\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"2.设置文本的编码：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"$web.Encoding = [System.Text.Encoding]::UTF8\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"3.下载网页代码\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"$str = $web.DownloadString(\\\"http://localhost\\\")\\n\",\"$str\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"0a7vym\"},\"获取文件资源\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"$url = \\\"http://path.to/file\\\"\\n\",\"$file = \\\"\\\\\\\\localpath\\\\to\\\\file\\\"\\n\",\"$web.DownloadFile($url,$file)\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"WebClient能够实现一个HTTP客户端，进而拓展的应用场景非常丰富，如 web自动化，网络爬虫，异步下载器等，更多关于WebClient的说明请参考：\",[\"a\",{\"title\":\"\",\"href\":\"https://msdn.microsoft.com/zh-cn/library/system.net.webclient(VS.80).aspx\"},\"https://msdn.microsoft.com/zh-cn/library/system.net.webclient(VS.80).aspx\"],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"相似知识点：\",[\"code\",{},\"HttpClient\"]]]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:15:40.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:42:02.000Z",
    "updated_at": "2019-05-31T17:19:58.000Z",
    "published_at": "2018-09-15T08:15:40.000Z",
    "first_published_at": null,
    "word_count": 182,
    "cover": null,
    "description": "tags: [powershell]date: 2015-02-15WebClient提供向了 URI 标识的资源发送数据和从 URI 标识的资源接收数据的公共方法.下载网页内容1.创建WebClient对象：$web = New-Object System.Net.WebClient 2.设置文本的编码：$web.Encoding = [System.Text.Encoding]::UTF8 3.下载网页代码$str = $web.DownloadString(&quot;http...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709051,
    "slug": "fbfn65",
    "title": "powershell学习之道-入门须知的八个技巧",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [powershell]<br />date: 2015-01-28\n\n---\n\n<a name=\"k8u7pv\"></a>\n### powershell脚本入门须知的八个技巧\n\n- 脚本文件后缀名为 \".ps1\" 的文本文件，包含了一系列的powershell命令，每条命令显示为独立的一行；\n\n- 执行策略：about_Execution_Policies，通过下面这条命令查询所有支持的执行策略：\n\n\n```powershell\n[System.Enum]::GetNames([Microsoft.PowerShell.ExecutionPolicy])\n```\n\n- 运行脚本：使用绝对路径和相对路径均可运行，与shell命令执行如出一辙；\n\n- 管道（\"|\"）的作用是将前一条命令的输出作为另一个命令的输入；\n\n- 变量用 \"$\" 进行引用，用 \"@\" 将列表内容转为数组，命令引用数组变量 \"$name\" 也可以直接使用 \"@name\" ；\n\n- \"-split\" 和 \"-join\" 拆分和连接字符串，如下面这条命令可以执行1-100求和：\n\n\n```powershell\nInvoke-Expression (1..100 -join '+')\n```\n\n- 断点：debug神器，关键字：PSBreakpoint，可以和PSBreakpoint一起使用的动词包括New，Get，Enable，Disable和Remove。下面是分别在行和变量中插入断点：\n\n\n```powershell\nNew-PSBreakpoint -Script C:\\Scripts\\Script.ps1 -Line 10\nNew-PSBreakpoint -Script C:\\scripts\\Script.ps1 -variables a\n```\n\n- Step，调试一个脚本时，有时可能需要逐行运行脚本，这时你可以使用Step-Into cmdlet命令，它会使脚本一行一行地执行，不管有没有设置断点，如果你想从这种步进式运行模式退出来，使用Step-Out cmdlet命令即可，但需要注意的是，使用Step-Out cmdlet命令后，断点仍然有效。顺便说一句，如果你的脚本使用了函数，你可能对Step-Out cmdlet更感兴趣，Step-Out的工作方式和Step-Into一样，不过，如果调用了一个函数，Windows不会逐步执行，整个函数将会一次性执行。\n\n\n",
    "body_draft": "tags: [powershell]\ndate: 2015-01-28\n\n---\n\n### <a name=\"k8u7pv\"></a>powershell脚本入门须知的八个技巧\n\n* 脚本文件后缀名为 \".ps1\" 的文本文件，包含了一系列的powershell命令，每条命令显示为独立的一行；\n* 执行策略：about\\_Execution\\_Policies，通过下面这条命令查询所有支持的执行策略：\n\n```powershell\n[System.Enum]::GetNames([Microsoft.PowerShell.ExecutionPolicy])\n```\n\n* 运行脚本：使用绝对路径和相对路径均可运行，与shell命令执行如出一辙；\n* 管道（\"|\"）的作用是将前一条命令的输出作为另一个命令的输入；\n* 变量用 \"\\$\" 进行引用，用 \"@\" 将列表内容转为数组，命令引用数组变量 \"\\$name\" 也可以直接使用 \"@name\" ；\n* \"-split\" 和 \"-join\" 拆分和连接字符串，如下面这条命令可以执行1-100求和：\n\n```powershell\nInvoke-Expression (1..100 -join '+')\n```\n\n* 断点：debug神器，关键字：PSBreakpoint，可以和PSBreakpoint一起使用的动词包括New，Get，Enable，Disable和Remove。下面是分别在行和变量中插入断点：\n\n```powershell\nNew-PSBreakpoint -Script C:\\Scripts\\Script.ps1 -Line 10\nNew-PSBreakpoint -Script C:\\scripts\\Script.ps1 -variables a\n```\n\n* Step，调试一个脚本时，有时可能需要逐行运行脚本，这时你可以使用Step-Into cmdlet命令，它会使脚本一行一行地执行，不管有没有设置断点，如果你想从这种步进式运行模式退出来，使用Step-Out cmdlet命令即可，但需要注意的是，使用Step-Out cmdlet命令后，断点仍然有效。顺便说一句，如果你的脚本使用了函数，你可能对Step-Out cmdlet更感兴趣，Step-Out的工作方式和Step-Into一样，不过，如果调用了一个函数，Windows不会逐步执行，整个函数将会一次性执行。\n\n",
    "body_html": "<p>tags: [powershell]</p><p>date: 2015-01-28</p><hr /><h3 id=\"k8u7pv\"><a href=\"#k8u7pv\"></a>powershell脚本入门须知的八个技巧</h3><p><br /></p><ul><li><p>脚本文件后缀名为 &quot;.ps1&quot; 的文本文件，包含了一系列的powershell命令，每条命令显示为独立的一行；</p></li></ul><ul><li><p>执行策略：about_Execution_Policies，通过下面这条命令查询所有支持的执行策略：</p></li></ul><p><br /></p><pre data-lang=\"powershell\"><code>[System.Enum]::GetNames([Microsoft.PowerShell.ExecutionPolicy])</code></pre><p><br /></p><ul><li><p>运行脚本：使用绝对路径和相对路径均可运行，与shell命令执行如出一辙；</p></li></ul><ul><li><p>管道（&quot;|&quot;）的作用是将前一条命令的输出作为另一个命令的输入；</p></li></ul><ul><li><p>变量用 &quot;$&quot; 进行引用，用 &quot;@&quot; 将列表内容转为数组，命令引用数组变量 &quot;$name&quot; 也可以直接使用 &quot;@name&quot; ；</p></li></ul><ul><li><p>&quot;-split&quot; 和 &quot;-join&quot; 拆分和连接字符串，如下面这条命令可以执行1-100求和：</p></li></ul><p><br /></p><pre data-lang=\"powershell\"><code>Invoke-Expression (1..100 -join '+')</code></pre><p><br /></p><ul><li><p>断点：debug神器，关键字：PSBreakpoint，可以和PSBreakpoint一起使用的动词包括New，Get，Enable，Disable和Remove。下面是分别在行和变量中插入断点：</p></li></ul><p><br /></p><pre data-lang=\"powershell\"><code>New-PSBreakpoint -Script C:\\Scripts\\Script.ps1 -Line 10\nNew-PSBreakpoint -Script C:\\scripts\\Script.ps1 -variables a</code></pre><p><br /></p><ul><li><p>Step，调试一个脚本时，有时可能需要逐行运行脚本，这时你可以使用Step-Into cmdlet命令，它会使脚本一行一行地执行，不管有没有设置断点，如果你想从这种步进式运行模式退出来，使用Step-Out cmdlet命令即可，但需要注意的是，使用Step-Out cmdlet命令后，断点仍然有效。顺便说一句，如果你的脚本使用了函数，你可能对Step-Out cmdlet更感兴趣，Step-Out的工作方式和Step-Into一样，不过，如果调用了一个函数，Windows不会逐步执行，整个函数将会一次性执行。</p></li></ul><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [powershell]</p><p>date: 2015-01-28</p><card type=\"block\" name=\"hr\"></card><h3 id=\"k8u7pv\"><a href=\"#k8u7pv\" id=\"powershell脚本入门须知的八个技巧\"></a>powershell脚本入门须知的八个技巧</h3><p><br /></p><ul><li><p>脚本文件后缀名为 &quot;.ps1&quot; 的文本文件，包含了一系列的powershell命令，每条命令显示为独立的一行；</p></li></ul><ul><li><p>执行策略：about_Execution_Policies，通过下面这条命令查询所有支持的执行策略：</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c5393d72%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22%5BSystem.Enum%5D%3A%3AGetNames(%5BMicrosoft.PowerShell.ExecutionPolicy%5D)%22%7D\"></card><p><br /></p><ul><li><p>运行脚本：使用绝对路径和相对路径均可运行，与shell命令执行如出一辙；</p></li></ul><ul><li><p>管道（&quot;|&quot;）的作用是将前一条命令的输出作为另一个命令的输入；</p></li></ul><ul><li><p>变量用 &quot;$&quot; 进行引用，用 &quot;@&quot; 将列表内容转为数组，命令引用数组变量 &quot;$name&quot; 也可以直接使用 &quot;@name&quot; ；</p></li></ul><ul><li><p>&quot;-split&quot; 和 &quot;-join&quot; 拆分和连接字符串，如下面这条命令可以执行1-100求和：</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22ca5a60c8%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22Invoke-Expression%20(1..100%20-join%20'%2B')%22%7D\"></card><p><br /></p><ul><li><p>断点：debug神器，关键字：PSBreakpoint，可以和PSBreakpoint一起使用的动词包括New，Get，Enable，Disable和Remove。下面是分别在行和变量中插入断点：</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%229bdb27e5%22%2C%22mode%22%3A%22powershell%22%2C%22code%22%3A%22New-PSBreakpoint%20-Script%20C%3A%5C%5CScripts%5C%5CScript.ps1%20-Line%2010%5CnNew-PSBreakpoint%20-Script%20C%3A%5C%5Cscripts%5C%5CScript.ps1%20-variables%20a%22%7D\"></card><p><br /></p><ul><li><p>Step，调试一个脚本时，有时可能需要逐行运行脚本，这时你可以使用Step-Into cmdlet命令，它会使脚本一行一行地执行，不管有没有设置断点，如果你想从这种步进式运行模式退出来，使用Step-Out cmdlet命令即可，但需要注意的是，使用Step-Out cmdlet命令后，断点仍然有效。顺便说一句，如果你的脚本使用了函数，你可能对Step-Out cmdlet更感兴趣，Step-Out的工作方式和Step-Into一样，不过，如果调用了一个函数，Windows不会逐步执行，整个函数将会一次性执行。</p></li></ul><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [powershell]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-01-28\"],[\"hr\",{\"id\":\"hxz1yx\"}],[\"h3\",{\"id\":\"k8u7pv\"},\"powershell脚本入门须知的八个技巧\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"脚本文件后缀名为 \\\".ps1\\\" 的文本文件，包含了一系列的powershell命令，每条命令显示为独立的一行；\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"执行策略：about_Execution_Policies，通过下面这条命令查询所有支持的执行策略：\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"[System.Enum]::GetNames([Microsoft.PowerShell.ExecutionPolicy])\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"运行脚本：使用绝对路径和相对路径均可运行，与shell命令执行如出一辙；\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"管道（\\\"|\\\"）的作用是将前一条命令的输出作为另一个命令的输入；\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"变量用 \\\"$\\\" 进行引用，用 \\\"@\\\" 将列表内容转为数组，命令引用数组变量 \\\"$name\\\" 也可以直接使用 \\\"@name\\\" ；\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"\\\"-split\\\" 和 \\\"-join\\\" 拆分和连接字符串，如下面这条命令可以执行1-100求和：\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"Invoke-Expression (1..100 -join '+')\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"断点：debug神器，关键字：PSBreakpoint，可以和PSBreakpoint一起使用的动词包括New，Get，Enable，Disable和Remove。下面是分别在行和变量中插入断点：\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"powershell\"},\"New-PSBreakpoint -Script C:\\\\Scripts\\\\Script.ps1 -Line 10\\n\",\"New-PSBreakpoint -Script C:\\\\scripts\\\\Script.ps1 -variables a\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Step，调试一个脚本时，有时可能需要逐行运行脚本，这时你可以使用Step-Into cmdlet命令，它会使脚本一行一行地执行，不管有没有设置断点，如果你想从这种步进式运行模式退出来，使用Step-Out cmdlet命令即可，但需要注意的是，使用Step-Out cmdlet命令后，断点仍然有效。顺便说一句，如果你的脚本使用了函数，你可能对Step-Out cmdlet更感兴趣，Step-Out的工作方式和Step-Into一样，不过，如果调用了一个函数，Windows不会逐步执行，整个函数将会一次性执行。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 1,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:15:07.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:41:13.000Z",
    "updated_at": "2020-01-09T02:50:42.000Z",
    "published_at": "2018-09-15T08:15:07.000Z",
    "first_published_at": null,
    "word_count": 454,
    "cover": null,
    "description": "tags: [powershell]date: 2015-01-28powershell脚本入门须知的八个技巧脚本文件后缀名为 &quot;.ps1&quot; 的文本文件，包含了一系列的powershell命令，每条命令显示为独立的一行；执行策略：about_Execution_Policies，通过下面这条命令查询所有支持的执行策略：[System.Enum]::GetNames([Microsoft.PowerShell.ExecutionPolicy...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709048,
    "slug": "cgm3ug",
    "title": "树莓派NAS搭建",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 24,
      "content_updated_at": "2022-02-12T14:18:05.792Z",
      "updated_at": "2022-02-12T14:18:05.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 12,
        "public_books_count": 5,
        "followers_count": 94,
        "following_count": 31,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2022-02-12T09:08:14.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 12,
      "public_books_count": 5,
      "followers_count": 94,
      "following_count": 31,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2022-02-12T09:08:14.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [linux, 树莓派, nas]<br />date: 2015-10-18 19:25:42\n\n---\n\n初探树莓派，便可知道其用途广泛，本篇博文将介绍如何使用树莓派搭建基于Linux和SMB协议的NAS服务器。\n\n<a name=\"el9zps\"></a>\n### 树莓派简介\n\n树莓派（Raspberry pi，简写为RPi，或者RasPi/RPi）是目前比较常见的卡片电脑，为学生计算机编程教育而设计。其系统基于Linux(或者最新发布的Windows 10 IoT)。仅有巴掌大小的PCB板可谓麻雀虽小五脏俱全，可以像普通的PC那样工作。树莓派型号目前分为A\\B型，其中A型的配置较低，不适合生产环境，本人以B+ model为例讲解后面的内容。树莓派目前主要被用于一些简单的WEB服务以及智能设备、由于Python强大的底层库支持，树莓派也常常被用极客们用于改装各种电子元件。\n\n<!-- more -->\n\n_基本配置：5V2A Micro USB接口、512MB内存、HDMI视频输出口、音频叔叔、26针GPIO_\n\n推荐链接：[树莓派入门须知](http://www.shumeipai.net/thread-21180-1-1.html?_dsign=81e52e75)\n\n<a name=\"ecixgc\"></a>\n### 系统安装\n\n略。\n\n<a name=\"rg8qig\"></a>\n### 入门基础\n\n首先，你必须学会使用简单的linux命令以及工具，从上面的系统安装教程我们可以了解到树莓派一般都会带上一个debian系列的linux系统。下面是常用的linux命令和工具：\n\n- ssh：(Secure Shell)顾名思义，在缺少一套完整的键盘鼠标和HDMI显示器的条件下，我们只能通过SSH（当然其他RPC也是被支持的，如telnet，不过树莓派官方提供的系统已自动为我们启动ssh的服务）连接并操作树莓派。\n\n- 简单的文件操作命令：`mkdir`,`rmdir`,`rm`,`cd`,`ls`,`cp`,`mv`等\n\n- 终端文本编辑器：`vi`,`vim`等\n\n- 基本的系统指令：`exit`,`reboot`,`init 0`,`ps`,`ifconfig`等\n\n- 包管理（debian系统为例）：apt-get\n\n- 如果需要远程桌面图形化操作，请安装VNC\n\n\n<a name=\"4786hc\"></a>\n### NAS大致构架简介\n\n- 简介\n\n\nNAS（Network Attached Storage：网络附属存储）即是在网络上提供数据储存的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。本次设计的NAS主要用于公司内文件共享以及定时备份到远端服务器。\n\n- 硬件架构\n\n   1. 树莓派B+*1\n\n   2. 立式硬盘盒子*1\n\n   3. 1TB HDD 3.5inch*1\n\n- 软件和网络环境\n\n   1. os：debian\n\n   2. 基于协议：SMB\n\n   3. 依赖服务：smaba\n\n   4. 基本模块：ntfs-3g、rsync、ssh、crontab\n\n   5. 网络环境：内网静态IP、可访问远端备份服务器\n\n\n",
    "body_draft": "tags: [linux, 树莓派, nas]<br />date: 2015-10-18 19:25:42\n\n---\n\n初探树莓派，便可知道其用途广泛，本篇博文将介绍如何使用树莓派搭建基于Linux和SMB协议的NAS服务器。\n\n<a name=\"el9zps\"></a>\n### 树莓派简介\n\n树莓派（Raspberry pi，简写为RPi，或者RasPi/RPi）是目前比较常见的卡片电脑，为学生计算机编程教育而设计。其系统基于Linux(或者最新发布的Windows 10 IoT)。仅有巴掌大小的PCB板可谓麻雀虽小五脏俱全，可以像普通的PC那样工作。树莓派型号目前分为A\\B型，其中A型的配置较低，不适合生产环境，本人以B+ model为例讲解后面的内容。树莓派目前主要被用于一些简单的WEB服务以及智能设备、由于Python强大的底层库支持，树莓派也常常被用极客们用于改装各种电子元件。\n\n<!-- more -->\n\n_基本配置：5V2A Micro USB接口、512MB内存、HDMI视频输出口、音频叔叔、26针GPIO_\n\n推荐链接：[树莓派入门须知](http://www.shumeipai.net/thread-21180-1-1.html?_dsign=81e52e75)\n\n<a name=\"ecixgc\"></a>\n### 系统安装\n\n略。\n\n<a name=\"rg8qig\"></a>\n### 入门基础\n\n首先，你必须学会使用简单的linux命令以及工具，从上面的系统安装教程我们可以了解到树莓派一般都会带上一个debian系列的linux系统。下面是常用的linux命令和工具：\n\n- ssh：(Secure Shell)顾名思义，在缺少一套完整的键盘鼠标和HDMI显示器的条件下，我们只能通过SSH（当然其他RPC也是被支持的，如telnet，不过树莓派官方提供的系统已自动为我们启动ssh的服务）连接并操作树莓派。\n\n- 简单的文件操作命令：`mkdir`,`rmdir`,`rm`,`cd`,`ls`,`cp`,`mv`等\n\n- 终端文本编辑器：`vi`,`vim`等\n\n- 基本的系统指令：`exit`,`reboot`,`init 0`,`ps`,`ifconfig`等\n\n- 包管理（debian系统为例）：apt-get\n\n- 如果需要远程桌面图形化操作，请安装VNC\n\n\n<a name=\"4786hc\"></a>\n### NAS大致构架简介\n\n- 简介\n\n\nNAS（Network Attached Storage：网络附属存储）即是在网络上提供数据储存的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。本次设计的NAS主要用于公司内文件共享以及定时备份到远端服务器。\n\n- 硬件架构\n\n   1. 树莓派B+*1\n\n   2. 立式硬盘盒子*1\n\n   3. 1TB HDD 3.5inch*1\n\n- 软件和网络环境\n\n   1. os：debian\n\n   2. 基于协议：SMB\n\n   3. 依赖服务：smaba\n\n   4. 基本模块：ntfs-3g、rsync、ssh、crontab\n\n   5. 网络环境：内网静态IP、可访问远端备份服务器\n\n\n",
    "body_html": "<!doctype html><p>tags: [linux, 树莓派, nas]</p><p>date: 2015-10-18 19:25:42</p><hr /><p>初探树莓派，便可知道其用途广泛，本篇博文将介绍如何使用树莓派搭建基于Linux和SMB协议的NAS服务器。</p><p><br /></p><h3 id=\"el9zps\"><a href=\"#el9zps\"></a>树莓派简介</h3><p><br /></p><p>树莓派（Raspberry pi，简写为RPi，或者RasPi/RPi）是目前比较常见的卡片电脑，为学生计算机编程教育而设计。其系统基于Linux(或者最新发布的Windows 10 IoT)。仅有巴掌大小的PCB板可谓麻雀虽小五脏俱全，可以像普通的PC那样工作。树莓派型号目前分为A\\B型，其中A型的配置较低，不适合生产环境，本人以B+ model为例讲解后面的内容。树莓派目前主要被用于一些简单的WEB服务以及智能设备、由于Python强大的底层库支持，树莓派也常常被用极客们用于改装各种电子元件。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p><em>基本配置：5V2A Micro USB接口、512MB内存、HDMI视频输出口、音频叔叔、26针GPIO</em></p><p><br /></p><p>推荐链接：<a href=\"http://www.shumeipai.net/thread-21180-1-1.html?_dsign=81e52e75\" target=\"_blank\">树莓派入门须知</a></p><p><br /></p><h3 id=\"ecixgc\"><a href=\"#ecixgc\"></a>系统安装</h3><p><br /></p><p>略。</p><p><br /></p><h3 id=\"rg8qig\"><a href=\"#rg8qig\"></a>入门基础</h3><p><br /></p><p>首先，你必须学会使用简单的linux命令以及工具，从上面的系统安装教程我们可以了解到树莓派一般都会带上一个debian系列的linux系统。下面是常用的linux命令和工具：</p><p><br /></p><ul><li><p>ssh：(Secure Shell)顾名思义，在缺少一套完整的键盘鼠标和HDMI显示器的条件下，我们只能通过SSH（当然其他RPC也是被支持的，如telnet，不过树莓派官方提供的系统已自动为我们启动ssh的服务）连接并操作树莓派。</p></li></ul><ul><li><p>简单的文件操作命令：<code>mkdir</code>,<code>rmdir</code>,<code>rm</code>,<code>cd</code>,<code>ls</code>,<code>cp</code>,<code>mv</code>等</p></li></ul><ul><li><p>终端文本编辑器：<code>vi</code>,<code>vim</code>等</p></li></ul><ul><li><p>基本的系统指令：<code>exit</code>,<code>reboot</code>,<code>init 0</code>,<code>ps</code>,<code>ifconfig</code>等</p></li></ul><ul><li><p>包管理（debian系统为例）：apt-get</p></li></ul><ul><li><p>如果需要远程桌面图形化操作，请安装VNC</p></li></ul><p><br /></p><h3 id=\"4786hc\"><a href=\"#4786hc\"></a>NAS大致构架简介</h3><p><br /></p><ul><li><p>简介</p></li></ul><p><br /></p><p>NAS（Network Attached Storage：网络附属存储）即是在网络上提供数据储存的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。本次设计的NAS主要用于公司内文件共享以及定时备份到远端服务器。</p><p><br /></p><ul><li><p>硬件架构</p></li></ul><ol start=\"1\" data-lake-indent=\"1\"><li><p>树莓派B+*1</p></li></ol><ol start=\"2\" data-lake-indent=\"1\"><li><p>立式硬盘盒子*1</p></li></ol><ol start=\"3\" data-lake-indent=\"1\"><li><p>1TB HDD 3.5inch*1</p></li></ol><ul><li><p>软件和网络环境</p></li></ul><ol start=\"1\" data-lake-indent=\"1\"><li><p>os：debian</p></li></ol><ol start=\"2\" data-lake-indent=\"1\"><li><p>基于协议：SMB</p></li></ol><ol start=\"3\" data-lake-indent=\"1\"><li><p>依赖服务：smaba</p></li></ol><ol start=\"4\" data-lake-indent=\"1\"><li><p>基本模块：ntfs-3g、rsync、ssh、crontab</p></li></ol><ol start=\"5\" data-lake-indent=\"1\"><li><p>网络环境：内网静态IP、可访问远端备份服务器</p></li></ol><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [linux, 树莓派, nas]</p><p>date: 2015-10-18 19:25:42</p><card type=\"block\" name=\"hr\"></card><p>初探树莓派，便可知道其用途广泛，本篇博文将介绍如何使用树莓派搭建基于Linux和SMB协议的NAS服务器。</p><p><br /></p><h3 id=\"el9zps\"><a href=\"#el9zps\" id=\"树莓派简介\"></a>树莓派简介</h3><p><br /></p><p>树莓派（Raspberry pi，简写为RPi，或者RasPi/RPi）是目前比较常见的卡片电脑，为学生计算机编程教育而设计。其系统基于Linux(或者最新发布的Windows 10 IoT)。仅有巴掌大小的PCB板可谓麻雀虽小五脏俱全，可以像普通的PC那样工作。树莓派型号目前分为A\\B型，其中A型的配置较低，不适合生产环境，本人以B+ model为例讲解后面的内容。树莓派目前主要被用于一些简单的WEB服务以及智能设备、由于Python强大的底层库支持，树莓派也常常被用极客们用于改装各种电子元件。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p><em>基本配置：5V2A Micro USB接口、512MB内存、HDMI视频输出口、音频叔叔、26针GPIO</em></p><p><br /></p><p>推荐链接：<a href=\"http://www.shumeipai.net/thread-21180-1-1.html?_dsign=81e52e75\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">树莓派入门须知</a></p><p><br /></p><h3 id=\"ecixgc\"><a href=\"#ecixgc\" id=\"系统安装\"></a>系统安装</h3><p><br /></p><p>略。</p><p><br /></p><h3 id=\"rg8qig\"><a href=\"#rg8qig\" id=\"入门基础\"></a>入门基础</h3><p><br /></p><p>首先，你必须学会使用简单的linux命令以及工具，从上面的系统安装教程我们可以了解到树莓派一般都会带上一个debian系列的linux系统。下面是常用的linux命令和工具：</p><p><br /></p><ul><li><p>ssh：(Secure Shell)顾名思义，在缺少一套完整的键盘鼠标和HDMI显示器的条件下，我们只能通过SSH（当然其他RPC也是被支持的，如telnet，不过树莓派官方提供的系统已自动为我们启动ssh的服务）连接并操作树莓派。</p></li></ul><ul><li><p>简单的文件操作命令：<code>mkdir</code>,<code>rmdir</code>,<code>rm</code>,<code>cd</code>,<code>ls</code>,<code>cp</code>,<code>mv</code>等</p></li></ul><ul><li><p>终端文本编辑器：<code>vi</code>,<code>vim</code>等</p></li></ul><ul><li><p>基本的系统指令：<code>exit</code>,<code>reboot</code>,<code>init 0</code>,<code>ps</code>,<code>ifconfig</code>等</p></li></ul><ul><li><p>包管理（debian系统为例）：apt-get</p></li></ul><ul><li><p>如果需要远程桌面图形化操作，请安装VNC</p></li></ul><p><br /></p><h3 id=\"4786hc\"><a href=\"#4786hc\" id=\"nas大致构架简介\"></a>NAS大致构架简介</h3><p><br /></p><ul><li><p>简介</p></li></ul><p><br /></p><p>NAS（Network Attached Storage：网络附属存储）即是在网络上提供数据储存的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。本次设计的NAS主要用于公司内文件共享以及定时备份到远端服务器。</p><p><br /></p><ul><li><p>硬件架构</p></li></ul><ol start=\"1\" data-lake-indent=\"1\"><li><p>树莓派B+*1</p></li></ol><ol start=\"2\" data-lake-indent=\"1\"><li><p>立式硬盘盒子*1</p></li></ol><ol start=\"3\" data-lake-indent=\"1\"><li><p>1TB HDD 3.5inch*1</p></li></ol><ul><li><p>软件和网络环境</p></li></ul><ol start=\"1\" data-lake-indent=\"1\"><li><p>os：debian</p></li></ol><ol start=\"2\" data-lake-indent=\"1\"><li><p>基于协议：SMB</p></li></ol><ol start=\"3\" data-lake-indent=\"1\"><li><p>依赖服务：smaba</p></li></ol><ol start=\"4\" data-lake-indent=\"1\"><li><p>基本模块：ntfs-3g、rsync、ssh、crontab</p></li></ol><ol start=\"5\" data-lake-indent=\"1\"><li><p>网络环境：内网静态IP、可访问远端备份服务器</p></li></ol><p><br /></p>",
    "body_draft_lake": "<!doctype lake><p>tags: [linux, 树莓派, nas]</p><p>date: 2015-10-18 19:25:42</p><card type=\"block\" name=\"hr\"></card><p>初探树莓派，便可知道其用途广泛，本篇博文将介绍如何使用树莓派搭建基于Linux和SMB协议的NAS服务器。</p><p><br /></p><h3 id=\"el9zps\"><a href=\"#el9zps\" id=\"树莓派简介\"></a>树莓派简介</h3><p><br /></p><p>树莓派（Raspberry pi，简写为RPi，或者RasPi/RPi）是目前比较常见的卡片电脑，为学生计算机编程教育而设计。其系统基于Linux(或者最新发布的Windows 10 IoT)。仅有巴掌大小的PCB板可谓麻雀虽小五脏俱全，可以像普通的PC那样工作。树莓派型号目前分为A\\B型，其中A型的配置较低，不适合生产环境，本人以B+ model为例讲解后面的内容。树莓派目前主要被用于一些简单的WEB服务以及智能设备、由于Python强大的底层库支持，树莓派也常常被用极客们用于改装各种电子元件。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p><em>基本配置：5V2A Micro USB接口、512MB内存、HDMI视频输出口、音频叔叔、26针GPIO</em></p><p><br /></p><p>推荐链接：<a href=\"http://www.shumeipai.net/thread-21180-1-1.html?_dsign=81e52e75\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">树莓派入门须知</a></p><p><br /></p><h3 id=\"ecixgc\"><a href=\"#ecixgc\" id=\"系统安装\"></a>系统安装</h3><p><br /></p><p>略。</p><p><br /></p><h3 id=\"rg8qig\"><a href=\"#rg8qig\" id=\"入门基础\"></a>入门基础</h3><p><br /></p><p>首先，你必须学会使用简单的linux命令以及工具，从上面的系统安装教程我们可以了解到树莓派一般都会带上一个debian系列的linux系统。下面是常用的linux命令和工具：</p><p><br /></p><ul><li><p>ssh：(Secure Shell)顾名思义，在缺少一套完整的键盘鼠标和HDMI显示器的条件下，我们只能通过SSH（当然其他RPC也是被支持的，如telnet，不过树莓派官方提供的系统已自动为我们启动ssh的服务）连接并操作树莓派。</p></li></ul><ul><li><p>简单的文件操作命令：<code>mkdir</code>,<code>rmdir</code>,<code>rm</code>,<code>cd</code>,<code>ls</code>,<code>cp</code>,<code>mv</code>等</p></li></ul><ul><li><p>终端文本编辑器：<code>vi</code>,<code>vim</code>等</p></li></ul><ul><li><p>基本的系统指令：<code>exit</code>,<code>reboot</code>,<code>init 0</code>,<code>ps</code>,<code>ifconfig</code>等</p></li></ul><ul><li><p>包管理（debian系统为例）：apt-get</p></li></ul><ul><li><p>如果需要远程桌面图形化操作，请安装VNC</p></li></ul><p><br /></p><h3 id=\"4786hc\"><a href=\"#4786hc\" id=\"nas大致构架简介\"></a>NAS大致构架简介</h3><p><br /></p><ul><li><p>简介</p></li></ul><p><br /></p><p>NAS（Network Attached Storage：网络附属存储）即是在网络上提供数据储存的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。本次设计的NAS主要用于公司内文件共享以及定时备份到远端服务器。</p><p><br /></p><ul><li><p>硬件架构</p></li></ul><ol start=\"1\" data-lake-indent=\"1\"><li><p>树莓派B+*1</p></li></ol><ol start=\"2\" data-lake-indent=\"1\"><li><p>立式硬盘盒子*1</p></li></ol><ol start=\"3\" data-lake-indent=\"1\"><li><p>1TB HDD 3.5inch*1</p></li></ol><ul><li><p>软件和网络环境</p></li></ul><ol start=\"1\" data-lake-indent=\"1\"><li><p>os：debian</p></li></ol><ol start=\"2\" data-lake-indent=\"1\"><li><p>基于协议：SMB</p></li></ol><ol start=\"3\" data-lake-indent=\"1\"><li><p>依赖服务：smaba</p></li></ol><ol start=\"4\" data-lake-indent=\"1\"><li><p>基本模块：ntfs-3g、rsync、ssh、crontab</p></li></ol><ol start=\"5\" data-lake-indent=\"1\"><li><p>网络环境：内网静态IP、可访问远端备份服务器</p></li></ol><p><br /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 1,
    "content_updated_at": "2018-09-15T08:17:08.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:40:05.000Z",
    "updated_at": "2020-11-27T08:20:09.000Z",
    "published_at": "2018-09-15T08:17:08.000Z",
    "first_published_at": null,
    "word_count": 705,
    "cover": null,
    "description": "tags: [linux, 树莓派, nas]date: 2015-10-18 19:25:42初探树莓派，便可知道其用途广泛，本篇博文将介绍如何使用树莓派搭建基于Linux和SMB协议的NAS服务器。树莓派简介树莓派（Raspberry pi，简写为RPi，或者RasPi/RPi）是目前比较常见的卡片电脑，为学生计算机编程教育而设计。其系统基于Linux(或者最新发布的Windows 10 IoT)。仅有巴掌大小的PCB板可谓麻雀虽小五脏俱全，可以像普通的PC那样工作。树莓派型号目前分为A\\B型，其中A...",
    "custom_description": null,
    "hits": 192,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709046,
    "slug": "scqgbg",
    "title": "Terminal前后端任务切换",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [linux, shell]<br />date: 2015-01-16\n\n---\n\n我们在使用Linux的终端执行一些调用程序的命令时，经常需要用到进程前后端转换\n\n<a name=\"k3e3de\"></a>\n### 例：\n\n```bash\n$ firefox http://google.com  # 调用火狐浏览器打开页面\n$ gedit grub.cfg  # 经典的gedit用法\n```\n\n这时候我们的程序实际是在前台执行的，这时候对程序的操作能在当前的Terminal查看，这意味着当你关闭Terminal时，你所调用的程序也会自动结束，或者说当你想在当前的Terminal执行其他命令时，企图按下最常用的Ctrl+C结束当前的命令调用，可是此时你所调用的程序依然会自动结束进程。\n\n<!-- more -->\n\n<a name=\"g2o8fm\"></a>\n### 解决方案：\n\n1.在调用命令执行某个程序时，按下Ctrl+Z而不是Ctrl+C，这个时候将进程交还给Terminal以执行其他的命令，但是这时候所执行的程序会处于就绪态(Stopped)，我们无法对其进行操作。\n\n2.执行命令后面加上\"&\"\n\n```bash\n$ gedit grub.cfg &\n```\n\n这时候Terminal依旧会监视程序的一举一动，但是这时候再按下Ctrl+C试试吧。\n\n3.执行jobs命令进行前后端进程的调度\n\n```bash\n$ jobs -l  #列出当前Terminal调用的任务\n[1]-  2382 Stopped                 gedit\n[2]+  2393 Stopped                 firefox\n[3]   2466 Running                 firefox &\n$ fg 1  # 将序号为1的任务，即gedit切换到前台运行\n$ bg 2  # 将firefox切换到后台运行\n$ kill 3  # 类似\"kill pid\"，此处是任务的序号\n```\n\n<a name=\"tlqvxm\"></a>\n### 小结：\n\n- 前台执行的任务即使是通过Ctrl+Z也会将任务调度到就绪状态(Stopped)\n\n- 在命令后附加\"&\"实际上相当于执行任务调度\"bg n\"\n\n- 前台程序可以先通过Ctrl+Z转换到就绪态,再通过\"bg n\"命令调度到后台运行\n\n- 后天程序可以转到前台，方便Terminal监视程序的变化\n\n\n",
    "body_draft": "tags: [linux, shell]\ndate: 2015-01-16\n\n---\n\n我们在使用Linux的终端执行一些调用程序的命令时，经常需要用到进程前后端转换\n\n### <a name=\"k3e3de\"></a>例：\n\n```bash\n$ firefox http://google.com  # 调用火狐浏览器打开页面\n$ gedit grub.cfg  # 经典的gedit用法\n```\n\n这时候我们的程序实际是在前台执行的，这时候对程序的操作能在当前的Terminal查看，这意味着当你关闭Terminal时，你所调用的程序也会自动结束，或者说当你想在当前的Terminal执行其他命令时，企图按下最常用的Ctrl+C结束当前的命令调用，可是此时你所调用的程序依然会自动结束进程。\n\n<!-- more -->\n\n### <a name=\"g2o8fm\"></a>解决方案：\n\n1.在调用命令执行某个程序时，按下Ctrl+Z而不是Ctrl+C，这个时候将进程交还给Terminal以执行其他的命令，但是这时候所执行的程序会处于就绪态(Stopped)，我们无法对其进行操作。\n\n2.执行命令后面加上\"&\"\n\n```bash\n$ gedit grub.cfg &\n```\n\n这时候Terminal依旧会监视程序的一举一动，但是这时候再按下Ctrl+C试试吧。\n\n3.执行jobs命令进行前后端进程的调度\n\n```bash\n$ jobs -l  #列出当前Terminal调用的任务\n[1]-  2382 Stopped                 gedit\n[2]+  2393 Stopped                 firefox\n[3]   2466 Running                 firefox &\n$ fg 1  # 将序号为1的任务，即gedit切换到前台运行\n$ bg 2  # 将firefox切换到后台运行\n$ kill 3  # 类似\"kill pid\"，此处是任务的序号\n```\n\n### <a name=\"tlqvxm\"></a>小结：\n\n* 前台执行的任务即使是通过Ctrl+Z也会将任务调度到就绪状态(Stopped)\n* 在命令后附加\"&\"实际上相当于执行任务调度\"bg n\"\n* 前台程序可以先通过Ctrl+Z转换到就绪态,再通过\"bg n\"命令调度到后台运行\n* 后天程序可以转到前台，方便Terminal监视程序的变化\n\n",
    "body_html": "<p>tags: [linux, shell]</p><p>date: 2015-01-16</p><hr /><p>我们在使用Linux的终端执行一些调用程序的命令时，经常需要用到进程前后端转换</p><p><br /></p><h3 id=\"k3e3de\"><a href=\"#k3e3de\"></a>例：</h3><p><br /></p><pre data-lang=\"bash\"><code>$ firefox http://google.com  # 调用火狐浏览器打开页面\n$ gedit grub.cfg  # 经典的gedit用法</code></pre><p><br /></p><p>这时候我们的程序实际是在前台执行的，这时候对程序的操作能在当前的Terminal查看，这意味着当你关闭Terminal时，你所调用的程序也会自动结束，或者说当你想在当前的Terminal执行其他命令时，企图按下最常用的Ctrl+C结束当前的命令调用，可是此时你所调用的程序依然会自动结束进程。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"g2o8fm\"><a href=\"#g2o8fm\"></a>解决方案：</h3><p><br /></p><p>1.在调用命令执行某个程序时，按下Ctrl+Z而不是Ctrl+C，这个时候将进程交还给Terminal以执行其他的命令，但是这时候所执行的程序会处于就绪态(Stopped)，我们无法对其进行操作。</p><p><br /></p><p>2.执行命令后面加上&quot;&amp;&quot;</p><p><br /></p><pre data-lang=\"bash\"><code>$ gedit grub.cfg &amp;</code></pre><p><br /></p><p>这时候Terminal依旧会监视程序的一举一动，但是这时候再按下Ctrl+C试试吧。</p><p><br /></p><p>3.执行jobs命令进行前后端进程的调度</p><p><br /></p><pre data-lang=\"bash\"><code>$ jobs -l  #列出当前Terminal调用的任务\n[1]-  2382 Stopped                 gedit\n[2]+  2393 Stopped                 firefox\n[3]   2466 Running                 firefox &amp;\n$ fg 1  # 将序号为1的任务，即gedit切换到前台运行\n$ bg 2  # 将firefox切换到后台运行\n$ kill 3  # 类似&quot;kill pid&quot;，此处是任务的序号</code></pre><p><br /></p><h3 id=\"tlqvxm\"><a href=\"#tlqvxm\"></a>小结：</h3><p><br /></p><ul><li><p>前台执行的任务即使是通过Ctrl+Z也会将任务调度到就绪状态(Stopped)</p></li></ul><ul><li><p>在命令后附加&quot;&amp;&quot;实际上相当于执行任务调度&quot;bg n&quot;</p></li></ul><ul><li><p>前台程序可以先通过Ctrl+Z转换到就绪态,再通过&quot;bg n&quot;命令调度到后台运行</p></li></ul><ul><li><p>后天程序可以转到前台，方便Terminal监视程序的变化</p></li></ul><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [linux, shell]</p><p>date: 2015-01-16</p><card type=\"block\" name=\"hr\"></card><p>我们在使用Linux的终端执行一些调用程序的命令时，经常需要用到进程前后端转换</p><p><br /></p><h3 id=\"k3e3de\"><a href=\"#k3e3de\" id=\"例：\"></a>例：</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b8269708%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%24%20firefox%20http%3A%2F%2Fgoogle.com%20%20%23%20%E8%B0%83%E7%94%A8%E7%81%AB%E7%8B%90%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E9%A1%B5%E9%9D%A2%5Cn%24%20gedit%20grub.cfg%20%20%23%20%E7%BB%8F%E5%85%B8%E7%9A%84gedit%E7%94%A8%E6%B3%95%22%7D\"></card><p><br /></p><p>这时候我们的程序实际是在前台执行的，这时候对程序的操作能在当前的Terminal查看，这意味着当你关闭Terminal时，你所调用的程序也会自动结束，或者说当你想在当前的Terminal执行其他命令时，企图按下最常用的Ctrl+C结束当前的命令调用，可是此时你所调用的程序依然会自动结束进程。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"g2o8fm\"><a href=\"#g2o8fm\" id=\"解决方案：\"></a>解决方案：</h3><p><br /></p><p>1.在调用命令执行某个程序时，按下Ctrl+Z而不是Ctrl+C，这个时候将进程交还给Terminal以执行其他的命令，但是这时候所执行的程序会处于就绪态(Stopped)，我们无法对其进行操作。</p><p><br /></p><p>2.执行命令后面加上&quot;&amp;&quot;</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%229fcd1d1b%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%24%20gedit%20grub.cfg%20%26%22%7D\"></card><p><br /></p><p>这时候Terminal依旧会监视程序的一举一动，但是这时候再按下Ctrl+C试试吧。</p><p><br /></p><p>3.执行jobs命令进行前后端进程的调度</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2234bd23dc%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%24%20jobs%20-l%20%20%23%E5%88%97%E5%87%BA%E5%BD%93%E5%89%8DTerminal%E8%B0%83%E7%94%A8%E7%9A%84%E4%BB%BB%E5%8A%A1%5Cn%5B1%5D-%20%202382%20Stopped%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20gedit%5Cn%5B2%5D%2B%20%202393%20Stopped%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20firefox%5Cn%5B3%5D%20%20%202466%20Running%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20firefox%20%26%5Cn%24%20fg%201%20%20%23%20%E5%B0%86%E5%BA%8F%E5%8F%B7%E4%B8%BA1%E7%9A%84%E4%BB%BB%E5%8A%A1%EF%BC%8C%E5%8D%B3gedit%E5%88%87%E6%8D%A2%E5%88%B0%E5%89%8D%E5%8F%B0%E8%BF%90%E8%A1%8C%5Cn%24%20bg%202%20%20%23%20%E5%B0%86firefox%E5%88%87%E6%8D%A2%E5%88%B0%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%5Cn%24%20kill%203%20%20%23%20%E7%B1%BB%E4%BC%BC%5C%22kill%20pid%5C%22%EF%BC%8C%E6%AD%A4%E5%A4%84%E6%98%AF%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%BA%8F%E5%8F%B7%22%7D\"></card><p><br /></p><h3 id=\"tlqvxm\"><a href=\"#tlqvxm\" id=\"小结：\"></a>小结：</h3><p><br /></p><ul><li><p>前台执行的任务即使是通过Ctrl+Z也会将任务调度到就绪状态(Stopped)</p></li></ul><ul><li><p>在命令后附加&quot;&amp;&quot;实际上相当于执行任务调度&quot;bg n&quot;</p></li></ul><ul><li><p>前台程序可以先通过Ctrl+Z转换到就绪态,再通过&quot;bg n&quot;命令调度到后台运行</p></li></ul><ul><li><p>后天程序可以转到前台，方便Terminal监视程序的变化</p></li></ul><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [linux, shell]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-01-16\"],[\"hr\",{\"id\":\"9w3odo\"}],[\"div\",{\"data-type\":\"p\"},\"我们在使用Linux的终端执行一些调用程序的命令时，经常需要用到进程前后端转换\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"k3e3de\"},\"例：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"bash\"},\"$ firefox http://google.com  # 调用火狐浏览器打开页面\\n\",\"$ gedit grub.cfg  # 经典的gedit用法\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"这时候我们的程序实际是在前台执行的，这时候对程序的操作能在当前的Terminal查看，这意味着当你关闭Terminal时，你所调用的程序也会自动结束，或者说当你想在当前的Terminal执行其他命令时，企图按下最常用的Ctrl+C结束当前的命令调用，可是此时你所调用的程序依然会自动结束进程。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"g2o8fm\"},\"解决方案：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"1.在调用命令执行某个程序时，按下Ctrl+Z而不是Ctrl+C，这个时候将进程交还给Terminal以执行其他的命令，但是这时候所执行的程序会处于就绪态(Stopped)，我们无法对其进行操作。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"2.执行命令后面加上\\\"&\\\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"bash\"},\"$ gedit grub.cfg &\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"这时候Terminal依旧会监视程序的一举一动，但是这时候再按下Ctrl+C试试吧。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"3.执行jobs命令进行前后端进程的调度\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"bash\"},\"$ jobs -l  #列出当前Terminal调用的任务\\n\",\"[1]-  2382 Stopped                 gedit\\n\",\"[2]+  2393 Stopped                 firefox\\n\",\"[3]   2466 Running                 firefox &\\n\",\"$ fg 1  # 将序号为1的任务，即gedit切换到前台运行\\n\",\"$ bg 2  # 将firefox切换到后台运行\\n\",\"$ kill 3  # 类似\\\"kill pid\\\"，此处是任务的序号\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"tlqvxm\"},\"小结：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"前台执行的任务即使是通过Ctrl+Z也会将任务调度到就绪状态(Stopped)\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"在命令后附加\\\"&\\\"实际上相当于执行任务调度\\\"bg n\\\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"前台程序可以先通过Ctrl+Z转换到就绪态,再通过\\\"bg n\\\"命令调度到后台运行\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"后天程序可以转到前台，方便Terminal监视程序的变化\"]]],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:16:34.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:39:33.000Z",
    "updated_at": "2019-06-07T13:29:51.000Z",
    "published_at": "2018-09-15T08:16:34.000Z",
    "first_published_at": null,
    "word_count": 497,
    "cover": null,
    "description": "tags: [linux, shell]date: 2015-01-16我们在使用Linux的终端执行一些调用程序的命令时，经常需要用到进程前后端转换例：$ firefox http://google.com  # 调用火狐浏览器打开页面 $ gedit grub.cfg  # 经典的gedit用法 这时候我们的程序实际是在前台执行的，这时候对程序的操作能在当前的Terminal查看，这意味着当你关闭Terminal时，你所调用的程序也会自动结束，或者说当你想在当前的Terminal...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709045,
    "slug": "xp4ubp",
    "title": "VHD安装系统【概念】",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [计算机维护]<br />date: 2015-01-22\n\n---\n\n<a name=\"ic0loc\"></a>\n### VHD简介\n\n```\nVHD，全称 Virtual Hard Disk ，正如其中文翻译，即是虚拟硬盘[powered by微软]。\n简而言之，就是用一个硬盘上的文件来模拟和管理一个全新的物理磁盘，是虚拟化技术的一大利器。\n```\n\n<a name=\"8ks4ee\"></a>\n### 分类(win7下只有固定VHD和动态VHD两种)\n\n```\n固定VHD：对已分配的大小不会更改。\n动态VHD：大小与写入的数据大小相同，并随着数据的写入而相应增加直到达到大小上限。动态VHD上限为2,040 GB。\n差异 VHD ：与动态VHD 类似，但只包含所关联父VHD修改后的磁盘块。差异VHD的上限为2,040 GB。[1]\n链接硬盘VHD：文件本身指向一个磁盘或者一个分区。\n```\n\n<!-- more -->\n\n<a name=\"8o3gle\"></a>\n### 功能广泛\n\n- 安装无盘操作系统，是公共场合（如网吧）非常适合使用这项技术。特点是维护方便，因为在虚拟硬盘的操作系统进行的操作几乎不会对计算机本身造成影响，而且这意味这客户端机子可以不需要配备硬盘而是直接通过NETBIOS等手段从服务器端进行引导。\n\n- 安装多个操作系统，从其他计算机直接克隆操作系统。由于是用一个或者多个文件来管理一整个硬盘，因此对硬盘的整体转移和克隆变得非常地简单，甚至可以说移植一个VHD的操作系统只需要拷贝这个磁盘文件（占用空间略大），然后进行引导修复便可。\n\n- 给虚拟机使用并可以作为一个独立的系统测试空间，例如一些高危的病毒文件行为分析，便可以通过使用此VHD的虚拟机进行测试，然后通过物理机直接读取日志。\n\n\n<a name=\"nvzubu\"></a>\n### 安装系统\n\n- 可以采用传统的各种方式来安装操作系统，不过在这之前需要提前装载好磁盘。\n\n- 添加引导文件的时候需要注意系统所在分区（或者引导分区）所在的路径，格式为(hd(n,m)[n为硬盘序号，m为分区序号])，当然你也可以直接用bcd添加已经装载此磁盘的盘符进行引导添加，这将会自动拓展到一个完整的分区路径(hd(n,m))。\n\n- 硬盘分区表格式需要和计算机自带的硬盘格式一致，如果你的计算机是GPT分区+UEFI，那么你最好选择把虚拟硬盘的格式设置为GPT格式。\n\n\n<a name=\"gc9qxq\"></a>\n### 管理工具DISKPART\n\n```bash\n>\\ diskpart\n\n::创建VHD\n>\\ create vdisk file=D:\\win7.vhd maximum=15000 type=fixed\n\n::选择VHD\n>\\ select vdisk file=D:\\win7.vhd\n\n::装载VHD\n>\\ attach vdisk\n\n::建立分区\n>\\ create partition primary\n\n::给分区分配盘符\n>\\ assign letter=v\n\n::格式化分区\n>\\ format quick lable=vhddWin\n\n::无损扩容\n>\\ diskpart\n>\\ sel vdisk file=D:\\win7.vhd\n>\\ expand vdisk maximum=20000\n>\\ list vol\n>\\ sel vol 4\n>\\ extend\n\n::退出diskpart\n>\\ exit\n```\n\n",
    "body_draft": "tags: [计算机维护]\ndate: 2015-01-22\n\n---\n\n### <a name=\"ic0loc\"></a>VHD简介\n\n```\nVHD，全称 Virtual Hard Disk ，正如其中文翻译，即是虚拟硬盘[powered by微软]。\n简而言之，就是用一个硬盘上的文件来模拟和管理一个全新的物理磁盘，是虚拟化技术的一大利器。\n```\n\n### <a name=\"8ks4ee\"></a>分类(win7下只有固定VHD和动态VHD两种)\n\n```\n固定VHD：对已分配的大小不会更改。\n动态VHD：大小与写入的数据大小相同，并随着数据的写入而相应增加直到达到大小上限。动态VHD上限为2,040 GB。\n差异 VHD ：与动态VHD 类似，但只包含所关联父VHD修改后的磁盘块。差异VHD的上限为2,040 GB。[1]\n链接硬盘VHD：文件本身指向一个磁盘或者一个分区。\n```\n\n<!-- more -->\n\n### <a name=\"8o3gle\"></a>功能广泛\n\n* 安装无盘操作系统，是公共场合（如网吧）非常适合使用这项技术。特点是维护方便，因为在虚拟硬盘的操作系统进行的操作几乎不会对计算机本身造成影响，而且这意味这客户端机子可以不需要配备硬盘而是直接通过NETBIOS等手段从服务器端进行引导。\n* 安装多个操作系统，从其他计算机直接克隆操作系统。由于是用一个或者多个文件来管理一整个硬盘，因此对硬盘的整体转移和克隆变得非常地简单，甚至可以说移植一个VHD的操作系统只需要拷贝这个磁盘文件（占用空间略大），然后进行引导修复便可。\n* 给虚拟机使用并可以作为一个独立的系统测试空间，例如一些高危的病毒文件行为分析，便可以通过使用此VHD的虚拟机进行测试，然后通过物理机直接读取日志。\n\n### <a name=\"nvzubu\"></a>安装系统\n\n* 可以采用传统的各种方式来安装操作系统，不过在这之前需要提前装载好磁盘。\n* 添加引导文件的时候需要注意系统所在分区（或者引导分区）所在的路径，格式为(hd(n,m)[n为硬盘序号，m为分区序号])，当然你也可以直接用bcd添加已经装载此磁盘的盘符进行引导添加，这将会自动拓展到一个完整的分区路径(hd(n,m))。\n* 硬盘分区表格式需要和计算机自带的硬盘格式一致，如果你的计算机是GPT分区+UEFI，那么你最好选择把虚拟硬盘的格式设置为GPT格式。\n\n### <a name=\"gc9qxq\"></a>管理工具DISKPART\n\n```Bash\n>\\ diskpart\n\n::创建VHD\n>\\ create vdisk file=D:\\win7.vhd maximum=15000 type=fixed\n\n::选择VHD\n>\\ select vdisk file=D:\\win7.vhd\n\n::装载VHD\n>\\ attach vdisk\n\n::建立分区\n>\\ create partition primary\n\n::给分区分配盘符\n>\\ assign letter=v\n\n::格式化分区\n>\\ format quick lable=vhddWin\n\n::无损扩容\n>\\ diskpart\n>\\ sel vdisk file=D:\\win7.vhd\n>\\ expand vdisk maximum=20000\n>\\ list vol\n>\\ sel vol 4\n>\\ extend\n\n::退出diskpart\n>\\ exit\n```\n\n",
    "body_html": "<p>tags: [计算机维护]</p><p>date: 2015-01-22</p><hr /><h3 id=\"ic0loc\"><a href=\"#ic0loc\"></a>VHD简介</h3><p><br /></p><pre><code>VHD，全称 Virtual Hard Disk ，正如其中文翻译，即是虚拟硬盘[powered by微软]。\n简而言之，就是用一个硬盘上的文件来模拟和管理一个全新的物理磁盘，是虚拟化技术的一大利器。</code></pre><p><br /></p><h3 id=\"8ks4ee\"><a href=\"#8ks4ee\"></a>分类(win7下只有固定VHD和动态VHD两种)</h3><p><br /></p><pre><code>固定VHD：对已分配的大小不会更改。\n动态VHD：大小与写入的数据大小相同，并随着数据的写入而相应增加直到达到大小上限。动态VHD上限为2,040 GB。\n差异 VHD ：与动态VHD 类似，但只包含所关联父VHD修改后的磁盘块。差异VHD的上限为2,040 GB。[1]\n链接硬盘VHD：文件本身指向一个磁盘或者一个分区。</code></pre><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"8o3gle\"><a href=\"#8o3gle\"></a>功能广泛</h3><p><br /></p><ul><li><p>安装无盘操作系统，是公共场合（如网吧）非常适合使用这项技术。特点是维护方便，因为在虚拟硬盘的操作系统进行的操作几乎不会对计算机本身造成影响，而且这意味这客户端机子可以不需要配备硬盘而是直接通过NETBIOS等手段从服务器端进行引导。</p></li></ul><ul><li><p>安装多个操作系统，从其他计算机直接克隆操作系统。由于是用一个或者多个文件来管理一整个硬盘，因此对硬盘的整体转移和克隆变得非常地简单，甚至可以说移植一个VHD的操作系统只需要拷贝这个磁盘文件（占用空间略大），然后进行引导修复便可。</p></li></ul><ul><li><p>给虚拟机使用并可以作为一个独立的系统测试空间，例如一些高危的病毒文件行为分析，便可以通过使用此VHD的虚拟机进行测试，然后通过物理机直接读取日志。</p></li></ul><p><br /></p><h3 id=\"nvzubu\"><a href=\"#nvzubu\"></a>安装系统</h3><p><br /></p><ul><li><p>可以采用传统的各种方式来安装操作系统，不过在这之前需要提前装载好磁盘。</p></li></ul><ul><li><p>添加引导文件的时候需要注意系统所在分区（或者引导分区）所在的路径，格式为(hd(n,m)[n为硬盘序号，m为分区序号])，当然你也可以直接用bcd添加已经装载此磁盘的盘符进行引导添加，这将会自动拓展到一个完整的分区路径(hd(n,m))。</p></li></ul><ul><li><p>硬盘分区表格式需要和计算机自带的硬盘格式一致，如果你的计算机是GPT分区+UEFI，那么你最好选择把虚拟硬盘的格式设置为GPT格式。</p></li></ul><p><br /></p><h3 id=\"gc9qxq\"><a href=\"#gc9qxq\"></a>管理工具DISKPART</h3><p><br /></p><pre data-lang=\"bash\"><code>&gt;\\ diskpart\n\n::创建VHD\n&gt;\\ create vdisk file=D:\\win7.vhd maximum=15000 type=fixed\n\n::选择VHD\n&gt;\\ select vdisk file=D:\\win7.vhd\n\n::装载VHD\n&gt;\\ attach vdisk\n\n::建立分区\n&gt;\\ create partition primary\n\n::给分区分配盘符\n&gt;\\ assign letter=v\n\n::格式化分区\n&gt;\\ format quick lable=vhddWin\n\n::无损扩容\n&gt;\\ diskpart\n&gt;\\ sel vdisk file=D:\\win7.vhd\n&gt;\\ expand vdisk maximum=20000\n&gt;\\ list vol\n&gt;\\ sel vol 4\n&gt;\\ extend\n\n::退出diskpart\n&gt;\\ exit</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [计算机维护]</p><p>date: 2015-01-22</p><card type=\"block\" name=\"hr\"></card><h3 id=\"ic0loc\"><a href=\"#ic0loc\" id=\"vhd简介\"></a>VHD简介</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%229366ded3%22%2C%22code%22%3A%22VHD%EF%BC%8C%E5%85%A8%E7%A7%B0%20Virtual%20Hard%20Disk%20%EF%BC%8C%E6%AD%A3%E5%A6%82%E5%85%B6%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91%EF%BC%8C%E5%8D%B3%E6%98%AF%E8%99%9A%E6%8B%9F%E7%A1%AC%E7%9B%98%5Bpowered%20by%E5%BE%AE%E8%BD%AF%5D%E3%80%82%5Cn%E7%AE%80%E8%80%8C%E8%A8%80%E4%B9%8B%EF%BC%8C%E5%B0%B1%E6%98%AF%E7%94%A8%E4%B8%80%E4%B8%AA%E7%A1%AC%E7%9B%98%E4%B8%8A%E7%9A%84%E6%96%87%E4%BB%B6%E6%9D%A5%E6%A8%A1%E6%8B%9F%E5%92%8C%E7%AE%A1%E7%90%86%E4%B8%80%E4%B8%AA%E5%85%A8%E6%96%B0%E7%9A%84%E7%89%A9%E7%90%86%E7%A3%81%E7%9B%98%EF%BC%8C%E6%98%AF%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E7%9A%84%E4%B8%80%E5%A4%A7%E5%88%A9%E5%99%A8%E3%80%82%22%7D\"></card><p><br /></p><h3 id=\"8ks4ee\"><a href=\"#8ks4ee\" id=\"分类(win7下只有固定vhd和动态vhd两种)\"></a>分类(win7下只有固定VHD和动态VHD两种)</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%221a0ce32a%22%2C%22code%22%3A%22%E5%9B%BA%E5%AE%9AVHD%EF%BC%9A%E5%AF%B9%E5%B7%B2%E5%88%86%E9%85%8D%E7%9A%84%E5%A4%A7%E5%B0%8F%E4%B8%8D%E4%BC%9A%E6%9B%B4%E6%94%B9%E3%80%82%5Cn%E5%8A%A8%E6%80%81VHD%EF%BC%9A%E5%A4%A7%E5%B0%8F%E4%B8%8E%E5%86%99%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%A7%E5%B0%8F%E7%9B%B8%E5%90%8C%EF%BC%8C%E5%B9%B6%E9%9A%8F%E7%9D%80%E6%95%B0%E6%8D%AE%E7%9A%84%E5%86%99%E5%85%A5%E8%80%8C%E7%9B%B8%E5%BA%94%E5%A2%9E%E5%8A%A0%E7%9B%B4%E5%88%B0%E8%BE%BE%E5%88%B0%E5%A4%A7%E5%B0%8F%E4%B8%8A%E9%99%90%E3%80%82%E5%8A%A8%E6%80%81VHD%E4%B8%8A%E9%99%90%E4%B8%BA2%2C040%20GB%E3%80%82%5Cn%E5%B7%AE%E5%BC%82%20VHD%20%EF%BC%9A%E4%B8%8E%E5%8A%A8%E6%80%81VHD%20%E7%B1%BB%E4%BC%BC%EF%BC%8C%E4%BD%86%E5%8F%AA%E5%8C%85%E5%90%AB%E6%89%80%E5%85%B3%E8%81%94%E7%88%B6VHD%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E7%A3%81%E7%9B%98%E5%9D%97%E3%80%82%E5%B7%AE%E5%BC%82VHD%E7%9A%84%E4%B8%8A%E9%99%90%E4%B8%BA2%2C040%20GB%E3%80%82%5B1%5D%5Cn%E9%93%BE%E6%8E%A5%E7%A1%AC%E7%9B%98VHD%EF%BC%9A%E6%96%87%E4%BB%B6%E6%9C%AC%E8%BA%AB%E6%8C%87%E5%90%91%E4%B8%80%E4%B8%AA%E7%A3%81%E7%9B%98%E6%88%96%E8%80%85%E4%B8%80%E4%B8%AA%E5%88%86%E5%8C%BA%E3%80%82%22%7D\"></card><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"8o3gle\"><a href=\"#8o3gle\" id=\"功能广泛\"></a>功能广泛</h3><p><br /></p><ul><li><p>安装无盘操作系统，是公共场合（如网吧）非常适合使用这项技术。特点是维护方便，因为在虚拟硬盘的操作系统进行的操作几乎不会对计算机本身造成影响，而且这意味这客户端机子可以不需要配备硬盘而是直接通过NETBIOS等手段从服务器端进行引导。</p></li></ul><ul><li><p>安装多个操作系统，从其他计算机直接克隆操作系统。由于是用一个或者多个文件来管理一整个硬盘，因此对硬盘的整体转移和克隆变得非常地简单，甚至可以说移植一个VHD的操作系统只需要拷贝这个磁盘文件（占用空间略大），然后进行引导修复便可。</p></li></ul><ul><li><p>给虚拟机使用并可以作为一个独立的系统测试空间，例如一些高危的病毒文件行为分析，便可以通过使用此VHD的虚拟机进行测试，然后通过物理机直接读取日志。</p></li></ul><p><br /></p><h3 id=\"nvzubu\"><a href=\"#nvzubu\" id=\"安装系统\"></a>安装系统</h3><p><br /></p><ul><li><p>可以采用传统的各种方式来安装操作系统，不过在这之前需要提前装载好磁盘。</p></li></ul><ul><li><p>添加引导文件的时候需要注意系统所在分区（或者引导分区）所在的路径，格式为(hd(n,m)[n为硬盘序号，m为分区序号])，当然你也可以直接用bcd添加已经装载此磁盘的盘符进行引导添加，这将会自动拓展到一个完整的分区路径(hd(n,m))。</p></li></ul><ul><li><p>硬盘分区表格式需要和计算机自带的硬盘格式一致，如果你的计算机是GPT分区+UEFI，那么你最好选择把虚拟硬盘的格式设置为GPT格式。</p></li></ul><p><br /></p><h3 id=\"gc9qxq\"><a href=\"#gc9qxq\" id=\"管理工具diskpart\"></a>管理工具DISKPART</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%220e10533e%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%3E%5C%5C%20diskpart%5Cn%5Cn%3A%3A%E5%88%9B%E5%BB%BAVHD%5Cn%3E%5C%5C%20create%20vdisk%20file%3DD%3A%5C%5Cwin7.vhd%20maximum%3D15000%20type%3Dfixed%5Cn%5Cn%3A%3A%E9%80%89%E6%8B%A9VHD%5Cn%3E%5C%5C%20select%20vdisk%20file%3DD%3A%5C%5Cwin7.vhd%5Cn%5Cn%3A%3A%E8%A3%85%E8%BD%BDVHD%5Cn%3E%5C%5C%20attach%20vdisk%5Cn%5Cn%3A%3A%E5%BB%BA%E7%AB%8B%E5%88%86%E5%8C%BA%5Cn%3E%5C%5C%20create%20partition%20primary%5Cn%5Cn%3A%3A%E7%BB%99%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%9B%98%E7%AC%A6%5Cn%3E%5C%5C%20assign%20letter%3Dv%5Cn%5Cn%3A%3A%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%88%86%E5%8C%BA%5Cn%3E%5C%5C%20format%20quick%20lable%3DvhddWin%5Cn%5Cn%3A%3A%E6%97%A0%E6%8D%9F%E6%89%A9%E5%AE%B9%5Cn%3E%5C%5C%20diskpart%5Cn%3E%5C%5C%20sel%20vdisk%20file%3DD%3A%5C%5Cwin7.vhd%5Cn%3E%5C%5C%20expand%20vdisk%20maximum%3D20000%5Cn%3E%5C%5C%20list%20vol%5Cn%3E%5C%5C%20sel%20vol%204%5Cn%3E%5C%5C%20extend%5Cn%5Cn%3A%3A%E9%80%80%E5%87%BAdiskpart%5Cn%3E%5C%5C%20exit%22%7D\"></card><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [计算机维护]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-01-22\"],[\"hr\",{\"id\":\"a5zrdd\"}],[\"h3\",{\"id\":\"ic0loc\"},\"VHD简介\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"VHD，全称 Virtual Hard Disk ，正如其中文翻译，即是虚拟硬盘[powered by微软]。\\n\",\"简而言之，就是用一个硬盘上的文件来模拟和管理一个全新的物理磁盘，是虚拟化技术的一大利器。\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"8ks4ee\"},\"分类(win7下只有固定VHD和动态VHD两种)\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"固定VHD：对已分配的大小不会更改。\\n\",\"动态VHD：大小与写入的数据大小相同，并随着数据的写入而相应增加直到达到大小上限。动态VHD上限为2,040 GB。\\n\",\"差异 VHD ：与动态VHD 类似，但只包含所关联父VHD修改后的磁盘块。差异VHD的上限为2,040 GB。[1]\\n\",\"链接硬盘VHD：文件本身指向一个磁盘或者一个分区。\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"8o3gle\"},\"功能广泛\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"安装无盘操作系统，是公共场合（如网吧）非常适合使用这项技术。特点是维护方便，因为在虚拟硬盘的操作系统进行的操作几乎不会对计算机本身造成影响，而且这意味这客户端机子可以不需要配备硬盘而是直接通过NETBIOS等手段从服务器端进行引导。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"安装多个操作系统，从其他计算机直接克隆操作系统。由于是用一个或者多个文件来管理一整个硬盘，因此对硬盘的整体转移和克隆变得非常地简单，甚至可以说移植一个VHD的操作系统只需要拷贝这个磁盘文件（占用空间略大），然后进行引导修复便可。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"给虚拟机使用并可以作为一个独立的系统测试空间，例如一些高危的病毒文件行为分析，便可以通过使用此VHD的虚拟机进行测试，然后通过物理机直接读取日志。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"nvzubu\"},\"安装系统\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"可以采用传统的各种方式来安装操作系统，不过在这之前需要提前装载好磁盘。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"添加引导文件的时候需要注意系统所在分区（或者引导分区）所在的路径，格式为(hd(n,m)[n为硬盘序号，m为分区序号])，当然你也可以直接用bcd添加已经装载此磁盘的盘符进行引导添加，这将会自动拓展到一个完整的分区路径(hd(n,m))。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"硬盘分区表格式需要和计算机自带的硬盘格式一致，如果你的计算机是GPT分区+UEFI，那么你最好选择把虚拟硬盘的格式设置为GPT格式。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"gc9qxq\"},\"管理工具DISKPART\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\">\\\\ diskpart\\n\",\"\\n\",\"::创建VHD\\n\",\">\\\\ create vdisk file=D:\\\\win7.vhd maximum=15000 type=fixed\\n\",\"\\n\",\"::选择VHD\\n\",\">\\\\ select vdisk file=D:\\\\win7.vhd\\n\",\"\\n\",\"::装载VHD\\n\",\">\\\\ attach vdisk\\n\",\"\\n\",\"::建立分区\\n\",\">\\\\ create partition primary\\n\",\"\\n\",\"::给分区分配盘符\\n\",\">\\\\ assign letter=v\\n\",\"\\n\",\"::格式化分区\\n\",\">\\\\ format quick lable=vhddWin\\n\",\"\\n\",\"::无损扩容\\n\",\">\\\\ diskpart\\n\",\">\\\\ sel vdisk file=D:\\\\win7.vhd\\n\",\">\\\\ expand vdisk maximum=20000\\n\",\">\\\\ list vol\\n\",\">\\\\ sel vol 4\\n\",\">\\\\ extend\\n\",\"\\n\",\"::退出diskpart\\n\",\">\\\\ exit\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T09:36:48.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:39:01.000Z",
    "updated_at": "2019-12-03T08:10:31.000Z",
    "published_at": "2018-09-15T09:36:48.000Z",
    "first_published_at": null,
    "word_count": 767,
    "cover": null,
    "description": "tags: [计算机维护]date: 2015-01-22VHD简介VHD，全称 Virtual Hard Disk ，正如其中文翻译，即是虚拟硬盘[powered by微软]。 简而言之，就是用一个硬盘上的文件来模拟和管理一个全新的物理磁盘，是虚拟化技术的一大利器。 分类(win7下只有固定VHD和动态VHD两种)固定VHD：对已分配的大小不会更改。 动态VHD：大小与写入的数据大小相同，并随着数据的写入而相应增加直到达到大小上限。动态VHD上限为2,040 GB。 差异 VHD ：与动态VHD...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709043,
    "slug": "gud1gc",
    "title": "imagex.exe花式装系统",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [计算机维护]<br />date: 2015-01-20\n\n---\n\n<a name=\"wqiyvt\"></a>\n### imagex.exe简介\n\nimagex.exe是一款用来捕获、修改和应用基于文件的磁盘映像以进行快速部署。ImageX可以使用 Windows 映像 (.wim) 文件复制到网络，或者还可以使用其他利用 .wim 映像的技术，如 Windows 安装程序、Windows 部署服务 (Windows DS) 以及系统管理服务器 (SMS) 操作系统功能部署包。\n\n<!-- more -->\n\n<a name=\"ughyat\"></a>\n### 帮助文档\n\n```bash\n\\> imagex /help\t\t#查看帮助文档\nImageX Tool for Windows\nCopyright (C) Microsoft Corp. All rights reserved.\nVersion: 6.1.7600.16385\n\nIMAGEX [Flags] /Operation [Parameter List]\n\n  Operation [ APPEND  | APPLY   | CAPTURE | DELETE  |\n              DIR     | EXPORT  | INFO    | SPLIT   |\n              MOUNT   | MOUNTRW | REMOUNT | UNMOUNT |\n              CLEANUP | COMMIT ]\n\nFor help on a specific operation type:\n  IMAGEX /Operation /?\n\nExamples:\n  IMAGEX /APPEND /?\n  IMAGEX /APPLY /?\n  IMAGEX /CAPTURE /?\n  IMAGEX /DELETE /?\n  IMAGEX /DIR /?\n  IMAGEX /EXPORT /?\n  IMAGEX /INFO /?\n  IMAGEX /SPLIT /?\n  IMAGEX /MOUNT /?\n  IMAGEX /MOUNTRW /?\n  IMAGEX /REMOUNT /?\n  IMAGEX /COMMIT /?\n  IMAGEX /UNMOUNT /?\n  IMAGEX /CLEANUP /?\n\nAll operations accept the following flags:\n  /SCROLL\n  /LOGFILE logfile.log\n\\>\n```\n\n<a name=\"srozaf\"></a>\n### 安装系统需要使用的命令(这里采用wim镜像安装系统)\n\n- 检测wim镜像的完整性，并获取到wim镜像的系统版本系统：\n\n\n```bash\n> imagex /info install.wim\t\t#查看\"install.wim\"的相关信息\n\nImageX Tool for Windows\nCopyright (C) Microsoft Corp. All rights reserved.\nVersion: 6.1.7600.16385\n\nWIM Information:\n----------------\nPath:        \\Windows8.1\\sources\\install.wim\nGUID:        {93bf56b4-8645-44b8-a3d3-b96aa7f508df}\n# Image Count 是重要信息\nImage Count: 1\nCompression: LZX\nPart Number: 1/1\nAttributes:  0xc\n             Integrity info\n             Relative path junction\n\n\nAvailable Image Choices:\n------------------------\n<WIM>\n  <TOTALBYTES>3457099927</TOTALBYTES>\n  <IMAGE INDEX=\"1\">\n    <DIRCOUNT>19524</DIRCOUNT>\n    <FILECOUNT>92795</FILECOUNT>\n    <TOTALBYTES>12855928858</TOTALBYTES>\n    <HARDLINKBYTES>5346880387</HARDLINKBYTES>\n    <CREATIONTIME>\n      <HIGHPART>0x01CF4298</HIGHPART>\n      <LOWPART>0x37D85CC6</LOWPART>\n    </CREATIONTIME>\n    <LASTMODIFICATIONTIME>\n      <HIGHPART>0x01CF4298</HIGHPART>\n      <LOWPART>0x74FBCEDF</LOWPART>\n    </LASTMODIFICATIONTIME>\n    <WIMBOOT>0</WIMBOOT>\n    <WINDOWS>\n      <ARCH>9</ARCH>\n      <PRODUCTNAME>Microsoft® Windows® Operating System</PRODUCTNAME>\n      <EDITIONID>Professional</EDITIONID>\n      <INSTALLATIONTYPE>Client</INSTALLATIONTYPE>\n      <SERVICINGDATA>\n        <GDRDUREVISION>20140317</GDRDUREVISION>\n        <PKEYCONFIGVERSION>6.3.9600.17031;2014-02-22T04:31:55Z</PKEYCONFIGVERSION>\n      </SERVICINGDATA>\n      <HAL>acpiapic</HAL>\n      <PRODUCTTYPE>WinNT</PRODUCTTYPE>\n      <PRODUCTSUITE>Terminal Server</PRODUCTSUITE>\n      <LANGUAGES>\n        <LANGUAGE>zh-CN</LANGUAGE>\n        <FALLBACK LANGUAGE=\"zh-CN\">en-US</FALLBACK>\n        <DEFAULT>zh-CN</DEFAULT>\n      </LANGUAGES>\n      <VERSION>\n        <MAJOR>6</MAJOR>\n        <MINOR>3</MINOR>\n        <BUILD>9600</BUILD>\n        <SPBUILD>17031</SPBUILD>\n        <SPLEVEL>0</SPLEVEL>\n      </VERSION>\n      <SYSTEMROOT>WINDOWS</SYSTEMROOT>\n    </WINDOWS>\n    <NAME>Windows 8.1 Pro</NAME>\n    <DESCRIPTION>Windows 8.1 Pro</DESCRIPTION>\n    <FLAGS>Professional</FLAGS>\n    <DISPLAYNAME>Windows 8.1 专业版</DISPLAYNAME>\n    <DISPLAYDESCRIPTION>Windows 8.1 专业版</DISPLAYDESCRIPTION>\n  </IMAGE>\n</WIM>\n\n\\>\n```\n\n- Image Count 即是该镜像包含的的系统各版本的计数，如旗舰版、专业版等。我们需要在后面的XML里面找到自己需要安装的系统版本对应的Count记录下来。\n\n- 解压install.wim镜像内的系统文件到对应的路径，既是完成安装系统文件的过程。\n\n\n```bash\n\\> imagex /apply install.wim 1 c:\t#其中数字\"1\"就是刚刚记录下的Count\n```\n\n- 备份系统同样也能完成：\n\n\n```bash\n#增量备份，即在“windows.wim”里添加子映像\n\\> imagex /append C: D:\\windows.wim \"windows(2)\"\n```\n\n- 完成了以上工作，基本的操作系统文件已经完成了复制过程，接下来我们则需要给新装的系统添加引导。只需要一条简单的命令，当然你也可以通过easybcd等工具来完成此过程。\n\n\n```bash\n\\> bcdboot c:\\windows\n```\n\n<a name=\"r7u2cu\"></a>\n### 小结\n\n1. imagex工具备份和还原的速度快，体积非常小。\n\n2. imagex工具在命令行下的语法多样，可以进行各种灵活的操作。\n\n3. 使用此方法非常适合直接在常用的操作系统上安装第二操作系统，并且速度十分可观，配合VHD安装多系统更是巧妙。\n\n\n",
    "body_draft": "tags: [计算机维护]\ndate: 2015-01-20\n\n---\n\n### <a name=\"wqiyvt\"></a>imagex.exe简介\n\nimagex.exe是一款用来捕获、修改和应用基于文件的磁盘映像以进行快速部署。ImageX可以使用 Windows 映像 (.wim) 文件复制到网络，或者还可以使用其他利用 .wim 映像的技术，如 Windows 安装程序、Windows 部署服务 (Windows DS) 以及系统管理服务器 (SMS) 操作系统功能部署包。\n\n<!-- more -->\n\n### <a name=\"ughyat\"></a>帮助文档\n\n```Bash\n\\> imagex /help\t\t#查看帮助文档\nImageX Tool for Windows\nCopyright (C) Microsoft Corp. All rights reserved.\nVersion: 6.1.7600.16385\n\nIMAGEX [Flags] /Operation [Parameter List]\n\n  Operation [ APPEND  | APPLY   | CAPTURE | DELETE  |\n              DIR     | EXPORT  | INFO    | SPLIT   |\n              MOUNT   | MOUNTRW | REMOUNT | UNMOUNT |\n              CLEANUP | COMMIT ]\n\nFor help on a specific operation type:\n  IMAGEX /Operation /?\n\nExamples:\n  IMAGEX /APPEND /?\n  IMAGEX /APPLY /?\n  IMAGEX /CAPTURE /?\n  IMAGEX /DELETE /?\n  IMAGEX /DIR /?\n  IMAGEX /EXPORT /?\n  IMAGEX /INFO /?\n  IMAGEX /SPLIT /?\n  IMAGEX /MOUNT /?\n  IMAGEX /MOUNTRW /?\n  IMAGEX /REMOUNT /?\n  IMAGEX /COMMIT /?\n  IMAGEX /UNMOUNT /?\n  IMAGEX /CLEANUP /?\n\nAll operations accept the following flags:\n  /SCROLL\n  /LOGFILE logfile.log\n\\>\n```\n\n### <a name=\"srozaf\"></a>安装系统需要使用的命令(这里采用wim镜像安装系统)\n\n* 检测wim镜像的完整性，并获取到wim镜像的系统版本系统：\n\n```Bash\n> imagex /info install.wim\t\t#查看\"install.wim\"的相关信息\n\nImageX Tool for Windows\nCopyright (C) Microsoft Corp. All rights reserved.\nVersion: 6.1.7600.16385\n\nWIM Information:\n----------------\nPath:        \\Windows8.1\\sources\\install.wim\nGUID:        {93bf56b4-8645-44b8-a3d3-b96aa7f508df}\n# Image Count 是重要信息\nImage Count: 1\nCompression: LZX\nPart Number: 1/1\nAttributes:  0xc\n             Integrity info\n             Relative path junction\n\n\nAvailable Image Choices:\n------------------------\n<WIM>\n  <TOTALBYTES>3457099927</TOTALBYTES>\n  <IMAGE INDEX=\"1\">\n    <DIRCOUNT>19524</DIRCOUNT>\n    <FILECOUNT>92795</FILECOUNT>\n    <TOTALBYTES>12855928858</TOTALBYTES>\n    <HARDLINKBYTES>5346880387</HARDLINKBYTES>\n    <CREATIONTIME>\n      <HIGHPART>0x01CF4298</HIGHPART>\n      <LOWPART>0x37D85CC6</LOWPART>\n    </CREATIONTIME>\n    <LASTMODIFICATIONTIME>\n      <HIGHPART>0x01CF4298</HIGHPART>\n      <LOWPART>0x74FBCEDF</LOWPART>\n    </LASTMODIFICATIONTIME>\n    <WIMBOOT>0</WIMBOOT>\n    <WINDOWS>\n      <ARCH>9</ARCH>\n      <PRODUCTNAME>Microsoft® Windows® Operating System</PRODUCTNAME>\n      <EDITIONID>Professional</EDITIONID>\n      <INSTALLATIONTYPE>Client</INSTALLATIONTYPE>\n      <SERVICINGDATA>\n        <GDRDUREVISION>20140317</GDRDUREVISION>\n        <PKEYCONFIGVERSION>6.3.9600.17031;2014-02-22T04:31:55Z</PKEYCONFIGVERSION>\n      </SERVICINGDATA>\n      <HAL>acpiapic</HAL>\n      <PRODUCTTYPE>WinNT</PRODUCTTYPE>\n      <PRODUCTSUITE>Terminal Server</PRODUCTSUITE>\n      <LANGUAGES>\n        <LANGUAGE>zh-CN</LANGUAGE>\n        <FALLBACK LANGUAGE=\"zh-CN\">en-US</FALLBACK>\n        <DEFAULT>zh-CN</DEFAULT>\n      </LANGUAGES>\n      <VERSION>\n        <MAJOR>6</MAJOR>\n        <MINOR>3</MINOR>\n        <BUILD>9600</BUILD>\n        <SPBUILD>17031</SPBUILD>\n        <SPLEVEL>0</SPLEVEL>\n      </VERSION>\n      <SYSTEMROOT>WINDOWS</SYSTEMROOT>\n    </WINDOWS>\n    <NAME>Windows 8.1 Pro</NAME>\n    <DESCRIPTION>Windows 8.1 Pro</DESCRIPTION>\n    <FLAGS>Professional</FLAGS>\n    <DISPLAYNAME>Windows 8.1 专业版</DISPLAYNAME>\n    <DISPLAYDESCRIPTION>Windows 8.1 专业版</DISPLAYDESCRIPTION>\n  </IMAGE>\n</WIM>\n\n\\>\n```\n\n* Image Count 即是该镜像包含的的系统各版本的计数，如旗舰版、专业版等。我们需要在后面的XML里面找到自己需要安装的系统版本对应的Count记录下来。\n* 解压install.wim镜像内的系统文件到对应的路径，既是完成安装系统文件的过程。\n\n```Bash\n\\> imagex /apply install.wim 1 c:\t#其中数字\"1\"就是刚刚记录下的Count\n```\n\n* 备份系统同样也能完成：\n\n```Bash\n#增量备份，即在“windows.wim”里添加子映像\n\\> imagex /append C: D:\\windows.wim \"windows(2)\"\n```\n\n* 完成了以上工作，基本的操作系统文件已经完成了复制过程，接下来我们则需要给新装的系统添加引导。只需要一条简单的命令，当然你也可以通过easybcd等工具来完成此过程。\n\n```Bash\n\\> bcdboot c:\\windows\n```\n\n### <a name=\"r7u2cu\"></a>小结\n\n1. imagex工具备份和还原的速度快，体积非常小。\n2. imagex工具在命令行下的语法多样，可以进行各种灵活的操作。\n3. 使用此方法非常适合直接在常用的操作系统上安装第二操作系统，并且速度十分可观，配合VHD安装多系统更是巧妙。\n\n",
    "body_html": "<p>tags: [计算机维护]</p><p>date: 2015-01-20</p><hr /><h3 id=\"wqiyvt\"><a href=\"#wqiyvt\"></a>imagex.exe简介</h3><p><br /></p><p>imagex.exe是一款用来捕获、修改和应用基于文件的磁盘映像以进行快速部署。ImageX可以使用 Windows 映像 (.wim) 文件复制到网络，或者还可以使用其他利用 .wim 映像的技术，如 Windows 安装程序、Windows 部署服务 (Windows DS) 以及系统管理服务器 (SMS) 操作系统功能部署包。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"ughyat\"><a href=\"#ughyat\"></a>帮助文档</h3><p><br /></p><pre data-lang=\"bash\"><code>\\&gt; imagex /help\t\t#查看帮助文档\nImageX Tool for Windows\nCopyright (C) Microsoft Corp. All rights reserved.\nVersion: 6.1.7600.16385\n\nIMAGEX [Flags] /Operation [Parameter List]\n\n  Operation [ APPEND  | APPLY   | CAPTURE | DELETE  |\n              DIR     | EXPORT  | INFO    | SPLIT   |\n              MOUNT   | MOUNTRW | REMOUNT | UNMOUNT |\n              CLEANUP | COMMIT ]\n\nFor help on a specific operation type:\n  IMAGEX /Operation /?\n\nExamples:\n  IMAGEX /APPEND /?\n  IMAGEX /APPLY /?\n  IMAGEX /CAPTURE /?\n  IMAGEX /DELETE /?\n  IMAGEX /DIR /?\n  IMAGEX /EXPORT /?\n  IMAGEX /INFO /?\n  IMAGEX /SPLIT /?\n  IMAGEX /MOUNT /?\n  IMAGEX /MOUNTRW /?\n  IMAGEX /REMOUNT /?\n  IMAGEX /COMMIT /?\n  IMAGEX /UNMOUNT /?\n  IMAGEX /CLEANUP /?\n\nAll operations accept the following flags:\n  /SCROLL\n  /LOGFILE logfile.log\n\\&gt;</code></pre><p><br /></p><h3 id=\"srozaf\"><a href=\"#srozaf\"></a>安装系统需要使用的命令(这里采用wim镜像安装系统)</h3><p><br /></p><ul><li><p>检测wim镜像的完整性，并获取到wim镜像的系统版本系统：</p></li></ul><p><br /></p><pre data-lang=\"bash\"><code>&gt; imagex /info install.wim\t\t#查看&quot;install.wim&quot;的相关信息\n\nImageX Tool for Windows\nCopyright (C) Microsoft Corp. All rights reserved.\nVersion: 6.1.7600.16385\n\nWIM Information:\n----------------\nPath:        \\Windows8.1\\sources\\install.wim\nGUID:        {93bf56b4-8645-44b8-a3d3-b96aa7f508df}\n# Image Count 是重要信息\nImage Count: 1\nCompression: LZX\nPart Number: 1/1\nAttributes:  0xc\n             Integrity info\n             Relative path junction\n\n\nAvailable Image Choices:\n------------------------\n&lt;WIM&gt;\n  &lt;TOTALBYTES&gt;3457099927&lt;/TOTALBYTES&gt;\n  &lt;IMAGE INDEX=&quot;1&quot;&gt;\n    &lt;DIRCOUNT&gt;19524&lt;/DIRCOUNT&gt;\n    &lt;FILECOUNT&gt;92795&lt;/FILECOUNT&gt;\n    &lt;TOTALBYTES&gt;12855928858&lt;/TOTALBYTES&gt;\n    &lt;HARDLINKBYTES&gt;5346880387&lt;/HARDLINKBYTES&gt;\n    &lt;CREATIONTIME&gt;\n      &lt;HIGHPART&gt;0x01CF4298&lt;/HIGHPART&gt;\n      &lt;LOWPART&gt;0x37D85CC6&lt;/LOWPART&gt;\n    &lt;/CREATIONTIME&gt;\n    &lt;LASTMODIFICATIONTIME&gt;\n      &lt;HIGHPART&gt;0x01CF4298&lt;/HIGHPART&gt;\n      &lt;LOWPART&gt;0x74FBCEDF&lt;/LOWPART&gt;\n    &lt;/LASTMODIFICATIONTIME&gt;\n    &lt;WIMBOOT&gt;0&lt;/WIMBOOT&gt;\n    &lt;WINDOWS&gt;\n      &lt;ARCH&gt;9&lt;/ARCH&gt;\n      &lt;PRODUCTNAME&gt;Microsoft® Windows® Operating System&lt;/PRODUCTNAME&gt;\n      &lt;EDITIONID&gt;Professional&lt;/EDITIONID&gt;\n      &lt;INSTALLATIONTYPE&gt;Client&lt;/INSTALLATIONTYPE&gt;\n      &lt;SERVICINGDATA&gt;\n        &lt;GDRDUREVISION&gt;20140317&lt;/GDRDUREVISION&gt;\n        &lt;PKEYCONFIGVERSION&gt;6.3.9600.17031;2014-02-22T04:31:55Z&lt;/PKEYCONFIGVERSION&gt;\n      &lt;/SERVICINGDATA&gt;\n      &lt;HAL&gt;acpiapic&lt;/HAL&gt;\n      &lt;PRODUCTTYPE&gt;WinNT&lt;/PRODUCTTYPE&gt;\n      &lt;PRODUCTSUITE&gt;Terminal Server&lt;/PRODUCTSUITE&gt;\n      &lt;LANGUAGES&gt;\n        &lt;LANGUAGE&gt;zh-CN&lt;/LANGUAGE&gt;\n        &lt;FALLBACK LANGUAGE=&quot;zh-CN&quot;&gt;en-US&lt;/FALLBACK&gt;\n        &lt;DEFAULT&gt;zh-CN&lt;/DEFAULT&gt;\n      &lt;/LANGUAGES&gt;\n      &lt;VERSION&gt;\n        &lt;MAJOR&gt;6&lt;/MAJOR&gt;\n        &lt;MINOR&gt;3&lt;/MINOR&gt;\n        &lt;BUILD&gt;9600&lt;/BUILD&gt;\n        &lt;SPBUILD&gt;17031&lt;/SPBUILD&gt;\n        &lt;SPLEVEL&gt;0&lt;/SPLEVEL&gt;\n      &lt;/VERSION&gt;\n      &lt;SYSTEMROOT&gt;WINDOWS&lt;/SYSTEMROOT&gt;\n    &lt;/WINDOWS&gt;\n    &lt;NAME&gt;Windows 8.1 Pro&lt;/NAME&gt;\n    &lt;DESCRIPTION&gt;Windows 8.1 Pro&lt;/DESCRIPTION&gt;\n    &lt;FLAGS&gt;Professional&lt;/FLAGS&gt;\n    &lt;DISPLAYNAME&gt;Windows 8.1 专业版&lt;/DISPLAYNAME&gt;\n    &lt;DISPLAYDESCRIPTION&gt;Windows 8.1 专业版&lt;/DISPLAYDESCRIPTION&gt;\n  &lt;/IMAGE&gt;\n&lt;/WIM&gt;\n\n\\&gt;</code></pre><p><br /></p><ul><li><p>Image Count 即是该镜像包含的的系统各版本的计数，如旗舰版、专业版等。我们需要在后面的XML里面找到自己需要安装的系统版本对应的Count记录下来。</p></li></ul><ul><li><p>解压install.wim镜像内的系统文件到对应的路径，既是完成安装系统文件的过程。</p></li></ul><p><br /></p><pre data-lang=\"bash\"><code>\\&gt; imagex /apply install.wim 1 c:\t#其中数字&quot;1&quot;就是刚刚记录下的Count</code></pre><p><br /></p><ul><li><p>备份系统同样也能完成：</p></li></ul><p><br /></p><pre data-lang=\"bash\"><code>#增量备份，即在“windows.wim”里添加子映像\n\\&gt; imagex /append C: D:\\windows.wim &quot;windows(2)&quot;</code></pre><p><br /></p><ul><li><p>完成了以上工作，基本的操作系统文件已经完成了复制过程，接下来我们则需要给新装的系统添加引导。只需要一条简单的命令，当然你也可以通过easybcd等工具来完成此过程。</p></li></ul><p><br /></p><pre data-lang=\"bash\"><code>\\&gt; bcdboot c:\\windows</code></pre><p><br /></p><h3 id=\"r7u2cu\"><a href=\"#r7u2cu\"></a>小结</h3><p><br /></p><ol start=\"1\"><li><p>imagex工具备份和还原的速度快，体积非常小。</p></li></ol><ol start=\"2\"><li><p>imagex工具在命令行下的语法多样，可以进行各种灵活的操作。</p></li></ol><ol start=\"3\"><li><p>使用此方法非常适合直接在常用的操作系统上安装第二操作系统，并且速度十分可观，配合VHD安装多系统更是巧妙。</p></li></ol><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [计算机维护]</p><p>date: 2015-01-20</p><card type=\"block\" name=\"hr\"></card><h3 id=\"wqiyvt\"><a href=\"#wqiyvt\" id=\"imagex.exe简介\"></a>imagex.exe简介</h3><p><br /></p><p>imagex.exe是一款用来捕获、修改和应用基于文件的磁盘映像以进行快速部署。ImageX可以使用 Windows 映像 (.wim) 文件复制到网络，或者还可以使用其他利用 .wim 映像的技术，如 Windows 安装程序、Windows 部署服务 (Windows DS) 以及系统管理服务器 (SMS) 操作系统功能部署包。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"ughyat\"><a href=\"#ughyat\" id=\"帮助文档\"></a>帮助文档</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%222cc8cc0f%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%5C%5C%3E%20imagex%20%2Fhelp%5Ct%5Ct%23%E6%9F%A5%E7%9C%8B%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%5CnImageX%20Tool%20for%20Windows%5CnCopyright%20(C)%20Microsoft%20Corp.%20All%20rights%20reserved.%5CnVersion%3A%206.1.7600.16385%5Cn%5CnIMAGEX%20%5BFlags%5D%20%2FOperation%20%5BParameter%20List%5D%5Cn%5Cn%20%20Operation%20%5B%20APPEND%20%20%7C%20APPLY%20%20%20%7C%20CAPTURE%20%7C%20DELETE%20%20%7C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20DIR%20%20%20%20%20%7C%20EXPORT%20%20%7C%20INFO%20%20%20%20%7C%20SPLIT%20%20%20%7C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20MOUNT%20%20%20%7C%20MOUNTRW%20%7C%20REMOUNT%20%7C%20UNMOUNT%20%7C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20CLEANUP%20%7C%20COMMIT%20%5D%5Cn%5CnFor%20help%20on%20a%20specific%20operation%20type%3A%5Cn%20%20IMAGEX%20%2FOperation%20%2F%3F%5Cn%5CnExamples%3A%5Cn%20%20IMAGEX%20%2FAPPEND%20%2F%3F%5Cn%20%20IMAGEX%20%2FAPPLY%20%2F%3F%5Cn%20%20IMAGEX%20%2FCAPTURE%20%2F%3F%5Cn%20%20IMAGEX%20%2FDELETE%20%2F%3F%5Cn%20%20IMAGEX%20%2FDIR%20%2F%3F%5Cn%20%20IMAGEX%20%2FEXPORT%20%2F%3F%5Cn%20%20IMAGEX%20%2FINFO%20%2F%3F%5Cn%20%20IMAGEX%20%2FSPLIT%20%2F%3F%5Cn%20%20IMAGEX%20%2FMOUNT%20%2F%3F%5Cn%20%20IMAGEX%20%2FMOUNTRW%20%2F%3F%5Cn%20%20IMAGEX%20%2FREMOUNT%20%2F%3F%5Cn%20%20IMAGEX%20%2FCOMMIT%20%2F%3F%5Cn%20%20IMAGEX%20%2FUNMOUNT%20%2F%3F%5Cn%20%20IMAGEX%20%2FCLEANUP%20%2F%3F%5Cn%5CnAll%20operations%20accept%20the%20following%20flags%3A%5Cn%20%20%2FSCROLL%5Cn%20%20%2FLOGFILE%20logfile.log%5Cn%5C%5C%3E%22%7D\"></card><p><br /></p><h3 id=\"srozaf\"><a href=\"#srozaf\" id=\"安装系统需要使用的命令(这里采用wim镜像安装系统)\"></a>安装系统需要使用的命令(这里采用wim镜像安装系统)</h3><p><br /></p><ul><li><p>检测wim镜像的完整性，并获取到wim镜像的系统版本系统：</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%224d41da61%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%3E%20imagex%20%2Finfo%20install.wim%5Ct%5Ct%23%E6%9F%A5%E7%9C%8B%5C%22install.wim%5C%22%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%5Cn%5CnImageX%20Tool%20for%20Windows%5CnCopyright%20(C)%20Microsoft%20Corp.%20All%20rights%20reserved.%5CnVersion%3A%206.1.7600.16385%5Cn%5CnWIM%20Information%3A%5Cn----------------%5CnPath%3A%20%20%20%20%20%20%20%20%5C%5CWindows8.1%5C%5Csources%5C%5Cinstall.wim%5CnGUID%3A%20%20%20%20%20%20%20%20%7B93bf56b4-8645-44b8-a3d3-b96aa7f508df%7D%5Cn%23%20Image%20Count%20%E6%98%AF%E9%87%8D%E8%A6%81%E4%BF%A1%E6%81%AF%5CnImage%20Count%3A%201%5CnCompression%3A%20LZX%5CnPart%20Number%3A%201%2F1%5CnAttributes%3A%20%200xc%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20Integrity%20info%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20Relative%20path%20junction%5Cn%5Cn%5CnAvailable%20Image%20Choices%3A%5Cn------------------------%5Cn%3CWIM%3E%5Cn%20%20%3CTOTALBYTES%3E3457099927%3C%2FTOTALBYTES%3E%5Cn%20%20%3CIMAGE%20INDEX%3D%5C%221%5C%22%3E%5Cn%20%20%20%20%3CDIRCOUNT%3E19524%3C%2FDIRCOUNT%3E%5Cn%20%20%20%20%3CFILECOUNT%3E92795%3C%2FFILECOUNT%3E%5Cn%20%20%20%20%3CTOTALBYTES%3E12855928858%3C%2FTOTALBYTES%3E%5Cn%20%20%20%20%3CHARDLINKBYTES%3E5346880387%3C%2FHARDLINKBYTES%3E%5Cn%20%20%20%20%3CCREATIONTIME%3E%5Cn%20%20%20%20%20%20%3CHIGHPART%3E0x01CF4298%3C%2FHIGHPART%3E%5Cn%20%20%20%20%20%20%3CLOWPART%3E0x37D85CC6%3C%2FLOWPART%3E%5Cn%20%20%20%20%3C%2FCREATIONTIME%3E%5Cn%20%20%20%20%3CLASTMODIFICATIONTIME%3E%5Cn%20%20%20%20%20%20%3CHIGHPART%3E0x01CF4298%3C%2FHIGHPART%3E%5Cn%20%20%20%20%20%20%3CLOWPART%3E0x74FBCEDF%3C%2FLOWPART%3E%5Cn%20%20%20%20%3C%2FLASTMODIFICATIONTIME%3E%5Cn%20%20%20%20%3CWIMBOOT%3E0%3C%2FWIMBOOT%3E%5Cn%20%20%20%20%3CWINDOWS%3E%5Cn%20%20%20%20%20%20%3CARCH%3E9%3C%2FARCH%3E%5Cn%20%20%20%20%20%20%3CPRODUCTNAME%3EMicrosoft%C2%AE%20Windows%C2%AE%20Operating%20System%3C%2FPRODUCTNAME%3E%5Cn%20%20%20%20%20%20%3CEDITIONID%3EProfessional%3C%2FEDITIONID%3E%5Cn%20%20%20%20%20%20%3CINSTALLATIONTYPE%3EClient%3C%2FINSTALLATIONTYPE%3E%5Cn%20%20%20%20%20%20%3CSERVICINGDATA%3E%5Cn%20%20%20%20%20%20%20%20%3CGDRDUREVISION%3E20140317%3C%2FGDRDUREVISION%3E%5Cn%20%20%20%20%20%20%20%20%3CPKEYCONFIGVERSION%3E6.3.9600.17031%3B2014-02-22T04%3A31%3A55Z%3C%2FPKEYCONFIGVERSION%3E%5Cn%20%20%20%20%20%20%3C%2FSERVICINGDATA%3E%5Cn%20%20%20%20%20%20%3CHAL%3Eacpiapic%3C%2FHAL%3E%5Cn%20%20%20%20%20%20%3CPRODUCTTYPE%3EWinNT%3C%2FPRODUCTTYPE%3E%5Cn%20%20%20%20%20%20%3CPRODUCTSUITE%3ETerminal%20Server%3C%2FPRODUCTSUITE%3E%5Cn%20%20%20%20%20%20%3CLANGUAGES%3E%5Cn%20%20%20%20%20%20%20%20%3CLANGUAGE%3Ezh-CN%3C%2FLANGUAGE%3E%5Cn%20%20%20%20%20%20%20%20%3CFALLBACK%20LANGUAGE%3D%5C%22zh-CN%5C%22%3Een-US%3C%2FFALLBACK%3E%5Cn%20%20%20%20%20%20%20%20%3CDEFAULT%3Ezh-CN%3C%2FDEFAULT%3E%5Cn%20%20%20%20%20%20%3C%2FLANGUAGES%3E%5Cn%20%20%20%20%20%20%3CVERSION%3E%5Cn%20%20%20%20%20%20%20%20%3CMAJOR%3E6%3C%2FMAJOR%3E%5Cn%20%20%20%20%20%20%20%20%3CMINOR%3E3%3C%2FMINOR%3E%5Cn%20%20%20%20%20%20%20%20%3CBUILD%3E9600%3C%2FBUILD%3E%5Cn%20%20%20%20%20%20%20%20%3CSPBUILD%3E17031%3C%2FSPBUILD%3E%5Cn%20%20%20%20%20%20%20%20%3CSPLEVEL%3E0%3C%2FSPLEVEL%3E%5Cn%20%20%20%20%20%20%3C%2FVERSION%3E%5Cn%20%20%20%20%20%20%3CSYSTEMROOT%3EWINDOWS%3C%2FSYSTEMROOT%3E%5Cn%20%20%20%20%3C%2FWINDOWS%3E%5Cn%20%20%20%20%3CNAME%3EWindows%208.1%20Pro%3C%2FNAME%3E%5Cn%20%20%20%20%3CDESCRIPTION%3EWindows%208.1%20Pro%3C%2FDESCRIPTION%3E%5Cn%20%20%20%20%3CFLAGS%3EProfessional%3C%2FFLAGS%3E%5Cn%20%20%20%20%3CDISPLAYNAME%3EWindows%208.1%20%E4%B8%93%E4%B8%9A%E7%89%88%3C%2FDISPLAYNAME%3E%5Cn%20%20%20%20%3CDISPLAYDESCRIPTION%3EWindows%208.1%20%E4%B8%93%E4%B8%9A%E7%89%88%3C%2FDISPLAYDESCRIPTION%3E%5Cn%20%20%3C%2FIMAGE%3E%5Cn%3C%2FWIM%3E%5Cn%5Cn%5C%5C%3E%22%7D\"></card><p><br /></p><ul><li><p>Image Count 即是该镜像包含的的系统各版本的计数，如旗舰版、专业版等。我们需要在后面的XML里面找到自己需要安装的系统版本对应的Count记录下来。</p></li></ul><ul><li><p>解压install.wim镜像内的系统文件到对应的路径，既是完成安装系统文件的过程。</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b530d10f%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%5C%5C%3E%20imagex%20%2Fapply%20install.wim%201%20c%3A%5Ct%23%E5%85%B6%E4%B8%AD%E6%95%B0%E5%AD%97%5C%221%5C%22%E5%B0%B1%E6%98%AF%E5%88%9A%E5%88%9A%E8%AE%B0%E5%BD%95%E4%B8%8B%E7%9A%84Count%22%7D\"></card><p><br /></p><ul><li><p>备份系统同样也能完成：</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%223e9227b8%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%23%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD%EF%BC%8C%E5%8D%B3%E5%9C%A8%E2%80%9Cwindows.wim%E2%80%9D%E9%87%8C%E6%B7%BB%E5%8A%A0%E5%AD%90%E6%98%A0%E5%83%8F%5Cn%5C%5C%3E%20imagex%20%2Fappend%20C%3A%20D%3A%5C%5Cwindows.wim%20%5C%22windows(2)%5C%22%22%7D\"></card><p><br /></p><ul><li><p>完成了以上工作，基本的操作系统文件已经完成了复制过程，接下来我们则需要给新装的系统添加引导。只需要一条简单的命令，当然你也可以通过easybcd等工具来完成此过程。</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c0c64539%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%5C%5C%3E%20bcdboot%20c%3A%5C%5Cwindows%22%7D\"></card><p><br /></p><h3 id=\"r7u2cu\"><a href=\"#r7u2cu\" id=\"小结\"></a>小结</h3><p><br /></p><ol start=\"1\"><li><p>imagex工具备份和还原的速度快，体积非常小。</p></li></ol><ol start=\"2\"><li><p>imagex工具在命令行下的语法多样，可以进行各种灵活的操作。</p></li></ol><ol start=\"3\"><li><p>使用此方法非常适合直接在常用的操作系统上安装第二操作系统，并且速度十分可观，配合VHD安装多系统更是巧妙。</p></li></ol><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [计算机维护]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-01-20\"],[\"hr\",{\"id\":\"3btenn\"}],[\"h3\",{\"id\":\"wqiyvt\"},\"imagex.exe简介\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"imagex.exe是一款用来捕获、修改和应用基于文件的磁盘映像以进行快速部署。ImageX可以使用 Windows 映像 (.wim) 文件复制到网络，或者还可以使用其他利用 .wim 映像的技术，如 Windows 安装程序、Windows 部署服务 (Windows DS) 以及系统管理服务器 (SMS) 操作系统功能部署包。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"ughyat\"},\"帮助文档\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"\\\\> imagex /help\\t\\t#查看帮助文档\\n\",\"ImageX Tool for Windows\\n\",\"Copyright (C) Microsoft Corp. All rights reserved.\\n\",\"Version: 6.1.7600.16385\\n\",\"\\n\",\"IMAGEX [Flags] /Operation [Parameter List]\\n\",\"\\n\",\"  Operation [ APPEND  | APPLY   | CAPTURE | DELETE  |\\n\",\"              DIR     | EXPORT  | INFO    | SPLIT   |\\n\",\"              MOUNT   | MOUNTRW | REMOUNT | UNMOUNT |\\n\",\"              CLEANUP | COMMIT ]\\n\",\"\\n\",\"For help on a specific operation type:\\n\",\"  IMAGEX /Operation /?\\n\",\"\\n\",\"Examples:\\n\",\"  IMAGEX /APPEND /?\\n\",\"  IMAGEX /APPLY /?\\n\",\"  IMAGEX /CAPTURE /?\\n\",\"  IMAGEX /DELETE /?\\n\",\"  IMAGEX /DIR /?\\n\",\"  IMAGEX /EXPORT /?\\n\",\"  IMAGEX /INFO /?\\n\",\"  IMAGEX /SPLIT /?\\n\",\"  IMAGEX /MOUNT /?\\n\",\"  IMAGEX /MOUNTRW /?\\n\",\"  IMAGEX /REMOUNT /?\\n\",\"  IMAGEX /COMMIT /?\\n\",\"  IMAGEX /UNMOUNT /?\\n\",\"  IMAGEX /CLEANUP /?\\n\",\"\\n\",\"All operations accept the following flags:\\n\",\"  /SCROLL\\n\",\"  /LOGFILE logfile.log\\n\",\"\\\\>\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"srozaf\"},\"安装系统需要使用的命令(这里采用wim镜像安装系统)\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"检测wim镜像的完整性，并获取到wim镜像的系统版本系统：\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"> imagex /info install.wim\\t\\t#查看\\\"install.wim\\\"的相关信息\\n\",\"\\n\",\"ImageX Tool for Windows\\n\",\"Copyright (C) Microsoft Corp. All rights reserved.\\n\",\"Version: 6.1.7600.16385\\n\",\"\\n\",\"WIM Information:\\n\",\"----------------\\n\",\"Path:        \\\\Windows8.1\\\\sources\\\\install.wim\\n\",\"GUID:        {93bf56b4-8645-44b8-a3d3-b96aa7f508df}\\n\",\"# Image Count 是重要信息\\n\",\"Image Count: 1\\n\",\"Compression: LZX\\n\",\"Part Number: 1/1\\n\",\"Attributes:  0xc\\n\",\"             Integrity info\\n\",\"             Relative path junction\\n\",\"\\n\",\"\\n\",\"Available Image Choices:\\n\",\"------------------------\\n\",\"<WIM>\\n\",\"  <TOTALBYTES>3457099927</TOTALBYTES>\\n\",\"  <IMAGE INDEX=\\\"1\\\">\\n\",\"    <DIRCOUNT>19524</DIRCOUNT>\\n\",\"    <FILECOUNT>92795</FILECOUNT>\\n\",\"    <TOTALBYTES>12855928858</TOTALBYTES>\\n\",\"    <HARDLINKBYTES>5346880387</HARDLINKBYTES>\\n\",\"    <CREATIONTIME>\\n\",\"      <HIGHPART>0x01CF4298</HIGHPART>\\n\",\"      <LOWPART>0x37D85CC6</LOWPART>\\n\",\"    </CREATIONTIME>\\n\",\"    <LASTMODIFICATIONTIME>\\n\",\"      <HIGHPART>0x01CF4298</HIGHPART>\\n\",\"      <LOWPART>0x74FBCEDF</LOWPART>\\n\",\"    </LASTMODIFICATIONTIME>\\n\",\"    <WIMBOOT>0</WIMBOOT>\\n\",\"    <WINDOWS>\\n\",\"      <ARCH>9</ARCH>\\n\",\"      <PRODUCTNAME>Microsoft® Windows® Operating System</PRODUCTNAME>\\n\",\"      <EDITIONID>Professional</EDITIONID>\\n\",\"      <INSTALLATIONTYPE>Client</INSTALLATIONTYPE>\\n\",\"      <SERVICINGDATA>\\n\",\"        <GDRDUREVISION>20140317</GDRDUREVISION>\\n\",\"        <PKEYCONFIGVERSION>6.3.9600.17031;2014-02-22T04:31:55Z</PKEYCONFIGVERSION>\\n\",\"      </SERVICINGDATA>\\n\",\"      <HAL>acpiapic</HAL>\\n\",\"      <PRODUCTTYPE>WinNT</PRODUCTTYPE>\\n\",\"      <PRODUCTSUITE>Terminal Server</PRODUCTSUITE>\\n\",\"      <LANGUAGES>\\n\",\"        <LANGUAGE>zh-CN</LANGUAGE>\\n\",\"        <FALLBACK LANGUAGE=\\\"zh-CN\\\">en-US</FALLBACK>\\n\",\"        <DEFAULT>zh-CN</DEFAULT>\\n\",\"      </LANGUAGES>\\n\",\"      <VERSION>\\n\",\"        <MAJOR>6</MAJOR>\\n\",\"        <MINOR>3</MINOR>\\n\",\"        <BUILD>9600</BUILD>\\n\",\"        <SPBUILD>17031</SPBUILD>\\n\",\"        <SPLEVEL>0</SPLEVEL>\\n\",\"      </VERSION>\\n\",\"      <SYSTEMROOT>WINDOWS</SYSTEMROOT>\\n\",\"    </WINDOWS>\\n\",\"    <NAME>Windows 8.1 Pro</NAME>\\n\",\"    <DESCRIPTION>Windows 8.1 Pro</DESCRIPTION>\\n\",\"    <FLAGS>Professional</FLAGS>\\n\",\"    <DISPLAYNAME>Windows 8.1 专业版</DISPLAYNAME>\\n\",\"    <DISPLAYDESCRIPTION>Windows 8.1 专业版</DISPLAYDESCRIPTION>\\n\",\"  </IMAGE>\\n\",\"</WIM>\\n\",\"\\n\",\"\\\\>\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Image Count 即是该镜像包含的的系统各版本的计数，如旗舰版、专业版等。我们需要在后面的XML里面找到自己需要安装的系统版本对应的Count记录下来。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"解压install.wim镜像内的系统文件到对应的路径，既是完成安装系统文件的过程。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"\\\\> imagex /apply install.wim 1 c:\\t#其中数字\\\"1\\\"就是刚刚记录下的Count\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"备份系统同样也能完成：\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"#增量备份，即在“windows.wim”里添加子映像\\n\",\"\\\\> imagex /append C: D:\\\\windows.wim \\\"windows(2)\\\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"完成了以上工作，基本的操作系统文件已经完成了复制过程，接下来我们则需要给新装的系统添加引导。只需要一条简单的命令，当然你也可以通过easybcd等工具来完成此过程。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"\\\\> bcdboot c:\\\\windows\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"r7u2cu\"},\"小结\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"imagex工具备份和还原的速度快，体积非常小。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"imagex工具在命令行下的语法多样，可以进行各种灵活的操作。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"使用此方法非常适合直接在常用的操作系统上安装第二操作系统，并且速度十分可观，配合VHD安装多系统更是巧妙。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T09:37:22.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:38:39.000Z",
    "updated_at": "2019-06-04T03:55:00.000Z",
    "published_at": "2018-09-15T09:37:22.000Z",
    "first_published_at": null,
    "word_count": 961,
    "cover": null,
    "description": "tags: [计算机维护]date: 2015-01-20imagex.exe简介imagex.exe是一款用来捕获、修改和应用基于文件的磁盘映像以进行快速部署。ImageX可以使用 Windows 映像 (.wim) 文件复制到网络，或者还可以使用其他利用 .wim 映像的技术，如 Windows 安装程序、Windows 部署服务 (Windows DS) 以及系统管理服务器 (SMS) 操作系统功能部署包。&lt;!-- more --&gt;帮助文档\\&gt; imagex /help...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709042,
    "slug": "wn7wdo",
    "title": "js自动化处理表单",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 24,
      "content_updated_at": "2022-02-12T14:18:05.792Z",
      "updated_at": "2022-02-12T14:18:05.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 12,
        "public_books_count": 5,
        "followers_count": 94,
        "following_count": 31,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2022-02-12T09:08:14.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 12,
      "public_books_count": 5,
      "followers_count": 94,
      "following_count": 31,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2022-02-12T09:08:14.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2015-01-07<br />tags: [javascript, 自动化]\n\n---\n\n我们在浏览网页时偶尔会碰到一些需要重复选择各种选项的尴尬局面，我们希望可以有一种工具可以帮助我们自动完成填表或者选择选卡项目。\n\n<a name=\"ane9es\"></a>\n### 实现原理\n\n调用浏览器的控制台运行js脚本，从而达到自动填写表单和选择勾选项，以及自动提交等功能。\n\n<!-- more -->\n\n<a name=\"wccbgv\"></a>\n### 实现方法（例子）\n\n- 获取到表单元素，首先需要浏览到你需要操作的网页，通过浏览器的审查元素或者查看源代码可以获取到按钮/选项/输入框在文档中的位置。\n\n\n```javascript\n//获取表单对象\nvar form = document.getElementsByTagName('form')[0];\nvar btn = document.getElementById('btn1');\n//获取选项列表\nvar selList = form.getElementsByTagName('select');\nvar username = document.getElementById('username');\nvar password = document.getElementById('password');\n```\n\n- 利用js进行自动选择选项和提交功能。(自动填表也可以如法炮制)\n\n\n```javascript\n//遍历，填写选项\nfor (var i = 0, len = selList.length; i < len; i++) {\n\tselList[i].options[1].selected = 'selected';\n\tif (1 == i) {\n\t\tselList[i].options[2].selected = 'selected';\n\t};\n};\n//自动填表\nusername.value = 'test';\npassword.value = 'test';\n//自动点击按钮\nbtn.click();\n}\n```\n\n<a name=\"veydur\"></a>\n### 小结\n\n- 需要对html有基本的了解，才能快速地通过审查元素找到需要操作的DOM对象\n\n- 在一些带有iframe框架的网页，可以使用下面这条js语句获取iframe\n\n\n```javascript\nvar frame = window.frames[\"zhuti\"].document.getElementById('divJs');\n```\n\n- 在demo网页上通过浏览器控制台运行可以的显示效果\n\n\n```javascript\n(function juadge(num) {\n\t//获取表单对象\n\tvar form = document.getElementsByTagName('form')[0];\n\tvar btn = document.getElementById('btn1');\n\t//获取选项列表\n\tvar selList = form.getElementsByTagName('select');\n\tvar username = document.getElementById('username');\n\tvar password = document.getElementById('password');\n\n\tif (1 == num) {\n\t   for (var i = 0, len = selList.length; i < len; i++) {\n\t   \t\t//下标i为第i个选项，后面的下标1则是需要选取第几个选项\n\t    \tselList[i].options[1].selected = 'selected';\n\t   }\n\n\t   //自动填表，设置用户名和密码\n\t   username.value = 'test';\n\t   password.value = 'test';\n\n\t   //自动点击按钮提交\n\t   btn.click();\n\t} else {\n\t   for (var i = 0, len = selList.length; i < len; i++) {\n\t      selList[i].options[0].selected = 'selected';\n\t   }\n\t   username.value = \"\";\n\t   password.value = \"\";\n\t}\n})(num);\n//num填写1为自动处理\n//num填写0为清除表单\n```\n\n[查看demo](http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/js自动处理表单/)\n\n<a name=\"v540ts\"></a>\n### demo源代码\n\n```html\n<!DOCTYPE html>\n<html>\n   <head>\n      <title>js自动处理表单</title>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n      <!-- 引入 Bootstrap -->\n      <link href=\"http://apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n      <!-- HTML5 Shim 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 -->\n      <!-- 注意： 如果通过 file://  引入 Respond.js 文件，则该文件无法起效果 -->\n      <!--[if lt IE 9]>\n         <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n         <script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n      <![endif]-->\n   </head>\n   <body>\n      <div class=\"container\">\n         <h1>js自动处理表单</h1>\n         <form role=\"form\">\n            <div class=\"form-group\">\n               <p>选项1</p>\n               <select class=\"form-control input-sm\">\n                  <option value=\"\">默认选择</option>\n                  <option value=\"\">1</option>\n                  <option value=\"\">2</option>\n                  <option value=\"\">3</option>\n               </select>\n            </div>\n            <div class=\"form-group\">\n               <p>选项2</p>\n               <select class=\"form-control input-sm\">\n                  <option value=\"\">默认选择</option>\n                  <option value=\"\">1</option>\n                  <option value=\"\">2</option>\n                  <option value=\"\">3</option>\n               </select>\n            </div>\n            <div class=\"form-group\">\n               <p>选项3</p>\n               <select class=\"form-control input-sm\">\n                  <option value=\"\">默认选择</option>\n                  <option value=\"\">1</option>\n                  <option value=\"\">2</option>\n                  <option value=\"\">3</option>\n               </select>\n            </div>\n            <div class=\"form-group\">\n               <p>选项4</p>\n               <select class=\"form-control input-sm\">\n                  <option value=\"\">默认选择</option>\n                  <option value=\"\">1</option>\n                  <option value=\"\">2</option>\n                  <option value=\"\">3</option>\n               </select>\n            </div>\n            <div class=\"form-group\">\n               <p>选项5</p>\n               <select class=\"form-control input-sm\">\n                  <option value=\"\">默认选择</option>\n                  <option value=\"\">1</option>\n                  <option value=\"\">2</option>\n                  <option value=\"\">3</option>\n               </select>\n            </div>\n\n            <div class=\"form-group\">\n               <label for=\"firstname\" class=\"col-sm-1 control-label\">用户名:</label>\n               <div class=\"col-sm-11\">\n                  <input type=\"text\" class=\"form-control\" id=\"username\"\n                     placeholder=\"请输入用户名\">\n               </div>\n            </div>&nbsp;\n\n            <div class=\"form-group\">\n               <label for=\"lastname\" class=\"col-sm-1 control-label\">密码：</label>\n               <div class=\"col-sm-11\">\n                  <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"请输入密码\">\n               </div>\n            </div>&nbsp;\n\n            <div class=\"form-group\">\n               <button type=\"button\" class=\"btn btn-primary\" id=\"btn1\" onclick=\"javascript:sub()\">提交</button>\n               <button type=\"button\" class=\"btn btn-success\" id=\"btn2\" onclick=\"javascript:juadge(1)\">自动填表</button>\n               <button type=\"button\" class=\"btn btn-warning\" id=\"btn3\" onclick=\"javascript:juadge(0)\">恢复默认</button>\n            </div>\n         </form>\n      </div>\n      <script type=\"text/javascript\">\n         function sub() {\n            alert(\"Submit\");\n         }\n\n         function juadge(num) {\n            //获取表单对象\n            var form = document.getElementsByTagName('form')[0];\n            var btn = document.getElementById('btn1');\n            //获取选项列表\n            var selList = form.getElementsByTagName('select');\n            var username = document.getElementById('username');\n            var password = document.getElementById('password');\n\n            if (1 == num) {\n               for (var i = 0, len = selList.length; i < len; i++) {\n                  selList[i].options[1].selected = 'selected';\n                  if (1 == i) {\n                     selList[i].options[2].selected = 'selected';\n                  };\n               }\n\n               //自动填表\n               username.value = \"test\";\n               password.value = \"test\";\n               //自动点击按钮\n               btn.click();\n            } else {\n               for (var i = 0, len = selList.length; i < len; i++) {\n                  selList[i].options[0].selected = 'selected';\n               }\n               username.value = \"\";\n               password.value = \"\";\n            }\n         };\n\n      </script>\n\n   </body>\n</html>\n```\n\n",
    "body_draft": "date: 2015-01-07<br />tags: [javascript, 自动化]\n\n---\n\n我们在浏览网页时偶尔会碰到一些需要重复选择各种选项的尴尬局面，我们希望可以有一种工具可以帮助我们自动完成填表或者选择选卡项目。\n\n<a name=\"ane9es\"></a>\n### 实现原理\n\n调用浏览器的控制台运行js脚本，从而达到自动填写表单和选择勾选项，以及自动提交等功能。\n\n<!-- more -->\n\n<a name=\"wccbgv\"></a>\n### 实现方法（例子）\n\n- 获取到表单元素，首先需要浏览到你需要操作的网页，通过浏览器的审查元素或者查看源代码可以获取到按钮/选项/输入框在文档中的位置。\n\n\n```javascript\n//获取表单对象\nvar form = document.getElementsByTagName('form')[0];\nvar btn = document.getElementById('btn1');\n//获取选项列表\nvar selList = form.getElementsByTagName('select');\nvar username = document.getElementById('username');\nvar password = document.getElementById('password');\n```\n\n- 利用js进行自动选择选项和提交功能。(自动填表也可以如法炮制)\n\n\n```javascript\n//遍历，填写选项\nfor (var i = 0, len = selList.length; i < len; i++) {\n\tselList[i].options[1].selected = 'selected';\n\tif (1 == i) {\n\t\tselList[i].options[2].selected = 'selected';\n\t};\n};\n//自动填表\nusername.value = 'test';\npassword.value = 'test';\n//自动点击按钮\nbtn.click();\n}\n```\n\n<a name=\"veydur\"></a>\n### 小结\n\n- 需要对html有基本的了解，才能快速地通过审查元素找到需要操作的DOM对象\n\n- 在一些带有iframe框架的网页，可以使用下面这条js语句获取iframe\n\n\n```javascript\nvar frame = window.frames[\"zhuti\"].document.getElementById('divJs');\n```\n\n- 在demo网页上通过浏览器控制台运行可以的显示效果\n\n\n```javascript\n(function juadge(num) {\n\t//获取表单对象\n\tvar form = document.getElementsByTagName('form')[0];\n\tvar btn = document.getElementById('btn1');\n\t//获取选项列表\n\tvar selList = form.getElementsByTagName('select');\n\tvar username = document.getElementById('username');\n\tvar password = document.getElementById('password');\n\n\tif (1 == num) {\n\t   for (var i = 0, len = selList.length; i < len; i++) {\n\t   \t\t//下标i为第i个选项，后面的下标1则是需要选取第几个选项\n\t    \tselList[i].options[1].selected = 'selected';\n\t   }\n\n\t   //自动填表，设置用户名和密码\n\t   username.value = 'test';\n\t   password.value = 'test';\n\n\t   //自动点击按钮提交\n\t   btn.click();\n\t} else {\n\t   for (var i = 0, len = selList.length; i < len; i++) {\n\t      selList[i].options[0].selected = 'selected';\n\t   }\n\t   username.value = \"\";\n\t   password.value = \"\";\n\t}\n})(num);\n//num填写1为自动处理\n//num填写0为清除表单\n```\n\n[查看demo](http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/js自动处理表单/)\n\n<a name=\"v540ts\"></a>\n### demo源代码\n\n```html\n<!DOCTYPE html>\n<html>\n   <head>\n      <title>js自动处理表单</title>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n      <!-- 引入 Bootstrap -->\n      <link href=\"http://apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n      <!-- HTML5 Shim 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 -->\n      <!-- 注意： 如果通过 file://  引入 Respond.js 文件，则该文件无法起效果 -->\n      <!--[if lt IE 9]>\n         <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n         <script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n      <![endif]-->\n   </head>\n   <body>\n      <div class=\"container\">\n         <h1>js自动处理表单</h1>\n         <form role=\"form\">\n            <div class=\"form-group\">\n               <p>选项1</p>\n               <select class=\"form-control input-sm\">\n                  <option value=\"\">默认选择</option>\n                  <option value=\"\">1</option>\n                  <option value=\"\">2</option>\n                  <option value=\"\">3</option>\n               </select>\n            </div>\n            <div class=\"form-group\">\n               <p>选项2</p>\n               <select class=\"form-control input-sm\">\n                  <option value=\"\">默认选择</option>\n                  <option value=\"\">1</option>\n                  <option value=\"\">2</option>\n                  <option value=\"\">3</option>\n               </select>\n            </div>\n            <div class=\"form-group\">\n               <p>选项3</p>\n               <select class=\"form-control input-sm\">\n                  <option value=\"\">默认选择</option>\n                  <option value=\"\">1</option>\n                  <option value=\"\">2</option>\n                  <option value=\"\">3</option>\n               </select>\n            </div>\n            <div class=\"form-group\">\n               <p>选项4</p>\n               <select class=\"form-control input-sm\">\n                  <option value=\"\">默认选择</option>\n                  <option value=\"\">1</option>\n                  <option value=\"\">2</option>\n                  <option value=\"\">3</option>\n               </select>\n            </div>\n            <div class=\"form-group\">\n               <p>选项5</p>\n               <select class=\"form-control input-sm\">\n                  <option value=\"\">默认选择</option>\n                  <option value=\"\">1</option>\n                  <option value=\"\">2</option>\n                  <option value=\"\">3</option>\n               </select>\n            </div>\n\n            <div class=\"form-group\">\n               <label for=\"firstname\" class=\"col-sm-1 control-label\">用户名:</label>\n               <div class=\"col-sm-11\">\n                  <input type=\"text\" class=\"form-control\" id=\"username\"\n                     placeholder=\"请输入用户名\">\n               </div>\n            </div>&nbsp;\n\n            <div class=\"form-group\">\n               <label for=\"lastname\" class=\"col-sm-1 control-label\">密码：</label>\n               <div class=\"col-sm-11\">\n                  <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"请输入密码\">\n               </div>\n            </div>&nbsp;\n\n            <div class=\"form-group\">\n               <button type=\"button\" class=\"btn btn-primary\" id=\"btn1\" onclick=\"javascript:sub()\">提交</button>\n               <button type=\"button\" class=\"btn btn-success\" id=\"btn2\" onclick=\"javascript:juadge(1)\">自动填表</button>\n               <button type=\"button\" class=\"btn btn-warning\" id=\"btn3\" onclick=\"javascript:juadge(0)\">恢复默认</button>\n            </div>\n         </form>\n      </div>\n      <script type=\"text/javascript\">\n         function sub() {\n            alert(\"Submit\");\n         }\n\n         function juadge(num) {\n            //获取表单对象\n            var form = document.getElementsByTagName('form')[0];\n            var btn = document.getElementById('btn1');\n            //获取选项列表\n            var selList = form.getElementsByTagName('select');\n            var username = document.getElementById('username');\n            var password = document.getElementById('password');\n\n            if (1 == num) {\n               for (var i = 0, len = selList.length; i < len; i++) {\n                  selList[i].options[1].selected = 'selected';\n                  if (1 == i) {\n                     selList[i].options[2].selected = 'selected';\n                  };\n               }\n\n               //自动填表\n               username.value = \"test\";\n               password.value = \"test\";\n               //自动点击按钮\n               btn.click();\n            } else {\n               for (var i = 0, len = selList.length; i < len; i++) {\n                  selList[i].options[0].selected = 'selected';\n               }\n               username.value = \"\";\n               password.value = \"\";\n            }\n         };\n\n      </script>\n\n   </body>\n</html>\n```\n\n",
    "body_html": "<!doctype html><p>date: 2015-01-07</p><p>tags: [javascript, 自动化]</p><hr /><p>我们在浏览网页时偶尔会碰到一些需要重复选择各种选项的尴尬局面，我们希望可以有一种工具可以帮助我们自动完成填表或者选择选卡项目。</p><p><br /></p><h3 id=\"ane9es\"><a href=\"#ane9es\"></a>实现原理</h3><p><br /></p><p>调用浏览器的控制台运行js脚本，从而达到自动填写表单和选择勾选项，以及自动提交等功能。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"wccbgv\"><a href=\"#wccbgv\"></a>实现方法（例子）</h3><p><br /></p><ul><li><p>获取到表单元素，首先需要浏览到你需要操作的网页，通过浏览器的审查元素或者查看源代码可以获取到按钮/选项/输入框在文档中的位置。</p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>//获取表单对象\nvar form = document.getElementsByTagName('form')[0];\nvar btn = document.getElementById('btn1');\n//获取选项列表\nvar selList = form.getElementsByTagName('select');\nvar username = document.getElementById('username');\nvar password = document.getElementById('password');</code></pre><p><br /></p><ul><li><p>利用js进行自动选择选项和提交功能。(自动填表也可以如法炮制)</p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>//遍历，填写选项\nfor (var i = 0, len = selList.length; i &lt; len; i++) {\n\tselList[i].options[1].selected = 'selected';\n\tif (1 == i) {\n\t\tselList[i].options[2].selected = 'selected';\n\t};\n};\n//自动填表\nusername.value = 'test';\npassword.value = 'test';\n//自动点击按钮\nbtn.click();\n}</code></pre><p><br /></p><h3 id=\"veydur\"><a href=\"#veydur\"></a>小结</h3><p><br /></p><ul><li><p>需要对html有基本的了解，才能快速地通过审查元素找到需要操作的DOM对象</p></li></ul><ul><li><p>在一些带有iframe框架的网页，可以使用下面这条js语句获取iframe</p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>var frame = window.frames[&quot;zhuti&quot;].document.getElementById('divJs');</code></pre><p><br /></p><ul><li><p>在demo网页上通过浏览器控制台运行可以的显示效果</p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>(function juadge(num) {\n\t//获取表单对象\n\tvar form = document.getElementsByTagName('form')[0];\n\tvar btn = document.getElementById('btn1');\n\t//获取选项列表\n\tvar selList = form.getElementsByTagName('select');\n\tvar username = document.getElementById('username');\n\tvar password = document.getElementById('password');\n\n\tif (1 == num) {\n\t   for (var i = 0, len = selList.length; i &lt; len; i++) {\n\t   \t\t//下标i为第i个选项，后面的下标1则是需要选取第几个选项\n\t    \tselList[i].options[1].selected = 'selected';\n\t   }\n\n\t   //自动填表，设置用户名和密码\n\t   username.value = 'test';\n\t   password.value = 'test';\n\n\t   //自动点击按钮提交\n\t   btn.click();\n\t} else {\n\t   for (var i = 0, len = selList.length; i &lt; len; i++) {\n\t      selList[i].options[0].selected = 'selected';\n\t   }\n\t   username.value = &quot;&quot;;\n\t   password.value = &quot;&quot;;\n\t}\n})(num);\n//num填写1为自动处理\n//num填写0为清除表单</code></pre><p><br /></p><p><a href=\"http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/js自动处理表单/\" target=\"_blank\">查看demo</a></p><p><br /></p><h3 id=\"v540ts\"><a href=\"#v540ts\"></a>demo源代码</h3><p><br /></p><pre data-lang=\"html\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;title&gt;js自动处理表单&lt;/title&gt;\n      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n      &lt;!-- 引入 Bootstrap --&gt;\n      &lt;link href=&quot;http://apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n\n      &lt;!-- HTML5 Shim 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 --&gt;\n      &lt;!-- 注意： 如果通过 file://  引入 Respond.js 文件，则该文件无法起效果 --&gt;\n      &lt;!--[if lt IE 9]&gt;\n         &lt;script src=&quot;https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js&quot;&gt;&lt;/script&gt;\n         &lt;script src=&quot;https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js&quot;&gt;&lt;/script&gt;\n      &lt;![endif]--&gt;\n   &lt;/head&gt;\n   &lt;body&gt;\n      &lt;div class=&quot;container&quot;&gt;\n         &lt;h1&gt;js自动处理表单&lt;/h1&gt;\n         &lt;form role=&quot;form&quot;&gt;\n            &lt;div class=&quot;form-group&quot;&gt;\n               &lt;p&gt;选项1&lt;/p&gt;\n               &lt;select class=&quot;form-control input-sm&quot;&gt;\n                  &lt;option value=&quot;&quot;&gt;默认选择&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;1&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;2&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;3&lt;/option&gt;\n               &lt;/select&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;form-group&quot;&gt;\n               &lt;p&gt;选项2&lt;/p&gt;\n               &lt;select class=&quot;form-control input-sm&quot;&gt;\n                  &lt;option value=&quot;&quot;&gt;默认选择&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;1&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;2&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;3&lt;/option&gt;\n               &lt;/select&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;form-group&quot;&gt;\n               &lt;p&gt;选项3&lt;/p&gt;\n               &lt;select class=&quot;form-control input-sm&quot;&gt;\n                  &lt;option value=&quot;&quot;&gt;默认选择&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;1&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;2&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;3&lt;/option&gt;\n               &lt;/select&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;form-group&quot;&gt;\n               &lt;p&gt;选项4&lt;/p&gt;\n               &lt;select class=&quot;form-control input-sm&quot;&gt;\n                  &lt;option value=&quot;&quot;&gt;默认选择&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;1&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;2&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;3&lt;/option&gt;\n               &lt;/select&gt;\n            &lt;/div&gt;\n            &lt;div class=&quot;form-group&quot;&gt;\n               &lt;p&gt;选项5&lt;/p&gt;\n               &lt;select class=&quot;form-control input-sm&quot;&gt;\n                  &lt;option value=&quot;&quot;&gt;默认选择&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;1&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;2&lt;/option&gt;\n                  &lt;option value=&quot;&quot;&gt;3&lt;/option&gt;\n               &lt;/select&gt;\n            &lt;/div&gt;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n               &lt;label for=&quot;firstname&quot; class=&quot;col-sm-1 control-label&quot;&gt;用户名:&lt;/label&gt;\n               &lt;div class=&quot;col-sm-11&quot;&gt;\n                  &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;username&quot;\n                     placeholder=&quot;请输入用户名&quot;&gt;\n               &lt;/div&gt;\n            &lt;/div&gt;&amp;nbsp;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n               &lt;label for=&quot;lastname&quot; class=&quot;col-sm-1 control-label&quot;&gt;密码：&lt;/label&gt;\n               &lt;div class=&quot;col-sm-11&quot;&gt;\n                  &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;password&quot; placeholder=&quot;请输入密码&quot;&gt;\n               &lt;/div&gt;\n            &lt;/div&gt;&amp;nbsp;\n\n            &lt;div class=&quot;form-group&quot;&gt;\n               &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; id=&quot;btn1&quot; onclick=&quot;javascript:sub()&quot;&gt;提交&lt;/button&gt;\n               &lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot; id=&quot;btn2&quot; onclick=&quot;javascript:juadge(1)&quot;&gt;自动填表&lt;/button&gt;\n               &lt;button type=&quot;button&quot; class=&quot;btn btn-warning&quot; id=&quot;btn3&quot; onclick=&quot;javascript:juadge(0)&quot;&gt;恢复默认&lt;/button&gt;\n            &lt;/div&gt;\n         &lt;/form&gt;\n      &lt;/div&gt;\n      &lt;script type=&quot;text/javascript&quot;&gt;\n         function sub() {\n            alert(&quot;Submit&quot;);\n         }\n\n         function juadge(num) {\n            //获取表单对象\n            var form = document.getElementsByTagName('form')[0];\n            var btn = document.getElementById('btn1');\n            //获取选项列表\n            var selList = form.getElementsByTagName('select');\n            var username = document.getElementById('username');\n            var password = document.getElementById('password');\n\n            if (1 == num) {\n               for (var i = 0, len = selList.length; i &lt; len; i++) {\n                  selList[i].options[1].selected = 'selected';\n                  if (1 == i) {\n                     selList[i].options[2].selected = 'selected';\n                  };\n               }\n\n               //自动填表\n               username.value = &quot;test&quot;;\n               password.value = &quot;test&quot;;\n               //自动点击按钮\n               btn.click();\n            } else {\n               for (var i = 0, len = selList.length; i &lt; len; i++) {\n                  selList[i].options[0].selected = 'selected';\n               }\n               username.value = &quot;&quot;;\n               password.value = &quot;&quot;;\n            }\n         };\n\n      &lt;/script&gt;\n\n   &lt;/body&gt;\n&lt;/html&gt;</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p>date: 2015-01-07</p><p>tags: [javascript, 自动化]</p><card type=\"block\" name=\"hr\"></card><p>我们在浏览网页时偶尔会碰到一些需要重复选择各种选项的尴尬局面，我们希望可以有一种工具可以帮助我们自动完成填表或者选择选卡项目。</p><p><br /></p><h3 id=\"ane9es\"><a href=\"#ane9es\" id=\"实现原理\"></a>实现原理</h3><p><br /></p><p>调用浏览器的控制台运行js脚本，从而达到自动填写表单和选择勾选项，以及自动提交等功能。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"wccbgv\"><a href=\"#wccbgv\" id=\"实现方法（例子）\"></a>实现方法（例子）</h3><p><br /></p><ul><li><p>获取到表单元素，首先需要浏览到你需要操作的网页，通过浏览器的审查元素或者查看源代码可以获取到按钮/选项/输入框在文档中的位置。</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22826424a4%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1%5Cnvar%20form%20%3D%20document.getElementsByTagName('form')%5B0%5D%3B%5Cnvar%20btn%20%3D%20document.getElementById('btn1')%3B%5Cn%2F%2F%E8%8E%B7%E5%8F%96%E9%80%89%E9%A1%B9%E5%88%97%E8%A1%A8%5Cnvar%20selList%20%3D%20form.getElementsByTagName('select')%3B%5Cnvar%20username%20%3D%20document.getElementById('username')%3B%5Cnvar%20password%20%3D%20document.getElementById('password')%3B%22%7D\"></card><p><br /></p><ul><li><p>利用js进行自动选择选项和提交功能。(自动填表也可以如法炮制)</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2293da5f6d%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E9%81%8D%E5%8E%86%EF%BC%8C%E5%A1%AB%E5%86%99%E9%80%89%E9%A1%B9%5Cnfor%20(var%20i%20%3D%200%2C%20len%20%3D%20selList.length%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%5CtselList%5Bi%5D.options%5B1%5D.selected%20%3D%20'selected'%3B%5Cn%5Ctif%20(1%20%3D%3D%20i)%20%7B%5Cn%5Ct%5CtselList%5Bi%5D.options%5B2%5D.selected%20%3D%20'selected'%3B%5Cn%5Ct%7D%3B%5Cn%7D%3B%5Cn%2F%2F%E8%87%AA%E5%8A%A8%E5%A1%AB%E8%A1%A8%5Cnusername.value%20%3D%20'test'%3B%5Cnpassword.value%20%3D%20'test'%3B%5Cn%2F%2F%E8%87%AA%E5%8A%A8%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%5Cnbtn.click()%3B%5Cn%7D%22%7D\"></card><p><br /></p><h3 id=\"veydur\"><a href=\"#veydur\" id=\"小结\"></a>小结</h3><p><br /></p><ul><li><p>需要对html有基本的了解，才能快速地通过审查元素找到需要操作的DOM对象</p></li></ul><ul><li><p>在一些带有iframe框架的网页，可以使用下面这条js语句获取iframe</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c10c29b0%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20frame%20%3D%20window.frames%5B%5C%22zhuti%5C%22%5D.document.getElementById('divJs')%3B%22%7D\"></card><p><br /></p><ul><li><p>在demo网页上通过浏览器控制台运行可以的显示效果</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22dba05c09%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function%20juadge(num)%20%7B%5Cn%5Ct%2F%2F%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1%5Cn%5Ctvar%20form%20%3D%20document.getElementsByTagName('form')%5B0%5D%3B%5Cn%5Ctvar%20btn%20%3D%20document.getElementById('btn1')%3B%5Cn%5Ct%2F%2F%E8%8E%B7%E5%8F%96%E9%80%89%E9%A1%B9%E5%88%97%E8%A1%A8%5Cn%5Ctvar%20selList%20%3D%20form.getElementsByTagName('select')%3B%5Cn%5Ctvar%20username%20%3D%20document.getElementById('username')%3B%5Cn%5Ctvar%20password%20%3D%20document.getElementById('password')%3B%5Cn%5Cn%5Ctif%20(1%20%3D%3D%20num)%20%7B%5Cn%5Ct%20%20%20for%20(var%20i%20%3D%200%2C%20len%20%3D%20selList.length%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%5Ct%20%20%20%5Ct%5Ct%2F%2F%E4%B8%8B%E6%A0%87i%E4%B8%BA%E7%AC%ACi%E4%B8%AA%E9%80%89%E9%A1%B9%EF%BC%8C%E5%90%8E%E9%9D%A2%E7%9A%84%E4%B8%8B%E6%A0%871%E5%88%99%E6%98%AF%E9%9C%80%E8%A6%81%E9%80%89%E5%8F%96%E7%AC%AC%E5%87%A0%E4%B8%AA%E9%80%89%E9%A1%B9%5Cn%5Ct%20%20%20%20%5CtselList%5Bi%5D.options%5B1%5D.selected%20%3D%20'selected'%3B%5Cn%5Ct%20%20%20%7D%5Cn%5Cn%5Ct%20%20%20%2F%2F%E8%87%AA%E5%8A%A8%E5%A1%AB%E8%A1%A8%EF%BC%8C%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%5Cn%5Ct%20%20%20username.value%20%3D%20'test'%3B%5Cn%5Ct%20%20%20password.value%20%3D%20'test'%3B%5Cn%5Cn%5Ct%20%20%20%2F%2F%E8%87%AA%E5%8A%A8%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E6%8F%90%E4%BA%A4%5Cn%5Ct%20%20%20btn.click()%3B%5Cn%5Ct%7D%20else%20%7B%5Cn%5Ct%20%20%20for%20(var%20i%20%3D%200%2C%20len%20%3D%20selList.length%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%5Ct%20%20%20%20%20%20selList%5Bi%5D.options%5B0%5D.selected%20%3D%20'selected'%3B%5Cn%5Ct%20%20%20%7D%5Cn%5Ct%20%20%20username.value%20%3D%20%5C%22%5C%22%3B%5Cn%5Ct%20%20%20password.value%20%3D%20%5C%22%5C%22%3B%5Cn%5Ct%7D%5Cn%7D)(num)%3B%5Cn%2F%2Fnum%E5%A1%AB%E5%86%991%E4%B8%BA%E8%87%AA%E5%8A%A8%E5%A4%84%E7%90%86%5Cn%2F%2Fnum%E5%A1%AB%E5%86%990%E4%B8%BA%E6%B8%85%E9%99%A4%E8%A1%A8%E5%8D%95%22%7D\"></card><p><br /></p><p><a href=\"http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/js自动处理表单/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">查看demo</a></p><p><br /></p><h3 id=\"v540ts\"><a href=\"#v540ts\" id=\"demo源代码\"></a>demo源代码</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%224065562d%22%2C%22mode%22%3A%22html%22%2C%22code%22%3A%22%3C!DOCTYPE%20html%3E%5Cn%3Chtml%3E%5Cn%20%20%20%3Chead%3E%5Cn%20%20%20%20%20%20%3Ctitle%3Ejs%E8%87%AA%E5%8A%A8%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%3C%2Ftitle%3E%5Cn%20%20%20%20%20%20%3Cmeta%20name%3D%5C%22viewport%5C%22%20content%3D%5C%22width%3Ddevice-width%2C%20initial-scale%3D1.0%5C%22%3E%5Cn%20%20%20%20%20%20%3Cmeta%20http-equiv%3D%5C%22Content-Type%5C%22%20content%3D%5C%22text%2Fhtml%3B%20charset%3Dutf-8%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C!--%20%E5%BC%95%E5%85%A5%20Bootstrap%20--%3E%5Cn%20%20%20%20%20%20%3Clink%20href%3D%5C%22http%3A%2F%2Fapps.bdimg.com%2Flibs%2Fbootstrap%2F3.3.0%2Fcss%2Fbootstrap.min.css%5C%22%20rel%3D%5C%22stylesheet%5C%22%3E%5Cn%5Cn%20%20%20%20%20%20%3C!--%20HTML5%20Shim%20%E5%92%8C%20Respond.js%20%E7%94%A8%E4%BA%8E%E8%AE%A9%20IE8%20%E6%94%AF%E6%8C%81%20HTML5%E5%85%83%E7%B4%A0%E5%92%8C%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%20--%3E%5Cn%20%20%20%20%20%20%3C!--%20%E6%B3%A8%E6%84%8F%EF%BC%9A%20%E5%A6%82%E6%9E%9C%E9%80%9A%E8%BF%87%20file%3A%2F%2F%20%20%E5%BC%95%E5%85%A5%20Respond.js%20%E6%96%87%E4%BB%B6%EF%BC%8C%E5%88%99%E8%AF%A5%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E8%B5%B7%E6%95%88%E6%9E%9C%20--%3E%5Cn%20%20%20%20%20%20%3C!--%5Bif%20lt%20IE%209%5D%3E%5Cn%20%20%20%20%20%20%20%20%20%3Cscript%20src%3D%5C%22https%3A%2F%2Foss.maxcdn.com%2Flibs%2Fhtml5shiv%2F3.7.0%2Fhtml5shiv.js%5C%22%3E%3C%2Fscript%3E%5Cn%20%20%20%20%20%20%20%20%20%3Cscript%20src%3D%5C%22https%3A%2F%2Foss.maxcdn.com%2Flibs%2Frespond.js%2F1.3.0%2Frespond.min.js%5C%22%3E%3C%2Fscript%3E%5Cn%20%20%20%20%20%20%3C!%5Bendif%5D--%3E%5Cn%20%20%20%3C%2Fhead%3E%5Cn%20%20%20%3Cbody%3E%5Cn%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22container%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%3Ch1%3Ejs%E8%87%AA%E5%8A%A8%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%20%20%20%3Cform%20role%3D%5C%22form%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%E9%80%89%E9%A1%B91%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cselect%20class%3D%5C%22form-control%20input-sm%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E%E9%BB%98%E8%AE%A4%E9%80%89%E6%8B%A9%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E1%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E2%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E3%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%E9%80%89%E9%A1%B92%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cselect%20class%3D%5C%22form-control%20input-sm%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E%E9%BB%98%E8%AE%A4%E9%80%89%E6%8B%A9%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E1%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E2%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E3%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%E9%80%89%E9%A1%B93%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cselect%20class%3D%5C%22form-control%20input-sm%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E%E9%BB%98%E8%AE%A4%E9%80%89%E6%8B%A9%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E1%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E2%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E3%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%E9%80%89%E9%A1%B94%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cselect%20class%3D%5C%22form-control%20input-sm%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E%E9%BB%98%E8%AE%A4%E9%80%89%E6%8B%A9%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E1%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E2%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E3%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%E9%80%89%E9%A1%B95%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cselect%20class%3D%5C%22form-control%20input-sm%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E%E9%BB%98%E8%AE%A4%E9%80%89%E6%8B%A9%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E1%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E2%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E3%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Clabel%20for%3D%5C%22firstname%5C%22%20class%3D%5C%22col-sm-1%20control-label%5C%22%3E%E7%94%A8%E6%88%B7%E5%90%8D%3A%3C%2Flabel%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22col-sm-11%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20class%3D%5C%22form-control%5C%22%20id%3D%5C%22username%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20placeholder%3D%5C%22%E8%AF%B7%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%26nbsp%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Clabel%20for%3D%5C%22lastname%5C%22%20class%3D%5C%22col-sm-1%20control-label%5C%22%3E%E5%AF%86%E7%A0%81%EF%BC%9A%3C%2Flabel%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22col-sm-11%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D%5C%22password%5C%22%20class%3D%5C%22form-control%5C%22%20id%3D%5C%22password%5C%22%20placeholder%3D%5C%22%E8%AF%B7%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%26nbsp%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20type%3D%5C%22button%5C%22%20class%3D%5C%22btn%20btn-primary%5C%22%20id%3D%5C%22btn1%5C%22%20onclick%3D%5C%22javascript%3Asub()%5C%22%3E%E6%8F%90%E4%BA%A4%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20type%3D%5C%22button%5C%22%20class%3D%5C%22btn%20btn-success%5C%22%20id%3D%5C%22btn2%5C%22%20onclick%3D%5C%22javascript%3Ajuadge(1)%5C%22%3E%E8%87%AA%E5%8A%A8%E5%A1%AB%E8%A1%A8%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20type%3D%5C%22button%5C%22%20class%3D%5C%22btn%20btn-warning%5C%22%20id%3D%5C%22btn3%5C%22%20onclick%3D%5C%22javascript%3Ajuadge(0)%5C%22%3E%E6%81%A2%E5%A4%8D%E9%BB%98%E8%AE%A4%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%3C%2Fform%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20function%20sub()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20alert(%5C%22Submit%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20function%20juadge(num)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20var%20form%20%3D%20document.getElementsByTagName('form')%5B0%5D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20var%20btn%20%3D%20document.getElementById('btn1')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E9%80%89%E9%A1%B9%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20%20%20%20%20%20%20%20var%20selList%20%3D%20form.getElementsByTagName('select')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20var%20username%20%3D%20document.getElementById('username')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20var%20password%20%3D%20document.getElementById('password')%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(1%20%3D%3D%20num)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20(var%20i%20%3D%200%2C%20len%20%3D%20selList.length%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20selList%5Bi%5D.options%5B1%5D.selected%20%3D%20'selected'%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(1%20%3D%3D%20i)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20selList%5Bi%5D.options%5B2%5D.selected%20%3D%20'selected'%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%87%AA%E5%8A%A8%E5%A1%AB%E8%A1%A8%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20username.value%20%3D%20%5C%22test%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20password.value%20%3D%20%5C%22test%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%87%AA%E5%8A%A8%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20btn.click()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20(var%20i%20%3D%200%2C%20len%20%3D%20selList.length%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20selList%5Bi%5D.options%5B0%5D.selected%20%3D%20'selected'%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20username.value%20%3D%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20password.value%20%3D%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%7D%3B%5Cn%5Cn%20%20%20%20%20%20%3C%2Fscript%3E%5Cn%5Cn%20%20%20%3C%2Fbody%3E%5Cn%3C%2Fhtml%3E%22%7D\"></card><p><br /></p>",
    "body_draft_lake": "<!doctype lake><p>date: 2015-01-07</p><p>tags: [javascript, 自动化]</p><card type=\"block\" name=\"hr\"></card><p>我们在浏览网页时偶尔会碰到一些需要重复选择各种选项的尴尬局面，我们希望可以有一种工具可以帮助我们自动完成填表或者选择选卡项目。</p><p><br /></p><h3 id=\"ane9es\"><a href=\"#ane9es\" id=\"实现原理\"></a>实现原理</h3><p><br /></p><p>调用浏览器的控制台运行js脚本，从而达到自动填写表单和选择勾选项，以及自动提交等功能。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"wccbgv\"><a href=\"#wccbgv\" id=\"实现方法（例子）\"></a>实现方法（例子）</h3><p><br /></p><ul><li><p>获取到表单元素，首先需要浏览到你需要操作的网页，通过浏览器的审查元素或者查看源代码可以获取到按钮/选项/输入框在文档中的位置。</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22826424a4%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1%5Cnvar%20form%20%3D%20document.getElementsByTagName('form')%5B0%5D%3B%5Cnvar%20btn%20%3D%20document.getElementById('btn1')%3B%5Cn%2F%2F%E8%8E%B7%E5%8F%96%E9%80%89%E9%A1%B9%E5%88%97%E8%A1%A8%5Cnvar%20selList%20%3D%20form.getElementsByTagName('select')%3B%5Cnvar%20username%20%3D%20document.getElementById('username')%3B%5Cnvar%20password%20%3D%20document.getElementById('password')%3B%22%7D\"></card><p><br /></p><ul><li><p>利用js进行自动选择选项和提交功能。(自动填表也可以如法炮制)</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2293da5f6d%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E9%81%8D%E5%8E%86%EF%BC%8C%E5%A1%AB%E5%86%99%E9%80%89%E9%A1%B9%5Cnfor%20(var%20i%20%3D%200%2C%20len%20%3D%20selList.length%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%5CtselList%5Bi%5D.options%5B1%5D.selected%20%3D%20'selected'%3B%5Cn%5Ctif%20(1%20%3D%3D%20i)%20%7B%5Cn%5Ct%5CtselList%5Bi%5D.options%5B2%5D.selected%20%3D%20'selected'%3B%5Cn%5Ct%7D%3B%5Cn%7D%3B%5Cn%2F%2F%E8%87%AA%E5%8A%A8%E5%A1%AB%E8%A1%A8%5Cnusername.value%20%3D%20'test'%3B%5Cnpassword.value%20%3D%20'test'%3B%5Cn%2F%2F%E8%87%AA%E5%8A%A8%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%5Cnbtn.click()%3B%5Cn%7D%22%7D\"></card><p><br /></p><h3 id=\"veydur\"><a href=\"#veydur\" id=\"小结\"></a>小结</h3><p><br /></p><ul><li><p>需要对html有基本的了解，才能快速地通过审查元素找到需要操作的DOM对象</p></li></ul><ul><li><p>在一些带有iframe框架的网页，可以使用下面这条js语句获取iframe</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c10c29b0%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20frame%20%3D%20window.frames%5B%5C%22zhuti%5C%22%5D.document.getElementById('divJs')%3B%22%7D\"></card><p><br /></p><ul><li><p>在demo网页上通过浏览器控制台运行可以的显示效果</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22dba05c09%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function%20juadge(num)%20%7B%5Cn%5Ct%2F%2F%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1%5Cn%5Ctvar%20form%20%3D%20document.getElementsByTagName('form')%5B0%5D%3B%5Cn%5Ctvar%20btn%20%3D%20document.getElementById('btn1')%3B%5Cn%5Ct%2F%2F%E8%8E%B7%E5%8F%96%E9%80%89%E9%A1%B9%E5%88%97%E8%A1%A8%5Cn%5Ctvar%20selList%20%3D%20form.getElementsByTagName('select')%3B%5Cn%5Ctvar%20username%20%3D%20document.getElementById('username')%3B%5Cn%5Ctvar%20password%20%3D%20document.getElementById('password')%3B%5Cn%5Cn%5Ctif%20(1%20%3D%3D%20num)%20%7B%5Cn%5Ct%20%20%20for%20(var%20i%20%3D%200%2C%20len%20%3D%20selList.length%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%5Ct%20%20%20%5Ct%5Ct%2F%2F%E4%B8%8B%E6%A0%87i%E4%B8%BA%E7%AC%ACi%E4%B8%AA%E9%80%89%E9%A1%B9%EF%BC%8C%E5%90%8E%E9%9D%A2%E7%9A%84%E4%B8%8B%E6%A0%871%E5%88%99%E6%98%AF%E9%9C%80%E8%A6%81%E9%80%89%E5%8F%96%E7%AC%AC%E5%87%A0%E4%B8%AA%E9%80%89%E9%A1%B9%5Cn%5Ct%20%20%20%20%5CtselList%5Bi%5D.options%5B1%5D.selected%20%3D%20'selected'%3B%5Cn%5Ct%20%20%20%7D%5Cn%5Cn%5Ct%20%20%20%2F%2F%E8%87%AA%E5%8A%A8%E5%A1%AB%E8%A1%A8%EF%BC%8C%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%5Cn%5Ct%20%20%20username.value%20%3D%20'test'%3B%5Cn%5Ct%20%20%20password.value%20%3D%20'test'%3B%5Cn%5Cn%5Ct%20%20%20%2F%2F%E8%87%AA%E5%8A%A8%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E6%8F%90%E4%BA%A4%5Cn%5Ct%20%20%20btn.click()%3B%5Cn%5Ct%7D%20else%20%7B%5Cn%5Ct%20%20%20for%20(var%20i%20%3D%200%2C%20len%20%3D%20selList.length%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%5Ct%20%20%20%20%20%20selList%5Bi%5D.options%5B0%5D.selected%20%3D%20'selected'%3B%5Cn%5Ct%20%20%20%7D%5Cn%5Ct%20%20%20username.value%20%3D%20%5C%22%5C%22%3B%5Cn%5Ct%20%20%20password.value%20%3D%20%5C%22%5C%22%3B%5Cn%5Ct%7D%5Cn%7D)(num)%3B%5Cn%2F%2Fnum%E5%A1%AB%E5%86%991%E4%B8%BA%E8%87%AA%E5%8A%A8%E5%A4%84%E7%90%86%5Cn%2F%2Fnum%E5%A1%AB%E5%86%990%E4%B8%BA%E6%B8%85%E9%99%A4%E8%A1%A8%E5%8D%95%22%7D\"></card><p><br /></p><p><a href=\"http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/js自动处理表单/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">查看demo</a></p><p><br /></p><h3 id=\"v540ts\"><a href=\"#v540ts\" id=\"demo源代码\"></a>demo源代码</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%224065562d%22%2C%22mode%22%3A%22html%22%2C%22code%22%3A%22%3C!DOCTYPE%20html%3E%5Cn%3Chtml%3E%5Cn%20%20%20%3Chead%3E%5Cn%20%20%20%20%20%20%3Ctitle%3Ejs%E8%87%AA%E5%8A%A8%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%3C%2Ftitle%3E%5Cn%20%20%20%20%20%20%3Cmeta%20name%3D%5C%22viewport%5C%22%20content%3D%5C%22width%3Ddevice-width%2C%20initial-scale%3D1.0%5C%22%3E%5Cn%20%20%20%20%20%20%3Cmeta%20http-equiv%3D%5C%22Content-Type%5C%22%20content%3D%5C%22text%2Fhtml%3B%20charset%3Dutf-8%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C!--%20%E5%BC%95%E5%85%A5%20Bootstrap%20--%3E%5Cn%20%20%20%20%20%20%3Clink%20href%3D%5C%22http%3A%2F%2Fapps.bdimg.com%2Flibs%2Fbootstrap%2F3.3.0%2Fcss%2Fbootstrap.min.css%5C%22%20rel%3D%5C%22stylesheet%5C%22%3E%5Cn%5Cn%20%20%20%20%20%20%3C!--%20HTML5%20Shim%20%E5%92%8C%20Respond.js%20%E7%94%A8%E4%BA%8E%E8%AE%A9%20IE8%20%E6%94%AF%E6%8C%81%20HTML5%E5%85%83%E7%B4%A0%E5%92%8C%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%20--%3E%5Cn%20%20%20%20%20%20%3C!--%20%E6%B3%A8%E6%84%8F%EF%BC%9A%20%E5%A6%82%E6%9E%9C%E9%80%9A%E8%BF%87%20file%3A%2F%2F%20%20%E5%BC%95%E5%85%A5%20Respond.js%20%E6%96%87%E4%BB%B6%EF%BC%8C%E5%88%99%E8%AF%A5%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E8%B5%B7%E6%95%88%E6%9E%9C%20--%3E%5Cn%20%20%20%20%20%20%3C!--%5Bif%20lt%20IE%209%5D%3E%5Cn%20%20%20%20%20%20%20%20%20%3Cscript%20src%3D%5C%22https%3A%2F%2Foss.maxcdn.com%2Flibs%2Fhtml5shiv%2F3.7.0%2Fhtml5shiv.js%5C%22%3E%3C%2Fscript%3E%5Cn%20%20%20%20%20%20%20%20%20%3Cscript%20src%3D%5C%22https%3A%2F%2Foss.maxcdn.com%2Flibs%2Frespond.js%2F1.3.0%2Frespond.min.js%5C%22%3E%3C%2Fscript%3E%5Cn%20%20%20%20%20%20%3C!%5Bendif%5D--%3E%5Cn%20%20%20%3C%2Fhead%3E%5Cn%20%20%20%3Cbody%3E%5Cn%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22container%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%3Ch1%3Ejs%E8%87%AA%E5%8A%A8%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%20%20%20%3Cform%20role%3D%5C%22form%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%E9%80%89%E9%A1%B91%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cselect%20class%3D%5C%22form-control%20input-sm%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E%E9%BB%98%E8%AE%A4%E9%80%89%E6%8B%A9%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E1%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E2%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E3%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%E9%80%89%E9%A1%B92%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cselect%20class%3D%5C%22form-control%20input-sm%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E%E9%BB%98%E8%AE%A4%E9%80%89%E6%8B%A9%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E1%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E2%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E3%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%E9%80%89%E9%A1%B93%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cselect%20class%3D%5C%22form-control%20input-sm%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E%E9%BB%98%E8%AE%A4%E9%80%89%E6%8B%A9%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E1%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E2%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E3%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%E9%80%89%E9%A1%B94%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cselect%20class%3D%5C%22form-control%20input-sm%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E%E9%BB%98%E8%AE%A4%E9%80%89%E6%8B%A9%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E1%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E2%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E3%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cp%3E%E9%80%89%E9%A1%B95%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cselect%20class%3D%5C%22form-control%20input-sm%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E%E9%BB%98%E8%AE%A4%E9%80%89%E6%8B%A9%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E1%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E2%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Coption%20value%3D%5C%22%5C%22%3E3%3C%2Foption%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fselect%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Clabel%20for%3D%5C%22firstname%5C%22%20class%3D%5C%22col-sm-1%20control-label%5C%22%3E%E7%94%A8%E6%88%B7%E5%90%8D%3A%3C%2Flabel%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22col-sm-11%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20class%3D%5C%22form-control%5C%22%20id%3D%5C%22username%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20placeholder%3D%5C%22%E8%AF%B7%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%26nbsp%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Clabel%20for%3D%5C%22lastname%5C%22%20class%3D%5C%22col-sm-1%20control-label%5C%22%3E%E5%AF%86%E7%A0%81%EF%BC%9A%3C%2Flabel%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22col-sm-11%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D%5C%22password%5C%22%20class%3D%5C%22form-control%5C%22%20id%3D%5C%22password%5C%22%20placeholder%3D%5C%22%E8%AF%B7%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%26nbsp%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22form-group%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20type%3D%5C%22button%5C%22%20class%3D%5C%22btn%20btn-primary%5C%22%20id%3D%5C%22btn1%5C%22%20onclick%3D%5C%22javascript%3Asub()%5C%22%3E%E6%8F%90%E4%BA%A4%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20type%3D%5C%22button%5C%22%20class%3D%5C%22btn%20btn-success%5C%22%20id%3D%5C%22btn2%5C%22%20onclick%3D%5C%22javascript%3Ajuadge(1)%5C%22%3E%E8%87%AA%E5%8A%A8%E5%A1%AB%E8%A1%A8%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20type%3D%5C%22button%5C%22%20class%3D%5C%22btn%20btn-warning%5C%22%20id%3D%5C%22btn3%5C%22%20onclick%3D%5C%22javascript%3Ajuadge(0)%5C%22%3E%E6%81%A2%E5%A4%8D%E9%BB%98%E8%AE%A4%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%3C%2Fform%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20function%20sub()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20alert(%5C%22Submit%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20function%20juadge(num)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20var%20form%20%3D%20document.getElementsByTagName('form')%5B0%5D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20var%20btn%20%3D%20document.getElementById('btn1')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E9%80%89%E9%A1%B9%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20%20%20%20%20%20%20%20var%20selList%20%3D%20form.getElementsByTagName('select')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20var%20username%20%3D%20document.getElementById('username')%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20var%20password%20%3D%20document.getElementById('password')%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(1%20%3D%3D%20num)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20(var%20i%20%3D%200%2C%20len%20%3D%20selList.length%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20selList%5Bi%5D.options%5B1%5D.selected%20%3D%20'selected'%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(1%20%3D%3D%20i)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20selList%5Bi%5D.options%5B2%5D.selected%20%3D%20'selected'%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%87%AA%E5%8A%A8%E5%A1%AB%E8%A1%A8%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20username.value%20%3D%20%5C%22test%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20password.value%20%3D%20%5C%22test%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%87%AA%E5%8A%A8%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20btn.click()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20(var%20i%20%3D%200%2C%20len%20%3D%20selList.length%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20selList%5Bi%5D.options%5B0%5D.selected%20%3D%20'selected'%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20username.value%20%3D%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20password.value%20%3D%20%5C%22%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%7D%3B%5Cn%5Cn%20%20%20%20%20%20%3C%2Fscript%3E%5Cn%5Cn%20%20%20%3C%2Fbody%3E%5Cn%3C%2Fhtml%3E%22%7D\"></card><p><br /></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T09:40:58.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:38:10.000Z",
    "updated_at": "2020-07-19T11:46:06.000Z",
    "published_at": "2018-09-15T09:40:58.000Z",
    "first_published_at": null,
    "word_count": 1629,
    "cover": null,
    "description": "date: 2015-01-07tags: [javascript, 自动化]我们在浏览网页时偶尔会碰到一些需要重复选择各种选项的尴尬局面，我们希望可以有一种工具可以帮助我们自动完成填表或者选择选卡项目。实现原理调用浏览器的控制台运行js脚本，从而达到自动填写表单和选择勾选项，以及自动提交等功能。&lt;!-- more --&gt;实现方法（例子）获取到表单元素，首先需要浏览到你需要操作的网页，通过浏览器的审查元素或者查看源代码可以获取到按钮/选项/输入框在文档中的位置。//获取表单对象 var...",
    "custom_description": null,
    "hits": 3438,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709041,
    "slug": "mdfepb",
    "title": "JavaScript的一些定位属性",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [javascript]<br />date: 2015-01-20\n\n---\n\n<a name=\"qb03hx\"></a>\n### Javascript 定位属性\n\n- clientHeight\\clientWidth<br />可见窗口除去margin和border之后的高度\\宽度\n\n\n- offsetHeight\\offsetWidth<br />clientHeight的基础上加border和滚动条的高度\\宽度\n\n\n<!-- more -->\n\n- scrollHeight\\scrollWidth<br />元素内容的实际高度（内容多了可能会改变对象的实际宽度）\n\n\n- clientTop\\clientLeft<br />子元素margin之后父元素padding之前的高度\\宽度\n\n\n- offsetTop\\offsetLeft<br />该元素的上border的上边缘到该元素的offsetParent的上border内边缘的垂直\\水平距离\n\n\n- scrollTop\\scrollLeft<br />对象的最顶部（左侧）到对象在当前窗口显示的范围内的顶边（左边）的距离，即是在出现了纵向滚动条的情况下，滚动条拉动的距离\n\n\n关于offsetParent，不同的浏览器有不同的实现算法，其中一种常见布局在各种浏览器中 offsetParent 是一样的：<br />外层元素div的position计算值是relative、absolute时，内层元素div的offsetParent 总是外层元素div。\n\n<a name=\"8btqgx\"></a>\n### 下面是一个简单的demo页面\n\n[查看demo](http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/JS定位属性/)\n\n",
    "body_draft": "tags: [javascript]\ndate: 2015-01-20\n\n---\n\n### <a name=\"qb03hx\"></a>Javascript 定位属性\n\n* clientHeight\\clientWidth\n    可见窗口除去margin和border之后的高度\\宽度\n\n* offsetHeight\\offsetWidth\n    clientHeight的基础上加border和滚动条的高度\\宽度\n\n<!-- more -->\n\n* scrollHeight\\scrollWidth\n    元素内容的实际高度（内容多了可能会改变对象的实际宽度）\n\n* clientTop\\clientLeft\n    子元素margin之后父元素padding之前的高度\\宽度\n\n* offsetTop\\offsetLeft\n    该元素的上border的上边缘到该元素的offsetParent的上border内边缘的垂直\\水平距离\n\n* scrollTop\\scrollLeft\n    对象的最顶部（左侧）到对象在当前窗口显示的范围内的顶边（左边）的距离，即是在出现了纵向滚动条的情况下，滚动条拉动的距离\n\n关于offsetParent，不同的浏览器有不同的实现算法，其中一种常见布局在各种浏览器中 offsetParent 是一样的：\n外层元素div的position计算值是relative、absolute时，内层元素div的offsetParent 总是外层元素div。\n\n### <a name=\"8btqgx\"></a>下面是一个简单的demo页面\n\n[查看demo](http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/JS定位属性/)\n\n",
    "body_html": "<p>tags: [javascript]</p><p>date: 2015-01-20</p><hr /><h3 id=\"qb03hx\"><a href=\"#qb03hx\"></a>Javascript 定位属性</h3><p><br /></p><ul><li><p>clientHeight\\clientWidth<br />可见窗口除去margin和border之后的高度\\宽度</p></li></ul><p><br /></p><ul><li><p>offsetHeight\\offsetWidth<br />clientHeight的基础上加border和滚动条的高度\\宽度</p></li></ul><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><ul><li><p>scrollHeight\\scrollWidth<br />元素内容的实际高度（内容多了可能会改变对象的实际宽度）</p></li></ul><p><br /></p><ul><li><p>clientTop\\clientLeft<br />子元素margin之后父元素padding之前的高度\\宽度</p></li></ul><p><br /></p><ul><li><p>offsetTop\\offsetLeft<br />该元素的上border的上边缘到该元素的offsetParent的上border内边缘的垂直\\水平距离</p></li></ul><p><br /></p><ul><li><p>scrollTop\\scrollLeft<br />对象的最顶部（左侧）到对象在当前窗口显示的范围内的顶边（左边）的距离，即是在出现了纵向滚动条的情况下，滚动条拉动的距离</p></li></ul><p><br /></p><p>关于offsetParent，不同的浏览器有不同的实现算法，其中一种常见布局在各种浏览器中 offsetParent 是一样的：<br />外层元素div的position计算值是relative、absolute时，内层元素div的offsetParent 总是外层元素div。</p><p><br /></p><h3 id=\"8btqgx\"><a href=\"#8btqgx\"></a>下面是一个简单的demo页面</h3><p><br /></p><p><a href=\"http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/JS定位属性/\" target=\"_blank\">查看demo</a></p><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [javascript]</p><p>date: 2015-01-20</p><card type=\"block\" name=\"hr\"></card><h3 id=\"qb03hx\"><a href=\"#qb03hx\" id=\"javascript-定位属性\"></a>Javascript 定位属性</h3><p><br /></p><ul><li><p>clientHeight\\clientWidth<br />可见窗口除去margin和border之后的高度\\宽度</p></li></ul><p><br /></p><ul><li><p>offsetHeight\\offsetWidth<br />clientHeight的基础上加border和滚动条的高度\\宽度</p></li></ul><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><ul><li><p>scrollHeight\\scrollWidth<br />元素内容的实际高度（内容多了可能会改变对象的实际宽度）</p></li></ul><p><br /></p><ul><li><p>clientTop\\clientLeft<br />子元素margin之后父元素padding之前的高度\\宽度</p></li></ul><p><br /></p><ul><li><p>offsetTop\\offsetLeft<br />该元素的上border的上边缘到该元素的offsetParent的上border内边缘的垂直\\水平距离</p></li></ul><p><br /></p><ul><li><p>scrollTop\\scrollLeft<br />对象的最顶部（左侧）到对象在当前窗口显示的范围内的顶边（左边）的距离，即是在出现了纵向滚动条的情况下，滚动条拉动的距离</p></li></ul><p><br /></p><p>关于offsetParent，不同的浏览器有不同的实现算法，其中一种常见布局在各种浏览器中 offsetParent 是一样的：<br />外层元素div的position计算值是relative、absolute时，内层元素div的offsetParent 总是外层元素div。</p><p><br /></p><h3 id=\"8btqgx\"><a href=\"#8btqgx\" id=\"下面是一个简单的demo页面\"></a>下面是一个简单的demo页面</h3><p><br /></p><p><a href=\"http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/JS定位属性/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">查看demo</a></p><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [javascript]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-01-20\"],[\"hr\",{\"id\":\"yrfwan\"}],[\"h3\",{\"id\":\"qb03hx\"},\"Javascript 定位属性\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"clientHeight\\\\clientWidth\\n可见窗口除去margin和border之后的高度\\\\宽度\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"offsetHeight\\\\offsetWidth\\nclientHeight的基础上加border和滚动条的高度\\\\宽度\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"scrollHeight\\\\scrollWidth\\n元素内容的实际高度（内容多了可能会改变对象的实际宽度）\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"clientTop\\\\clientLeft\\n子元素margin之后父元素padding之前的高度\\\\宽度\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"offsetTop\\\\offsetLeft\\n该元素的上border的上边缘到该元素的offsetParent的上border内边缘的垂直\\\\水平距离\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"scrollTop\\\\scrollLeft\\n对象的最顶部（左侧）到对象在当前窗口显示的范围内的顶边（左边）的距离，即是在出现了纵向滚动条的情况下，滚动条拉动的距离\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"关于offsetParent，不同的浏览器有不同的实现算法，其中一种常见布局在各种浏览器中 offsetParent 是一样的：\\n外层元素div的position计算值是relative、absolute时，内层元素div的offsetParent 总是外层元素div。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"8btqgx\"},\"下面是一个简单的demo页面\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"a\",{\"title\":\"\",\"href\":\"http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/JS定位属性/\"},\"查看demo\"],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:08:26.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:37:31.000Z",
    "updated_at": "2019-09-05T01:51:40.000Z",
    "published_at": "2018-09-15T08:08:26.000Z",
    "first_published_at": null,
    "word_count": 261,
    "cover": null,
    "description": "tags: [javascript]date: 2015-01-20Javascript 定位属性clientHeight\\clientWidth 可见窗口除去margin和border之后的高度\\宽度offsetHeight\\offsetWidth clientHeight的基础上加border和滚动条的高度\\宽度&lt;!-- more --&gt;scrollHeight\\scrollWidth 元素内容的实际高度（内容多了可能会改变对象的实际宽度）clientTop\\clientLeft...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709040,
    "slug": "ki4660",
    "title": "Javascript ajax获取xml",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [javascript, xml]<br />date: 2015-02-12\n\n---\n\n<a name=\"drxfnz\"></a>\n### ajax简介\n\n- AJAX = 异步 JavaScript 和 XML\n\n- AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术\n\n- AJAX 是一种用于创建快速动态网页的技术\n\n\n<!-- more -->\n\n<a name=\"lucpnp\"></a>\n### ajax操作xml可以快速建立轻量级的动态网站,下面是实例：\n\n[查看demo](http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/ajax/html/)\n\n- /js/state.js\n\n\n```javascript\nfunction loadXMLDoc(url) {\n\tvar xmlhttp;\n\tvar content,tr,temp,data;\n\t// 创建请求对象\n\tif (window.XMLHttpRequest) {\n\t\t// code for IE7+, Firefox, Chrome, Opera, Safari\n\t\txmlhttp = new XMLHttpRequest();\n\t} else {\n\t\t// code for IE6, IE5\n\t\txmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\t}\n\t// 处理返回的请求，其中返回的格式为XML\n\txmlhttp.onreadystatechange = function() {\n\t\t// 注意当xml为本地文件时，xmlhttp.status一直保持为0\n\t\tif (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\n\t\t\tvar List = xmlhttp.responseXML.documentElement.getElementsByTagName(\"CONTACT\");\n\t\t\tfor (var i = 0; i < List.length ; i++) {\n\t\t\t\tcontent = document.getElementById('content-box');\n\t\t\t\ttr = document.createElement('tr');\n\t\t\t\ttemp = \"<td>\" + (i+1) + \"</td>\";\n\t\t\t\tdata = List[i].getElementsByTagName(\"NAME\");\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += \"<td>\" + data[0].firstChild.nodeValue + \"</td>\";\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += \"<td> </td>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata = List[i].getElementsByTagName(\"PHONE\");\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += \"<td>\" + data[0].firstChild.nodeValue + \"</td>\";\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += \"<td> </td>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata = List[i].getElementsByTagName(\"EMAIL\");\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += \"<td>\" + data[0].firstChild.nodeValue + \"</td>\";\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += \"<td> </td>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata = List[i].getElementsByTagName(\"QQ\");\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += \"<td>\" + data[0].firstChild.nodeValue + \"</td>\";\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += \"<td> </td>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttr.innerHTML = temp;\n\t\t\t\tcontent.appendChild(tr);\n\t\t\t}\n\n\t\t}\n\t}\n\txmlhttp.open(\"GET\", url, true);\n\txmlhttp.send();\n}\n```\n\n- /html/index.html\n\n\n```html\n<!DOCTYPE html>\n<html>\n   <head>\n      <title>AJAX解析</title>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n      <!-- 引入 Bootstrap -->\n      <link href=\"http://apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n      <!-- HTML5 Shim 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 -->\n      <!-- 注意： 如果通过 file://  引入 Respond.js 文件，则该文件无法起效果 -->\n      <!--[if lt IE 9]>\n         <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n         <script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n      <![endif]-->\n   </head>\n   <body>\n      <div class=\"container\">\n         <h1 class=\"text-center\"><button class=\"btn btn-primary\" onclick=\"loadXMLDoc('../xml/data.xml')\">加载AJAX</button></h1>\n         <!-- main body start -->\n         <div class=\"col-md-12\">\n            <table class=\"table table-striped table-bordered\">\n               <thead>\n                 <tr>\n                   <th>#</th>\n                   <th>姓名</th>\n                   <th>手机号</th>\n                   <th>邮箱</th>\n                   <th>QQ</th>\n                 </tr>\n               </thead>\n               <tbody id=\"content-box\">\n               </tbody>\n            </table>\n         </div>\n      </div>\n      <!-- jQuery (Bootstrap 的 JavaScript 插件需要引入 jQuery) -->\n      <script src=\"https://code.jquery.com/jquery.js\"></script>\n      <!-- 包括所有已编译的插件 -->\n      <script src=\"../js/state.js\"></script>\n   </body>\n</html>\n```\n\n- /xml/data.xml\n\n\n```xml\n<!--  Contacts List -->\n<LIST>\n\t<CONTACT>\n\t\t<NAME>qqqq</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n\t<CONTACT>\n\t\t<NAME>tttt</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n\t<CONTACT>\n\t\t<NAME>gggg</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n\t<CONTACT>\n\t\t<NAME>aaaa</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n\t<CONTACT>\n\t\t<NAME>xxxx</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n\t<CONTACT>\n\t\t<NAME>zzzz</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n</LIST>\n```\n\n",
    "body_draft": "tags: [javascript, xml]\ndate: 2015-02-12\n\n---\n\n### <a name=\"drxfnz\"></a>ajax简介\n\n* AJAX = 异步 JavaScript 和 XML\n* AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术\n* AJAX 是一种用于创建快速动态网页的技术\n\n<!-- more -->\n\n### <a name=\"lucpnp\"></a>ajax操作xml可以快速建立轻量级的动态网站,下面是实例：\n\n[查看demo](http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/ajax/html/)\n\n* /js/state.js\n\n```js\nfunction loadXMLDoc(url) {\n\tvar xmlhttp;\n\tvar content,tr,temp,data;\n\t// 创建请求对象\n\tif (window.XMLHttpRequest) {\n\t\t// code for IE7+, Firefox, Chrome, Opera, Safari\n\t\txmlhttp = new XMLHttpRequest();\n\t} else {\n\t\t// code for IE6, IE5\n\t\txmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\t}\n\t// 处理返回的请求，其中返回的格式为XML\n\txmlhttp.onreadystatechange = function() {\n\t\t// 注意当xml为本地文件时，xmlhttp.status一直保持为0\n\t\tif (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\n\t\t\tvar List = xmlhttp.responseXML.documentElement.getElementsByTagName(\"CONTACT\");\n\t\t\tfor (var i = 0; i < List.length ; i++) {\n\t\t\t\tcontent = document.getElementById('content-box');\n\t\t\t\ttr = document.createElement('tr');\n\t\t\t\ttemp = \"<td>\" + (i+1) + \"</td>\";\n\t\t\t\tdata = List[i].getElementsByTagName(\"NAME\");\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += \"<td>\" + data[0].firstChild.nodeValue + \"</td>\";\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += \"<td> </td>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata = List[i].getElementsByTagName(\"PHONE\");\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += \"<td>\" + data[0].firstChild.nodeValue + \"</td>\";\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += \"<td> </td>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata = List[i].getElementsByTagName(\"EMAIL\");\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += \"<td>\" + data[0].firstChild.nodeValue + \"</td>\";\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += \"<td> </td>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata = List[i].getElementsByTagName(\"QQ\");\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += \"<td>\" + data[0].firstChild.nodeValue + \"</td>\";\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += \"<td> </td>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttr.innerHTML = temp;\n\t\t\t\tcontent.appendChild(tr);\n\t\t\t}\n\n\t\t}\n\t}\n\txmlhttp.open(\"GET\", url, true);\n\txmlhttp.send();\n}\n\n```\n\n* /html/index.html\n\n```html\n<!DOCTYPE html>\n<html>\n   <head>\n      <title>AJAX解析</title>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n      <!-- 引入 Bootstrap -->\n      <link href=\"http://apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n      <!-- HTML5 Shim 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 -->\n      <!-- 注意： 如果通过 file://  引入 Respond.js 文件，则该文件无法起效果 -->\n      <!--[if lt IE 9]>\n         <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n         <script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n      <![endif]-->\n   </head>\n   <body>\n      <div class=\"container\">\n         <h1 class=\"text-center\"><button class=\"btn btn-primary\" onclick=\"loadXMLDoc('../xml/data.xml')\">加载AJAX</button></h1>\n         <!-- main body start -->\n         <div class=\"col-md-12\">\n            <table class=\"table table-striped table-bordered\">\n               <thead>\n                 <tr>\n                   <th>#</th>\n                   <th>姓名</th>\n                   <th>手机号</th>\n                   <th>邮箱</th>\n                   <th>QQ</th>\n                 </tr>\n               </thead>\n               <tbody id=\"content-box\">\n               </tbody>\n            </table>\n         </div>\n      </div>\n      <!-- jQuery (Bootstrap 的 JavaScript 插件需要引入 jQuery) -->\n      <script src=\"https://code.jquery.com/jquery.js\"></script>\n      <!-- 包括所有已编译的插件 -->\n      <script src=\"../js/state.js\"></script>\n   </body>\n</html>\n```\n\n* /xml/data.xml\n\n```xml\n<!--  Contacts List -->\n<LIST>\n\t<CONTACT>\n\t\t<NAME>qqqq</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n\t<CONTACT>\n\t\t<NAME>tttt</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n\t<CONTACT>\n\t\t<NAME>gggg</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n\t<CONTACT>\n\t\t<NAME>aaaa</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n\t<CONTACT>\n\t\t<NAME>xxxx</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n\t<CONTACT>\n\t\t<NAME>zzzz</NAME>\n\t\t<PHONE>13322332233</PHONE>\n\t\t<EMAIL>qq@admin.com</EMAIL>\n\t\t<QQ>123456</QQ>\n\t</CONTACT>\n</LIST>\n```\n\n",
    "body_html": "<p>tags: [javascript, xml]</p><p>date: 2015-02-12</p><hr /><h3 id=\"drxfnz\"><a href=\"#drxfnz\"></a>ajax简介</h3><p><br /></p><ul><li><p>AJAX = 异步 JavaScript 和 XML</p></li></ul><ul><li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术</p></li></ul><ul><li><p>AJAX 是一种用于创建快速动态网页的技术</p></li></ul><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"lucpnp\"><a href=\"#lucpnp\"></a>ajax操作xml可以快速建立轻量级的动态网站,下面是实例：</h3><p><br /></p><p><a href=\"http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/ajax/html/\" target=\"_blank\">查看demo</a></p><p><br /></p><ul><li><p>/js/state.js</p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>function loadXMLDoc(url) {\n\tvar xmlhttp;\n\tvar content,tr,temp,data;\n\t// 创建请求对象\n\tif (window.XMLHttpRequest) {\n\t\t// code for IE7+, Firefox, Chrome, Opera, Safari\n\t\txmlhttp = new XMLHttpRequest();\n\t} else {\n\t\t// code for IE6, IE5\n\t\txmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);\n\t}\n\t// 处理返回的请求，其中返回的格式为XML\n\txmlhttp.onreadystatechange = function() {\n\t\t// 注意当xml为本地文件时，xmlhttp.status一直保持为0\n\t\tif (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) {\n\t\t\tvar List = xmlhttp.responseXML.documentElement.getElementsByTagName(&quot;CONTACT&quot;);\n\t\t\tfor (var i = 0; i &lt; List.length ; i++) {\n\t\t\t\tcontent = document.getElementById('content-box');\n\t\t\t\ttr = document.createElement('tr');\n\t\t\t\ttemp = &quot;&lt;td&gt;&quot; + (i+1) + &quot;&lt;/td&gt;&quot;;\n\t\t\t\tdata = List[i].getElementsByTagName(&quot;NAME&quot;);\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += &quot;&lt;td&gt;&quot; + data[0].firstChild.nodeValue + &quot;&lt;/td&gt;&quot;;\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += &quot;&lt;td&gt; &lt;/td&gt;&quot;;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata = List[i].getElementsByTagName(&quot;PHONE&quot;);\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += &quot;&lt;td&gt;&quot; + data[0].firstChild.nodeValue + &quot;&lt;/td&gt;&quot;;\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += &quot;&lt;td&gt; &lt;/td&gt;&quot;;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata = List[i].getElementsByTagName(&quot;EMAIL&quot;);\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += &quot;&lt;td&gt;&quot; + data[0].firstChild.nodeValue + &quot;&lt;/td&gt;&quot;;\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += &quot;&lt;td&gt; &lt;/td&gt;&quot;;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata = List[i].getElementsByTagName(&quot;QQ&quot;);\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttemp += &quot;&lt;td&gt;&quot; + data[0].firstChild.nodeValue + &quot;&lt;/td&gt;&quot;;\n\t\t\t\t\t} catch (er) {\n\t\t\t\t\t\ttemp += &quot;&lt;td&gt; &lt;/td&gt;&quot;;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttr.innerHTML = temp;\n\t\t\t\tcontent.appendChild(tr);\n\t\t\t}\n\n\t\t}\n\t}\n\txmlhttp.open(&quot;GET&quot;, url, true);\n\txmlhttp.send();\n}</code></pre><p><br /></p><ul><li><p>/html/index.html</p></li></ul><p><br /></p><pre data-lang=\"html\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;title&gt;AJAX解析&lt;/title&gt;\n      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;\n      &lt;!-- 引入 Bootstrap --&gt;\n      &lt;link href=&quot;http://apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n\n      &lt;!-- HTML5 Shim 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 --&gt;\n      &lt;!-- 注意： 如果通过 file://  引入 Respond.js 文件，则该文件无法起效果 --&gt;\n      &lt;!--[if lt IE 9]&gt;\n         &lt;script src=&quot;https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js&quot;&gt;&lt;/script&gt;\n         &lt;script src=&quot;https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js&quot;&gt;&lt;/script&gt;\n      &lt;![endif]--&gt;\n   &lt;/head&gt;\n   &lt;body&gt;\n      &lt;div class=&quot;container&quot;&gt;\n         &lt;h1 class=&quot;text-center&quot;&gt;&lt;button class=&quot;btn btn-primary&quot; onclick=&quot;loadXMLDoc('../xml/data.xml')&quot;&gt;加载AJAX&lt;/button&gt;&lt;/h1&gt;\n         &lt;!-- main body start --&gt;\n         &lt;div class=&quot;col-md-12&quot;&gt;\n            &lt;table class=&quot;table table-striped table-bordered&quot;&gt;\n               &lt;thead&gt;\n                 &lt;tr&gt;\n                   &lt;th&gt;#&lt;/th&gt;\n                   &lt;th&gt;姓名&lt;/th&gt;\n                   &lt;th&gt;手机号&lt;/th&gt;\n                   &lt;th&gt;邮箱&lt;/th&gt;\n                   &lt;th&gt;QQ&lt;/th&gt;\n                 &lt;/tr&gt;\n               &lt;/thead&gt;\n               &lt;tbody id=&quot;content-box&quot;&gt;\n               &lt;/tbody&gt;\n            &lt;/table&gt;\n         &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;!-- jQuery (Bootstrap 的 JavaScript 插件需要引入 jQuery) --&gt;\n      &lt;script src=&quot;https://code.jquery.com/jquery.js&quot;&gt;&lt;/script&gt;\n      &lt;!-- 包括所有已编译的插件 --&gt;\n      &lt;script src=&quot;../js/state.js&quot;&gt;&lt;/script&gt;\n   &lt;/body&gt;\n&lt;/html&gt;</code></pre><p><br /></p><ul><li><p>/xml/data.xml</p></li></ul><p><br /></p><pre data-lang=\"xml\"><code>&lt;!--  Contacts List --&gt;\n&lt;LIST&gt;\n\t&lt;CONTACT&gt;\n\t\t&lt;NAME&gt;qqqq&lt;/NAME&gt;\n\t\t&lt;PHONE&gt;13322332233&lt;/PHONE&gt;\n\t\t&lt;EMAIL&gt;qq@admin.com&lt;/EMAIL&gt;\n\t\t&lt;QQ&gt;123456&lt;/QQ&gt;\n\t&lt;/CONTACT&gt;\n\t&lt;CONTACT&gt;\n\t\t&lt;NAME&gt;tttt&lt;/NAME&gt;\n\t\t&lt;PHONE&gt;13322332233&lt;/PHONE&gt;\n\t\t&lt;EMAIL&gt;qq@admin.com&lt;/EMAIL&gt;\n\t\t&lt;QQ&gt;123456&lt;/QQ&gt;\n\t&lt;/CONTACT&gt;\n\t&lt;CONTACT&gt;\n\t\t&lt;NAME&gt;gggg&lt;/NAME&gt;\n\t\t&lt;PHONE&gt;13322332233&lt;/PHONE&gt;\n\t\t&lt;EMAIL&gt;qq@admin.com&lt;/EMAIL&gt;\n\t\t&lt;QQ&gt;123456&lt;/QQ&gt;\n\t&lt;/CONTACT&gt;\n\t&lt;CONTACT&gt;\n\t\t&lt;NAME&gt;aaaa&lt;/NAME&gt;\n\t\t&lt;PHONE&gt;13322332233&lt;/PHONE&gt;\n\t\t&lt;EMAIL&gt;qq@admin.com&lt;/EMAIL&gt;\n\t\t&lt;QQ&gt;123456&lt;/QQ&gt;\n\t&lt;/CONTACT&gt;\n\t&lt;CONTACT&gt;\n\t\t&lt;NAME&gt;xxxx&lt;/NAME&gt;\n\t\t&lt;PHONE&gt;13322332233&lt;/PHONE&gt;\n\t\t&lt;EMAIL&gt;qq@admin.com&lt;/EMAIL&gt;\n\t\t&lt;QQ&gt;123456&lt;/QQ&gt;\n\t&lt;/CONTACT&gt;\n\t&lt;CONTACT&gt;\n\t\t&lt;NAME&gt;zzzz&lt;/NAME&gt;\n\t\t&lt;PHONE&gt;13322332233&lt;/PHONE&gt;\n\t\t&lt;EMAIL&gt;qq@admin.com&lt;/EMAIL&gt;\n\t\t&lt;QQ&gt;123456&lt;/QQ&gt;\n\t&lt;/CONTACT&gt;\n&lt;/LIST&gt;</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [javascript, xml]</p><p>date: 2015-02-12</p><card type=\"block\" name=\"hr\"></card><h3 id=\"drxfnz\"><a href=\"#drxfnz\" id=\"ajax简介\"></a>ajax简介</h3><p><br /></p><ul><li><p>AJAX = 异步 JavaScript 和 XML</p></li></ul><ul><li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术</p></li></ul><ul><li><p>AJAX 是一种用于创建快速动态网页的技术</p></li></ul><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"lucpnp\"><a href=\"#lucpnp\" id=\"ajax操作xml可以快速建立轻量级的动态网站,下面是实例：\"></a>ajax操作xml可以快速建立轻量级的动态网站,下面是实例：</h3><p><br /></p><p><a href=\"http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/ajax/html/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">查看demo</a></p><p><br /></p><ul><li><p>/js/state.js</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c1251c82%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20loadXMLDoc(url)%20%7B%5Cn%5Ctvar%20xmlhttp%3B%5Cn%5Ctvar%20content%2Ctr%2Ctemp%2Cdata%3B%5Cn%5Ct%2F%2F%20%E5%88%9B%E5%BB%BA%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1%5Cn%5Ctif%20(window.XMLHttpRequest)%20%7B%5Cn%5Ct%5Ct%2F%2F%20code%20for%20IE7%2B%2C%20Firefox%2C%20Chrome%2C%20Opera%2C%20Safari%5Cn%5Ct%5Ctxmlhttp%20%3D%20new%20XMLHttpRequest()%3B%5Cn%5Ct%7D%20else%20%7B%5Cn%5Ct%5Ct%2F%2F%20code%20for%20IE6%2C%20IE5%5Cn%5Ct%5Ctxmlhttp%20%3D%20new%20ActiveXObject(%5C%22Microsoft.XMLHTTP%5C%22)%3B%5Cn%5Ct%7D%5Cn%5Ct%2F%2F%20%E5%A4%84%E7%90%86%E8%BF%94%E5%9B%9E%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%85%B6%E4%B8%AD%E8%BF%94%E5%9B%9E%E7%9A%84%E6%A0%BC%E5%BC%8F%E4%B8%BAXML%5Cn%5Ctxmlhttp.onreadystatechange%20%3D%20function()%20%7B%5Cn%5Ct%5Ct%2F%2F%20%E6%B3%A8%E6%84%8F%E5%BD%93xml%E4%B8%BA%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%97%B6%EF%BC%8Cxmlhttp.status%E4%B8%80%E7%9B%B4%E4%BF%9D%E6%8C%81%E4%B8%BA0%5Cn%5Ct%5Ctif%20(xmlhttp.readyState%20%3D%3D%204%20%26%26%20xmlhttp.status%20%3D%3D%20200)%20%7B%5Cn%5Ct%5Ct%5Ctvar%20List%20%3D%20xmlhttp.responseXML.documentElement.getElementsByTagName(%5C%22CONTACT%5C%22)%3B%5Cn%5Ct%5Ct%5Ctfor%20(var%20i%20%3D%200%3B%20i%20%3C%20List.length%20%3B%20i%2B%2B)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ctcontent%20%3D%20document.getElementById('content-box')%3B%5Cn%5Ct%5Ct%5Ct%5Cttr%20%3D%20document.createElement('tr')%3B%5Cn%5Ct%5Ct%5Ct%5Cttemp%20%3D%20%5C%22%3Ctd%3E%5C%22%20%2B%20(i%2B1)%20%2B%20%5C%22%3C%2Ftd%3E%5C%22%3B%5Cn%5Ct%5Ct%5Ct%5Ctdata%20%3D%20List%5Bi%5D.getElementsByTagName(%5C%22NAME%5C%22)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%5Cttemp%20%2B%3D%20%5C%22%3Ctd%3E%5C%22%20%2B%20data%5B0%5D.firstChild.nodeValue%20%2B%20%5C%22%3C%2Ftd%3E%5C%22%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%7D%20catch%20(er)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%5Cttemp%20%2B%3D%20%5C%22%3Ctd%3E%20%3C%2Ftd%3E%5C%22%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ctdata%20%3D%20List%5Bi%5D.getElementsByTagName(%5C%22PHONE%5C%22)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%5Cttemp%20%2B%3D%20%5C%22%3Ctd%3E%5C%22%20%2B%20data%5B0%5D.firstChild.nodeValue%20%2B%20%5C%22%3C%2Ftd%3E%5C%22%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%7D%20catch%20(er)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%5Cttemp%20%2B%3D%20%5C%22%3Ctd%3E%20%3C%2Ftd%3E%5C%22%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ctdata%20%3D%20List%5Bi%5D.getElementsByTagName(%5C%22EMAIL%5C%22)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%5Cttemp%20%2B%3D%20%5C%22%3Ctd%3E%5C%22%20%2B%20data%5B0%5D.firstChild.nodeValue%20%2B%20%5C%22%3C%2Ftd%3E%5C%22%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%7D%20catch%20(er)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%5Cttemp%20%2B%3D%20%5C%22%3Ctd%3E%20%3C%2Ftd%3E%5C%22%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ctdata%20%3D%20List%5Bi%5D.getElementsByTagName(%5C%22QQ%5C%22)%3B%5Cn%5Ct%5Ct%5Ct%5Ct%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Cttry%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%5Cttemp%20%2B%3D%20%5C%22%3Ctd%3E%5C%22%20%2B%20data%5B0%5D.firstChild.nodeValue%20%2B%20%5C%22%3C%2Ftd%3E%5C%22%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%7D%20catch%20(er)%20%7B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%5Cttemp%20%2B%3D%20%5C%22%3Ctd%3E%20%3C%2Ftd%3E%5C%22%3B%5Cn%5Ct%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%5Ct%5Cttr.innerHTML%20%3D%20temp%3B%5Cn%5Ct%5Ct%5Ct%5Ctcontent.appendChild(tr)%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Ctxmlhttp.open(%5C%22GET%5C%22%2C%20url%2C%20true)%3B%5Cn%5Ctxmlhttp.send()%3B%5Cn%7D%22%7D\"></card><p><br /></p><ul><li><p>/html/index.html</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22d164813b%22%2C%22mode%22%3A%22html%22%2C%22code%22%3A%22%3C!DOCTYPE%20html%3E%5Cn%3Chtml%3E%5Cn%20%20%20%3Chead%3E%5Cn%20%20%20%20%20%20%3Ctitle%3EAJAX%E8%A7%A3%E6%9E%90%3C%2Ftitle%3E%5Cn%20%20%20%20%20%20%3Cmeta%20name%3D%5C%22viewport%5C%22%20content%3D%5C%22width%3Ddevice-width%2C%20initial-scale%3D1.0%5C%22%3E%5Cn%20%20%20%20%20%20%3Cmeta%20http-equiv%3D%5C%22Content-Type%5C%22%20content%3D%5C%22text%2Fhtml%3B%20charset%3Dutf-8%5C%22%3E%5Cn%20%20%20%20%20%20%3C!--%20%E5%BC%95%E5%85%A5%20Bootstrap%20--%3E%5Cn%20%20%20%20%20%20%3Clink%20href%3D%5C%22http%3A%2F%2Fapps.bdimg.com%2Flibs%2Fbootstrap%2F3.3.0%2Fcss%2Fbootstrap.min.css%5C%22%20rel%3D%5C%22stylesheet%5C%22%3E%5Cn%5Cn%20%20%20%20%20%20%3C!--%20HTML5%20Shim%20%E5%92%8C%20Respond.js%20%E7%94%A8%E4%BA%8E%E8%AE%A9%20IE8%20%E6%94%AF%E6%8C%81%20HTML5%E5%85%83%E7%B4%A0%E5%92%8C%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%20--%3E%5Cn%20%20%20%20%20%20%3C!--%20%E6%B3%A8%E6%84%8F%EF%BC%9A%20%E5%A6%82%E6%9E%9C%E9%80%9A%E8%BF%87%20file%3A%2F%2F%20%20%E5%BC%95%E5%85%A5%20Respond.js%20%E6%96%87%E4%BB%B6%EF%BC%8C%E5%88%99%E8%AF%A5%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E8%B5%B7%E6%95%88%E6%9E%9C%20--%3E%5Cn%20%20%20%20%20%20%3C!--%5Bif%20lt%20IE%209%5D%3E%5Cn%20%20%20%20%20%20%20%20%20%3Cscript%20src%3D%5C%22https%3A%2F%2Foss.maxcdn.com%2Flibs%2Fhtml5shiv%2F3.7.0%2Fhtml5shiv.js%5C%22%3E%3C%2Fscript%3E%5Cn%20%20%20%20%20%20%20%20%20%3Cscript%20src%3D%5C%22https%3A%2F%2Foss.maxcdn.com%2Flibs%2Frespond.js%2F1.3.0%2Frespond.min.js%5C%22%3E%3C%2Fscript%3E%5Cn%20%20%20%20%20%20%3C!%5Bendif%5D--%3E%5Cn%20%20%20%3C%2Fhead%3E%5Cn%20%20%20%3Cbody%3E%5Cn%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22container%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%3Ch1%20class%3D%5C%22text-center%5C%22%3E%3Cbutton%20class%3D%5C%22btn%20btn-primary%5C%22%20onclick%3D%5C%22loadXMLDoc('..%2Fxml%2Fdata.xml')%5C%22%3E%E5%8A%A0%E8%BD%BDAJAX%3C%2Fbutton%3E%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%20%20%20%3C!--%20main%20body%20start%20--%3E%5Cn%20%20%20%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22col-md-12%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Ctable%20class%3D%5C%22table%20table-striped%20table-bordered%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cthead%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctr%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cth%3E%23%3C%2Fth%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cth%3E%E5%A7%93%E5%90%8D%3C%2Fth%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cth%3E%E6%89%8B%E6%9C%BA%E5%8F%B7%3C%2Fth%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cth%3E%E9%82%AE%E7%AE%B1%3C%2Fth%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cth%3EQQ%3C%2Fth%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftr%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fthead%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctbody%20id%3D%5C%22content-box%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftbody%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftable%3E%5Cn%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3C!--%20jQuery%20(Bootstrap%20%E7%9A%84%20JavaScript%20%E6%8F%92%E4%BB%B6%E9%9C%80%E8%A6%81%E5%BC%95%E5%85%A5%20jQuery)%20--%3E%5Cn%20%20%20%20%20%20%3Cscript%20src%3D%5C%22https%3A%2F%2Fcode.jquery.com%2Fjquery.js%5C%22%3E%3C%2Fscript%3E%5Cn%20%20%20%20%20%20%3C!--%20%E5%8C%85%E6%8B%AC%E6%89%80%E6%9C%89%E5%B7%B2%E7%BC%96%E8%AF%91%E7%9A%84%E6%8F%92%E4%BB%B6%20--%3E%5Cn%20%20%20%20%20%20%3Cscript%20src%3D%5C%22..%2Fjs%2Fstate.js%5C%22%3E%3C%2Fscript%3E%5Cn%20%20%20%3C%2Fbody%3E%5Cn%3C%2Fhtml%3E%22%7D\"></card><p><br /></p><ul><li><p>/xml/data.xml</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%223e27097d%22%2C%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3C!--%20%20Contacts%20List%20--%3E%5Cn%3CLIST%3E%5Cn%5Ct%3CCONTACT%3E%5Cn%5Ct%5Ct%3CNAME%3Eqqqq%3C%2FNAME%3E%5Cn%5Ct%5Ct%3CPHONE%3E13322332233%3C%2FPHONE%3E%5Cn%5Ct%5Ct%3CEMAIL%3Eqq%40admin.com%3C%2FEMAIL%3E%5Cn%5Ct%5Ct%3CQQ%3E123456%3C%2FQQ%3E%5Cn%5Ct%3C%2FCONTACT%3E%5Cn%5Ct%3CCONTACT%3E%5Cn%5Ct%5Ct%3CNAME%3Etttt%3C%2FNAME%3E%5Cn%5Ct%5Ct%3CPHONE%3E13322332233%3C%2FPHONE%3E%5Cn%5Ct%5Ct%3CEMAIL%3Eqq%40admin.com%3C%2FEMAIL%3E%5Cn%5Ct%5Ct%3CQQ%3E123456%3C%2FQQ%3E%5Cn%5Ct%3C%2FCONTACT%3E%5Cn%5Ct%3CCONTACT%3E%5Cn%5Ct%5Ct%3CNAME%3Egggg%3C%2FNAME%3E%5Cn%5Ct%5Ct%3CPHONE%3E13322332233%3C%2FPHONE%3E%5Cn%5Ct%5Ct%3CEMAIL%3Eqq%40admin.com%3C%2FEMAIL%3E%5Cn%5Ct%5Ct%3CQQ%3E123456%3C%2FQQ%3E%5Cn%5Ct%3C%2FCONTACT%3E%5Cn%5Ct%3CCONTACT%3E%5Cn%5Ct%5Ct%3CNAME%3Eaaaa%3C%2FNAME%3E%5Cn%5Ct%5Ct%3CPHONE%3E13322332233%3C%2FPHONE%3E%5Cn%5Ct%5Ct%3CEMAIL%3Eqq%40admin.com%3C%2FEMAIL%3E%5Cn%5Ct%5Ct%3CQQ%3E123456%3C%2FQQ%3E%5Cn%5Ct%3C%2FCONTACT%3E%5Cn%5Ct%3CCONTACT%3E%5Cn%5Ct%5Ct%3CNAME%3Exxxx%3C%2FNAME%3E%5Cn%5Ct%5Ct%3CPHONE%3E13322332233%3C%2FPHONE%3E%5Cn%5Ct%5Ct%3CEMAIL%3Eqq%40admin.com%3C%2FEMAIL%3E%5Cn%5Ct%5Ct%3CQQ%3E123456%3C%2FQQ%3E%5Cn%5Ct%3C%2FCONTACT%3E%5Cn%5Ct%3CCONTACT%3E%5Cn%5Ct%5Ct%3CNAME%3Ezzzz%3C%2FNAME%3E%5Cn%5Ct%5Ct%3CPHONE%3E13322332233%3C%2FPHONE%3E%5Cn%5Ct%5Ct%3CEMAIL%3Eqq%40admin.com%3C%2FEMAIL%3E%5Cn%5Ct%5Ct%3CQQ%3E123456%3C%2FQQ%3E%5Cn%5Ct%3C%2FCONTACT%3E%5Cn%3C%2FLIST%3E%22%7D\"></card><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [javascript, xml]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-02-12\"],[\"hr\",{\"id\":\"6gkvma\"}],[\"h3\",{\"id\":\"drxfnz\"},\"ajax简介\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"AJAX = 异步 JavaScript 和 XML\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"AJAX 是一种用于创建快速动态网页的技术\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"lucpnp\"},\"ajax操作xml可以快速建立轻量级的动态网站,下面是实例：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"a\",{\"title\":\"\",\"href\":\"http://7u2liq.com1.z0.glb.clouddn.com/blog/demo/ajax/html/\"},\"查看demo\"],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"/js/state.js\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"function loadXMLDoc(url) {\\n\",\"\\tvar xmlhttp;\\n\",\"\\tvar content,tr,temp,data;\\n\",\"\\t// 创建请求对象\\n\",\"\\tif (window.XMLHttpRequest) {\\n\",\"\\t\\t// code for IE7+, Firefox, Chrome, Opera, Safari\\n\",\"\\t\\txmlhttp = new XMLHttpRequest();\\n\",\"\\t} else {\\n\",\"\\t\\t// code for IE6, IE5\\n\",\"\\t\\txmlhttp = new ActiveXObject(\\\"Microsoft.XMLHTTP\\\");\\n\",\"\\t}\\n\",\"\\t// 处理返回的请求，其中返回的格式为XML\\n\",\"\\txmlhttp.onreadystatechange = function() {\\n\",\"\\t\\t// 注意当xml为本地文件时，xmlhttp.status一直保持为0\\n\",\"\\t\\tif (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\\n\",\"\\t\\t\\tvar List = xmlhttp.responseXML.documentElement.getElementsByTagName(\\\"CONTACT\\\");\\n\",\"\\t\\t\\tfor (var i = 0; i < List.length ; i++) {\\n\",\"\\t\\t\\t\\tcontent = document.getElementById('content-box');\\n\",\"\\t\\t\\t\\ttr = document.createElement('tr');\\n\",\"\\t\\t\\t\\ttemp = \\\"<td>\\\" + (i+1) + \\\"</td>\\\";\\n\",\"\\t\\t\\t\\tdata = List[i].getElementsByTagName(\\\"NAME\\\");\\n\",\"\\t\\t\\t\\t{\\n\",\"\\t\\t\\t\\t\\ttry {\\n\",\"\\t\\t\\t\\t\\t\\ttemp += \\\"<td>\\\" + data[0].firstChild.nodeValue + \\\"</td>\\\";\\n\",\"\\t\\t\\t\\t\\t} catch (er) {\\n\",\"\\t\\t\\t\\t\\t\\ttemp += \\\"<td> </td>\\\";\\n\",\"\\t\\t\\t\\t\\t}\\n\",\"\\t\\t\\t\\t}\\n\",\"\\t\\t\\t\\tdata = List[i].getElementsByTagName(\\\"PHONE\\\");\\n\",\"\\t\\t\\t\\t{\\n\",\"\\t\\t\\t\\t\\ttry {\\n\",\"\\t\\t\\t\\t\\t\\ttemp += \\\"<td>\\\" + data[0].firstChild.nodeValue + \\\"</td>\\\";\\n\",\"\\t\\t\\t\\t\\t} catch (er) {\\n\",\"\\t\\t\\t\\t\\t\\ttemp += \\\"<td> </td>\\\";\\n\",\"\\t\\t\\t\\t\\t}\\n\",\"\\t\\t\\t\\t}\\n\",\"\\t\\t\\t\\tdata = List[i].getElementsByTagName(\\\"EMAIL\\\");\\n\",\"\\t\\t\\t\\t{\\n\",\"\\t\\t\\t\\t\\ttry {\\n\",\"\\t\\t\\t\\t\\t\\ttemp += \\\"<td>\\\" + data[0].firstChild.nodeValue + \\\"</td>\\\";\\n\",\"\\t\\t\\t\\t\\t} catch (er) {\\n\",\"\\t\\t\\t\\t\\t\\ttemp += \\\"<td> </td>\\\";\\n\",\"\\t\\t\\t\\t\\t}\\n\",\"\\t\\t\\t\\t}\\n\",\"\\t\\t\\t\\tdata = List[i].getElementsByTagName(\\\"QQ\\\");\\n\",\"\\t\\t\\t\\t{\\n\",\"\\t\\t\\t\\t\\ttry {\\n\",\"\\t\\t\\t\\t\\t\\ttemp += \\\"<td>\\\" + data[0].firstChild.nodeValue + \\\"</td>\\\";\\n\",\"\\t\\t\\t\\t\\t} catch (er) {\\n\",\"\\t\\t\\t\\t\\t\\ttemp += \\\"<td> </td>\\\";\\n\",\"\\t\\t\\t\\t\\t}\\n\",\"\\t\\t\\t\\t}\\n\",\"\\t\\t\\t\\ttr.innerHTML = temp;\\n\",\"\\t\\t\\t\\tcontent.appendChild(tr);\\n\",\"\\t\\t\\t}\\n\",\"\\n\",\"\\t\\t}\\n\",\"\\t}\\n\",\"\\txmlhttp.open(\\\"GET\\\", url, true);\\n\",\"\\txmlhttp.send();\\n\",\"}\\n\",\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"/html/index.html\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"html\"},\"<!DOCTYPE html>\\n\",\"<html>\\n\",\"   <head>\\n\",\"      <title>AJAX解析</title>\\n\",\"      <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n\",\"      <meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\">\\n\",\"      <!-- 引入 Bootstrap -->\\n\",\"      <link href=\\\"http://apps.bdimg.com/libs/bootstrap/3.3.0/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\">\\n\",\"\\n\",\"      <!-- HTML5 Shim 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 -->\\n\",\"      <!-- 注意： 如果通过 file://  引入 Respond.js 文件，则该文件无法起效果 -->\\n\",\"      <!--[if lt IE 9]>\\n\",\"         <script src=\\\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\\\"></script>\\n\",\"         <script src=\\\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\\\"></script>\\n\",\"      <![endif]-->\\n\",\"   </head>\\n\",\"   <body>\\n\",\"      <div class=\\\"container\\\">\\n\",\"         <h1 class=\\\"text-center\\\"><button class=\\\"btn btn-primary\\\" onclick=\\\"loadXMLDoc('../xml/data.xml')\\\">加载AJAX</button></h1>\\n\",\"         <!-- main body start -->\\n\",\"         <div class=\\\"col-md-12\\\">\\n\",\"            <table class=\\\"table table-striped table-bordered\\\">\\n\",\"               <thead>\\n\",\"                 <tr>\\n\",\"                   <th>#</th>\\n\",\"                   <th>姓名</th>\\n\",\"                   <th>手机号</th>\\n\",\"                   <th>邮箱</th>\\n\",\"                   <th>QQ</th>\\n\",\"                 </tr>\\n\",\"               </thead>\\n\",\"               <tbody id=\\\"content-box\\\">\\n\",\"               </tbody>\\n\",\"            </table>\\n\",\"         </div>\\n\",\"      </div>\\n\",\"      <!-- jQuery (Bootstrap 的 JavaScript 插件需要引入 jQuery) -->\\n\",\"      <script src=\\\"https://code.jquery.com/jquery.js\\\"></script>\\n\",\"      <!-- 包括所有已编译的插件 -->\\n\",\"      <script src=\\\"../js/state.js\\\"></script>\\n\",\"   </body>\\n\",\"</html>\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"/xml/data.xml\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"xml\"},\"<!--  Contacts List -->\\n\",\"<LIST>\\n\",\"\\t<CONTACT>\\n\",\"\\t\\t<NAME>qqqq</NAME>\\n\",\"\\t\\t<PHONE>13322332233</PHONE>\\n\",\"\\t\\t<EMAIL>qq@admin.com</EMAIL>\\n\",\"\\t\\t<QQ>123456</QQ>\\n\",\"\\t</CONTACT>\\n\",\"\\t<CONTACT>\\n\",\"\\t\\t<NAME>tttt</NAME>\\n\",\"\\t\\t<PHONE>13322332233</PHONE>\\n\",\"\\t\\t<EMAIL>qq@admin.com</EMAIL>\\n\",\"\\t\\t<QQ>123456</QQ>\\n\",\"\\t</CONTACT>\\n\",\"\\t<CONTACT>\\n\",\"\\t\\t<NAME>gggg</NAME>\\n\",\"\\t\\t<PHONE>13322332233</PHONE>\\n\",\"\\t\\t<EMAIL>qq@admin.com</EMAIL>\\n\",\"\\t\\t<QQ>123456</QQ>\\n\",\"\\t</CONTACT>\\n\",\"\\t<CONTACT>\\n\",\"\\t\\t<NAME>aaaa</NAME>\\n\",\"\\t\\t<PHONE>13322332233</PHONE>\\n\",\"\\t\\t<EMAIL>qq@admin.com</EMAIL>\\n\",\"\\t\\t<QQ>123456</QQ>\\n\",\"\\t</CONTACT>\\n\",\"\\t<CONTACT>\\n\",\"\\t\\t<NAME>xxxx</NAME>\\n\",\"\\t\\t<PHONE>13322332233</PHONE>\\n\",\"\\t\\t<EMAIL>qq@admin.com</EMAIL>\\n\",\"\\t\\t<QQ>123456</QQ>\\n\",\"\\t</CONTACT>\\n\",\"\\t<CONTACT>\\n\",\"\\t\\t<NAME>zzzz</NAME>\\n\",\"\\t\\t<PHONE>13322332233</PHONE>\\n\",\"\\t\\t<EMAIL>qq@admin.com</EMAIL>\\n\",\"\\t\\t<QQ>123456</QQ>\\n\",\"\\t</CONTACT>\\n\",\"</LIST>\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:08:53.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:36:50.000Z",
    "updated_at": "2019-10-12T13:27:28.000Z",
    "published_at": "2018-09-15T08:08:53.000Z",
    "first_published_at": null,
    "word_count": 1017,
    "cover": null,
    "description": "tags: [javascript, xml]date: 2015-02-12ajax简介AJAX = 异步 JavaScript 和 XMLAJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术AJAX 是一种用于创建快速动态网页的技术&lt;!-- more --&gt;ajax操作xml可以快速建立轻量级的动态网站,下面是实例：查看demo/js/state.jsfunction loadXMLDoc(url) { \tvar xmlhttp; \tvar content,tr,temp...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709038,
    "slug": "xqgy6w",
    "title": "Javascript 设计模式之单例模式",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [javascript, 设计模式]<br />date: 2017-09-10 23:28:00\n\n---\n\n单例模式是一个非常典型的设计模式，保证一个类只有唯一实例，并且提供单一的访问点。单例的对象不同于静态类，我们可以延迟单例对象的初始化，通常这种情况发生在我们需要等待加载创建单例的依赖。\n\n<a name=\"x86ogl\"></a>\n#### 单例的特性\n\n- 全局唯一实例\n\n- 单一的访问入口\n\n\n<!-- more -->\n\n<a name=\"b3t1da\"></a>\n#### 如何创建一个单例？\n\n接下来我将以设计一个全局的Loading状态的实例以渐入佳境。\n\n> 你不是真正的单例？\n\n\n```javascript\nvar createLoading = function(){\n\tvar LOADING_TPL =\n    '<div class=\"loading-container\">' +\n    '<div class=\"loading\">' +\n    '</div>' +\n    '</div>';\n\tvar loading = document.createElement('div');\n   loading.innerText = LOADING_TPL;\n   \n   return document.body.appendChild(loading);\t// 创建一个loading实例\n}\n```\n\nExcuse me？这就是传说中的单例模式吗？\n\n<a name=\"6hokkg\"></a>\n#### 典型应用场景\n\n- 惰性单例：在合适的时候才创建对象，如缓存对象等。\n\n- 单例服务：Angular 1.x 的服务实例\n\n- 单例组件：全局唯一的遮罩层、弹窗等\n\n\n<a name=\"pdxpeh\"></a>\n#### 小结\n\n单例模式能够我们能在全局的上下文环境下获取唯一的对象，这种特性适用于多次调用的对象。\n",
    "body_draft": "tags: [javascript, 设计模式]\ndate: 2017-09-10 23:28:00\n\n---\n\n单例模式是一个非常典型的设计模式，保证一个类只有唯一实例，并且提供单一的访问点。单例的对象不同于静态类，我们可以延迟单例对象的初始化，通常这种情况发生在我们需要等待加载创建单例的依赖。\n\n#### <a name=\"x86ogl\"></a>单例的特性\n\n* 全局唯一实例\n* 单一的访问入口\n\n<!-- more -->\n\n#### <a name=\"b3t1da\"></a>如何创建一个单例？\n\n接下来我将以设计一个全局的Loading状态的实例以渐入佳境。\n\n> 你不是真正的单例？\n\n```javascript\nvar createLoading = function(){\n\tvar LOADING_TPL =\n    '<div class=\"loading-container\">' +\n    '<div class=\"loading\">' +\n    '</div>' +\n    '</div>';\n\tvar loading = document.createElement('div');\n   loading.innerText = LOADING_TPL;\n   \n   return document.body.appendChild(loading);\t// 创建一个loading实例\n}\n```\n\nExcuse me？这就是传说中的单例模式吗？\n\n#### <a name=\"6hokkg\"></a>典型应用场景\n\n* 惰性单例：在合适的时候才创建对象，如缓存对象等。\n* 单例服务：Angular 1.x 的服务实例\n* 单例组件：全局唯一的遮罩层、弹窗等\n\n#### <a name=\"pdxpeh\"></a>小结\n\n单例模式能够我们能在全局的上下文环境下获取唯一的对象，这种特性适用于多次调用的对象。\n",
    "body_html": "<p>tags: [javascript, 设计模式]</p><p>date: 2017-09-10 23:28:00</p><hr /><p>单例模式是一个非常典型的设计模式，保证一个类只有唯一实例，并且提供单一的访问点。单例的对象不同于静态类，我们可以延迟单例对象的初始化，通常这种情况发生在我们需要等待加载创建单例的依赖。</p><p><br /></p><h4 id=\"x86ogl\"><a href=\"#x86ogl\"></a>单例的特性</h4><p><br /></p><ul><li><p>全局唯一实例</p></li></ul><ul><li><p>单一的访问入口</p></li></ul><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h4 id=\"b3t1da\"><a href=\"#b3t1da\"></a>如何创建一个单例？</h4><p><br /></p><p>接下来我将以设计一个全局的Loading状态的实例以渐入佳境。</p><p><br /></p><blockquote><p>你不是真正的单例？</p></blockquote><p><br /></p><pre data-lang=\"javascript\"><code>var createLoading = function(){\n\tvar LOADING_TPL =\n    '&lt;div class=&quot;loading-container&quot;&gt;' +\n    '&lt;div class=&quot;loading&quot;&gt;' +\n    '&lt;/div&gt;' +\n    '&lt;/div&gt;';\n\tvar loading = document.createElement('div');\n   loading.innerText = LOADING_TPL;\n   \n   return document.body.appendChild(loading);\t// 创建一个loading实例\n}</code></pre><p><br /></p><p>Excuse me？这就是传说中的单例模式吗？</p><p><br /></p><h4 id=\"6hokkg\"><a href=\"#6hokkg\"></a>典型应用场景</h4><p><br /></p><ul><li><p>惰性单例：在合适的时候才创建对象，如缓存对象等。</p></li></ul><ul><li><p>单例服务：Angular 1.x 的服务实例</p></li></ul><ul><li><p>单例组件：全局唯一的遮罩层、弹窗等</p></li></ul><p><br /></p><h4 id=\"pdxpeh\"><a href=\"#pdxpeh\"></a>小结</h4><p><br /></p><p>单例模式能够我们能在全局的上下文环境下获取唯一的对象，这种特性适用于多次调用的对象。</p>",
    "body_lake": "<!doctype lake><p>tags: [javascript, 设计模式]</p><p>date: 2017-09-10 23:28:00</p><card type=\"block\" name=\"hr\"></card><p>单例模式是一个非常典型的设计模式，保证一个类只有唯一实例，并且提供单一的访问点。单例的对象不同于静态类，我们可以延迟单例对象的初始化，通常这种情况发生在我们需要等待加载创建单例的依赖。</p><p><br /></p><h4 id=\"x86ogl\"><a href=\"#x86ogl\" id=\"单例的特性\"></a>单例的特性</h4><p><br /></p><ul><li><p>全局唯一实例</p></li></ul><ul><li><p>单一的访问入口</p></li></ul><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h4 id=\"b3t1da\"><a href=\"#b3t1da\" id=\"如何创建一个单例？\"></a>如何创建一个单例？</h4><p><br /></p><p>接下来我将以设计一个全局的Loading状态的实例以渐入佳境。</p><p><br /></p><blockquote><p>你不是真正的单例？</p></blockquote><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%228a738e98%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20createLoading%20%3D%20function()%7B%5Cn%5Ctvar%20LOADING_TPL%20%3D%5Cn%20%20%20%20'%3Cdiv%20class%3D%5C%22loading-container%5C%22%3E'%20%2B%5Cn%20%20%20%20'%3Cdiv%20class%3D%5C%22loading%5C%22%3E'%20%2B%5Cn%20%20%20%20'%3C%2Fdiv%3E'%20%2B%5Cn%20%20%20%20'%3C%2Fdiv%3E'%3B%5Cn%5Ctvar%20loading%20%3D%20document.createElement('div')%3B%5Cn%20%20%20loading.innerText%20%3D%20LOADING_TPL%3B%5Cn%20%20%20%5Cn%20%20%20return%20document.body.appendChild(loading)%3B%5Ct%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAloading%E5%AE%9E%E4%BE%8B%5Cn%7D%22%7D\"></card><p><br /></p><p>Excuse me？这就是传说中的单例模式吗？</p><p><br /></p><h4 id=\"6hokkg\"><a href=\"#6hokkg\" id=\"典型应用场景\"></a>典型应用场景</h4><p><br /></p><ul><li><p>惰性单例：在合适的时候才创建对象，如缓存对象等。</p></li></ul><ul><li><p>单例服务：Angular 1.x 的服务实例</p></li></ul><ul><li><p>单例组件：全局唯一的遮罩层、弹窗等</p></li></ul><p><br /></p><h4 id=\"pdxpeh\"><a href=\"#pdxpeh\" id=\"小结\"></a>小结</h4><p><br /></p><p>单例模式能够我们能在全局的上下文环境下获取唯一的对象，这种特性适用于多次调用的对象。</p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [javascript, 设计模式]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2017-09-10 23:28:00\"],[\"hr\",{\"id\":\"isvvau\"}],[\"div\",{\"data-type\":\"p\"},\"单例模式是一个非常典型的设计模式，保证一个类只有唯一实例，并且提供单一的访问点。单例的对象不同于静态类，我们可以延迟单例对象的初始化，通常这种情况发生在我们需要等待加载创建单例的依赖。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"x86ogl\"},\"单例的特性\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"全局唯一实例\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"单一的访问入口\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"b3t1da\"},\"如何创建一个单例？\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"接下来我将以设计一个全局的Loading状态的实例以渐入佳境。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"blockquote\",[\"div\",{\"data-type\":\"p\"},\"你不是真正的单例？\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"javascript\"},\"var createLoading = function(){\\n\",\"\\tvar LOADING_TPL =\\n\",\"    '<div class=\\\"loading-container\\\">' +\\n\",\"    '<div class=\\\"loading\\\">' +\\n\",\"    '</div>' +\\n\",\"    '</div>';\\n\",\"\\tvar loading = document.createElement('div');\\n\",\"   loading.innerText = LOADING_TPL;\\n\",\"   \\n\",\"   return document.body.appendChild(loading);\\t// 创建一个loading实例\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Excuse me？这就是传说中的单例模式吗？\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"6hokkg\"},\"典型应用场景\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"惰性单例：在合适的时候才创建对象，如缓存对象等。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"单例服务：Angular 1.x 的服务实例\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"单例组件：全局唯一的遮罩层、弹窗等\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"pdxpeh\"},\"小结\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"单例模式能够我们能在全局的上下文环境下获取唯一的对象，这种特性适用于多次调用的对象。\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T09:43:07.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:36:25.000Z",
    "updated_at": "2019-06-03T03:22:26.000Z",
    "published_at": "2018-09-15T09:43:07.000Z",
    "first_published_at": null,
    "word_count": 335,
    "cover": null,
    "description": "tags: [javascript, 设计模式]date: 2017-09-10 23:28:00单例模式是一个非常典型的设计模式，保证一个类只有唯一实例，并且提供单一的访问点。单例的对象不同于静态类，我们可以延迟单例对象的初始化，通常这种情况发生在我们需要等待加载创建单例的依赖。单例的特性全局唯一实例单一的访问入口&lt;!-- more --&gt;如何创建一个单例？接下来我将以设计一个全局的Loading状态的实例以渐入佳境。你不是真正的单例？var createLoading = function...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709037,
    "slug": "yg79mz",
    "title": "如何在HTML内包含模板文件",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [html, javascript]<br />date: 2015-08-09\n\n---\n\n<a name=\"1dtfnz\"></a>\n## 题记\n\n最近项目开发使用了全新的架构（RequireJS+AngularJS+IonicUI），类似的前端MVVM框架已经深入人心，因此也试着在项目之余写一点小代码实现部分功能。下面我们将用原生的Javascript实现一个在HTML内引入HTML文件的简单小组件。\n\n言归正传，我们要实现的功能就是在一个HTML内引用其他的HTML模板文件。例如以下场景：应用的多个页面需要复用一个header，而我们希望只对其进行一次编辑和修改就可以应用于所有页面，因为我们可以将header的内容作为一个模板，其他页面只需要调用这个模板。\n\n<!-- more -->\n\n_在后端的模板引擎内我们可以直接使用`include`类似的语句包含其他的模板，在一些SPA(Single Page APP)也是利用了类似于`ng-include`的写法复用HTML模板_\n\n<a name=\"onvkyr\"></a>\n### 设计思路：\n\n- HTML标签：添加`include-html`属性，用于置入引用的HTML模板的URL\n\n\n```html\n<div include-html=\"./header.html\"></div>\n```\n\n- 获取所有URL的值\n\n\n```javascript\nvar dom = document.getElementsByTagName('*');\nfor (var i = 0; i < dom.length; i++) {\n\tvar bakNode = dom[i];\n\turl = bakNode.getAttribute('include-html');\n\tif (!check(url)) continue;\n}\n```\n\n- 发送GET请求获取URL指向的模板页面并进行处理\n\n\n```javascript\n/**\n *\thtml文件包含器\n *\t调用方式：DOM内插入属性'include-html=\"路径\"'\n */\nvar includeHandle = function() {\n\tvar dom, // DOM节点\n\t\turl; // 文件路径\n\tdom = document.getElementsByTagName('*');\n\tfor (var i = 0; i < dom.length; i++) {\n\t\tvar bakNode = dom[i];\n\t\turl = bakNode.getAttribute('include-html');\n\t\tif (!check(url)) continue;\n\t\tvar node = bakNode;\n\t\tnode.removeAttribute('include-html');\n\t\tloadHTML('GET', url, true, function(result) {\n\t\t\tnode.innerHTML = result;\n\t\t\t// 递归调用\n\t\t\t// includeHandle();\n\t\t});\n\t}\n}\n\n/**\n *\tXMLHttpRequest Get Html Content\n *\t@param\t{String} method - 方法\n *\t@param\t{String}\turl\t- 路径\n *\t@param\t{Bool}\tasync\t- 异步选项\n */\nvar loadHTML = function(method, url, async, callback) {\n\tvar result = '';\n\tif (!check(method)) var method = 'GET';\n\tif (!check(async)) var async = false;\n\tvar xhttp; // HTTPRequest\n\tif (window.XMLHttpRequest) {\n\t\txhttp = new XMLHttpRequest();\n\t} else {\n\t\txhttp = new ActiveXObject('Microsoft.XMLHTTP')\n\t}\n\txhttp.onreadystatechange = function() {\n\t\tif (xhttp.readyState === 4 && xhttp.status === 0) {\n\t\t\tresult = xhttp.responseText;\n\t\t\tcallback(result);\n\t\t}\n\t}\n\txhttp.open(method, url, async);\n\txhttp.send();\n}\n```\n\n- 递归调用 => 嵌套调用\n\n\n这里还需要进行算法优化，借着午后小憩的时间暂且先完成此DEMO，后继完善。\n\n<a name=\"551zyg\"></a>\n### 完整DEMO\n\n1. index.html\n\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n\t</head>\n\t<body>\n\t\t<div include-html=\"test.html\"></div>\n\t\t<section>test</section>\n\t\t<script type=\"text/javascript\" src=\"demo.js\"></script>\n\t</body>\n</html>\n```\n\n1. index.html\n\n\n```html\n<!DOCTYPE html>\n<header>\n\t<ul class=\"menu\">\n\t\t<li>1111</li><li>2222</li><li>3333</li>\n\t</ul>\n</header>\n```\n\n1. demo.js\n\n\n```javascript\n/**\n *  数据校验\n */\nvar check = function(data) {\n\tif (typeof(data) === undefined || data === null || data === '' || data === undefined) return false;\n\treturn true;\n}\n\n/**\n *\tXMLHttpRequest Get Html Content\n *\t@param\t{String} method - 方法\n *\t@param\t{String}\turl\t- 路径\n *\t@param\t{Bool}\tasync\t- 异步选项\n */\nvar loadHTML = function(method, url, async, callback) {\n  var result = '';\n  if (!check(method)) var method = 'GET';\n  if (!check(async)) var async = false;\n  var xhttp; // HTTPRequest\n  if (window.XMLHttpRequest) {\n    xhttp = new XMLHttpRequest();\n  } else {\n    xhttp = new ActiveXObject('Microsoft.XMLHTTP')\n  }\n  xhttp.onreadystatechange = function() {\n    if (xhttp.readyState === 4 && xhttp.status === 0) {\n      result = xhttp.responseText;\n      callback(result);\n    }\n  }\n  xhttp.open(method, url, async);\n  xhttp.send();\n}\n\n/**\n *\thtml文件包含器\n *\t调用方式：DOM内插入属性'include-html=\"路径\"'\n */\nvar includeHandle = function() {\n\tvar dom, // DOM节点\n\t\turl; // 文件路径\n\tdom = document.getElementsByTagName('*');\n\tfor (var i = 0; i < dom.length; i++) {\n\t\tvar bakNode = dom[i];\n\t\turl = bakNode.getAttribute('include-html');\n\t\tif (!check(url)) continue;\n\t\tvar node = bakNode;\n\t\tnode.removeAttribute('include-html');\n\t\tloadHTML('GET', url, true, function(result) {\n\t\t\tnode.innerHTML = result;\n\t\t\t// 递归调用\n\t\t\t// includeHandle();\n\t\t});\n\t}\n}\nincludeHandle();\n```\n\n",
    "body_draft": "tags: [html, javascript]\ndate: 2015-08-09\n\n---\n\n## <a name=\"1dtfnz\"></a>题记\n\n最近项目开发使用了全新的架构（RequireJS+AngularJS+IonicUI），类似的前端MVVM框架已经深入人心，因此也试着在项目之余写一点小代码实现部分功能。下面我们将用原生的Javascript实现一个在HTML内引入HTML文件的简单小组件。\n\n言归正传，我们要实现的功能就是在一个HTML内引用其他的HTML模板文件。例如以下场景：应用的多个页面需要复用一个header，而我们希望只对其进行一次编辑和修改就可以应用于所有页面，因为我们可以将header的内容作为一个模板，其他页面只需要调用这个模板。\n\n<!-- more -->\n\n<em>在后端的模板引擎内我们可以直接使用</em><em><code>include</code></em><em>类似的语句包含其他的模板，在一些SPA(Single Page APP)也是利用了类似于</em><em><code>ng-include</code></em><em>的写法复用HTML模板</em>\n\n### <a name=\"onvkyr\"></a>设计思路：\n\n* HTML标签：添加`include-html`属性，用于置入引用的HTML模板的URL\n\n```html\n<div include-html=\"./header.html\"></div>\n```\n\n* 获取所有URL的值\n\n```js\nvar dom = document.getElementsByTagName('*');\nfor (var i = 0; i < dom.length; i++) {\n\tvar bakNode = dom[i];\n\turl = bakNode.getAttribute('include-html');\n\tif (!check(url)) continue;\n}\n```\n\n* 发送GET请求获取URL指向的模板页面并进行处理\n\n```js\n/**\n *\thtml文件包含器\n *\t调用方式：DOM内插入属性'include-html=\"路径\"'\n */\nvar includeHandle = function() {\n\tvar dom, // DOM节点\n\t\turl; // 文件路径\n\tdom = document.getElementsByTagName('*');\n\tfor (var i = 0; i < dom.length; i++) {\n\t\tvar bakNode = dom[i];\n\t\turl = bakNode.getAttribute('include-html');\n\t\tif (!check(url)) continue;\n\t\tvar node = bakNode;\n\t\tnode.removeAttribute('include-html');\n\t\tloadHTML('GET', url, true, function(result) {\n\t\t\tnode.innerHTML = result;\n\t\t\t// 递归调用\n\t\t\t// includeHandle();\n\t\t});\n\t}\n}\n\n/**\n *\tXMLHttpRequest Get Html Content\n *\t@param\t{String} method - 方法\n *\t@param\t{String}\turl\t- 路径\n *\t@param\t{Bool}\tasync\t- 异步选项\n */\nvar loadHTML = function(method, url, async, callback) {\n\tvar result = '';\n\tif (!check(method)) var method = 'GET';\n\tif (!check(async)) var async = false;\n\tvar xhttp; // HTTPRequest\n\tif (window.XMLHttpRequest) {\n\t\txhttp = new XMLHttpRequest();\n\t} else {\n\t\txhttp = new ActiveXObject('Microsoft.XMLHTTP')\n\t}\n\txhttp.onreadystatechange = function() {\n\t\tif (xhttp.readyState === 4 && xhttp.status === 0) {\n\t\t\tresult = xhttp.responseText;\n\t\t\tcallback(result);\n\t\t}\n\t}\n\txhttp.open(method, url, async);\n\txhttp.send();\n}\n```\n\n* 递归调用 => 嵌套调用\n\n这里还需要进行算法优化，借着午后小憩的时间暂且先完成此DEMO，后继完善。\n\n### <a name=\"551zyg\"></a>完整DEMO\n\n1. index.html\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n\t</head>\n\t<body>\n\t\t<div include-html=\"test.html\"></div>\n\t\t<section>test</section>\n\t\t<script type=\"text/javascript\" src=\"demo.js\"></script>\n\t</body>\n</html>\n```\n\n1. index.html\n\n```html\n<!DOCTYPE html>\n<header>\n\t<ul class=\"menu\">\n\t\t<li>1111</li><li>2222</li><li>3333</li>\n\t</ul>\n</header>\n```\n\n1. demo.js\n\n```js\n/**\n *  数据校验\n */\nvar check = function(data) {\n\tif (typeof(data) === undefined || data === null || data === '' || data === undefined) return false;\n\treturn true;\n}\n\n/**\n *\tXMLHttpRequest Get Html Content\n *\t@param\t{String} method - 方法\n *\t@param\t{String}\turl\t- 路径\n *\t@param\t{Bool}\tasync\t- 异步选项\n */\nvar loadHTML = function(method, url, async, callback) {\n  var result = '';\n  if (!check(method)) var method = 'GET';\n  if (!check(async)) var async = false;\n  var xhttp; // HTTPRequest\n  if (window.XMLHttpRequest) {\n    xhttp = new XMLHttpRequest();\n  } else {\n    xhttp = new ActiveXObject('Microsoft.XMLHTTP')\n  }\n  xhttp.onreadystatechange = function() {\n    if (xhttp.readyState === 4 && xhttp.status === 0) {\n      result = xhttp.responseText;\n      callback(result);\n    }\n  }\n  xhttp.open(method, url, async);\n  xhttp.send();\n}\n\n/**\n *\thtml文件包含器\n *\t调用方式：DOM内插入属性'include-html=\"路径\"'\n */\nvar includeHandle = function() {\n\tvar dom, // DOM节点\n\t\turl; // 文件路径\n\tdom = document.getElementsByTagName('*');\n\tfor (var i = 0; i < dom.length; i++) {\n\t\tvar bakNode = dom[i];\n\t\turl = bakNode.getAttribute('include-html');\n\t\tif (!check(url)) continue;\n\t\tvar node = bakNode;\n\t\tnode.removeAttribute('include-html');\n\t\tloadHTML('GET', url, true, function(result) {\n\t\t\tnode.innerHTML = result;\n\t\t\t// 递归调用\n\t\t\t// includeHandle();\n\t\t});\n\t}\n}\nincludeHandle();\n```\n\n",
    "body_html": "<p>tags: [html, javascript]</p><p>date: 2015-08-09</p><hr /><h2 id=\"1dtfnz\"><a href=\"#1dtfnz\"></a>题记</h2><p><br /></p><p>最近项目开发使用了全新的架构（RequireJS+AngularJS+IonicUI），类似的前端MVVM框架已经深入人心，因此也试着在项目之余写一点小代码实现部分功能。下面我们将用原生的Javascript实现一个在HTML内引入HTML文件的简单小组件。</p><p><br /></p><p>言归正传，我们要实现的功能就是在一个HTML内引用其他的HTML模板文件。例如以下场景：应用的多个页面需要复用一个header，而我们希望只对其进行一次编辑和修改就可以应用于所有页面，因为我们可以将header的内容作为一个模板，其他页面只需要调用这个模板。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p><em>在后端的模板引擎内我们可以直接使用</em><em><code>include</code></em><em>类似的语句包含其他的模板，在一些SPA(Single Page APP)也是利用了类似于</em><em><code>ng-include</code></em><em>的写法复用HTML模板</em></p><p><br /></p><h3 id=\"onvkyr\"><a href=\"#onvkyr\"></a>设计思路：</h3><p><br /></p><ul><li><p>HTML标签：添加<code>include-html</code>属性，用于置入引用的HTML模板的URL</p></li></ul><p><br /></p><pre data-lang=\"html\"><code>&lt;div include-html=&quot;./header.html&quot;&gt;&lt;/div&gt;</code></pre><p><br /></p><ul><li><p>获取所有URL的值</p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>var dom = document.getElementsByTagName('*');\nfor (var i = 0; i &lt; dom.length; i++) {\n\tvar bakNode = dom[i];\n\turl = bakNode.getAttribute('include-html');\n\tif (!check(url)) continue;\n}</code></pre><p><br /></p><ul><li><p>发送GET请求获取URL指向的模板页面并进行处理</p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>/**\n *\thtml文件包含器\n *\t调用方式：DOM内插入属性'include-html=&quot;路径&quot;'\n */\nvar includeHandle = function() {\n\tvar dom, // DOM节点\n\t\turl; // 文件路径\n\tdom = document.getElementsByTagName('*');\n\tfor (var i = 0; i &lt; dom.length; i++) {\n\t\tvar bakNode = dom[i];\n\t\turl = bakNode.getAttribute('include-html');\n\t\tif (!check(url)) continue;\n\t\tvar node = bakNode;\n\t\tnode.removeAttribute('include-html');\n\t\tloadHTML('GET', url, true, function(result) {\n\t\t\tnode.innerHTML = result;\n\t\t\t// 递归调用\n\t\t\t// includeHandle();\n\t\t});\n\t}\n}\n\n/**\n *\tXMLHttpRequest Get Html Content\n *\t@param\t{String} method - 方法\n *\t@param\t{String}\turl\t- 路径\n *\t@param\t{Bool}\tasync\t- 异步选项\n */\nvar loadHTML = function(method, url, async, callback) {\n\tvar result = '';\n\tif (!check(method)) var method = 'GET';\n\tif (!check(async)) var async = false;\n\tvar xhttp; // HTTPRequest\n\tif (window.XMLHttpRequest) {\n\t\txhttp = new XMLHttpRequest();\n\t} else {\n\t\txhttp = new ActiveXObject('Microsoft.XMLHTTP')\n\t}\n\txhttp.onreadystatechange = function() {\n\t\tif (xhttp.readyState === 4 &amp;&amp; xhttp.status === 0) {\n\t\t\tresult = xhttp.responseText;\n\t\t\tcallback(result);\n\t\t}\n\t}\n\txhttp.open(method, url, async);\n\txhttp.send();\n}</code></pre><p><br /></p><ul><li><p>递归调用 =&gt; 嵌套调用</p></li></ul><p><br /></p><p>这里还需要进行算法优化，借着午后小憩的时间暂且先完成此DEMO，后继完善。</p><p><br /></p><h3 id=\"551zyg\"><a href=\"#551zyg\"></a>完整DEMO</h3><p><br /></p><ol start=\"1\"><li><p>index.html</p></li></ol><p><br /></p><pre data-lang=\"html\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;div include-html=&quot;test.html&quot;&gt;&lt;/div&gt;\n\t\t&lt;section&gt;test&lt;/section&gt;\n\t\t&lt;script type=&quot;text/javascript&quot; src=&quot;demo.js&quot;&gt;&lt;/script&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code></pre><p><br /></p><ol start=\"1\"><li><p>index.html</p></li></ol><p><br /></p><pre data-lang=\"html\"><code>&lt;!DOCTYPE html&gt;\n&lt;header&gt;\n\t&lt;ul class=&quot;menu&quot;&gt;\n\t\t&lt;li&gt;1111&lt;/li&gt;&lt;li&gt;2222&lt;/li&gt;&lt;li&gt;3333&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/header&gt;</code></pre><p><br /></p><ol start=\"1\"><li><p>demo.js</p></li></ol><p><br /></p><pre data-lang=\"javascript\"><code>/**\n *  数据校验\n */\nvar check = function(data) {\n\tif (typeof(data) === undefined || data === null || data === '' || data === undefined) return false;\n\treturn true;\n}\n\n/**\n *\tXMLHttpRequest Get Html Content\n *\t@param\t{String} method - 方法\n *\t@param\t{String}\turl\t- 路径\n *\t@param\t{Bool}\tasync\t- 异步选项\n */\nvar loadHTML = function(method, url, async, callback) {\n  var result = '';\n  if (!check(method)) var method = 'GET';\n  if (!check(async)) var async = false;\n  var xhttp; // HTTPRequest\n  if (window.XMLHttpRequest) {\n    xhttp = new XMLHttpRequest();\n  } else {\n    xhttp = new ActiveXObject('Microsoft.XMLHTTP')\n  }\n  xhttp.onreadystatechange = function() {\n    if (xhttp.readyState === 4 &amp;&amp; xhttp.status === 0) {\n      result = xhttp.responseText;\n      callback(result);\n    }\n  }\n  xhttp.open(method, url, async);\n  xhttp.send();\n}\n\n/**\n *\thtml文件包含器\n *\t调用方式：DOM内插入属性'include-html=&quot;路径&quot;'\n */\nvar includeHandle = function() {\n\tvar dom, // DOM节点\n\t\turl; // 文件路径\n\tdom = document.getElementsByTagName('*');\n\tfor (var i = 0; i &lt; dom.length; i++) {\n\t\tvar bakNode = dom[i];\n\t\turl = bakNode.getAttribute('include-html');\n\t\tif (!check(url)) continue;\n\t\tvar node = bakNode;\n\t\tnode.removeAttribute('include-html');\n\t\tloadHTML('GET', url, true, function(result) {\n\t\t\tnode.innerHTML = result;\n\t\t\t// 递归调用\n\t\t\t// includeHandle();\n\t\t});\n\t}\n}\nincludeHandle();</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [html, javascript]</p><p>date: 2015-08-09</p><card type=\"block\" name=\"hr\"></card><h2 id=\"1dtfnz\"><a href=\"#1dtfnz\" id=\"题记\"></a>题记</h2><p><br /></p><p>最近项目开发使用了全新的架构（RequireJS+AngularJS+IonicUI），类似的前端MVVM框架已经深入人心，因此也试着在项目之余写一点小代码实现部分功能。下面我们将用原生的Javascript实现一个在HTML内引入HTML文件的简单小组件。</p><p><br /></p><p>言归正传，我们要实现的功能就是在一个HTML内引用其他的HTML模板文件。例如以下场景：应用的多个页面需要复用一个header，而我们希望只对其进行一次编辑和修改就可以应用于所有页面，因为我们可以将header的内容作为一个模板，其他页面只需要调用这个模板。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p><em>在后端的模板引擎内我们可以直接使用</em><em><code>include</code></em><em>类似的语句包含其他的模板，在一些SPA(Single Page APP)也是利用了类似于</em><em><code>ng-include</code></em><em>的写法复用HTML模板</em></p><p><br /></p><h3 id=\"onvkyr\"><a href=\"#onvkyr\" id=\"设计思路：\"></a>设计思路：</h3><p><br /></p><ul><li><p>HTML标签：添加<code>include-html</code>属性，用于置入引用的HTML模板的URL</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22a86c7b0a%22%2C%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cdiv%20include-html%3D%5C%22.%2Fheader.html%5C%22%3E%3C%2Fdiv%3E%22%7D\"></card><p><br /></p><ul><li><p>获取所有URL的值</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%224bcb16df%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20dom%20%3D%20document.getElementsByTagName('*')%3B%5Cnfor%20(var%20i%20%3D%200%3B%20i%20%3C%20dom.length%3B%20i%2B%2B)%20%7B%5Cn%5Ctvar%20bakNode%20%3D%20dom%5Bi%5D%3B%5Cn%5Cturl%20%3D%20bakNode.getAttribute('include-html')%3B%5Cn%5Ctif%20(!check(url))%20continue%3B%5Cn%7D%22%7D\"></card><p><br /></p><ul><li><p>发送GET请求获取URL指向的模板页面并进行处理</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%222e9db95c%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F**%5Cn%20*%5Cthtml%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%99%A8%5Cn%20*%5Ct%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%EF%BC%9ADOM%E5%86%85%E6%8F%92%E5%85%A5%E5%B1%9E%E6%80%A7'include-html%3D%5C%22%E8%B7%AF%E5%BE%84%5C%22'%5Cn%20*%2F%5Cnvar%20includeHandle%20%3D%20function()%20%7B%5Cn%5Ctvar%20dom%2C%20%2F%2F%20DOM%E8%8A%82%E7%82%B9%5Cn%5Ct%5Cturl%3B%20%2F%2F%20%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%5Cn%5Ctdom%20%3D%20document.getElementsByTagName('*')%3B%5Cn%5Ctfor%20(var%20i%20%3D%200%3B%20i%20%3C%20dom.length%3B%20i%2B%2B)%20%7B%5Cn%5Ct%5Ctvar%20bakNode%20%3D%20dom%5Bi%5D%3B%5Cn%5Ct%5Cturl%20%3D%20bakNode.getAttribute('include-html')%3B%5Cn%5Ct%5Ctif%20(!check(url))%20continue%3B%5Cn%5Ct%5Ctvar%20node%20%3D%20bakNode%3B%5Cn%5Ct%5Ctnode.removeAttribute('include-html')%3B%5Cn%5Ct%5CtloadHTML('GET'%2C%20url%2C%20true%2C%20function(result)%20%7B%5Cn%5Ct%5Ct%5Ctnode.innerHTML%20%3D%20result%3B%5Cn%5Ct%5Ct%5Ct%2F%2F%20%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8%5Cn%5Ct%5Ct%5Ct%2F%2F%20includeHandle()%3B%5Cn%5Ct%5Ct%7D)%3B%5Cn%5Ct%7D%5Cn%7D%5Cn%5Cn%2F**%5Cn%20*%5CtXMLHttpRequest%20Get%20Html%20Content%5Cn%20*%5Ct%40param%5Ct%7BString%7D%20method%20-%20%E6%96%B9%E6%B3%95%5Cn%20*%5Ct%40param%5Ct%7BString%7D%5Cturl%5Ct-%20%E8%B7%AF%E5%BE%84%5Cn%20*%5Ct%40param%5Ct%7BBool%7D%5Ctasync%5Ct-%20%E5%BC%82%E6%AD%A5%E9%80%89%E9%A1%B9%5Cn%20*%2F%5Cnvar%20loadHTML%20%3D%20function(method%2C%20url%2C%20async%2C%20callback)%20%7B%5Cn%5Ctvar%20result%20%3D%20''%3B%5Cn%5Ctif%20(!check(method))%20var%20method%20%3D%20'GET'%3B%5Cn%5Ctif%20(!check(async))%20var%20async%20%3D%20false%3B%5Cn%5Ctvar%20xhttp%3B%20%2F%2F%20HTTPRequest%5Cn%5Ctif%20(window.XMLHttpRequest)%20%7B%5Cn%5Ct%5Ctxhttp%20%3D%20new%20XMLHttpRequest()%3B%5Cn%5Ct%7D%20else%20%7B%5Cn%5Ct%5Ctxhttp%20%3D%20new%20ActiveXObject('Microsoft.XMLHTTP')%5Cn%5Ct%7D%5Cn%5Ctxhttp.onreadystatechange%20%3D%20function()%20%7B%5Cn%5Ct%5Ctif%20(xhttp.readyState%20%3D%3D%3D%204%20%26%26%20xhttp.status%20%3D%3D%3D%200)%20%7B%5Cn%5Ct%5Ct%5Ctresult%20%3D%20xhttp.responseText%3B%5Cn%5Ct%5Ct%5Ctcallback(result)%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%5Ctxhttp.open(method%2C%20url%2C%20async)%3B%5Cn%5Ctxhttp.send()%3B%5Cn%7D%22%7D\"></card><p><br /></p><ul><li><p>递归调用 =&gt; 嵌套调用</p></li></ul><p><br /></p><p>这里还需要进行算法优化，借着午后小憩的时间暂且先完成此DEMO，后继完善。</p><p><br /></p><h3 id=\"551zyg\"><a href=\"#551zyg\" id=\"完整demo\"></a>完整DEMO</h3><p><br /></p><ol start=\"1\"><li><p>index.html</p></li></ol><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2237414f8e%22%2C%22mode%22%3A%22html%22%2C%22code%22%3A%22%3C!DOCTYPE%20html%3E%5Cn%3Chtml%3E%5Cn%5Ct%3Chead%3E%5Cn%5Ct%5Ct%3Cmeta%20http-equiv%3D%5C%22Content-Type%5C%22%20content%3D%5C%22text%2Fhtml%3B%20charset%3DUTF-8%5C%22%3E%5Cn%5Ct%3C%2Fhead%3E%5Cn%5Ct%3Cbody%3E%5Cn%5Ct%5Ct%3Cdiv%20include-html%3D%5C%22test.html%5C%22%3E%3C%2Fdiv%3E%5Cn%5Ct%5Ct%3Csection%3Etest%3C%2Fsection%3E%5Cn%5Ct%5Ct%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%20src%3D%5C%22demo.js%5C%22%3E%3C%2Fscript%3E%5Cn%5Ct%3C%2Fbody%3E%5Cn%3C%2Fhtml%3E%22%7D\"></card><p><br /></p><ol start=\"1\"><li><p>index.html</p></li></ol><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f3223985%22%2C%22mode%22%3A%22html%22%2C%22code%22%3A%22%3C!DOCTYPE%20html%3E%5Cn%3Cheader%3E%5Cn%5Ct%3Cul%20class%3D%5C%22menu%5C%22%3E%5Cn%5Ct%5Ct%3Cli%3E1111%3C%2Fli%3E%3Cli%3E2222%3C%2Fli%3E%3Cli%3E3333%3C%2Fli%3E%5Cn%5Ct%3C%2Ful%3E%5Cn%3C%2Fheader%3E%22%7D\"></card><p><br /></p><ol start=\"1\"><li><p>demo.js</p></li></ol><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b52c6598%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%20%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C%5Cn%20*%2F%5Cnvar%20check%20%3D%20function(data)%20%7B%5Cn%5Ctif%20(typeof(data)%20%3D%3D%3D%20undefined%20%7C%7C%20data%20%3D%3D%3D%20null%20%7C%7C%20data%20%3D%3D%3D%20''%20%7C%7C%20data%20%3D%3D%3D%20undefined)%20return%20false%3B%5Cn%5Ctreturn%20true%3B%5Cn%7D%5Cn%5Cn%2F**%5Cn%20*%5CtXMLHttpRequest%20Get%20Html%20Content%5Cn%20*%5Ct%40param%5Ct%7BString%7D%20method%20-%20%E6%96%B9%E6%B3%95%5Cn%20*%5Ct%40param%5Ct%7BString%7D%5Cturl%5Ct-%20%E8%B7%AF%E5%BE%84%5Cn%20*%5Ct%40param%5Ct%7BBool%7D%5Ctasync%5Ct-%20%E5%BC%82%E6%AD%A5%E9%80%89%E9%A1%B9%5Cn%20*%2F%5Cnvar%20loadHTML%20%3D%20function(method%2C%20url%2C%20async%2C%20callback)%20%7B%5Cn%20%20var%20result%20%3D%20''%3B%5Cn%20%20if%20(!check(method))%20var%20method%20%3D%20'GET'%3B%5Cn%20%20if%20(!check(async))%20var%20async%20%3D%20false%3B%5Cn%20%20var%20xhttp%3B%20%2F%2F%20HTTPRequest%5Cn%20%20if%20(window.XMLHttpRequest)%20%7B%5Cn%20%20%20%20xhttp%20%3D%20new%20XMLHttpRequest()%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20xhttp%20%3D%20new%20ActiveXObject('Microsoft.XMLHTTP')%5Cn%20%20%7D%5Cn%20%20xhttp.onreadystatechange%20%3D%20function()%20%7B%5Cn%20%20%20%20if%20(xhttp.readyState%20%3D%3D%3D%204%20%26%26%20xhttp.status%20%3D%3D%3D%200)%20%7B%5Cn%20%20%20%20%20%20result%20%3D%20xhttp.responseText%3B%5Cn%20%20%20%20%20%20callback(result)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20xhttp.open(method%2C%20url%2C%20async)%3B%5Cn%20%20xhttp.send()%3B%5Cn%7D%5Cn%5Cn%2F**%5Cn%20*%5Cthtml%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%99%A8%5Cn%20*%5Ct%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%EF%BC%9ADOM%E5%86%85%E6%8F%92%E5%85%A5%E5%B1%9E%E6%80%A7'include-html%3D%5C%22%E8%B7%AF%E5%BE%84%5C%22'%5Cn%20*%2F%5Cnvar%20includeHandle%20%3D%20function()%20%7B%5Cn%5Ctvar%20dom%2C%20%2F%2F%20DOM%E8%8A%82%E7%82%B9%5Cn%5Ct%5Cturl%3B%20%2F%2F%20%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%5Cn%5Ctdom%20%3D%20document.getElementsByTagName('*')%3B%5Cn%5Ctfor%20(var%20i%20%3D%200%3B%20i%20%3C%20dom.length%3B%20i%2B%2B)%20%7B%5Cn%5Ct%5Ctvar%20bakNode%20%3D%20dom%5Bi%5D%3B%5Cn%5Ct%5Cturl%20%3D%20bakNode.getAttribute('include-html')%3B%5Cn%5Ct%5Ctif%20(!check(url))%20continue%3B%5Cn%5Ct%5Ctvar%20node%20%3D%20bakNode%3B%5Cn%5Ct%5Ctnode.removeAttribute('include-html')%3B%5Cn%5Ct%5CtloadHTML('GET'%2C%20url%2C%20true%2C%20function(result)%20%7B%5Cn%5Ct%5Ct%5Ctnode.innerHTML%20%3D%20result%3B%5Cn%5Ct%5Ct%5Ct%2F%2F%20%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8%5Cn%5Ct%5Ct%5Ct%2F%2F%20includeHandle()%3B%5Cn%5Ct%5Ct%7D)%3B%5Cn%5Ct%7D%5Cn%7D%5CnincludeHandle()%3B%22%7D\"></card><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [html, javascript]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-08-09\"],[\"hr\",{\"id\":\"v5gyut\"}],[\"h2\",{\"id\":\"1dtfnz\"},\"题记\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"最近项目开发使用了全新的架构（RequireJS+AngularJS+IonicUI），类似的前端MVVM框架已经深入人心，因此也试着在项目之余写一点小代码实现部分功能。下面我们将用原生的Javascript实现一个在HTML内引入HTML文件的简单小组件。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"言归正传，我们要实现的功能就是在一个HTML内引用其他的HTML模板文件。例如以下场景：应用的多个页面需要复用一个header，而我们希望只对其进行一次编辑和修改就可以应用于所有页面，因为我们可以将header的内容作为一个模板，其他页面只需要调用这个模板。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"em\",{},\"在后端的模板引擎内我们可以直接使用\"],[\"em\",{},[\"code\",{},\"include\"]],[\"em\",{},\"类似的语句包含其他的模板，在一些SPA(Single Page APP)也是利用了类似于\"],[\"em\",{},[\"code\",{},\"ng-include\"]],[\"em\",{},\"的写法复用HTML模板\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"onvkyr\"},\"设计思路：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"HTML标签：添加\",[\"code\",{},\"include-html\"],\"属性，用于置入引用的HTML模板的URL\"]]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"html\"},\"<div include-html=\\\"./header.html\\\"></div>\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"获取所有URL的值\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"var dom = document.getElementsByTagName('*');\\n\",\"for (var i = 0; i < dom.length; i++) {\\n\",\"\\tvar bakNode = dom[i];\\n\",\"\\turl = bakNode.getAttribute('include-html');\\n\",\"\\tif (!check(url)) continue;\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"发送GET请求获取URL指向的模板页面并进行处理\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"/**\\n\",\" *\\thtml文件包含器\\n\",\" *\\t调用方式：DOM内插入属性'include-html=\\\"路径\\\"'\\n\",\" */\\n\",\"var includeHandle = function() {\\n\",\"\\tvar dom, // DOM节点\\n\",\"\\t\\turl; // 文件路径\\n\",\"\\tdom = document.getElementsByTagName('*');\\n\",\"\\tfor (var i = 0; i < dom.length; i++) {\\n\",\"\\t\\tvar bakNode = dom[i];\\n\",\"\\t\\turl = bakNode.getAttribute('include-html');\\n\",\"\\t\\tif (!check(url)) continue;\\n\",\"\\t\\tvar node = bakNode;\\n\",\"\\t\\tnode.removeAttribute('include-html');\\n\",\"\\t\\tloadHTML('GET', url, true, function(result) {\\n\",\"\\t\\t\\tnode.innerHTML = result;\\n\",\"\\t\\t\\t// 递归调用\\n\",\"\\t\\t\\t// includeHandle();\\n\",\"\\t\\t});\\n\",\"\\t}\\n\",\"}\\n\",\"\\n\",\"/**\\n\",\" *\\tXMLHttpRequest Get Html Content\\n\",\" *\\t@param\\t{String} method - 方法\\n\",\" *\\t@param\\t{String}\\turl\\t- 路径\\n\",\" *\\t@param\\t{Bool}\\tasync\\t- 异步选项\\n\",\" */\\n\",\"var loadHTML = function(method, url, async, callback) {\\n\",\"\\tvar result = '';\\n\",\"\\tif (!check(method)) var method = 'GET';\\n\",\"\\tif (!check(async)) var async = false;\\n\",\"\\tvar xhttp; // HTTPRequest\\n\",\"\\tif (window.XMLHttpRequest) {\\n\",\"\\t\\txhttp = new XMLHttpRequest();\\n\",\"\\t} else {\\n\",\"\\t\\txhttp = new ActiveXObject('Microsoft.XMLHTTP')\\n\",\"\\t}\\n\",\"\\txhttp.onreadystatechange = function() {\\n\",\"\\t\\tif (xhttp.readyState === 4 && xhttp.status === 0) {\\n\",\"\\t\\t\\tresult = xhttp.responseText;\\n\",\"\\t\\t\\tcallback(result);\\n\",\"\\t\\t}\\n\",\"\\t}\\n\",\"\\txhttp.open(method, url, async);\\n\",\"\\txhttp.send();\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"递归调用 => 嵌套调用\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"这里还需要进行算法优化，借着午后小憩的时间暂且先完成此DEMO，后继完善。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"551zyg\"},\"完整DEMO\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"index.html\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"html\"},\"<!DOCTYPE html>\\n\",\"<html>\\n\",\"\\t<head>\\n\",\"\\t\\t<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n\",\"\\t</head>\\n\",\"\\t<body>\\n\",\"\\t\\t<div include-html=\\\"test.html\\\"></div>\\n\",\"\\t\\t<section>test</section>\\n\",\"\\t\\t<script type=\\\"text/javascript\\\" src=\\\"demo.js\\\"></script>\\n\",\"\\t</body>\\n\",\"</html>\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"index.html\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"html\"},\"<!DOCTYPE html>\\n\",\"<header>\\n\",\"\\t<ul class=\\\"menu\\\">\\n\",\"\\t\\t<li>1111</li><li>2222</li><li>3333</li>\\n\",\"\\t</ul>\\n\",\"</header>\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"demo.js\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"/**\\n\",\" *  数据校验\\n\",\" */\\n\",\"var check = function(data) {\\n\",\"\\tif (typeof(data) === undefined || data === null || data === '' || data === undefined) return false;\\n\",\"\\treturn true;\\n\",\"}\\n\",\"\\n\",\"/**\\n\",\" *\\tXMLHttpRequest Get Html Content\\n\",\" *\\t@param\\t{String} method - 方法\\n\",\" *\\t@param\\t{String}\\turl\\t- 路径\\n\",\" *\\t@param\\t{Bool}\\tasync\\t- 异步选项\\n\",\" */\\n\",\"var loadHTML = function(method, url, async, callback) {\\n\",\"  var result = '';\\n\",\"  if (!check(method)) var method = 'GET';\\n\",\"  if (!check(async)) var async = false;\\n\",\"  var xhttp; // HTTPRequest\\n\",\"  if (window.XMLHttpRequest) {\\n\",\"    xhttp = new XMLHttpRequest();\\n\",\"  } else {\\n\",\"    xhttp = new ActiveXObject('Microsoft.XMLHTTP')\\n\",\"  }\\n\",\"  xhttp.onreadystatechange = function() {\\n\",\"    if (xhttp.readyState === 4 && xhttp.status === 0) {\\n\",\"      result = xhttp.responseText;\\n\",\"      callback(result);\\n\",\"    }\\n\",\"  }\\n\",\"  xhttp.open(method, url, async);\\n\",\"  xhttp.send();\\n\",\"}\\n\",\"\\n\",\"/**\\n\",\" *\\thtml文件包含器\\n\",\" *\\t调用方式：DOM内插入属性'include-html=\\\"路径\\\"'\\n\",\" */\\n\",\"var includeHandle = function() {\\n\",\"\\tvar dom, // DOM节点\\n\",\"\\t\\turl; // 文件路径\\n\",\"\\tdom = document.getElementsByTagName('*');\\n\",\"\\tfor (var i = 0; i < dom.length; i++) {\\n\",\"\\t\\tvar bakNode = dom[i];\\n\",\"\\t\\turl = bakNode.getAttribute('include-html');\\n\",\"\\t\\tif (!check(url)) continue;\\n\",\"\\t\\tvar node = bakNode;\\n\",\"\\t\\tnode.removeAttribute('include-html');\\n\",\"\\t\\tloadHTML('GET', url, true, function(result) {\\n\",\"\\t\\t\\tnode.innerHTML = result;\\n\",\"\\t\\t\\t// 递归调用\\n\",\"\\t\\t\\t// includeHandle();\\n\",\"\\t\\t});\\n\",\"\\t}\\n\",\"}\\n\",\"includeHandle();\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:11:13.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:35:41.000Z",
    "updated_at": "2019-08-05T06:19:57.000Z",
    "published_at": "2018-09-15T08:11:13.000Z",
    "first_published_at": null,
    "word_count": 933,
    "cover": null,
    "description": "tags: [html, javascript]date: 2015-08-09题记最近项目开发使用了全新的架构（RequireJS+AngularJS+IonicUI），类似的前端MVVM框架已经深入人心，因此也试着在项目之余写一点小代码实现部分功能。下面我们将用原生的Javascript实现一个在HTML内引入HTML文件的简单小组件。言归正传，我们要实现的功能就是在一个HTML内引用其他的HTML模板文件。例如以下场景：应用的多个页面需要复用一个header...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709035,
    "slug": "gh8736",
    "title": "Javascript之window对象",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [javascript]<br />date: 2015-03-01\n\n---\n\n说到window对象我们不得不提及BOM，BOM是browser object model的缩写，正如其名为浏览器对象模型。BOM提供了独立于内容而与浏览器窗口进行交互的对象，BOM由一系列相关的对象组成，其中最主要对象为window，下面我们将分类讲解window对象。\n\n<a name=\"i5qgoi\"></a>\n### 概述\n\nwindow对象是BOM顶层(核心对象)，其他对象均为window对象延伸拓展，成为其子对象。直接调用其子对象可以不指明window对象，其子对象或者函数的作用域为全局（我们可以在局部的作用域定义window.variable将变量提升为全局变量）。接下来我们将从其子对象和函数两方面刨析。\n\n<!-- more -->\n\n[w3school对window对象的叙述](http://www.w3school.com.cn/jsref/dom_obj_window.asp)\n\n```javascript\n// true\nwindow.navigator === navigator;\n```\n\n<a name=\"3ibpel\"></a>\n### self对象\n\nself对象与window对象完全一致，self通常用于确认在当前窗口内。\n\n```javascript\n// true\nwindow.self === window;\n// true\nself.self === self;\n```\n\n<a name=\"h3rstg\"></a>\n### 子对象(下面对于子对象函数的描述均省略显示使用window对象)\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282924354-52404bad-0b55-42bf-b181-09641b534884.png#width=525)\n\n\n1、window.frames[]<br />如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。通过frames[name][或frames.name](http://xn--frames-o06l.name)（name为框架的name）获取框架的window对象。\n\n_注释：没有应用于 window 对象的公开标准，不过所有浏览器都支持该对象。_\n\ntest.html\n\n```html\n<html>\n<head>\n\t<title>test</title>\n</head>\n<body>\n\t<p>test</p>\n\t<iframe src=\"./test.html\" name=\"myFrame\"></iframe>\n\t<script type=\"text/javascript\">\n\t\twindow.onload = function () {\n\t\t\tconsole.log(frames[\"myFrame\"]);\n\t\t}\n\t</script>\n</body>\n</html>\n```\n\n获取框架数量\n\n```javascript\n// 无框架则为0\nwindow.length\n```\n\n返回父对象\n\n```javascript\n// true\nframes[\"myFrame\"].parent === window;\n```\n\n返回顶层元素\n\n```javascript\n// true\nframes[\"myFrame\"].top === window;\n```\n\n2、window.navigator(只读引用)\n\nNavigator 对象包含有关浏览器的信息。\n\n属性 | 描述<br />appCodeName | 返回浏览器的代码名。<br />appName | 返回浏览器的名称。<br />userAgent | 返回由客户机发送服务器的 user-agent 头部的值。<br />appVersion | 返回浏览器的平台和版本信息。<br />platform | 返回运行浏览器的操作系统平台。<br />appMinorVersion\t| 返回浏览器的次级版本。<br />browserLanguage | 返回当前浏览器的语言。<br />cookieEnabled | 返回指明浏览器中是否启用 cookie 的布尔值。<br />cpuClass | 返回浏览器系统的 CPU 等级。<br />onLine | 返回指明系统是否处于脱机模式的布尔值。<br />systemLanguage | 返回 OS 使用的默认语言。<br />userLanguage | 返回 OS 的自然语言设置。\n\n---add-in<br />geolocation | 返回地理位置信息\n\n3、window.screen(只读引用)\n\nScreen 对象中存放着有关显示浏览器屏幕的信息。JavaScript 程序将利用这些信息来优化它们的输出，以达到用户的显示要求。\n\n属性 | 描述<br />availHeight | 返回显示屏幕的高度 (除 Windows 任务栏之外)。<br />availWidth | 返回显示屏幕的宽度 (除 Windows 任务栏之外)。<br />bufferDepth | 设置或返回调色板的比特深度。<br />colorDepth | 返回目标设备或缓冲器上的调色板的比特深度。<br />deviceXDPI | 返回显示屏幕的每英寸水平点数。<br />deviceYDPI | 返回显示屏幕的每英寸垂直点数。<br />fontSmoothingEnabled | 返回用户是否在显示控制面板中启用了字体平滑。<br />height | 返回显示屏幕的高度。<br />logicalXDPI | 返回显示屏幕每英寸的水平方向的常规点数。<br />logicalYDPI | 返回显示屏幕每英寸的垂直方向的常规点数。<br />pixelDepth | 返回显示屏幕的颜色分辨率（比特每像素）。<br />updateInterval | 设置或返回屏幕的刷新率。<br />width | 返回显示器屏幕的宽度。\n\n4、window.location<br />Location 对象包含有关当前 URL 的信息。\n\n属性 | 描述<br />hash | 设置或返回从井号 (#) 开始的 URL（锚）。<br />host | 设置或返回主机名和当前 URL 的端口号。<br />hostname | 设置或返回当前 URL 的主机名。<br />href | 设置或返回完整的 URL。<br />pathname | 设置或返回当前 URL 的路径部分。<br />port | 设置或返回当前 URL 的端口号。<br />protocol | 设置或返回当前 URL 的协议。<br />search | 设置或返回从问号 (?) 开始的 URL（query部分）。\n\n属性 | 描述<br />assign() | 加载新的文档。<br />reload() | 重新加载当前文档。<br />replace() | 用新的文档替换当前文档。\n\n5、window.history(只读引用)<br />History 对象包含用户（在浏览器窗口中）访问过的 URL。_是一个类似于栈的数据结构_\n\n属性 | 描述<br />length | 返回浏览器历史列表中的 URL 数量。\n\n函数 | 描述<br />back() | 后退(history列表上一个URL)<br />forward() | 前进(history列表下一个URL)<br />go() | 加载history列表中某个一个URL<br />6、window.document\n\n<a name=\"14gbaw\"></a>\n### 函数\n\n1、窗体控制函数\n\n- moveBy()<br />可相对窗口的当前坐标把它移动指定的像素。\n\n- moveTo()<br />把窗口的左上角移动到一个指定的坐标。\n\n\n```javascript\n// 右移x，下移y\nwindow.moveBy(x,y);\n\n// 直接到(x, y)坐标\nwindow.moveTo(x,y);\n```\n\n- resizeBy()<br />按照指定的像素调整窗口的大小。\n\n- resizeTo()<br />把窗口的大小调整到指定的宽度和高度。\n\n\n```javascript\n// 窗口宽度增加width，高度增加height\nresizeBy(width,height);\n// 窗口宽度设置为width，高度设置为height\nresizeTo(width,height);\n```\n\n2、滚动轴控制函数\n\n- scrollTo()<br />按照指定的像素值来滚动内容。\n\n- scrollBy()<br />把内容滚动到指定的坐标。\n\n\n```javascript\n// 向右滚动xs，向下滚动ys\nscrollBy(xs, ys);\n// 滚动到(xs，ys)\nscrollTo(xs, ys);\n```\n\n3、窗体焦点控制函数<br />_腾讯的在线笔试似乎就是用这个防止作弊的(切换窗口)_\n\n- focus()<br />将键盘焦点赋予某一窗口。\n\n- blur()<br />把键盘焦点从顶层窗口移开。\n\n\n4、 新建窗体函数\n\n- open()<br />open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。[参考文档](http://www.w3school.com.cn/jsref/met_win_open.asp)\n\n- close()<br />close() 方法用于关闭浏览器窗口。\n\n\n```javascript\n// 打开窗口\nvar testWin = window.open(\"http://www.w3school.com.cn\",\"_blank\",\"toolbar=yes, location=yes, directories=no, status=no, menubar=yes, scrollbars=yes, resizable=no, copyhistory=yes, width=400, height=400\");\n\n// 关闭窗口\ntestWin.close;\n```\n\n5、对话框函数\n\n- alert()<br />显示带有一段消息和确认按钮的警告框。\n\n- confirm()<br />显示带有一段消息以及确认按钮和取消按钮的对话框。返回值为（确认按钮 ？ true : false）\n\n- prompt()<br />显示带有一段消息以及输入框、确认按钮和取消按钮的对话框。<br />_返回值为：输入的字符串或者null（取消按钮）_\n\n\n```javascript\n// alert()\nalert('hello');\n\n// confirm()\nconfirm('确认吗？') ? console.log('您点击了确认') : console.log('您点击了取消');\n\n// prompt\nvar string = prompt('请输入学号');\nstring !== null ? console.log('学号是' + string) : console.log('您点击了取消'');\n```\n\n6、时间等待和间隔函数\n\n- setTimeout()/clearTimeout()<br />按照指定的周期（以毫秒计）来调用函数或计算表达式 / 取消前者设定的计时器\n\n- setInterval/clearInterval()<br />在指定的毫秒数后调用函数或计算表达式 / 取消前者设定的计时器\n\n\n<a name=\"bz4aqn\"></a>\n### 其他属性\n\n1、状态栏属性\n\n- window.defaultStatus<br />设置或返回窗口状态栏中的默认文本。\n\n- window.status<br />设置窗口状态栏的文本。\n\n\n2、窗口大小\n\n- innerHeight<br />页面可视化区域的高度（包含滚动条）\n\n- innerWidth<br />页面可视化区域的宽度（包含滚动条）\n\n- outerHeight<br />窗口可视化区域的高度（包含页面可视化区域和浏览器状态栏、工具栏等，即屏幕高度减去任务栏的高度）\n\n- outerWidth<br />窗口可视化区域的宽度（解释同上）\n\n\n3、位置偏移\n\n- pageXOffset<br />设置或返回当前页面相对于窗口显示区左上角的 X 位置。\n\n- pageYOffset<br />设置或返回当前页面相对于窗口显示区左上角的 Y 位置。\n\n- screenLeft / screenTop / screenX / screenY\n\n\n_只读整数。声明了窗口的左上角在屏幕上的的 x 坐标和 y 坐标。IE、Safari 和 Opera 支持 screenLeft 和 screenTop，而 Firefox 和 Safari 支持 screenX 和 screenY_\n\n4、opener<br />返回对创建此窗口的窗口的引用。\n\n5、窗口关系\n\n- name<br />设置或返回窗口的名称。\n\n- parent<br />返回父窗口。\n\n- top<br />返回顶层的先辈窗口。\n\n- closed<br />返回一个窗口是否关闭。\n\n\n<a name=\"diclku\"></a>\n### 事件\n\n另开一篇文章详述javascript的事件，关于window的事件不再重复赘述。\n",
    "body_draft": "tags: [javascript]\ndate: 2015-03-01\n\n---\n\n说到window对象我们不得不提及BOM，BOM是browser object model的缩写，正如其名为浏览器对象模型。BOM提供了独立于内容而与浏览器窗口进行交互的对象，BOM由一系列相关的对象组成，其中最主要对象为window，下面我们将分类讲解window对象。\n\n### <a name=\"i5qgoi\"></a>概述\n\nwindow对象是BOM顶层(核心对象)，其他对象均为window对象延伸拓展，成为其子对象。直接调用其子对象可以不指明window对象，其子对象或者函数的作用域为全局（我们可以在局部的作用域定义window.variable将变量提升为全局变量）。接下来我们将从其子对象和函数两方面刨析。\n\n<!-- more -->\n\n[w3school对window对象的叙述](http://www.w3school.com.cn/jsref/dom_obj_window.asp)\n\n```js\n// true\nwindow.navigator === navigator;\n```\n\n### <a name=\"3ibpel\"></a>self对象\n\nself对象与window对象完全一致，self通常用于确认在当前窗口内。\n\n```js\n// true\nwindow.self === window;\n// true\nself.self === self;\n```\n\n### <a name=\"h3rstg\"></a>子对象(下面对于子对象函数的描述均省略显示使用window对象)\n\n\n\n![image.png | left | 525x501](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282924354-52404bad-0b55-42bf-b181-09641b534884.png \"\")\n\n\n\n1、window.frames[]\n如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。通过frames[name][或frames.name](http://xn--frames-o06l.name)（name为框架的name）获取框架的window对象。\n\n*注释：没有应用于 window 对象的公开标准，不过所有浏览器都支持该对象。*\n\ntest.html\n\n```html\n<html>\n<head>\n\t<title>test</title>\n</head>\n<body>\n\t<p>test</p>\n\t<iframe src=\"./test.html\" name=\"myFrame\"></iframe>\n\t<script type=\"text/javascript\">\n\t\twindow.onload = function () {\n\t\t\tconsole.log(frames[\"myFrame\"]);\n\t\t}\n\t</script>\n</body>\n</html>\n```\n\n获取框架数量\n\n```js\n// 无框架则为0\nwindow.length\n```\n\n返回父对象\n\n```js\n// true\nframes[\"myFrame\"].parent === window;\n```\n\n返回顶层元素\n\n```js\n// true\nframes[\"myFrame\"].top === window;\n```\n\n2、window.navigator(只读引用)\n\nNavigator 对象包含有关浏览器的信息。\n\n属性 | 描述\nappCodeName | 返回浏览器的代码名。\nappName | 返回浏览器的名称。\nuserAgent | 返回由客户机发送服务器的 user-agent 头部的值。\nappVersion | 返回浏览器的平台和版本信息。\nplatform | 返回运行浏览器的操作系统平台。\nappMinorVersion\t| 返回浏览器的次级版本。\nbrowserLanguage | 返回当前浏览器的语言。\ncookieEnabled | 返回指明浏览器中是否启用 cookie 的布尔值。\ncpuClass | 返回浏览器系统的 CPU 等级。\nonLine | 返回指明系统是否处于脱机模式的布尔值。\nsystemLanguage | 返回 OS 使用的默认语言。\nuserLanguage | 返回 OS 的自然语言设置。\n\n---add-in\ngeolocation | 返回地理位置信息\n\n3、window.screen(只读引用)\n\nScreen 对象中存放着有关显示浏览器屏幕的信息。JavaScript 程序将利用这些信息来优化它们的输出，以达到用户的显示要求。\n\n属性 | 描述\navailHeight | 返回显示屏幕的高度 (除 Windows 任务栏之外)。\navailWidth | 返回显示屏幕的宽度 (除 Windows 任务栏之外)。\nbufferDepth | 设置或返回调色板的比特深度。\ncolorDepth | 返回目标设备或缓冲器上的调色板的比特深度。\ndeviceXDPI | 返回显示屏幕的每英寸水平点数。\ndeviceYDPI | 返回显示屏幕的每英寸垂直点数。\nfontSmoothingEnabled | 返回用户是否在显示控制面板中启用了字体平滑。\nheight | 返回显示屏幕的高度。\nlogicalXDPI | 返回显示屏幕每英寸的水平方向的常规点数。\nlogicalYDPI | 返回显示屏幕每英寸的垂直方向的常规点数。\npixelDepth | 返回显示屏幕的颜色分辨率（比特每像素）。\nupdateInterval | 设置或返回屏幕的刷新率。\nwidth | 返回显示器屏幕的宽度。\n\n4、window.location\nLocation 对象包含有关当前 URL 的信息。\n\n属性 | 描述\nhash | 设置或返回从井号 (#) 开始的 URL（锚）。\nhost | 设置或返回主机名和当前 URL 的端口号。\nhostname | 设置或返回当前 URL 的主机名。\nhref | 设置或返回完整的 URL。\npathname | 设置或返回当前 URL 的路径部分。\nport | 设置或返回当前 URL 的端口号。\nprotocol | 设置或返回当前 URL 的协议。\nsearch | 设置或返回从问号 (?) 开始的 URL（query部分）。\n\n属性 | 描述\nassign() | 加载新的文档。\nreload() | 重新加载当前文档。\nreplace() | 用新的文档替换当前文档。\n\n5、window.history(只读引用)\nHistory 对象包含用户（在浏览器窗口中）访问过的 URL。*是一个类似于栈的数据结构*\n\n属性 | 描述\nlength | 返回浏览器历史列表中的 URL 数量。\n\n函数 | 描述\nback() | 后退(history列表上一个URL)\nforward() | 前进(history列表下一个URL)\ngo() | 加载history列表中某个一个URL\n6、window.document\n\n### <a name=\"14gbaw\"></a>函数\n\n1、窗体控制函数\n\n* moveBy()\n    可相对窗口的当前坐标把它移动指定的像素。\n* moveTo()\n    把窗口的左上角移动到一个指定的坐标。\n\n```js\n// 右移x，下移y\nwindow.moveBy(x,y);\n\n// 直接到(x, y)坐标\nwindow.moveTo(x,y);\n```\n\n* resizeBy()\n    按照指定的像素调整窗口的大小。\n* resizeTo()\n    把窗口的大小调整到指定的宽度和高度。\n\n```js\n// 窗口宽度增加width，高度增加height\nresizeBy(width,height);\n// 窗口宽度设置为width，高度设置为height\nresizeTo(width,height);\n```\n\n2、滚动轴控制函数\n\n* scrollTo()\n    按照指定的像素值来滚动内容。\n* scrollBy()\n    把内容滚动到指定的坐标。\n\n```js\n// 向右滚动xs，向下滚动ys\nscrollBy(xs, ys);\n// 滚动到(xs，ys)\nscrollTo(xs, ys);\n```\n\n3、窗体焦点控制函数\n*腾讯的在线笔试似乎就是用这个防止作弊的(切换窗口)*\n\n* focus()\n    将键盘焦点赋予某一窗口。\n* blur()\n    把键盘焦点从顶层窗口移开。\n\n4、 新建窗体函数\n\n* open()\n    open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。[参考文档](http://www.w3school.com.cn/jsref/met_win_open.asp)\n* close()\n    close() 方法用于关闭浏览器窗口。\n\n```js\n// 打开窗口\nvar testWin = window.open(\"http://www.w3school.com.cn\",\"_blank\",\"toolbar=yes, location=yes, directories=no, status=no, menubar=yes, scrollbars=yes, resizable=no, copyhistory=yes, width=400, height=400\");\n\n// 关闭窗口\ntestWin.close;\n```\n\n5、对话框函数\n\n* alert()\n    显示带有一段消息和确认按钮的警告框。\n* confirm()\n    显示带有一段消息以及确认按钮和取消按钮的对话框。返回值为（确认按钮 ？ true : false）\n* prompt()\n    显示带有一段消息以及输入框、确认按钮和取消按钮的对话框。\n    *返回值为：输入的字符串或者null（取消按钮）*\n\n```js\n// alert()\nalert('hello');\n\n// confirm()\nconfirm('确认吗？') ? console.log('您点击了确认') : console.log('您点击了取消');\n\n// prompt\nvar string = prompt('请输入学号');\nstring !== null ? console.log('学号是' + string) : console.log('您点击了取消'');\n```\n\n6、时间等待和间隔函数\n\n* setTimeout()/clearTimeout()\n    按照指定的周期（以毫秒计）来调用函数或计算表达式 / 取消前者设定的计时器\n* setInterval/clearInterval()\n    在指定的毫秒数后调用函数或计算表达式 / 取消前者设定的计时器\n\n### <a name=\"bz4aqn\"></a>其他属性\n\n1、状态栏属性\n\n* window.defaultStatus\n    设置或返回窗口状态栏中的默认文本。\n* window.status\n    设置窗口状态栏的文本。\n\n2、窗口大小\n\n* innerHeight\n    页面可视化区域的高度（包含滚动条）\n* innerWidth\n    页面可视化区域的宽度（包含滚动条）\n* outerHeight\n    窗口可视化区域的高度（包含页面可视化区域和浏览器状态栏、工具栏等，即屏幕高度减去任务栏的高度）\n* outerWidth\n    窗口可视化区域的宽度（解释同上）\n\n3、位置偏移\n\n* pageXOffset\n    设置或返回当前页面相对于窗口显示区左上角的 X 位置。\n* pageYOffset\n    设置或返回当前页面相对于窗口显示区左上角的 Y 位置。\n* screenLeft / screenTop / screenX / screenY\n\n*只读整数。声明了窗口的左上角在屏幕上的的 x 坐标和 y 坐标。IE、Safari 和 Opera 支持 screenLeft 和 screenTop，而 Firefox 和 Safari 支持 screenX 和 screenY*\n\n4、opener\n返回对创建此窗口的窗口的引用。\n\n5、窗口关系\n\n* name\n    设置或返回窗口的名称。\n* parent\n    返回父窗口。\n* top\n    返回顶层的先辈窗口。\n* closed\n    返回一个窗口是否关闭。\n\n### <a name=\"diclku\"></a>事件\n\n另开一篇文章详述javascript的事件，关于window的事件不再重复赘述。\n",
    "body_html": "<p>tags: [javascript]</p><p>date: 2015-03-01</p><hr /><p>说到window对象我们不得不提及BOM，BOM是browser object model的缩写，正如其名为浏览器对象模型。BOM提供了独立于内容而与浏览器窗口进行交互的对象，BOM由一系列相关的对象组成，其中最主要对象为window，下面我们将分类讲解window对象。</p><p><br /></p><h3 id=\"i5qgoi\"><a href=\"#i5qgoi\"></a>概述</h3><p><br /></p><p>window对象是BOM顶层(核心对象)，其他对象均为window对象延伸拓展，成为其子对象。直接调用其子对象可以不指明window对象，其子对象或者函数的作用域为全局（我们可以在局部的作用域定义window.variable将变量提升为全局变量）。接下来我们将从其子对象和函数两方面刨析。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p><a href=\"http://www.w3school.com.cn/jsref/dom_obj_window.asp\" target=\"_blank\">w3school对window对象的叙述</a></p><p><br /></p><pre data-lang=\"javascript\"><code>// true\nwindow.navigator === navigator;</code></pre><p><br /></p><h3 id=\"3ibpel\"><a href=\"#3ibpel\"></a>self对象</h3><p><br /></p><p>self对象与window对象完全一致，self通常用于确认在当前窗口内。</p><p><br /></p><pre data-lang=\"javascript\"><code>// true\nwindow.self === window;\n// true\nself.self === self;</code></pre><p><br /></p><h3 id=\"h3rstg\"><a href=\"#h3rstg\"></a>子对象(下面对于子对象函数的描述均省略显示使用window对象)</h3><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282924354-52404bad-0b55-42bf-b181-09641b534884.png#width=525\" style=\"max-width: 600px; width: 525px;\" /></p><p><br /></p><p><br /></p><p>1、window.frames[]<br />如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。通过frames[name]<a href=\"http://xn--frames-o06l.name\" target=\"_blank\">或frames.name</a>（name为框架的name）获取框架的window对象。</p><p><br /></p><p><em>注释：没有应用于 window 对象的公开标准，不过所有浏览器都支持该对象。</em></p><p><br /></p><p>test.html</p><p><br /></p><pre data-lang=\"html\"><code>&lt;html&gt;\n&lt;head&gt;\n\t&lt;title&gt;test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t&lt;p&gt;test&lt;/p&gt;\n\t&lt;iframe src=&quot;./test.html&quot; name=&quot;myFrame&quot;&gt;&lt;/iframe&gt;\n\t&lt;script type=&quot;text/javascript&quot;&gt;\n\t\twindow.onload = function () {\n\t\t\tconsole.log(frames[&quot;myFrame&quot;]);\n\t\t}\n\t&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre><p><br /></p><p>获取框架数量</p><p><br /></p><pre data-lang=\"javascript\"><code>// 无框架则为0\nwindow.length</code></pre><p><br /></p><p>返回父对象</p><p><br /></p><pre data-lang=\"javascript\"><code>// true\nframes[&quot;myFrame&quot;].parent === window;</code></pre><p><br /></p><p>返回顶层元素</p><p><br /></p><pre data-lang=\"javascript\"><code>// true\nframes[&quot;myFrame&quot;].top === window;</code></pre><p><br /></p><p>2、window.navigator(只读引用)</p><p><br /></p><p>Navigator 对象包含有关浏览器的信息。</p><p><br /></p><p>属性 | 描述<br />appCodeName | 返回浏览器的代码名。<br />appName | 返回浏览器的名称。<br />userAgent | 返回由客户机发送服务器的 user-agent 头部的值。<br />appVersion | 返回浏览器的平台和版本信息。<br />platform | 返回运行浏览器的操作系统平台。<br />appMinorVersion\t| 返回浏览器的次级版本。<br />browserLanguage | 返回当前浏览器的语言。<br />cookieEnabled | 返回指明浏览器中是否启用 cookie 的布尔值。<br />cpuClass | 返回浏览器系统的 CPU 等级。<br />onLine | 返回指明系统是否处于脱机模式的布尔值。<br />systemLanguage | 返回 OS 使用的默认语言。<br />userLanguage | 返回 OS 的自然语言设置。</p><p><br /></p><p>---add-in<br />geolocation | 返回地理位置信息</p><p><br /></p><p>3、window.screen(只读引用)</p><p><br /></p><p>Screen 对象中存放着有关显示浏览器屏幕的信息。JavaScript 程序将利用这些信息来优化它们的输出，以达到用户的显示要求。</p><p><br /></p><p>属性 | 描述<br />availHeight | 返回显示屏幕的高度 (除 Windows 任务栏之外)。<br />availWidth | 返回显示屏幕的宽度 (除 Windows 任务栏之外)。<br />bufferDepth | 设置或返回调色板的比特深度。<br />colorDepth | 返回目标设备或缓冲器上的调色板的比特深度。<br />deviceXDPI | 返回显示屏幕的每英寸水平点数。<br />deviceYDPI | 返回显示屏幕的每英寸垂直点数。<br />fontSmoothingEnabled | 返回用户是否在显示控制面板中启用了字体平滑。<br />height | 返回显示屏幕的高度。<br />logicalXDPI | 返回显示屏幕每英寸的水平方向的常规点数。<br />logicalYDPI | 返回显示屏幕每英寸的垂直方向的常规点数。<br />pixelDepth | 返回显示屏幕的颜色分辨率（比特每像素）。<br />updateInterval | 设置或返回屏幕的刷新率。<br />width | 返回显示器屏幕的宽度。</p><p><br /></p><p>4、window.location<br />Location 对象包含有关当前 URL 的信息。</p><p><br /></p><p>属性 | 描述<br />hash | 设置或返回从井号 (#) 开始的 URL（锚）。<br />host | 设置或返回主机名和当前 URL 的端口号。<br />hostname | 设置或返回当前 URL 的主机名。<br />href | 设置或返回完整的 URL。<br />pathname | 设置或返回当前 URL 的路径部分。<br />port | 设置或返回当前 URL 的端口号。<br />protocol | 设置或返回当前 URL 的协议。<br />search | 设置或返回从问号 (?) 开始的 URL（query部分）。</p><p><br /></p><p>属性 | 描述<br />assign() | 加载新的文档。<br />reload() | 重新加载当前文档。<br />replace() | 用新的文档替换当前文档。</p><p><br /></p><p>5、window.history(只读引用)<br />History 对象包含用户（在浏览器窗口中）访问过的 URL。<em>是一个类似于栈的数据结构</em></p><p><br /></p><p>属性 | 描述<br />length | 返回浏览器历史列表中的 URL 数量。</p><p><br /></p><p>函数 | 描述<br />back() | 后退(history列表上一个URL)<br />forward() | 前进(history列表下一个URL)<br />go() | 加载history列表中某个一个URL<br />6、window.document</p><p><br /></p><h3 id=\"14gbaw\"><a href=\"#14gbaw\"></a>函数</h3><p><br /></p><p>1、窗体控制函数</p><p><br /></p><ul><li><p>moveBy()<br />可相对窗口的当前坐标把它移动指定的像素。</p></li></ul><ul><li><p>moveTo()<br />把窗口的左上角移动到一个指定的坐标。</p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>// 右移x，下移y\nwindow.moveBy(x,y);\n\n// 直接到(x, y)坐标\nwindow.moveTo(x,y);</code></pre><p><br /></p><ul><li><p>resizeBy()<br />按照指定的像素调整窗口的大小。</p></li></ul><ul><li><p>resizeTo()<br />把窗口的大小调整到指定的宽度和高度。</p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>// 窗口宽度增加width，高度增加height\nresizeBy(width,height);\n// 窗口宽度设置为width，高度设置为height\nresizeTo(width,height);</code></pre><p><br /></p><p>2、滚动轴控制函数</p><p><br /></p><ul><li><p>scrollTo()<br />按照指定的像素值来滚动内容。</p></li></ul><ul><li><p>scrollBy()<br />把内容滚动到指定的坐标。</p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>// 向右滚动xs，向下滚动ys\nscrollBy(xs, ys);\n// 滚动到(xs，ys)\nscrollTo(xs, ys);</code></pre><p><br /></p><p>3、窗体焦点控制函数<br /><em>腾讯的在线笔试似乎就是用这个防止作弊的(切换窗口)</em></p><p><br /></p><ul><li><p>focus()<br />将键盘焦点赋予某一窗口。</p></li></ul><ul><li><p>blur()<br />把键盘焦点从顶层窗口移开。</p></li></ul><p><br /></p><p>4、 新建窗体函数</p><p><br /></p><ul><li><p>open()<br />open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。<a href=\"http://www.w3school.com.cn/jsref/met_win_open.asp\" target=\"_blank\">参考文档</a></p></li></ul><ul><li><p>close()<br />close() 方法用于关闭浏览器窗口。</p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>// 打开窗口\nvar testWin = window.open(&quot;http://www.w3school.com.cn&quot;,&quot;_blank&quot;,&quot;toolbar=yes, location=yes, directories=no, status=no, menubar=yes, scrollbars=yes, resizable=no, copyhistory=yes, width=400, height=400&quot;);\n\n// 关闭窗口\ntestWin.close;</code></pre><p><br /></p><p>5、对话框函数</p><p><br /></p><ul><li><p>alert()<br />显示带有一段消息和确认按钮的警告框。</p></li></ul><ul><li><p>confirm()<br />显示带有一段消息以及确认按钮和取消按钮的对话框。返回值为（确认按钮 ？ true : false）</p></li></ul><ul><li><p>prompt()<br />显示带有一段消息以及输入框、确认按钮和取消按钮的对话框。<br /><em>返回值为：输入的字符串或者null（取消按钮）</em></p></li></ul><p><br /></p><pre data-lang=\"javascript\"><code>// alert()\nalert('hello');\n\n// confirm()\nconfirm('确认吗？') ? console.log('您点击了确认') : console.log('您点击了取消');\n\n// prompt\nvar string = prompt('请输入学号');\nstring !== null ? console.log('学号是' + string) : console.log('您点击了取消'');</code></pre><p><br /></p><p>6、时间等待和间隔函数</p><p><br /></p><ul><li><p>setTimeout()/clearTimeout()<br />按照指定的周期（以毫秒计）来调用函数或计算表达式 / 取消前者设定的计时器</p></li></ul><ul><li><p>setInterval/clearInterval()<br />在指定的毫秒数后调用函数或计算表达式 / 取消前者设定的计时器</p></li></ul><p><br /></p><h3 id=\"bz4aqn\"><a href=\"#bz4aqn\"></a>其他属性</h3><p><br /></p><p>1、状态栏属性</p><p><br /></p><ul><li><p>window.defaultStatus<br />设置或返回窗口状态栏中的默认文本。</p></li></ul><ul><li><p>window.status<br />设置窗口状态栏的文本。</p></li></ul><p><br /></p><p>2、窗口大小</p><p><br /></p><ul><li><p>innerHeight<br />页面可视化区域的高度（包含滚动条）</p></li></ul><ul><li><p>innerWidth<br />页面可视化区域的宽度（包含滚动条）</p></li></ul><ul><li><p>outerHeight<br />窗口可视化区域的高度（包含页面可视化区域和浏览器状态栏、工具栏等，即屏幕高度减去任务栏的高度）</p></li></ul><ul><li><p>outerWidth<br />窗口可视化区域的宽度（解释同上）</p></li></ul><p><br /></p><p>3、位置偏移</p><p><br /></p><ul><li><p>pageXOffset<br />设置或返回当前页面相对于窗口显示区左上角的 X 位置。</p></li></ul><ul><li><p>pageYOffset<br />设置或返回当前页面相对于窗口显示区左上角的 Y 位置。</p></li></ul><ul><li><p>screenLeft / screenTop / screenX / screenY</p></li></ul><p><br /></p><p><em>只读整数。声明了窗口的左上角在屏幕上的的 x 坐标和 y 坐标。IE、Safari 和 Opera 支持 screenLeft 和 screenTop，而 Firefox 和 Safari 支持 screenX 和 screenY</em></p><p><br /></p><p>4、opener<br />返回对创建此窗口的窗口的引用。</p><p><br /></p><p>5、窗口关系</p><p><br /></p><ul><li><p>name<br />设置或返回窗口的名称。</p></li></ul><ul><li><p>parent<br />返回父窗口。</p></li></ul><ul><li><p>top<br />返回顶层的先辈窗口。</p></li></ul><ul><li><p>closed<br />返回一个窗口是否关闭。</p></li></ul><p><br /></p><h3 id=\"diclku\"><a href=\"#diclku\"></a>事件</h3><p><br /></p><p>另开一篇文章详述javascript的事件，关于window的事件不再重复赘述。</p>",
    "body_lake": "<!doctype lake><p>tags: [javascript]</p><p>date: 2015-03-01</p><card type=\"block\" name=\"hr\"></card><p>说到window对象我们不得不提及BOM，BOM是browser object model的缩写，正如其名为浏览器对象模型。BOM提供了独立于内容而与浏览器窗口进行交互的对象，BOM由一系列相关的对象组成，其中最主要对象为window，下面我们将分类讲解window对象。</p><p><br /></p><h3 id=\"i5qgoi\"><a href=\"#i5qgoi\" id=\"概述\"></a>概述</h3><p><br /></p><p>window对象是BOM顶层(核心对象)，其他对象均为window对象延伸拓展，成为其子对象。直接调用其子对象可以不指明window对象，其子对象或者函数的作用域为全局（我们可以在局部的作用域定义window.variable将变量提升为全局变量）。接下来我们将从其子对象和函数两方面刨析。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p><a href=\"http://www.w3school.com.cn/jsref/dom_obj_window.asp\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">w3school对window对象的叙述</a></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22eb63cc00%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20true%5Cnwindow.navigator%20%3D%3D%3D%20navigator%3B%22%7D\"></card><p><br /></p><h3 id=\"3ibpel\"><a href=\"#3ibpel\" id=\"self对象\"></a>self对象</h3><p><br /></p><p>self对象与window对象完全一致，self通常用于确认在当前窗口内。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c165bea9%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20true%5Cnwindow.self%20%3D%3D%3D%20window%3B%5Cn%2F%2F%20true%5Cnself.self%20%3D%3D%3D%20self%3B%22%7D\"></card><p><br /></p><h3 id=\"h3rstg\"><a href=\"#h3rstg\" id=\"子对象(下面对于子对象函数的描述均省略显示使用window对象)\"></a>子对象(下面对于子对象函数的描述均省略显示使用window对象)</h3><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282924354-52404bad-0b55-42bf-b181-09641b534884.png%22%2C%22width%22%3A525%7D\"></card></p><p><br /></p><p><br /></p><p>1、window.frames[]<br />如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。通过frames[name]<a href=\"http://xn--frames-o06l.name\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">或frames.name</a>（name为框架的name）获取框架的window对象。</p><p><br /></p><p><em>注释：没有应用于 window 对象的公开标准，不过所有浏览器都支持该对象。</em></p><p><br /></p><p>test.html</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%223c998f99%22%2C%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Chtml%3E%5Cn%3Chead%3E%5Cn%5Ct%3Ctitle%3Etest%3C%2Ftitle%3E%5Cn%3C%2Fhead%3E%5Cn%3Cbody%3E%5Cn%5Ct%3Cp%3Etest%3C%2Fp%3E%5Cn%5Ct%3Ciframe%20src%3D%5C%22.%2Ftest.html%5C%22%20name%3D%5C%22myFrame%5C%22%3E%3C%2Fiframe%3E%5Cn%5Ct%3Cscript%20type%3D%5C%22text%2Fjavascript%5C%22%3E%5Cn%5Ct%5Ctwindow.onload%20%3D%20function%20()%20%7B%5Cn%5Ct%5Ct%5Ctconsole.log(frames%5B%5C%22myFrame%5C%22%5D)%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%3C%2Fscript%3E%5Cn%3C%2Fbody%3E%5Cn%3C%2Fhtml%3E%22%7D\"></card><p><br /></p><p>获取框架数量</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22fe7ee4db%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%97%A0%E6%A1%86%E6%9E%B6%E5%88%99%E4%B8%BA0%5Cnwindow.length%22%7D\"></card><p><br /></p><p>返回父对象</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c806b699%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20true%5Cnframes%5B%5C%22myFrame%5C%22%5D.parent%20%3D%3D%3D%20window%3B%22%7D\"></card><p><br /></p><p>返回顶层元素</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22aeddde65%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20true%5Cnframes%5B%5C%22myFrame%5C%22%5D.top%20%3D%3D%3D%20window%3B%22%7D\"></card><p><br /></p><p>2、window.navigator(只读引用)</p><p><br /></p><p>Navigator 对象包含有关浏览器的信息。</p><p><br /></p><p>属性 | 描述<br />appCodeName | 返回浏览器的代码名。<br />appName | 返回浏览器的名称。<br />userAgent | 返回由客户机发送服务器的 user-agent 头部的值。<br />appVersion | 返回浏览器的平台和版本信息。<br />platform | 返回运行浏览器的操作系统平台。<br />appMinorVersion\t| 返回浏览器的次级版本。<br />browserLanguage | 返回当前浏览器的语言。<br />cookieEnabled | 返回指明浏览器中是否启用 cookie 的布尔值。<br />cpuClass | 返回浏览器系统的 CPU 等级。<br />onLine | 返回指明系统是否处于脱机模式的布尔值。<br />systemLanguage | 返回 OS 使用的默认语言。<br />userLanguage | 返回 OS 的自然语言设置。</p><p><br /></p><p>---add-in<br />geolocation | 返回地理位置信息</p><p><br /></p><p>3、window.screen(只读引用)</p><p><br /></p><p>Screen 对象中存放着有关显示浏览器屏幕的信息。JavaScript 程序将利用这些信息来优化它们的输出，以达到用户的显示要求。</p><p><br /></p><p>属性 | 描述<br />availHeight | 返回显示屏幕的高度 (除 Windows 任务栏之外)。<br />availWidth | 返回显示屏幕的宽度 (除 Windows 任务栏之外)。<br />bufferDepth | 设置或返回调色板的比特深度。<br />colorDepth | 返回目标设备或缓冲器上的调色板的比特深度。<br />deviceXDPI | 返回显示屏幕的每英寸水平点数。<br />deviceYDPI | 返回显示屏幕的每英寸垂直点数。<br />fontSmoothingEnabled | 返回用户是否在显示控制面板中启用了字体平滑。<br />height | 返回显示屏幕的高度。<br />logicalXDPI | 返回显示屏幕每英寸的水平方向的常规点数。<br />logicalYDPI | 返回显示屏幕每英寸的垂直方向的常规点数。<br />pixelDepth | 返回显示屏幕的颜色分辨率（比特每像素）。<br />updateInterval | 设置或返回屏幕的刷新率。<br />width | 返回显示器屏幕的宽度。</p><p><br /></p><p>4、window.location<br />Location 对象包含有关当前 URL 的信息。</p><p><br /></p><p>属性 | 描述<br />hash | 设置或返回从井号 (#) 开始的 URL（锚）。<br />host | 设置或返回主机名和当前 URL 的端口号。<br />hostname | 设置或返回当前 URL 的主机名。<br />href | 设置或返回完整的 URL。<br />pathname | 设置或返回当前 URL 的路径部分。<br />port | 设置或返回当前 URL 的端口号。<br />protocol | 设置或返回当前 URL 的协议。<br />search | 设置或返回从问号 (?) 开始的 URL（query部分）。</p><p><br /></p><p>属性 | 描述<br />assign() | 加载新的文档。<br />reload() | 重新加载当前文档。<br />replace() | 用新的文档替换当前文档。</p><p><br /></p><p>5、window.history(只读引用)<br />History 对象包含用户（在浏览器窗口中）访问过的 URL。<em>是一个类似于栈的数据结构</em></p><p><br /></p><p>属性 | 描述<br />length | 返回浏览器历史列表中的 URL 数量。</p><p><br /></p><p>函数 | 描述<br />back() | 后退(history列表上一个URL)<br />forward() | 前进(history列表下一个URL)<br />go() | 加载history列表中某个一个URL<br />6、window.document</p><p><br /></p><h3 id=\"14gbaw\"><a href=\"#14gbaw\" id=\"函数\"></a>函数</h3><p><br /></p><p>1、窗体控制函数</p><p><br /></p><ul><li><p>moveBy()<br />可相对窗口的当前坐标把它移动指定的像素。</p></li></ul><ul><li><p>moveTo()<br />把窗口的左上角移动到一个指定的坐标。</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f0784b67%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%8F%B3%E7%A7%BBx%EF%BC%8C%E4%B8%8B%E7%A7%BBy%5Cnwindow.moveBy(x%2Cy)%3B%5Cn%5Cn%2F%2F%20%E7%9B%B4%E6%8E%A5%E5%88%B0(x%2C%20y)%E5%9D%90%E6%A0%87%5Cnwindow.moveTo(x%2Cy)%3B%22%7D\"></card><p><br /></p><ul><li><p>resizeBy()<br />按照指定的像素调整窗口的大小。</p></li></ul><ul><li><p>resizeTo()<br />把窗口的大小调整到指定的宽度和高度。</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22817c0965%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E7%AA%97%E5%8F%A3%E5%AE%BD%E5%BA%A6%E5%A2%9E%E5%8A%A0width%EF%BC%8C%E9%AB%98%E5%BA%A6%E5%A2%9E%E5%8A%A0height%5CnresizeBy(width%2Cheight)%3B%5Cn%2F%2F%20%E7%AA%97%E5%8F%A3%E5%AE%BD%E5%BA%A6%E8%AE%BE%E7%BD%AE%E4%B8%BAwidth%EF%BC%8C%E9%AB%98%E5%BA%A6%E8%AE%BE%E7%BD%AE%E4%B8%BAheight%5CnresizeTo(width%2Cheight)%3B%22%7D\"></card><p><br /></p><p>2、滚动轴控制函数</p><p><br /></p><ul><li><p>scrollTo()<br />按照指定的像素值来滚动内容。</p></li></ul><ul><li><p>scrollBy()<br />把内容滚动到指定的坐标。</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%226fc4ee88%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%90%91%E5%8F%B3%E6%BB%9A%E5%8A%A8xs%EF%BC%8C%E5%90%91%E4%B8%8B%E6%BB%9A%E5%8A%A8ys%5CnscrollBy(xs%2C%20ys)%3B%5Cn%2F%2F%20%E6%BB%9A%E5%8A%A8%E5%88%B0(xs%EF%BC%8Cys)%5CnscrollTo(xs%2C%20ys)%3B%22%7D\"></card><p><br /></p><p>3、窗体焦点控制函数<br /><em>腾讯的在线笔试似乎就是用这个防止作弊的(切换窗口)</em></p><p><br /></p><ul><li><p>focus()<br />将键盘焦点赋予某一窗口。</p></li></ul><ul><li><p>blur()<br />把键盘焦点从顶层窗口移开。</p></li></ul><p><br /></p><p>4、 新建窗体函数</p><p><br /></p><ul><li><p>open()<br />open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。<a href=\"http://www.w3school.com.cn/jsref/met_win_open.asp\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">参考文档</a></p></li></ul><ul><li><p>close()<br />close() 方法用于关闭浏览器窗口。</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f9e205f2%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%89%93%E5%BC%80%E7%AA%97%E5%8F%A3%5Cnvar%20testWin%20%3D%20window.open(%5C%22http%3A%2F%2Fwww.w3school.com.cn%5C%22%2C%5C%22_blank%5C%22%2C%5C%22toolbar%3Dyes%2C%20location%3Dyes%2C%20directories%3Dno%2C%20status%3Dno%2C%20menubar%3Dyes%2C%20scrollbars%3Dyes%2C%20resizable%3Dno%2C%20copyhistory%3Dyes%2C%20width%3D400%2C%20height%3D400%5C%22)%3B%5Cn%5Cn%2F%2F%20%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3%5CntestWin.close%3B%22%7D\"></card><p><br /></p><p>5、对话框函数</p><p><br /></p><ul><li><p>alert()<br />显示带有一段消息和确认按钮的警告框。</p></li></ul><ul><li><p>confirm()<br />显示带有一段消息以及确认按钮和取消按钮的对话框。返回值为（确认按钮 ？ true : false）</p></li></ul><ul><li><p>prompt()<br />显示带有一段消息以及输入框、确认按钮和取消按钮的对话框。<br /><em>返回值为：输入的字符串或者null（取消按钮）</em></p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2230b11af5%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20alert()%5Cnalert('hello')%3B%5Cn%5Cn%2F%2F%20confirm()%5Cnconfirm('%E7%A1%AE%E8%AE%A4%E5%90%97%EF%BC%9F')%20%3F%20console.log('%E6%82%A8%E7%82%B9%E5%87%BB%E4%BA%86%E7%A1%AE%E8%AE%A4')%20%3A%20console.log('%E6%82%A8%E7%82%B9%E5%87%BB%E4%BA%86%E5%8F%96%E6%B6%88')%3B%5Cn%5Cn%2F%2F%20prompt%5Cnvar%20string%20%3D%20prompt('%E8%AF%B7%E8%BE%93%E5%85%A5%E5%AD%A6%E5%8F%B7')%3B%5Cnstring%20!%3D%3D%20null%20%3F%20console.log('%E5%AD%A6%E5%8F%B7%E6%98%AF'%20%2B%20string)%20%3A%20console.log('%E6%82%A8%E7%82%B9%E5%87%BB%E4%BA%86%E5%8F%96%E6%B6%88'')%3B%22%7D\"></card><p><br /></p><p>6、时间等待和间隔函数</p><p><br /></p><ul><li><p>setTimeout()/clearTimeout()<br />按照指定的周期（以毫秒计）来调用函数或计算表达式 / 取消前者设定的计时器</p></li></ul><ul><li><p>setInterval/clearInterval()<br />在指定的毫秒数后调用函数或计算表达式 / 取消前者设定的计时器</p></li></ul><p><br /></p><h3 id=\"bz4aqn\"><a href=\"#bz4aqn\" id=\"其他属性\"></a>其他属性</h3><p><br /></p><p>1、状态栏属性</p><p><br /></p><ul><li><p>window.defaultStatus<br />设置或返回窗口状态栏中的默认文本。</p></li></ul><ul><li><p>window.status<br />设置窗口状态栏的文本。</p></li></ul><p><br /></p><p>2、窗口大小</p><p><br /></p><ul><li><p>innerHeight<br />页面可视化区域的高度（包含滚动条）</p></li></ul><ul><li><p>innerWidth<br />页面可视化区域的宽度（包含滚动条）</p></li></ul><ul><li><p>outerHeight<br />窗口可视化区域的高度（包含页面可视化区域和浏览器状态栏、工具栏等，即屏幕高度减去任务栏的高度）</p></li></ul><ul><li><p>outerWidth<br />窗口可视化区域的宽度（解释同上）</p></li></ul><p><br /></p><p>3、位置偏移</p><p><br /></p><ul><li><p>pageXOffset<br />设置或返回当前页面相对于窗口显示区左上角的 X 位置。</p></li></ul><ul><li><p>pageYOffset<br />设置或返回当前页面相对于窗口显示区左上角的 Y 位置。</p></li></ul><ul><li><p>screenLeft / screenTop / screenX / screenY</p></li></ul><p><br /></p><p><em>只读整数。声明了窗口的左上角在屏幕上的的 x 坐标和 y 坐标。IE、Safari 和 Opera 支持 screenLeft 和 screenTop，而 Firefox 和 Safari 支持 screenX 和 screenY</em></p><p><br /></p><p>4、opener<br />返回对创建此窗口的窗口的引用。</p><p><br /></p><p>5、窗口关系</p><p><br /></p><ul><li><p>name<br />设置或返回窗口的名称。</p></li></ul><ul><li><p>parent<br />返回父窗口。</p></li></ul><ul><li><p>top<br />返回顶层的先辈窗口。</p></li></ul><ul><li><p>closed<br />返回一个窗口是否关闭。</p></li></ul><p><br /></p><h3 id=\"diclku\"><a href=\"#diclku\" id=\"事件\"></a>事件</h3><p><br /></p><p>另开一篇文章详述javascript的事件，关于window的事件不再重复赘述。</p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [javascript]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-03-01\"],[\"hr\",{\"id\":\"yuirkg\"}],[\"div\",{\"data-type\":\"p\"},\"说到window对象我们不得不提及BOM，BOM是browser object model的缩写，正如其名为浏览器对象模型。BOM提供了独立于内容而与浏览器窗口进行交互的对象，BOM由一系列相关的对象组成，其中最主要对象为window，下面我们将分类讲解window对象。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"i5qgoi\"},\"概述\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"window对象是BOM顶层(核心对象)，其他对象均为window对象延伸拓展，成为其子对象。直接调用其子对象可以不指明window对象，其子对象或者函数的作用域为全局（我们可以在局部的作用域定义window.variable将变量提升为全局变量）。接下来我们将从其子对象和函数两方面刨析。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"a\",{\"title\":\"\",\"href\":\"http://www.w3school.com.cn/jsref/dom_obj_window.asp\"},\"w3school对window对象的叙述\"],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"// true\\n\",\"window.navigator === navigator;\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"3ibpel\"},\"self对象\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"self对象与window对象完全一致，self通常用于确认在当前窗口内。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"// true\\n\",\"window.self === window;\\n\",\"// true\\n\",\"self.self === self;\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"h3rstg\"},\"子对象(下面对于子对象函数的描述均省略显示使用window对象)\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"4tzpvk\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282924354-52404bad-0b55-42bf-b181-09641b534884.png\",\"width\":525,\"height\":501,\"size\":36230,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"1、window.frames[]\\n如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。通过frames[name]\",[\"a\",{\"title\":\"\",\"href\":\"http://xn--frames-o06l.name\"},\"或frames.name\"],\"（name为框架的name）获取框架的window对象。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"em\",{},\"注释：没有应用于 window 对象的公开标准，不过所有浏览器都支持该对象。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"test.html\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"html\"},\"<html>\\n\",\"<head>\\n\",\"\\t<title>test</title>\\n\",\"</head>\\n\",\"<body>\\n\",\"\\t<p>test</p>\\n\",\"\\t<iframe src=\\\"./test.html\\\" name=\\\"myFrame\\\"></iframe>\\n\",\"\\t<script type=\\\"text/javascript\\\">\\n\",\"\\t\\twindow.onload = function () {\\n\",\"\\t\\t\\tconsole.log(frames[\\\"myFrame\\\"]);\\n\",\"\\t\\t}\\n\",\"\\t</script>\\n\",\"</body>\\n\",\"</html>\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"获取框架数量\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"// 无框架则为0\\n\",\"window.length\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"返回父对象\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"// true\\n\",\"frames[\\\"myFrame\\\"].parent === window;\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"返回顶层元素\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"// true\\n\",\"frames[\\\"myFrame\\\"].top === window;\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"2、window.navigator(只读引用)\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Navigator 对象包含有关浏览器的信息。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"属性 | 描述\\nappCodeName | 返回浏览器的代码名。\\nappName | 返回浏览器的名称。\\nuserAgent | 返回由客户机发送服务器的 user-agent 头部的值。\\nappVersion | 返回浏览器的平台和版本信息。\\nplatform | 返回运行浏览器的操作系统平台。\\nappMinorVersion\\t| 返回浏览器的次级版本。\\nbrowserLanguage | 返回当前浏览器的语言。\\ncookieEnabled | 返回指明浏览器中是否启用 cookie 的布尔值。\\ncpuClass | 返回浏览器系统的 CPU 等级。\\nonLine | 返回指明系统是否处于脱机模式的布尔值。\\nsystemLanguage | 返回 OS 使用的默认语言。\\nuserLanguage | 返回 OS 的自然语言设置。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"---add-in\\ngeolocation | 返回地理位置信息\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"3、window.screen(只读引用)\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Screen 对象中存放着有关显示浏览器屏幕的信息。JavaScript 程序将利用这些信息来优化它们的输出，以达到用户的显示要求。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"属性 | 描述\\navailHeight | 返回显示屏幕的高度 (除 Windows 任务栏之外)。\\navailWidth | 返回显示屏幕的宽度 (除 Windows 任务栏之外)。\\nbufferDepth | 设置或返回调色板的比特深度。\\ncolorDepth | 返回目标设备或缓冲器上的调色板的比特深度。\\ndeviceXDPI | 返回显示屏幕的每英寸水平点数。\\ndeviceYDPI | 返回显示屏幕的每英寸垂直点数。\\nfontSmoothingEnabled | 返回用户是否在显示控制面板中启用了字体平滑。\\nheight | 返回显示屏幕的高度。\\nlogicalXDPI | 返回显示屏幕每英寸的水平方向的常规点数。\\nlogicalYDPI | 返回显示屏幕每英寸的垂直方向的常规点数。\\npixelDepth | 返回显示屏幕的颜色分辨率（比特每像素）。\\nupdateInterval | 设置或返回屏幕的刷新率。\\nwidth | 返回显示器屏幕的宽度。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"4、window.location\\nLocation 对象包含有关当前 URL 的信息。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"属性 | 描述\\nhash | 设置或返回从井号 (#) 开始的 URL（锚）。\\nhost | 设置或返回主机名和当前 URL 的端口号。\\nhostname | 设置或返回当前 URL 的主机名。\\nhref | 设置或返回完整的 URL。\\npathname | 设置或返回当前 URL 的路径部分。\\nport | 设置或返回当前 URL 的端口号。\\nprotocol | 设置或返回当前 URL 的协议。\\nsearch | 设置或返回从问号 (?) 开始的 URL（query部分）。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"属性 | 描述\\nassign() | 加载新的文档。\\nreload() | 重新加载当前文档。\\nreplace() | 用新的文档替换当前文档。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"5、window.history(只读引用)\\nHistory 对象包含用户（在浏览器窗口中）访问过的 URL。\",[\"em\",{},\"是一个类似于栈的数据结构\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"属性 | 描述\\nlength | 返回浏览器历史列表中的 URL 数量。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"函数 | 描述\\nback() | 后退(history列表上一个URL)\\nforward() | 前进(history列表下一个URL)\\ngo() | 加载history列表中某个一个URL\\n6、window.document\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"14gbaw\"},\"函数\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"1、窗体控制函数\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"moveBy()\\n可相对窗口的当前坐标把它移动指定的像素。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"moveTo()\\n把窗口的左上角移动到一个指定的坐标。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"// 右移x，下移y\\n\",\"window.moveBy(x,y);\\n\",\"\\n\",\"// 直接到(x, y)坐标\\n\",\"window.moveTo(x,y);\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"resizeBy()\\n按照指定的像素调整窗口的大小。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"resizeTo()\\n把窗口的大小调整到指定的宽度和高度。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"// 窗口宽度增加width，高度增加height\\n\",\"resizeBy(width,height);\\n\",\"// 窗口宽度设置为width，高度设置为height\\n\",\"resizeTo(width,height);\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"2、滚动轴控制函数\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"scrollTo()\\n按照指定的像素值来滚动内容。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"scrollBy()\\n把内容滚动到指定的坐标。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"// 向右滚动xs，向下滚动ys\\n\",\"scrollBy(xs, ys);\\n\",\"// 滚动到(xs，ys)\\n\",\"scrollTo(xs, ys);\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"3、窗体焦点控制函数\\n\",[\"em\",{},\"腾讯的在线笔试似乎就是用这个防止作弊的(切换窗口)\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"focus()\\n将键盘焦点赋予某一窗口。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"blur()\\n把键盘焦点从顶层窗口移开。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"4、 新建窗体函数\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"open()\\nopen() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。\",[\"a\",{\"title\":\"\",\"href\":\"http://www.w3school.com.cn/jsref/met_win_open.asp\"},\"参考文档\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"close()\\nclose() 方法用于关闭浏览器窗口。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"// 打开窗口\\n\",\"var testWin = window.open(\\\"http://www.w3school.com.cn\\\",\\\"_blank\\\",\\\"toolbar=yes, location=yes, directories=no, status=no, menubar=yes, scrollbars=yes, resizable=no, copyhistory=yes, width=400, height=400\\\");\\n\",\"\\n\",\"// 关闭窗口\\n\",\"testWin.close;\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"5、对话框函数\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"alert()\\n显示带有一段消息和确认按钮的警告框。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"confirm()\\n显示带有一段消息以及确认按钮和取消按钮的对话框。返回值为（确认按钮 ？ true : false）\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"prompt()\\n显示带有一段消息以及输入框、确认按钮和取消按钮的对话框。\\n\",[\"em\",{},\"返回值为：输入的字符串或者null（取消按钮）\"]]]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"js\"},\"// alert()\\n\",\"alert('hello');\\n\",\"\\n\",\"// confirm()\\n\",\"confirm('确认吗？') ? console.log('您点击了确认') : console.log('您点击了取消');\\n\",\"\\n\",\"// prompt\\n\",\"var string = prompt('请输入学号');\\n\",\"string !== null ? console.log('学号是' + string) : console.log('您点击了取消'');\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"6、时间等待和间隔函数\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"setTimeout()/clearTimeout()\\n按照指定的周期（以毫秒计）来调用函数或计算表达式 / 取消前者设定的计时器\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"setInterval/clearInterval()\\n在指定的毫秒数后调用函数或计算表达式 / 取消前者设定的计时器\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"bz4aqn\"},\"其他属性\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"1、状态栏属性\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"window.defaultStatus\\n设置或返回窗口状态栏中的默认文本。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"window.status\\n设置窗口状态栏的文本。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"2、窗口大小\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"innerHeight\\n页面可视化区域的高度（包含滚动条）\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"innerWidth\\n页面可视化区域的宽度（包含滚动条）\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"outerHeight\\n窗口可视化区域的高度（包含页面可视化区域和浏览器状态栏、工具栏等，即屏幕高度减去任务栏的高度）\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"outerWidth\\n窗口可视化区域的宽度（解释同上）\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"3、位置偏移\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"pageXOffset\\n设置或返回当前页面相对于窗口显示区左上角的 X 位置。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"pageYOffset\\n设置或返回当前页面相对于窗口显示区左上角的 Y 位置。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"screenLeft / screenTop / screenX / screenY\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"em\",{},\"只读整数。声明了窗口的左上角在屏幕上的的 x 坐标和 y 坐标。IE、Safari 和 Opera 支持 screenLeft 和 screenTop，而 Firefox 和 Safari 支持 screenX 和 screenY\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"4、opener\\n返回对创建此窗口的窗口的引用。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"5、窗口关系\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"name\\n设置或返回窗口的名称。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"parent\\n返回父窗口。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"top\\n返回顶层的先辈窗口。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"closed\\n返回一个窗口是否关闭。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"diclku\"},\"事件\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"另开一篇文章详述javascript的事件，关于window的事件不再重复赘述。\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:09:48.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:33:52.000Z",
    "updated_at": "2019-09-26T08:16:28.000Z",
    "published_at": "2018-09-15T08:09:48.000Z",
    "first_published_at": null,
    "word_count": 2110,
    "cover": null,
    "description": "tags: [javascript]date: 2015-03-01说到window对象我们不得不提及BOM，BOM是browser object model的缩写，正如其名为浏览器对象模型。BOM提供了独立于内容而与浏览器窗口进行交互的对象，BOM由一系列相关的对象组成，其中最主要对象为window，下面我们将分类讲解window对象。概述window对象是BOM顶层(核心对象)，其他对象均为window对象延伸拓展，成为其子对象。直接调用其子对象可以不指明window...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709034,
    "slug": "ouhcn3",
    "title": "HCI之前端小任务 [HCI趣玩-2016年预热]",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2015-10-25<br />tags: [hcife, linux, hci] \n\n---\n\n<a name=\"t1fctq\"></a>\n## 前端&UI任务\n\n- 形式：2-3人一组，自由组合\n\n- 截止期限：2016年2月28日\n\n- 提交方式：在github上管理项目，在HCIFE的[hcife-task](https://github.com/hcife/hcife-task)处将项目地址提交到issue\n\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282803431-b5780dbf-b24e-4d63-b6c0-1dd9c6b59ced.png#width=)<br />![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282822336-02f84bf5-0ff8-4cc7-a76b-8c970b23e0c3.png#width=)<br />![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282827085-fefe2904-0512-476c-aed4-10e9416f03b8.png#width=)\n\n<a name=\"319xxu\"></a>\n### js插件\n\n- 静态资源如js,css,图片等资源的js打包加载器\n\n- 可参考[Tiny-Loader.js](https://github.com/youzan/tiny-loader.js),[headjs](https://github.com/headjs/headjs)\n\n- 打包可参考[webpack](http://webpack.github.io)\n\n- 纯js书写，不允许使用任何库\n\n\n<a name=\"3xhpmu\"></a>\n### ui图标\n\n- 设计一套ui图标\n\n- 可参考[GLYPHICONS](http://glyphicons.com/),[Font-Awesome](https://github.com/FortAwesome/Font-Awesome),[IcoMoon](https://github.com/Keyamoon/IcoMoon-Free),[Ionicons](https://github.com/driftyco/ionicons),[Octicons!](https://github.com/github/octicons)\n\n- 实现基本即可，至少30个，不允许抄袭\n\n\n<a name=\"kc3sqn\"></a>\n### webgl建模\n\n- 构建一个简单的3D世界\n\n- 可参考[WebGLBook](https://github.com/tparisi/WebGLBook)\n\n- 这世界有点假。。。\n\n\n",
    "body_draft": "date: 2015-10-25\ntags: [hcife, linux, hci] \n\n---\n\n## <a name=\"t1fctq\"></a>前端&UI任务\n\n* 形式：2-3人一组，自由组合\n* 截止期限：2016年2月28日\n* 提交方式：在github上管理项目，在HCIFE的[hcife-task](https://github.com/hcife/hcife-task)处将项目地址提交到issue\n\n\n\n![image | left](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282803431-b5780dbf-b24e-4d63-b6c0-1dd9c6b59ced.png \"\")\n\n\n\n![image | left](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282822336-02f84bf5-0ff8-4cc7-a76b-8c970b23e0c3.png \"\")\n\n\n\n![image | left](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282827085-fefe2904-0512-476c-aed4-10e9416f03b8.png \"\")\n\n\n### <a name=\"319xxu\"></a>js插件\n\n* 静态资源如js,css,图片等资源的js打包加载器\n* 可参考[Tiny-Loader.js](https://github.com/youzan/tiny-loader.js),[headjs](https://github.com/headjs/headjs)\n* 打包可参考[webpack](http://webpack.github.io)\n* 纯js书写，不允许使用任何库\n\n### <a name=\"3xhpmu\"></a>ui图标\n\n* 设计一套ui图标\n* 可参考[GLYPHICONS](http://glyphicons.com/),[Font-Awesome](https://github.com/FortAwesome/Font-Awesome),[IcoMoon](https://github.com/Keyamoon/IcoMoon-Free),[Ionicons](https://github.com/driftyco/ionicons),[Octicons!](https://github.com/github/octicons)\n* 实现基本即可，至少30个，不允许抄袭\n\n### <a name=\"kc3sqn\"></a>webgl建模\n\n* 构建一个简单的3D世界\n* 可参考[WebGLBook](https://github.com/tparisi/WebGLBook)\n* 这世界有点假。。。\n\n",
    "body_html": "<p>date: 2015-10-25</p><p>tags: [hcife, linux, hci] </p><hr /><h2 id=\"t1fctq\"><a href=\"#t1fctq\"></a>前端&amp;UI任务</h2><p><br /></p><ul><li><p>形式：2-3人一组，自由组合</p></li></ul><ul><li><p>截止期限：2016年2月28日</p></li></ul><ul><li><p>提交方式：在github上管理项目，在HCIFE的<a href=\"https://github.com/hcife/hcife-task\" target=\"_blank\">hcife-task</a>处将项目地址提交到issue</p></li></ul><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282803431-b5780dbf-b24e-4d63-b6c0-1dd9c6b59ced.png#width=\" style=\"max-width: 600px;\" /><br /><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282822336-02f84bf5-0ff8-4cc7-a76b-8c970b23e0c3.png#width=\" style=\"max-width: 600px;\" /><br /><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282827085-fefe2904-0512-476c-aed4-10e9416f03b8.png#width=\" style=\"max-width: 600px;\" /></p><p><br /></p><h3 id=\"319xxu\"><a href=\"#319xxu\"></a>js插件</h3><p><br /></p><ul><li><p>静态资源如js,css,图片等资源的js打包加载器</p></li></ul><ul><li><p>可参考<a href=\"https://github.com/youzan/tiny-loader.js\" target=\"_blank\">Tiny-Loader.js</a>,<a href=\"https://github.com/headjs/headjs\" target=\"_blank\">headjs</a></p></li></ul><ul><li><p>打包可参考<a href=\"http://webpack.github.io\" target=\"_blank\">webpack</a></p></li></ul><ul><li><p>纯js书写，不允许使用任何库</p></li></ul><p><br /></p><h3 id=\"3xhpmu\"><a href=\"#3xhpmu\"></a>ui图标</h3><p><br /></p><ul><li><p>设计一套ui图标</p></li></ul><ul><li><p>可参考<a href=\"http://glyphicons.com/\" target=\"_blank\">GLYPHICONS</a>,<a href=\"https://github.com/FortAwesome/Font-Awesome\" target=\"_blank\">Font-Awesome</a>,<a href=\"https://github.com/Keyamoon/IcoMoon-Free\" target=\"_blank\">IcoMoon</a>,<a href=\"https://github.com/driftyco/ionicons\" target=\"_blank\">Ionicons</a>,<a href=\"https://github.com/github/octicons\" target=\"_blank\">Octicons!</a></p></li></ul><ul><li><p>实现基本即可，至少30个，不允许抄袭</p></li></ul><p><br /></p><h3 id=\"kc3sqn\"><a href=\"#kc3sqn\"></a>webgl建模</h3><p><br /></p><ul><li><p>构建一个简单的3D世界</p></li></ul><ul><li><p>可参考<a href=\"https://github.com/tparisi/WebGLBook\" target=\"_blank\">WebGLBook</a></p></li></ul><ul><li><p>这世界有点假。。。</p></li></ul><p><br /></p>",
    "body_lake": "<!doctype lake><p>date: 2015-10-25</p><p>tags: [hcife, linux, hci] </p><card type=\"block\" name=\"hr\"></card><h2 id=\"t1fctq\"><a href=\"#t1fctq\" id=\"前端&ui任务\"></a>前端&amp;UI任务</h2><p><br /></p><ul><li><p>形式：2-3人一组，自由组合</p></li></ul><ul><li><p>截止期限：2016年2月28日</p></li></ul><ul><li><p>提交方式：在github上管理项目，在HCIFE的<a href=\"https://github.com/hcife/hcife-task\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">hcife-task</a>处将项目地址提交到issue</p></li></ul><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282803431-b5780dbf-b24e-4d63-b6c0-1dd9c6b59ced.png%22%2C%22width%22%3A%22%22%7D\"></card><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282822336-02f84bf5-0ff8-4cc7-a76b-8c970b23e0c3.png%22%2C%22width%22%3A%22%22%7D\"></card><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282827085-fefe2904-0512-476c-aed4-10e9416f03b8.png%22%2C%22width%22%3A%22%22%7D\"></card></p><p><br /></p><h3 id=\"319xxu\"><a href=\"#319xxu\" id=\"js插件\"></a>js插件</h3><p><br /></p><ul><li><p>静态资源如js,css,图片等资源的js打包加载器</p></li></ul><ul><li><p>可参考<a href=\"https://github.com/youzan/tiny-loader.js\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Tiny-Loader.js</a>,<a href=\"https://github.com/headjs/headjs\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">headjs</a></p></li></ul><ul><li><p>打包可参考<a href=\"http://webpack.github.io\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">webpack</a></p></li></ul><ul><li><p>纯js书写，不允许使用任何库</p></li></ul><p><br /></p><h3 id=\"3xhpmu\"><a href=\"#3xhpmu\" id=\"ui图标\"></a>ui图标</h3><p><br /></p><ul><li><p>设计一套ui图标</p></li></ul><ul><li><p>可参考<a href=\"http://glyphicons.com/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GLYPHICONS</a>,<a href=\"https://github.com/FortAwesome/Font-Awesome\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Font-Awesome</a>,<a href=\"https://github.com/Keyamoon/IcoMoon-Free\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">IcoMoon</a>,<a href=\"https://github.com/driftyco/ionicons\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Ionicons</a>,<a href=\"https://github.com/github/octicons\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Octicons!</a></p></li></ul><ul><li><p>实现基本即可，至少30个，不允许抄袭</p></li></ul><p><br /></p><h3 id=\"kc3sqn\"><a href=\"#kc3sqn\" id=\"webgl建模\"></a>webgl建模</h3><p><br /></p><ul><li><p>构建一个简单的3D世界</p></li></ul><ul><li><p>可参考<a href=\"https://github.com/tparisi/WebGLBook\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">WebGLBook</a></p></li></ul><ul><li><p>这世界有点假。。。</p></li></ul><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"date: 2015-10-25\"],[\"div\",{\"data-type\":\"p\"},\"tags: [hcife, linux, hci] \"],[\"hr\",{\"id\":\"gpissv\"}],[\"h2\",{\"id\":\"t1fctq\"},\"前端&UI任务\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"形式：2-3人一组，自由组合\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"截止期限：2016年2月28日\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"提交方式：在github上管理项目，在HCIFE的\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/hcife/hcife-task\"},\"hcife-task\"],\"处将项目地址提交到issue\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"name\":\"image\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282803431-b5780dbf-b24e-4d63-b6c0-1dd9c6b59ced.png\",\"width\":\"\",\"height\":\"\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\\n\",[\"img\",{\"name\":\"image\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282822336-02f84bf5-0ff8-4cc7-a76b-8c970b23e0c3.png\",\"width\":\"\",\"height\":\"\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\\n\",[\"img\",{\"name\":\"image\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282827085-fefe2904-0512-476c-aed4-10e9416f03b8.png\",\"width\":\"\",\"height\":\"\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"319xxu\"},\"js插件\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"静态资源如js,css,图片等资源的js打包加载器\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"可参考\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/youzan/tiny-loader.js\"},\"Tiny-Loader.js\"],\",\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/headjs/headjs\"},\"headjs\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"打包可参考\",[\"a\",{\"title\":\"\",\"href\":\"http://webpack.github.io\"},\"webpack\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"纯js书写，不允许使用任何库\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"3xhpmu\"},\"ui图标\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"设计一套ui图标\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"可参考\",[\"a\",{\"title\":\"\",\"href\":\"http://glyphicons.com/\"},\"GLYPHICONS\"],\",\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/FortAwesome/Font-Awesome\"},\"Font-Awesome\"],\",\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/Keyamoon/IcoMoon-Free\"},\"IcoMoon\"],\",\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/driftyco/ionicons\"},\"Ionicons\"],\",\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/github/octicons\"},\"Octicons!\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"实现基本即可，至少30个，不允许抄袭\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"kc3sqn\"},\"webgl建模\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"构建一个简单的3D世界\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"可参考\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/tparisi/WebGLBook\"},\"WebGLBook\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"这世界有点假。。。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:19:37.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:32:37.000Z",
    "updated_at": "2019-05-20T07:22:27.000Z",
    "published_at": "2018-09-15T08:19:37.000Z",
    "first_published_at": null,
    "word_count": 165,
    "cover": null,
    "description": "date: 2015-10-25tags: [hcife, linux, hci] 前端&amp;UI任务形式：2-3人一组，自由组合截止期限：2016年2月28日提交方式：在github上管理项目，在HCIFE的hcife-task处将项目地址提交到issue[图片] [图片] [图片]js插件静态资源如js,css,图片等资源的js打包加载器可参考Tiny-Loader.js,headjs打包可参考webpack纯js书写，不允许使用任何库ui图标设计一套ui图标可参考GLYPHICONS,Font...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709033,
    "slug": "ifxd94",
    "title": "Nginx虚拟主机管理系统 [HCI趣玩-2016年预热]",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2015-12-31<br />tags: [linux, hci, nginx] \n\n---\n\n欢迎来访HCI第一次趣玩作业，本次作业主要是完成简易的ningx虚拟主机管理系统。所涉及的知识涵盖linux的基本管理命令、nginx/ftp服务器配置、简单的前端页面处理和后台逻辑。\n\n<a name=\"iftvmh\"></a>\n### Nginx知多少\n\nNginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、新浪、网易、腾讯等。【摘抄自百度百科】\n\n<!-- more -->\n\n- 官方网站：[http://nginx.org](http://nginx.org)\n\n- 淘宝运维的nginx-book(_想深入了解的同学看这里_): [https://github.com/taobao/nginx-book](https://github.com/taobao/nginx-book)\n\n\n<a name=\"yhetnf\"></a>\n### 前言\n\n- 体验传送门(新浪云)：[http://sinaapp.com/](http://sinaapp.com/)\n\n- 概要：日常情况下我们经常把应用部署到公开于网络的服务器上，而应用通过IP或域名访问，但于IP（端口）的数量限制，我们不得不剑走偏锋使用共享IP的方式。于是虚拟主机技术横空出世，可以从一台网络服务器上分配出磁盘空间供用户放置站点、应用组件给不同的虚拟主机，提供必要的站点功能、数据存放和传输功能，因此一个IP（套接字）可以直接运行多个多个网络应用。类似于新浪云、西部数码等虚拟主机提供商如雨后春笋般拔地而起。\n\n\n<a name=\"cuzpga\"></a>\n### 设计目标\n\n- 一个可用的虚拟主机管理系统，可以添加/删除/修改/查看多个虚拟主机（只需支持静态文件服务器），同时生成一个账户（账号名+密码）对该主机进行管理。\n\n- 每个虚拟主机对应一个域名和项目文件路径\n\n- 每个虚拟主机所运行的项目文件路径（空间）由系统自动生成，选用ftp/svn/git其中一种代码部署方式控制\n\n\n<a name=\"4vtcxf\"></a>\n### 举个栗子\n\n以下介绍的服务器为HCI内部服务器，运行着HCI的官方网站、竞考网微信公众号后台、weinre调试服务器等应用，所有应用使用不同的域名和同一个套接字（IP+端口）。下面我们来简单分析nginx的配置文件。\n\nnginx.conf局部\n\n```\n# nginx.conf局部\n# 添加虚拟主机配置文件目录\n\nhttp {\n\n        ##\n        # Basic Settings\n        ##\n\n        sendfile on;\n        tcp_nopush on;\n        types_hash_max_size 2048;\n        server_names_hash_bucket_size 64;\n        # server_tokens off;\n\n        # server_names_hash_bucket_size 64;\n        # server_name_in_redirect off;\n\n        include /etc/nginx/mime.types;\n        default_type application/octet-stream;\n\n        ##\n        # Logging Settings\n        ##\n\n        access_log /var/log/nginx/access.log;\n        error_log /var/log/nginx/error.log;\n\n        ##\n        # Gzip Settings\n        ##\n\n        gzip on;\n        gzip_disable \"msie6\";\n\n        # gzip_vary on;\n        # gzip_proxied any;\n        # gzip_comp_level 6;\n        # gzip_buffers 16 8k;\n        # gzip_http_version 1.1;\n\n        ##\n        # nginx-naxsi config\n        ##\n        # Uncomment it if you installed nginx-naxsi\n        ##\n\n        #include /etc/nginx/naxsi_core.rules;\n\n        ##\n        # nginx-passenger config\n        ##\n        # Uncomment it if you installed nginx-passenger\n        ##\n\n        #passenger_root /usr;\n        #passenger_ruby /usr/bin/ruby;\n\n        ##\n        # Virtual Host Configs\n        ##\n\n        include /etc/nginx/conf.d/*.conf;\n        include /etc/nginx/sites-enabled/*;\n        #===================================#\n        include /etc/nginx/vhosts/*;\t# 添加虚拟主机配置文件目录\n        #===================================#\n}\n```\n\n官网配置文件\n\n```\n# 官网配置（静态文件服务器+PHP）\n# /etc/nginx/sites-enabled/default\n\n#===============================\n#\n#       HCI Server\n#\n#================================\nupstream nodejs__upstream {\n        server 127.0.0.1:3000;\n        keepalive 64;\n}\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server ipv6only=on;\n        server_name localhost scauhci.org www.scauhci.org;\n\n        root /var/www/HCIWEB-SCAU/home;\n        index index.php index.html index.htm;\n\n        location / {\n                try_files $uri $uri/ /index.php$is_args$args;\n                client_max_body_size    10m;\n                # proxy_pass http://localhost:3000;\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                # Uncomment to enable naxsi on this location\n                # include /etc/nginx/naxsi.rules\n        }\n\n        location ^~ /jingkao {\n                proxy_pass http://nodejs__upstream;\n        }\n\n        location ~ \\.php$ {\n                fastcgi_pass 127.0.0.1:9000;\n                fastcgi_index index.php;\n                fastcgi_param SCRIPT_FILENAME /etc/nginx/sites-enabled/default$fastcgi_script_name;\n                include /etc/nginx/fastcgi_params;\n        }\n}\n```\n\n虚拟主机目录\n\n```\n# 虚拟主机目录\n106 Dec  6 06:17 jingkao.com.conf\n135 Dec 26 11:32 weinre.conf\n111 Dec 13 16:19 xsx.conf\n175 Jan 15 21:03 ypf.conf\n131 Dec 25 16:34 zsl.conf\n131 Dec 25 16:34 zsl.conf\n```\n\n虚拟主机实例：weinre服务器\n\n```\n# weinre服务器\nserver {\nlisten 80;\nserver_name weinre.scauhci.com;\nlocation / {\n\t\t# 反向代理到服务器B的8080端口\n        proxy_pass http://192.168.100.4:8080;\n}\n}\n```\n\n虚拟主机实例：用于本次作业的测试服务器\n\n```\n# 测试服务器\nserver {\nlisten 80;\nserver_name test1.scauhci.com;\nroot /var/www/test;\nindex index.html;\n}\n```\n\n应用列表(就不一一例举全部应用了)：\n\n- [HCI官网](http://www.scauhci.org)\n\n\n运行在`http://www.scauhci.com/`和`http://121.201.58.180:80`上，项目文件路径为/var/www/HCIWEB-SCAU/home，假设此文件夹只能由FTP账户（账号名: hci，密码：hci_pass）使用ftp对`ftp://www.scauhci.com/hci_home/`进行读写。\n\n- [用于本次作业的测试服务器](http://test1.scauhci.com)\n\n\n运行在`http://weinre.scauhci.com/`和`http://121.201.58.180:80`上，项目文件路径为/var/www/test，假设此文件夹只能由FTP账户（账号名: hci1，密码：hci1_pass）使用ftp对`ftp://www.scauhci.com/test/`进行读写。\n\n<a name=\"nmq5wr\"></a>\n### 设计思路和流程\n\n1. 熟悉Linux环境和Nginx的配置(需部分成员了解)\n\n2. 设计WEB管理系统，需简单的数据库保存虚拟主机的信息（域名、文件路径等）以及管理员信息（只设计一名管理员）\n\n3. 模拟管理虚拟主机，同时对vhosts文件进行文本分析，了解规则后可以进行虚拟主机的实际管理\n\n4. 如有余力可继续实现服务器性能参数的可视化（CPU占用率/内存使用情况/硬盘容量等）<br />\n\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282751584-bab5ba04-1af0-484d-bd72-f0d54ae130d7.png#width=677)\n\n<a name=\"iccxea\"></a>\n### 写几个可能遇到的问题\n\n1. 文件权限的问题：每个应用对应的路径（文件夹）是相对独立的，且只能由对应的用户进行读写\n\n2. 考虑到DNS服务器的复杂性问题，本次作业无须自己搭建DNS服务器，统一分配10个二级域名用于实验\n\n3. nginx的平滑重载:`kill -HUP cat '/usr/local/nginx/logs/nginx.pid'`或者`nginx -s reload`\n\n4. ftp/svn/git 服务器的配置不再赘述，各位还请发挥自我学习能力搜集资料。\n\n\n<a name=\"l7mrdw\"></a>\n### 技能列表\n\n- [Linux入门知识](https://www.shiyanlou.com/courses/1)\n\n- ssh/ftp(或者svn/git)/nginx等服务器搭建和配置\n\n- nginx进阶配置\n\n- 后端：简单的 数据库处理、文件处理、业务逻辑设计\n\n- 前端：一个管理后台的页面/如有余力则设计可视化的性能监控图形界面\n\n- 协作工具：git[(coding)](https://coding.net/git#)/[teambition](http://teambition.com/)\n\n- 规范化的开发流程：需求文档->原型设计->（设计图）->开发->测试->上线\n\n\n<a name=\"nkddns\"></a>\n### 成果：\n\n- 可展示和使用的虚拟主机管理系统\n\n- 完整的源代码和文档\n\n\n<a name=\"k5k5hn\"></a>\n### 后话\n\n本作业难度适中，但涉及的分支非常丰富，适于团队合作，期望各位能涉及多方面的技术，另外需要对项目有大局的思考方式。建议3-5人一组，可挑选一名13级的师兄/师姐作为指导。有任何问题可直接在`HCI@上有老下有小群`讨论。也可以在本文后面的评论框直接评论。\n\n（懒懒的很久不写博客，各路大侠见谅）\n",
    "body_draft": "date: 2015-12-31\ntags: [linux, hci, nginx] \n\n---\n\n欢迎来访HCI第一次趣玩作业，本次作业主要是完成简易的ningx虚拟主机管理系统。所涉及的知识涵盖linux的基本管理命令、nginx/ftp服务器配置、简单的前端页面处理和后台逻辑。\n\n### <a name=\"iftvmh\"></a>Nginx知多少\n\nNginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、新浪、网易、腾讯等。【摘抄自百度百科】\n\n<!-- more -->\n\n* 官方网站：[http://nginx.org](http://nginx.org)\n* 淘宝运维的nginx-book(*想深入了解的同学看这里*): [https://github.com/taobao/nginx-book](https://github.com/taobao/nginx-book)\n\n### <a name=\"yhetnf\"></a>前言\n\n* 体验传送门(新浪云)：[http://sinaapp.com/](http://sinaapp.com/)\n* 概要：日常情况下我们经常把应用部署到公开于网络的服务器上，而应用通过IP或域名访问，但于IP（端口）的数量限制，我们不得不剑走偏锋使用共享IP的方式。于是虚拟主机技术横空出世，可以从一台网络服务器上分配出磁盘空间供用户放置站点、应用组件给不同的虚拟主机，提供必要的站点功能、数据存放和传输功能，因此一个IP（套接字）可以直接运行多个多个网络应用。类似于新浪云、西部数码等虚拟主机提供商如雨后春笋般拔地而起。\n\n### <a name=\"cuzpga\"></a>设计目标\n\n* 一个可用的虚拟主机管理系统，可以添加/删除/修改/查看多个虚拟主机（只需支持静态文件服务器），同时生成一个账户（账号名+密码）对该主机进行管理。\n* 每个虚拟主机对应一个域名和项目文件路径\n* 每个虚拟主机所运行的项目文件路径（空间）由系统自动生成，选用ftp/svn/git其中一种代码部署方式控制\n\n### <a name=\"4vtcxf\"></a>举个栗子\n\n以下介绍的服务器为HCI内部服务器，运行着HCI的官方网站、竞考网微信公众号后台、weinre调试服务器等应用，所有应用使用不同的域名和同一个套接字（IP+端口）。下面我们来简单分析nginx的配置文件。\n\nnginx.conf局部\n\n```\n# nginx.conf局部\n# 添加虚拟主机配置文件目录\n\nhttp {\n\n        ##\n        # Basic Settings\n        ##\n\n        sendfile on;\n        tcp_nopush on;\n        types_hash_max_size 2048;\n        server_names_hash_bucket_size 64;\n        # server_tokens off;\n\n        # server_names_hash_bucket_size 64;\n        # server_name_in_redirect off;\n\n        include /etc/nginx/mime.types;\n        default_type application/octet-stream;\n\n        ##\n        # Logging Settings\n        ##\n\n        access_log /var/log/nginx/access.log;\n        error_log /var/log/nginx/error.log;\n\n        ##\n        # Gzip Settings\n        ##\n\n        gzip on;\n        gzip_disable \"msie6\";\n\n        # gzip_vary on;\n        # gzip_proxied any;\n        # gzip_comp_level 6;\n        # gzip_buffers 16 8k;\n        # gzip_http_version 1.1;\n\n        ##\n        # nginx-naxsi config\n        ##\n        # Uncomment it if you installed nginx-naxsi\n        ##\n\n        #include /etc/nginx/naxsi_core.rules;\n\n        ##\n        # nginx-passenger config\n        ##\n        # Uncomment it if you installed nginx-passenger\n        ##\n\n        #passenger_root /usr;\n        #passenger_ruby /usr/bin/ruby;\n\n        ##\n        # Virtual Host Configs\n        ##\n\n        include /etc/nginx/conf.d/*.conf;\n        include /etc/nginx/sites-enabled/*;\n        #===================================#\n        include /etc/nginx/vhosts/*;\t# 添加虚拟主机配置文件目录\n        #===================================#\n}\n```\n\n官网配置文件\n\n```\n# 官网配置（静态文件服务器+PHP）\n# /etc/nginx/sites-enabled/default\n\n#===============================\n#\n#       HCI Server\n#\n#================================\nupstream nodejs__upstream {\n        server 127.0.0.1:3000;\n        keepalive 64;\n}\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server ipv6only=on;\n        server_name localhost scauhci.org www.scauhci.org;\n\n        root /var/www/HCIWEB-SCAU/home;\n        index index.php index.html index.htm;\n\n        location / {\n                try_files $uri $uri/ /index.php$is_args$args;\n                client_max_body_size    10m;\n                # proxy_pass http://localhost:3000;\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                # Uncomment to enable naxsi on this location\n                # include /etc/nginx/naxsi.rules\n        }\n\n        location ^~ /jingkao {\n                proxy_pass http://nodejs__upstream;\n        }\n\n        location ~ \\.php$ {\n                fastcgi_pass 127.0.0.1:9000;\n                fastcgi_index index.php;\n                fastcgi_param SCRIPT_FILENAME /etc/nginx/sites-enabled/default$fastcgi_script_name;\n                include /etc/nginx/fastcgi_params;\n        }\n}\n```\n\n虚拟主机目录\n\n```\n# 虚拟主机目录\n106 Dec  6 06:17 jingkao.com.conf\n135 Dec 26 11:32 weinre.conf\n111 Dec 13 16:19 xsx.conf\n175 Jan 15 21:03 ypf.conf\n131 Dec 25 16:34 zsl.conf\n131 Dec 25 16:34 zsl.conf\n```\n\n虚拟主机实例：weinre服务器\n\n```\n# weinre服务器\nserver {\nlisten 80;\nserver_name weinre.scauhci.com;\nlocation / {\n\t\t# 反向代理到服务器B的8080端口\n        proxy_pass http://192.168.100.4:8080;\n}\n}\n```\n\n虚拟主机实例：用于本次作业的测试服务器\n\n```\n# 测试服务器\nserver {\nlisten 80;\nserver_name test1.scauhci.com;\nroot /var/www/test;\nindex index.html;\n}\n```\n\n应用列表(就不一一例举全部应用了)：\n\n* [HCI官网](http://www.scauhci.org)\n\n运行在`http://www.scauhci.com/`和`http://121.201.58.180:80`上，项目文件路径为/var/www/HCIWEB-SCAU/home，假设此文件夹只能由FTP账户（账号名: hci，密码：hci\\_pass）使用ftp对`ftp://www.scauhci.com/hci_home/`进行读写。\n\n* [用于本次作业的测试服务器](http://test1.scauhci.com)\n\n运行在`http://weinre.scauhci.com/`和`http://121.201.58.180:80`上，项目文件路径为/var/www/test，假设此文件夹只能由FTP账户（账号名: hci1，密码：hci1\\_pass）使用ftp对`ftp://www.scauhci.com/test/`进行读写。\n\n### <a name=\"nmq5wr\"></a>设计思路和流程\n\n1. 熟悉Linux环境和Nginx的配置(需部分成员了解)\n2. 设计WEB管理系统，需简单的数据库保存虚拟主机的信息（域名、文件路径等）以及管理员信息（只设计一名管理员）\n3. 模拟管理虚拟主机，同时对vhosts文件进行文本分析，了解规则后可以进行虚拟主机的实际管理\n4. 如有余力可继续实现服务器性能参数的可视化（CPU占用率/内存使用情况/硬盘容量等）\n    \n\n\n\n![image.png | left | 677x312](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282751584-bab5ba04-1af0-484d-bd72-f0d54ae130d7.png \"\")\n\n\n### <a name=\"iccxea\"></a>写几个可能遇到的问题\n\n1. 文件权限的问题：每个应用对应的路径（文件夹）是相对独立的，且只能由对应的用户进行读写\n2. 考虑到DNS服务器的复杂性问题，本次作业无须自己搭建DNS服务器，统一分配10个二级域名用于实验\n3. nginx的平滑重载:`kill -HUP cat '/usr/local/nginx/logs/nginx.pid'`或者`nginx -s reload`\n4. ftp/svn/git 服务器的配置不再赘述，各位还请发挥自我学习能力搜集资料。\n\n### <a name=\"l7mrdw\"></a>技能列表\n\n* [Linux入门知识](https://www.shiyanlou.com/courses/1)\n* ssh/ftp(或者svn/git)/nginx等服务器搭建和配置\n* nginx进阶配置\n* 后端：简单的 数据库处理、文件处理、业务逻辑设计\n* 前端：一个管理后台的页面/如有余力则设计可视化的性能监控图形界面\n* 协作工具：git[(coding)](https://coding.net/git#)/[teambition](http://teambition.com/)\n* 规范化的开发流程：需求文档->原型设计->（设计图）->开发->测试->上线\n\n### <a name=\"nkddns\"></a>成果：\n\n* 可展示和使用的虚拟主机管理系统\n* 完整的源代码和文档\n\n### <a name=\"k5k5hn\"></a>后话\n\n本作业难度适中，但涉及的分支非常丰富，适于团队合作，期望各位能涉及多方面的技术，另外需要对项目有大局的思考方式。建议3-5人一组，可挑选一名13级的师兄/师姐作为指导。有任何问题可直接在`HCI@上有老下有小群`讨论。也可以在本文后面的评论框直接评论。\n\n（懒懒的很久不写博客，各路大侠见谅）\n",
    "body_html": "<p>date: 2015-12-31</p><p>tags: [linux, hci, nginx] </p><hr /><p>欢迎来访HCI第一次趣玩作业，本次作业主要是完成简易的ningx虚拟主机管理系统。所涉及的知识涵盖linux的基本管理命令、nginx/ftp服务器配置、简单的前端页面处理和后台逻辑。</p><p><br /></p><h3 id=\"iftvmh\"><a href=\"#iftvmh\"></a>Nginx知多少</h3><p><br /></p><p>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、新浪、网易、腾讯等。【摘抄自百度百科】</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><ul><li><p>官方网站：<a href=\"http://nginx.org\" target=\"_blank\">http://nginx.org</a></p></li></ul><ul><li><p>淘宝运维的nginx-book(<em>想深入了解的同学看这里</em>): <a href=\"https://github.com/taobao/nginx-book\" target=\"_blank\">https://github.com/taobao/nginx-book</a></p></li></ul><p><br /></p><h3 id=\"yhetnf\"><a href=\"#yhetnf\"></a>前言</h3><p><br /></p><ul><li><p>体验传送门(新浪云)：<a href=\"http://sinaapp.com/\" target=\"_blank\">http://sinaapp.com/</a></p></li></ul><ul><li><p>概要：日常情况下我们经常把应用部署到公开于网络的服务器上，而应用通过IP或域名访问，但于IP（端口）的数量限制，我们不得不剑走偏锋使用共享IP的方式。于是虚拟主机技术横空出世，可以从一台网络服务器上分配出磁盘空间供用户放置站点、应用组件给不同的虚拟主机，提供必要的站点功能、数据存放和传输功能，因此一个IP（套接字）可以直接运行多个多个网络应用。类似于新浪云、西部数码等虚拟主机提供商如雨后春笋般拔地而起。</p></li></ul><p><br /></p><h3 id=\"cuzpga\"><a href=\"#cuzpga\"></a>设计目标</h3><p><br /></p><ul><li><p>一个可用的虚拟主机管理系统，可以添加/删除/修改/查看多个虚拟主机（只需支持静态文件服务器），同时生成一个账户（账号名+密码）对该主机进行管理。</p></li></ul><ul><li><p>每个虚拟主机对应一个域名和项目文件路径</p></li></ul><ul><li><p>每个虚拟主机所运行的项目文件路径（空间）由系统自动生成，选用ftp/svn/git其中一种代码部署方式控制</p></li></ul><p><br /></p><h3 id=\"4vtcxf\"><a href=\"#4vtcxf\"></a>举个栗子</h3><p><br /></p><p>以下介绍的服务器为HCI内部服务器，运行着HCI的官方网站、竞考网微信公众号后台、weinre调试服务器等应用，所有应用使用不同的域名和同一个套接字（IP+端口）。下面我们来简单分析nginx的配置文件。</p><p><br /></p><p>nginx.conf局部</p><p><br /></p><pre><code># nginx.conf局部\n# 添加虚拟主机配置文件目录\n\nhttp {\n\n        ##\n        # Basic Settings\n        ##\n\n        sendfile on;\n        tcp_nopush on;\n        types_hash_max_size 2048;\n        server_names_hash_bucket_size 64;\n        # server_tokens off;\n\n        # server_names_hash_bucket_size 64;\n        # server_name_in_redirect off;\n\n        include /etc/nginx/mime.types;\n        default_type application/octet-stream;\n\n        ##\n        # Logging Settings\n        ##\n\n        access_log /var/log/nginx/access.log;\n        error_log /var/log/nginx/error.log;\n\n        ##\n        # Gzip Settings\n        ##\n\n        gzip on;\n        gzip_disable &quot;msie6&quot;;\n\n        # gzip_vary on;\n        # gzip_proxied any;\n        # gzip_comp_level 6;\n        # gzip_buffers 16 8k;\n        # gzip_http_version 1.1;\n\n        ##\n        # nginx-naxsi config\n        ##\n        # Uncomment it if you installed nginx-naxsi\n        ##\n\n        #include /etc/nginx/naxsi_core.rules;\n\n        ##\n        # nginx-passenger config\n        ##\n        # Uncomment it if you installed nginx-passenger\n        ##\n\n        #passenger_root /usr;\n        #passenger_ruby /usr/bin/ruby;\n\n        ##\n        # Virtual Host Configs\n        ##\n\n        include /etc/nginx/conf.d/*.conf;\n        include /etc/nginx/sites-enabled/*;\n        #===================================#\n        include /etc/nginx/vhosts/*;\t# 添加虚拟主机配置文件目录\n        #===================================#\n}</code></pre><p><br /></p><p>官网配置文件</p><p><br /></p><pre><code># 官网配置（静态文件服务器+PHP）\n# /etc/nginx/sites-enabled/default\n\n#===============================\n#\n#       HCI Server\n#\n#================================\nupstream nodejs__upstream {\n        server 127.0.0.1:3000;\n        keepalive 64;\n}\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server ipv6only=on;\n        server_name localhost scauhci.org www.scauhci.org;\n\n        root /var/www/HCIWEB-SCAU/home;\n        index index.php index.html index.htm;\n\n        location / {\n                try_files $uri $uri/ /index.php$is_args$args;\n                client_max_body_size    10m;\n                # proxy_pass http://localhost:3000;\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                # Uncomment to enable naxsi on this location\n                # include /etc/nginx/naxsi.rules\n        }\n\n        location ^~ /jingkao {\n                proxy_pass http://nodejs__upstream;\n        }\n\n        location ~ \\.php$ {\n                fastcgi_pass 127.0.0.1:9000;\n                fastcgi_index index.php;\n                fastcgi_param SCRIPT_FILENAME /etc/nginx/sites-enabled/default$fastcgi_script_name;\n                include /etc/nginx/fastcgi_params;\n        }\n}</code></pre><p><br /></p><p>虚拟主机目录</p><p><br /></p><pre><code># 虚拟主机目录\n106 Dec  6 06:17 jingkao.com.conf\n135 Dec 26 11:32 weinre.conf\n111 Dec 13 16:19 xsx.conf\n175 Jan 15 21:03 ypf.conf\n131 Dec 25 16:34 zsl.conf\n131 Dec 25 16:34 zsl.conf</code></pre><p><br /></p><p>虚拟主机实例：weinre服务器</p><p><br /></p><pre><code># weinre服务器\nserver {\nlisten 80;\nserver_name weinre.scauhci.com;\nlocation / {\n\t\t# 反向代理到服务器B的8080端口\n        proxy_pass http://192.168.100.4:8080;\n}\n}</code></pre><p><br /></p><p>虚拟主机实例：用于本次作业的测试服务器</p><p><br /></p><pre><code># 测试服务器\nserver {\nlisten 80;\nserver_name test1.scauhci.com;\nroot /var/www/test;\nindex index.html;\n}</code></pre><p><br /></p><p>应用列表(就不一一例举全部应用了)：</p><p><br /></p><ul><li><p><a href=\"http://www.scauhci.org\" target=\"_blank\">HCI官网</a></p></li></ul><p><br /></p><p>运行在<code>http://www.scauhci.com/</code>和<code>http://121.201.58.180:80</code>上，项目文件路径为/var/www/HCIWEB-SCAU/home，假设此文件夹只能由FTP账户（账号名: hci，密码：hci_pass）使用ftp对<code>ftp://www.scauhci.com/hci_home/</code>进行读写。</p><p><br /></p><ul><li><p><a href=\"http://test1.scauhci.com\" target=\"_blank\">用于本次作业的测试服务器</a></p></li></ul><p><br /></p><p>运行在<code>http://weinre.scauhci.com/</code>和<code>http://121.201.58.180:80</code>上，项目文件路径为/var/www/test，假设此文件夹只能由FTP账户（账号名: hci1，密码：hci1_pass）使用ftp对<code>ftp://www.scauhci.com/test/</code>进行读写。</p><p><br /></p><h3 id=\"nmq5wr\"><a href=\"#nmq5wr\"></a>设计思路和流程</h3><p><br /></p><ol start=\"1\"><li><p>熟悉Linux环境和Nginx的配置(需部分成员了解)</p></li></ol><ol start=\"2\"><li><p>设计WEB管理系统，需简单的数据库保存虚拟主机的信息（域名、文件路径等）以及管理员信息（只设计一名管理员）</p></li></ol><ol start=\"3\"><li><p>模拟管理虚拟主机，同时对vhosts文件进行文本分析，了解规则后可以进行虚拟主机的实际管理</p></li></ol><ol start=\"4\"><li><p>如有余力可继续实现服务器性能参数的可视化（CPU占用率/内存使用情况/硬盘容量等）<br /></p></li></ol><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282751584-bab5ba04-1af0-484d-bd72-f0d54ae130d7.png#width=677\" style=\"max-width: 600px; width: 677px;\" /></p><p><br /></p><h3 id=\"iccxea\"><a href=\"#iccxea\"></a>写几个可能遇到的问题</h3><p><br /></p><ol start=\"1\"><li><p>文件权限的问题：每个应用对应的路径（文件夹）是相对独立的，且只能由对应的用户进行读写</p></li></ol><ol start=\"2\"><li><p>考虑到DNS服务器的复杂性问题，本次作业无须自己搭建DNS服务器，统一分配10个二级域名用于实验</p></li></ol><ol start=\"3\"><li><p>nginx的平滑重载:<code>kill -HUP cat '/usr/local/nginx/logs/nginx.pid'</code>或者<code>nginx -s reload</code></p></li></ol><ol start=\"4\"><li><p>ftp/svn/git 服务器的配置不再赘述，各位还请发挥自我学习能力搜集资料。</p></li></ol><p><br /></p><h3 id=\"l7mrdw\"><a href=\"#l7mrdw\"></a>技能列表</h3><p><br /></p><ul><li><p><a href=\"https://www.shiyanlou.com/courses/1\" target=\"_blank\">Linux入门知识</a></p></li></ul><ul><li><p>ssh/ftp(或者svn/git)/nginx等服务器搭建和配置</p></li></ul><ul><li><p>nginx进阶配置</p></li></ul><ul><li><p>后端：简单的 数据库处理、文件处理、业务逻辑设计</p></li></ul><ul><li><p>前端：一个管理后台的页面/如有余力则设计可视化的性能监控图形界面</p></li></ul><ul><li><p>协作工具：git<a href=\"https://coding.net/git#\" target=\"_blank\">(coding)</a>/<a href=\"http://teambition.com/\" target=\"_blank\">teambition</a></p></li></ul><ul><li><p>规范化的开发流程：需求文档-&gt;原型设计-&gt;（设计图）-&gt;开发-&gt;测试-&gt;上线</p></li></ul><p><br /></p><h3 id=\"nkddns\"><a href=\"#nkddns\"></a>成果：</h3><p><br /></p><ul><li><p>可展示和使用的虚拟主机管理系统</p></li></ul><ul><li><p>完整的源代码和文档</p></li></ul><p><br /></p><h3 id=\"k5k5hn\"><a href=\"#k5k5hn\"></a>后话</h3><p><br /></p><p>本作业难度适中，但涉及的分支非常丰富，适于团队合作，期望各位能涉及多方面的技术，另外需要对项目有大局的思考方式。建议3-5人一组，可挑选一名13级的师兄/师姐作为指导。有任何问题可直接在<code>HCI@上有老下有小群</code>讨论。也可以在本文后面的评论框直接评论。</p><p><br /></p><p>（懒懒的很久不写博客，各路大侠见谅）</p>",
    "body_lake": "<!doctype lake><p>date: 2015-12-31</p><p>tags: [linux, hci, nginx] </p><card type=\"block\" name=\"hr\"></card><p>欢迎来访HCI第一次趣玩作业，本次作业主要是完成简易的ningx虚拟主机管理系统。所涉及的知识涵盖linux的基本管理命令、nginx/ftp服务器配置、简单的前端页面处理和后台逻辑。</p><p><br /></p><h3 id=\"iftvmh\"><a href=\"#iftvmh\" id=\"nginx知多少\"></a>Nginx知多少</h3><p><br /></p><p>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、新浪、网易、腾讯等。【摘抄自百度百科】</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><ul><li><p>官方网站：<a href=\"http://nginx.org\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://nginx.org</a></p></li></ul><ul><li><p>淘宝运维的nginx-book(<em>想深入了解的同学看这里</em>): <a href=\"https://github.com/taobao/nginx-book\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://github.com/taobao/nginx-book</a></p></li></ul><p><br /></p><h3 id=\"yhetnf\"><a href=\"#yhetnf\" id=\"前言\"></a>前言</h3><p><br /></p><ul><li><p>体验传送门(新浪云)：<a href=\"http://sinaapp.com/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://sinaapp.com/</a></p></li></ul><ul><li><p>概要：日常情况下我们经常把应用部署到公开于网络的服务器上，而应用通过IP或域名访问，但于IP（端口）的数量限制，我们不得不剑走偏锋使用共享IP的方式。于是虚拟主机技术横空出世，可以从一台网络服务器上分配出磁盘空间供用户放置站点、应用组件给不同的虚拟主机，提供必要的站点功能、数据存放和传输功能，因此一个IP（套接字）可以直接运行多个多个网络应用。类似于新浪云、西部数码等虚拟主机提供商如雨后春笋般拔地而起。</p></li></ul><p><br /></p><h3 id=\"cuzpga\"><a href=\"#cuzpga\" id=\"设计目标\"></a>设计目标</h3><p><br /></p><ul><li><p>一个可用的虚拟主机管理系统，可以添加/删除/修改/查看多个虚拟主机（只需支持静态文件服务器），同时生成一个账户（账号名+密码）对该主机进行管理。</p></li></ul><ul><li><p>每个虚拟主机对应一个域名和项目文件路径</p></li></ul><ul><li><p>每个虚拟主机所运行的项目文件路径（空间）由系统自动生成，选用ftp/svn/git其中一种代码部署方式控制</p></li></ul><p><br /></p><h3 id=\"4vtcxf\"><a href=\"#4vtcxf\" id=\"举个栗子\"></a>举个栗子</h3><p><br /></p><p>以下介绍的服务器为HCI内部服务器，运行着HCI的官方网站、竞考网微信公众号后台、weinre调试服务器等应用，所有应用使用不同的域名和同一个套接字（IP+端口）。下面我们来简单分析nginx的配置文件。</p><p><br /></p><p>nginx.conf局部</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22d76b07d1%22%2C%22code%22%3A%22%23%20nginx.conf%E5%B1%80%E9%83%A8%5Cn%23%20%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%5Cn%5Cnhttp%20%7B%5Cn%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%20%20%20%20%20%20%20%20%23%20Basic%20Settings%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%5Cn%20%20%20%20%20%20%20%20sendfile%20on%3B%5Cn%20%20%20%20%20%20%20%20tcp_nopush%20on%3B%5Cn%20%20%20%20%20%20%20%20types_hash_max_size%202048%3B%5Cn%20%20%20%20%20%20%20%20server_names_hash_bucket_size%2064%3B%5Cn%20%20%20%20%20%20%20%20%23%20server_tokens%20off%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%23%20server_names_hash_bucket_size%2064%3B%5Cn%20%20%20%20%20%20%20%20%23%20server_name_in_redirect%20off%3B%5Cn%5Cn%20%20%20%20%20%20%20%20include%20%2Fetc%2Fnginx%2Fmime.types%3B%5Cn%20%20%20%20%20%20%20%20default_type%20application%2Foctet-stream%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%20%20%20%20%20%20%20%20%23%20Logging%20Settings%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%5Cn%20%20%20%20%20%20%20%20access_log%20%2Fvar%2Flog%2Fnginx%2Faccess.log%3B%5Cn%20%20%20%20%20%20%20%20error_log%20%2Fvar%2Flog%2Fnginx%2Ferror.log%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%20%20%20%20%20%20%20%20%23%20Gzip%20Settings%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%5Cn%20%20%20%20%20%20%20%20gzip%20on%3B%5Cn%20%20%20%20%20%20%20%20gzip_disable%20%5C%22msie6%5C%22%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%23%20gzip_vary%20on%3B%5Cn%20%20%20%20%20%20%20%20%23%20gzip_proxied%20any%3B%5Cn%20%20%20%20%20%20%20%20%23%20gzip_comp_level%206%3B%5Cn%20%20%20%20%20%20%20%20%23%20gzip_buffers%2016%208k%3B%5Cn%20%20%20%20%20%20%20%20%23%20gzip_http_version%201.1%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%20%20%20%20%20%20%20%20%23%20nginx-naxsi%20config%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%20%20%20%20%20%20%20%20%23%20Uncomment%20it%20if%20you%20installed%20nginx-naxsi%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%5Cn%20%20%20%20%20%20%20%20%23include%20%2Fetc%2Fnginx%2Fnaxsi_core.rules%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%20%20%20%20%20%20%20%20%23%20nginx-passenger%20config%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%20%20%20%20%20%20%20%20%23%20Uncomment%20it%20if%20you%20installed%20nginx-passenger%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%5Cn%20%20%20%20%20%20%20%20%23passenger_root%20%2Fusr%3B%5Cn%20%20%20%20%20%20%20%20%23passenger_ruby%20%2Fusr%2Fbin%2Fruby%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%20%20%20%20%20%20%20%20%23%20Virtual%20Host%20Configs%5Cn%20%20%20%20%20%20%20%20%23%23%5Cn%5Cn%20%20%20%20%20%20%20%20include%20%2Fetc%2Fnginx%2Fconf.d%2F*.conf%3B%5Cn%20%20%20%20%20%20%20%20include%20%2Fetc%2Fnginx%2Fsites-enabled%2F*%3B%5Cn%20%20%20%20%20%20%20%20%23%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%23%5Cn%20%20%20%20%20%20%20%20include%20%2Fetc%2Fnginx%2Fvhosts%2F*%3B%5Ct%23%20%E6%B7%BB%E5%8A%A0%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%5Cn%20%20%20%20%20%20%20%20%23%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%23%5Cn%7D%22%7D\"></card><p><br /></p><p>官网配置文件</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2270d2fdf7%22%2C%22code%22%3A%22%23%20%E5%AE%98%E7%BD%91%E9%85%8D%E7%BD%AE%EF%BC%88%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%2BPHP%EF%BC%89%5Cn%23%20%2Fetc%2Fnginx%2Fsites-enabled%2Fdefault%5Cn%5Cn%23%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%5Cn%23%5Cn%23%20%20%20%20%20%20%20HCI%20Server%5Cn%23%5Cn%23%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%5Cnupstream%20nodejs__upstream%20%7B%5Cn%20%20%20%20%20%20%20%20server%20127.0.0.1%3A3000%3B%5Cn%20%20%20%20%20%20%20%20keepalive%2064%3B%5Cn%7D%5Cnserver%20%7B%5Cn%20%20%20%20%20%20%20%20listen%2080%20default_server%3B%5Cn%20%20%20%20%20%20%20%20listen%20%5B%3A%3A%5D%3A80%20default_server%20ipv6only%3Don%3B%5Cn%20%20%20%20%20%20%20%20server_name%20localhost%20scauhci.org%20www.scauhci.org%3B%5Cn%5Cn%20%20%20%20%20%20%20%20root%20%2Fvar%2Fwww%2FHCIWEB-SCAU%2Fhome%3B%5Cn%20%20%20%20%20%20%20%20index%20index.php%20index.html%20index.htm%3B%5Cn%5Cn%20%20%20%20%20%20%20%20location%20%2F%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try_files%20%24uri%20%24uri%2F%20%2Findex.php%24is_args%24args%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20client_max_body_size%20%20%20%2010m%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20proxy_pass%20http%3A%2F%2Flocalhost%3A3000%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20First%20attempt%20to%20serve%20request%20as%20file%2C%20then%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20as%20directory%2C%20then%20fall%20back%20to%20displaying%20a%20404.%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Uncomment%20to%20enable%20naxsi%20on%20this%20location%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20include%20%2Fetc%2Fnginx%2Fnaxsi.rules%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20location%20%5E~%20%2Fjingkao%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proxy_pass%20http%3A%2F%2Fnodejs__upstream%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20location%20~%20%5C%5C.php%24%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20fastcgi_pass%20127.0.0.1%3A9000%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20fastcgi_index%20index.php%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20fastcgi_param%20SCRIPT_FILENAME%20%2Fetc%2Fnginx%2Fsites-enabled%2Fdefault%24fastcgi_script_name%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20include%20%2Fetc%2Fnginx%2Ffastcgi_params%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>虚拟主机目录</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%220bc76412%22%2C%22code%22%3A%22%23%20%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95%5Cn106%20Dec%20%206%2006%3A17%20jingkao.com.conf%5Cn135%20Dec%2026%2011%3A32%20weinre.conf%5Cn111%20Dec%2013%2016%3A19%20xsx.conf%5Cn175%20Jan%2015%2021%3A03%20ypf.conf%5Cn131%20Dec%2025%2016%3A34%20zsl.conf%5Cn131%20Dec%2025%2016%3A34%20zsl.conf%22%7D\"></card><p><br /></p><p>虚拟主机实例：weinre服务器</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%220f6300fa%22%2C%22code%22%3A%22%23%20weinre%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cnserver%20%7B%5Cnlisten%2080%3B%5Cnserver_name%20weinre.scauhci.com%3B%5Cnlocation%20%2F%20%7B%5Cn%5Ct%5Ct%23%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8B%E7%9A%848080%E7%AB%AF%E5%8F%A3%5Cn%20%20%20%20%20%20%20%20proxy_pass%20http%3A%2F%2F192.168.100.4%3A8080%3B%5Cn%7D%5Cn%7D%22%7D\"></card><p><br /></p><p>虚拟主机实例：用于本次作业的测试服务器</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2262479ced%22%2C%22code%22%3A%22%23%20%E6%B5%8B%E8%AF%95%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cnserver%20%7B%5Cnlisten%2080%3B%5Cnserver_name%20test1.scauhci.com%3B%5Cnroot%20%2Fvar%2Fwww%2Ftest%3B%5Cnindex%20index.html%3B%5Cn%7D%22%7D\"></card><p><br /></p><p>应用列表(就不一一例举全部应用了)：</p><p><br /></p><ul><li><p><a href=\"http://www.scauhci.org\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">HCI官网</a></p></li></ul><p><br /></p><p>运行在<code>http://www.scauhci.com/</code>和<code>http://121.201.58.180:80</code>上，项目文件路径为/var/www/HCIWEB-SCAU/home，假设此文件夹只能由FTP账户（账号名: hci，密码：hci_pass）使用ftp对<code>ftp://www.scauhci.com/hci_home/</code>进行读写。</p><p><br /></p><ul><li><p><a href=\"http://test1.scauhci.com\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">用于本次作业的测试服务器</a></p></li></ul><p><br /></p><p>运行在<code>http://weinre.scauhci.com/</code>和<code>http://121.201.58.180:80</code>上，项目文件路径为/var/www/test，假设此文件夹只能由FTP账户（账号名: hci1，密码：hci1_pass）使用ftp对<code>ftp://www.scauhci.com/test/</code>进行读写。</p><p><br /></p><h3 id=\"nmq5wr\"><a href=\"#nmq5wr\" id=\"设计思路和流程\"></a>设计思路和流程</h3><p><br /></p><ol start=\"1\"><li><p>熟悉Linux环境和Nginx的配置(需部分成员了解)</p></li></ol><ol start=\"2\"><li><p>设计WEB管理系统，需简单的数据库保存虚拟主机的信息（域名、文件路径等）以及管理员信息（只设计一名管理员）</p></li></ol><ol start=\"3\"><li><p>模拟管理虚拟主机，同时对vhosts文件进行文本分析，了解规则后可以进行虚拟主机的实际管理</p></li></ol><ol start=\"4\"><li><p>如有余力可继续实现服务器性能参数的可视化（CPU占用率/内存使用情况/硬盘容量等）<br /></p></li></ol><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282751584-bab5ba04-1af0-484d-bd72-f0d54ae130d7.png%22%2C%22width%22%3A677%7D\"></card></p><p><br /></p><h3 id=\"iccxea\"><a href=\"#iccxea\" id=\"写几个可能遇到的问题\"></a>写几个可能遇到的问题</h3><p><br /></p><ol start=\"1\"><li><p>文件权限的问题：每个应用对应的路径（文件夹）是相对独立的，且只能由对应的用户进行读写</p></li></ol><ol start=\"2\"><li><p>考虑到DNS服务器的复杂性问题，本次作业无须自己搭建DNS服务器，统一分配10个二级域名用于实验</p></li></ol><ol start=\"3\"><li><p>nginx的平滑重载:<code>kill -HUP cat '/usr/local/nginx/logs/nginx.pid'</code>或者<code>nginx -s reload</code></p></li></ol><ol start=\"4\"><li><p>ftp/svn/git 服务器的配置不再赘述，各位还请发挥自我学习能力搜集资料。</p></li></ol><p><br /></p><h3 id=\"l7mrdw\"><a href=\"#l7mrdw\" id=\"技能列表\"></a>技能列表</h3><p><br /></p><ul><li><p><a href=\"https://www.shiyanlou.com/courses/1\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Linux入门知识</a></p></li></ul><ul><li><p>ssh/ftp(或者svn/git)/nginx等服务器搭建和配置</p></li></ul><ul><li><p>nginx进阶配置</p></li></ul><ul><li><p>后端：简单的 数据库处理、文件处理、业务逻辑设计</p></li></ul><ul><li><p>前端：一个管理后台的页面/如有余力则设计可视化的性能监控图形界面</p></li></ul><ul><li><p>协作工具：git<a href=\"https://coding.net/git#\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">(coding)</a>/<a href=\"http://teambition.com/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">teambition</a></p></li></ul><ul><li><p>规范化的开发流程：需求文档-&gt;原型设计-&gt;（设计图）-&gt;开发-&gt;测试-&gt;上线</p></li></ul><p><br /></p><h3 id=\"nkddns\"><a href=\"#nkddns\" id=\"成果：\"></a>成果：</h3><p><br /></p><ul><li><p>可展示和使用的虚拟主机管理系统</p></li></ul><ul><li><p>完整的源代码和文档</p></li></ul><p><br /></p><h3 id=\"k5k5hn\"><a href=\"#k5k5hn\" id=\"后话\"></a>后话</h3><p><br /></p><p>本作业难度适中，但涉及的分支非常丰富，适于团队合作，期望各位能涉及多方面的技术，另外需要对项目有大局的思考方式。建议3-5人一组，可挑选一名13级的师兄/师姐作为指导。有任何问题可直接在<code>HCI@上有老下有小群</code>讨论。也可以在本文后面的评论框直接评论。</p><p><br /></p><p>（懒懒的很久不写博客，各路大侠见谅）</p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"date: 2015-12-31\"],[\"div\",{\"data-type\":\"p\"},\"tags: [linux, hci, nginx] \"],[\"hr\",{\"id\":\"698sau\"}],[\"div\",{\"data-type\":\"p\"},\"欢迎来访HCI第一次趣玩作业，本次作业主要是完成简易的ningx虚拟主机管理系统。所涉及的知识涵盖linux的基本管理命令、nginx/ftp服务器配置、简单的前端页面处理和后台逻辑。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"iftvmh\"},\"Nginx知多少\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、新浪、网易、腾讯等。【摘抄自百度百科】\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"官方网站：\",[\"a\",{\"title\":\"\",\"href\":\"http://nginx.org\"},\"http://nginx.org\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"淘宝运维的nginx-book(\",[\"em\",{},\"想深入了解的同学看这里\"],\"): \"],[\"a\",{\"title\":\"\",\"href\":\"https://github.com/taobao/nginx-book\"},\"https://github.com/taobao/nginx-book\"],\"\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"yhetnf\"},\"前言\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"体验传送门(新浪云)：\",[\"a\",{\"title\":\"\",\"href\":\"http://sinaapp.com/\"},\"http://sinaapp.com/\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"概要：日常情况下我们经常把应用部署到公开于网络的服务器上，而应用通过IP或域名访问，但于IP（端口）的数量限制，我们不得不剑走偏锋使用共享IP的方式。于是虚拟主机技术横空出世，可以从一台网络服务器上分配出磁盘空间供用户放置站点、应用组件给不同的虚拟主机，提供必要的站点功能、数据存放和传输功能，因此一个IP（套接字）可以直接运行多个多个网络应用。类似于新浪云、西部数码等虚拟主机提供商如雨后春笋般拔地而起。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"cuzpga\"},\"设计目标\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"一个可用的虚拟主机管理系统，可以添加/删除/修改/查看多个虚拟主机（只需支持静态文件服务器），同时生成一个账户（账号名+密码）对该主机进行管理。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"每个虚拟主机对应一个域名和项目文件路径\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"每个虚拟主机所运行的项目文件路径（空间）由系统自动生成，选用ftp/svn/git其中一种代码部署方式控制\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"4vtcxf\"},\"举个栗子\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"以下介绍的服务器为HCI内部服务器，运行着HCI的官方网站、竞考网微信公众号后台、weinre调试服务器等应用，所有应用使用不同的域名和同一个套接字（IP+端口）。下面我们来简单分析nginx的配置文件。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"nginx.conf局部\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"# nginx.conf局部\\n\",\"# 添加虚拟主机配置文件目录\\n\",\"\\n\",\"http {\\n\",\"\\n\",\"        ##\\n\",\"        # Basic Settings\\n\",\"        ##\\n\",\"\\n\",\"        sendfile on;\\n\",\"        tcp_nopush on;\\n\",\"        types_hash_max_size 2048;\\n\",\"        server_names_hash_bucket_size 64;\\n\",\"        # server_tokens off;\\n\",\"\\n\",\"        # server_names_hash_bucket_size 64;\\n\",\"        # server_name_in_redirect off;\\n\",\"\\n\",\"        include /etc/nginx/mime.types;\\n\",\"        default_type application/octet-stream;\\n\",\"\\n\",\"        ##\\n\",\"        # Logging Settings\\n\",\"        ##\\n\",\"\\n\",\"        access_log /var/log/nginx/access.log;\\n\",\"        error_log /var/log/nginx/error.log;\\n\",\"\\n\",\"        ##\\n\",\"        # Gzip Settings\\n\",\"        ##\\n\",\"\\n\",\"        gzip on;\\n\",\"        gzip_disable \\\"msie6\\\";\\n\",\"\\n\",\"        # gzip_vary on;\\n\",\"        # gzip_proxied any;\\n\",\"        # gzip_comp_level 6;\\n\",\"        # gzip_buffers 16 8k;\\n\",\"        # gzip_http_version 1.1;\\n\",\"\\n\",\"        ##\\n\",\"        # nginx-naxsi config\\n\",\"        ##\\n\",\"        # Uncomment it if you installed nginx-naxsi\\n\",\"        ##\\n\",\"\\n\",\"        #include /etc/nginx/naxsi_core.rules;\\n\",\"\\n\",\"        ##\\n\",\"        # nginx-passenger config\\n\",\"        ##\\n\",\"        # Uncomment it if you installed nginx-passenger\\n\",\"        ##\\n\",\"\\n\",\"        #passenger_root /usr;\\n\",\"        #passenger_ruby /usr/bin/ruby;\\n\",\"\\n\",\"        ##\\n\",\"        # Virtual Host Configs\\n\",\"        ##\\n\",\"\\n\",\"        include /etc/nginx/conf.d/*.conf;\\n\",\"        include /etc/nginx/sites-enabled/*;\\n\",\"        #===================================#\\n\",\"        include /etc/nginx/vhosts/*;\\t# 添加虚拟主机配置文件目录\\n\",\"        #===================================#\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"官网配置文件\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"# 官网配置（静态文件服务器+PHP）\\n\",\"# /etc/nginx/sites-enabled/default\\n\",\"\\n\",\"#===============================\\n\",\"#\\n\",\"#       HCI Server\\n\",\"#\\n\",\"#================================\\n\",\"upstream nodejs__upstream {\\n\",\"        server 127.0.0.1:3000;\\n\",\"        keepalive 64;\\n\",\"}\\n\",\"server {\\n\",\"        listen 80 default_server;\\n\",\"        listen [::]:80 default_server ipv6only=on;\\n\",\"        server_name localhost scauhci.org www.scauhci.org;\\n\",\"\\n\",\"        root /var/www/HCIWEB-SCAU/home;\\n\",\"        index index.php index.html index.htm;\\n\",\"\\n\",\"        location / {\\n\",\"                try_files $uri $uri/ /index.php$is_args$args;\\n\",\"                client_max_body_size    10m;\\n\",\"                # proxy_pass http://localhost:3000;\\n\",\"                # First attempt to serve request as file, then\\n\",\"                # as directory, then fall back to displaying a 404.\\n\",\"                # Uncomment to enable naxsi on this location\\n\",\"                # include /etc/nginx/naxsi.rules\\n\",\"        }\\n\",\"\\n\",\"        location ^~ /jingkao {\\n\",\"                proxy_pass http://nodejs__upstream;\\n\",\"        }\\n\",\"\\n\",\"        location ~ \\\\.php$ {\\n\",\"                fastcgi_pass 127.0.0.1:9000;\\n\",\"                fastcgi_index index.php;\\n\",\"                fastcgi_param SCRIPT_FILENAME /etc/nginx/sites-enabled/default$fastcgi_script_name;\\n\",\"                include /etc/nginx/fastcgi_params;\\n\",\"        }\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"虚拟主机目录\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"# 虚拟主机目录\\n\",\"106 Dec  6 06:17 jingkao.com.conf\\n\",\"135 Dec 26 11:32 weinre.conf\\n\",\"111 Dec 13 16:19 xsx.conf\\n\",\"175 Jan 15 21:03 ypf.conf\\n\",\"131 Dec 25 16:34 zsl.conf\\n\",\"131 Dec 25 16:34 zsl.conf\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"虚拟主机实例：weinre服务器\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"# weinre服务器\\n\",\"server {\\n\",\"listen 80;\\n\",\"server_name weinre.scauhci.com;\\n\",\"location / {\\n\",\"\\t\\t# 反向代理到服务器B的8080端口\\n\",\"        proxy_pass http://192.168.100.4:8080;\\n\",\"}\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"虚拟主机实例：用于本次作业的测试服务器\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"# 测试服务器\\n\",\"server {\\n\",\"listen 80;\\n\",\"server_name test1.scauhci.com;\\n\",\"root /var/www/test;\\n\",\"index index.html;\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"应用列表(就不一一例举全部应用了)：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"\",[\"a\",{\"title\":\"\",\"href\":\"http://www.scauhci.org\"},\"HCI官网\"],\"\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"运行在\",[\"code\",{},\"http://www.scauhci.com/\"],\"和\",[\"code\",{},\"http://121.201.58.180:80\"],\"上，项目文件路径为/var/www/HCIWEB-SCAU/home，假设此文件夹只能由FTP账户（账号名: hci，密码：hci_pass）使用ftp对\",[\"code\",{},\"ftp://www.scauhci.com/hci_home/\"],\"进行读写。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"\",[\"a\",{\"title\":\"\",\"href\":\"http://test1.scauhci.com\"},\"用于本次作业的测试服务器\"],\"\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"运行在\",[\"code\",{},\"http://weinre.scauhci.com/\"],\"和\",[\"code\",{},\"http://121.201.58.180:80\"],\"上，项目文件路径为/var/www/test，假设此文件夹只能由FTP账户（账号名: hci1，密码：hci1_pass）使用ftp对\",[\"code\",{},\"ftp://www.scauhci.com/test/\"],\"进行读写。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"nmq5wr\"},\"设计思路和流程\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"熟悉Linux环境和Nginx的配置(需部分成员了解)\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"设计WEB管理系统，需简单的数据库保存虚拟主机的信息（域名、文件路径等）以及管理员信息（只设计一名管理员）\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"模拟管理虚拟主机，同时对vhosts文件进行文本分析，了解规则后可以进行虚拟主机的实际管理\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"如有余力可继续实现服务器性能参数的可视化（CPU占用率/内存使用情况/硬盘容量等）\\n\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"4364ml\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282751584-bab5ba04-1af0-484d-bd72-f0d54ae130d7.png\",\"width\":677,\"height\":312,\"size\":35889,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"iccxea\"},\"写几个可能遇到的问题\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"文件权限的问题：每个应用对应的路径（文件夹）是相对独立的，且只能由对应的用户进行读写\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"考虑到DNS服务器的复杂性问题，本次作业无须自己搭建DNS服务器，统一分配10个二级域名用于实验\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"nginx的平滑重载:\",[\"code\",{},\"kill -HUP cat '/usr/local/nginx/logs/nginx.pid'\"],\"或者\",[\"code\",{},\"nginx -s reload\"]]]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"ftp/svn/git 服务器的配置不再赘述，各位还请发挥自我学习能力搜集资料。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"l7mrdw\"},\"技能列表\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"\",[\"a\",{\"title\":\"\",\"href\":\"https://www.shiyanlou.com/courses/1\"},\"Linux入门知识\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"ssh/ftp(或者svn/git)/nginx等服务器搭建和配置\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"nginx进阶配置\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"后端：简单的 数据库处理、文件处理、业务逻辑设计\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"前端：一个管理后台的页面/如有余力则设计可视化的性能监控图形界面\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"协作工具：git\",[\"a\",{\"title\":\"\",\"href\":\"https://coding.net/git#\"},\"(coding)\"],\"/\",[\"a\",{\"title\":\"\",\"href\":\"http://teambition.com/\"},\"teambition\"],\"\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"规范化的开发流程：需求文档->原型设计->（设计图）->开发->测试->上线\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"nkddns\"},\"成果：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"可展示和使用的虚拟主机管理系统\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"完整的源代码和文档\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"k5k5hn\"},\"后话\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"本作业难度适中，但涉及的分支非常丰富，适于团队合作，期望各位能涉及多方面的技术，另外需要对项目有大局的思考方式。建议3-5人一组，可挑选一名13级的师兄/师姐作为指导。有任何问题可直接在\",[\"code\",{},\"HCI@上有老下有小群\"],\"讨论。也可以在本文后面的评论框直接评论。\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"（懒懒的很久不写博客，各路大侠见谅）\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:21:01.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:31:48.000Z",
    "updated_at": "2019-05-20T09:37:05.000Z",
    "published_at": "2018-09-15T08:21:01.000Z",
    "first_published_at": null,
    "word_count": 1830,
    "cover": null,
    "description": "date: 2015-12-31tags: [linux, hci, nginx] 欢迎来访HCI第一次趣玩作业，本次作业主要是完成简易的ningx虚拟主机管理系统。所涉及的知识涵盖linux的基本管理命令、nginx/ftp服务器配置、简单的前端页面处理和后台逻辑。Nginx知多少Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709032,
    "slug": "zquy3r",
    "title": "爬虫的简单实现 [HCI趣玩-2016年预热]",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2015-12-31<br />tags: [爬虫, hci]\n\n---\n\n欢迎来访HCI第一次趣玩作业，本次作业主要是完成爬虫的简单设计以及掌握团队协作工具的应用。\n\n<a name=\"zplldu\"></a>\n### 爬虫知多少\n\n概要：网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。\n\n<!-- more -->\n\n<a name=\"e8qska\"></a>\n### 项目概要\n\n本次项目主要目的为简单的网页抓取和数据处理。本次需要抓取的网站为豆瓣读书。进行分类后存储到本地文件或数据库。\n\n<a name=\"0t9vie\"></a>\n### 思路教程\n\n- 体验和发现url规则(如学院OJ系统报名列表[http://acm.scau.edu.cn:8000/uoj/register/displayActivity.html?id=29&page=1\"](http://acm.scau.edu.cn:8000/uoj/register/displayActivity.html?id=29&page=1%22)，这里的page就是页码)\n\n- 获取网页文件\n\n- 分析页面元素，抓取有效数据\n\n\n心有余力的同学可以尝试迭代分析页面元素（链接）抓取整站页面。（需要考虑链接的重复性和同属于一站）\n\n<a name=\"t5ckpu\"></a>\n### 部分教程（思路）\n\n时间有限，对此也不再赘述，参考如下文章:\n\n- Python教程: [https://www.thenewboston.com/forum/topic.php?id=1610](https://www.thenewboston.com/forum/topic.php?id=1610) （参考技术：request和bs4）\n\n- powershell部分代码\n\n\n```\n# 抓取页面\n$web = New-Object System.Net.WebClient\n$web.Encoding = [System.Text.Encoding]::UTF8\n$str = $web.DownloadString(\"http://localhost\")\n$str\n\n# 分析HTML\nfunction Get-HtmlElement ($Id,$Name,$Class,$Tag)\n{\n    if($Id)\n    {\n        return $ie.Document.getElementById($id)\n    }\n    elseif($Name)\n    {\n        return $ie.Document.getElementsByName($Name)\n    }\n    elseif($Class)\n    {\n        $ie.Document.all |　where {$_.className -contains $Class}\n    }\n    elseif($Tag)\n    {\n        $ie.Document.getElementsByTagName($Tag)\n    }\n}\n```\n\n- 其他语言一律欢迎\n\n\n<a name=\"tudgkb\"></a>\n### 成果\n\n- 有效的可视化数据（网页或者其他形式的报表等）\n\n- 源代码和说明文档\n\n\n_提交方式：在git.oschina.net上管理项目，在scauhci的hci-spider处将项目地址提交到issue_\n\n<a name=\"u3e6wl\"></a>\n### 后话\n\n本作业为小组作业或个人作业，建议人数不超过2人，可以选择使用自己最熟悉的语言编写。同样需要邀请一位13级师兄/师姐作为指导。强烈推荐大家学习多样化的语言！有任何疑问，可直接在`HCI@上有老下有小群`讨论。也可以在本文后面的评论框直接评论。\n",
    "body_draft": "date: 2015-12-31\ntags: [爬虫, hci]\n\n---\n\n欢迎来访HCI第一次趣玩作业，本次作业主要是完成爬虫的简单设计以及掌握团队协作工具的应用。\n\n### <a name=\"zplldu\"></a>爬虫知多少\n\n概要：网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。\n\n<!-- more -->\n\n### <a name=\"e8qska\"></a>项目概要\n\n本次项目主要目的为简单的网页抓取和数据处理。本次需要抓取的网站为豆瓣读书。进行分类后存储到本地文件或数据库。\n\n### <a name=\"0t9vie\"></a>思路教程\n\n* 体验和发现url规则(如学院OJ系统报名列表[http://acm.scau.edu.cn:8000/uoj/register/displayActivity.html?id=29&page=1\"](http://acm.scau.edu.cn:8000/uoj/register/displayActivity.html?id=29&page=1%22)，这里的page就是页码)\n* 获取网页文件\n* 分析页面元素，抓取有效数据\n\n心有余力的同学可以尝试迭代分析页面元素（链接）抓取整站页面。（需要考虑链接的重复性和同属于一站）\n\n### <a name=\"t5ckpu\"></a>部分教程（思路）\n\n时间有限，对此也不再赘述，参考如下文章:\n\n* Python教程: [https://www.thenewboston.com/forum/topic.php?id=1610](https://www.thenewboston.com/forum/topic.php?id=1610) （参考技术：request和bs4）\n* powershell部分代码\n\n```\n# 抓取页面\n$web = New-Object System.Net.WebClient\n$web.Encoding = [System.Text.Encoding]::UTF8\n$str = $web.DownloadString(\"http://localhost\")\n$str\n\n# 分析HTML\nfunction Get-HtmlElement ($Id,$Name,$Class,$Tag)\n{\n    if($Id)\n    {\n        return $ie.Document.getElementById($id)\n    }\n    elseif($Name)\n    {\n        return $ie.Document.getElementsByName($Name)\n    }\n    elseif($Class)\n    {\n        $ie.Document.all |　where {$_.className -contains $Class}\n    }\n    elseif($Tag)\n    {\n        $ie.Document.getElementsByTagName($Tag)\n    }\n}\n```\n\n* 其他语言一律欢迎\n\n### <a name=\"tudgkb\"></a>成果\n\n* 有效的可视化数据（网页或者其他形式的报表等）\n* 源代码和说明文档\n\n*提交方式：在git.oschina.net上管理项目，在scauhci的hci-spider处将项目地址提交到issue*\n\n### <a name=\"u3e6wl\"></a>后话\n\n本作业为小组作业或个人作业，建议人数不超过2人，可以选择使用自己最熟悉的语言编写。同样需要邀请一位13级师兄/师姐作为指导。强烈推荐大家学习多样化的语言！有任何疑问，可直接在`HCI@上有老下有小群`讨论。也可以在本文后面的评论框直接评论。\n",
    "body_html": "<p>date: 2015-12-31</p><p>tags: [爬虫, hci]</p><hr /><p>欢迎来访HCI第一次趣玩作业，本次作业主要是完成爬虫的简单设计以及掌握团队协作工具的应用。</p><p><br /></p><h3 id=\"zplldu\"><a href=\"#zplldu\"></a>爬虫知多少</h3><p><br /></p><p>概要：网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"e8qska\"><a href=\"#e8qska\"></a>项目概要</h3><p><br /></p><p>本次项目主要目的为简单的网页抓取和数据处理。本次需要抓取的网站为豆瓣读书。进行分类后存储到本地文件或数据库。</p><p><br /></p><h3 id=\"0t9vie\"><a href=\"#0t9vie\"></a>思路教程</h3><p><br /></p><ul><li><p>体验和发现url规则(如学院OJ系统报名列表<a href=\"http://acm.scau.edu.cn:8000/uoj/register/displayActivity.html?id=29&amp;page=1%22\" target=\"_blank\">http://acm.scau.edu.cn:8000/uoj/register/displayActivity.html?id=29&amp;page=1&quot;</a>，这里的page就是页码)</p></li></ul><ul><li><p>获取网页文件</p></li></ul><ul><li><p>分析页面元素，抓取有效数据</p></li></ul><p><br /></p><p>心有余力的同学可以尝试迭代分析页面元素（链接）抓取整站页面。（需要考虑链接的重复性和同属于一站）</p><p><br /></p><h3 id=\"t5ckpu\"><a href=\"#t5ckpu\"></a>部分教程（思路）</h3><p><br /></p><p>时间有限，对此也不再赘述，参考如下文章:</p><p><br /></p><ul><li><p>Python教程: <a href=\"https://www.thenewboston.com/forum/topic.php?id=1610\" target=\"_blank\">https://www.thenewboston.com/forum/topic.php?id=1610</a> （参考技术：request和bs4）</p></li></ul><ul><li><p>powershell部分代码</p></li></ul><p><br /></p><pre><code># 抓取页面\n$web = New-Object System.Net.WebClient\n$web.Encoding = [System.Text.Encoding]::UTF8\n$str = $web.DownloadString(&quot;http://localhost&quot;)\n$str\n\n# 分析HTML\nfunction Get-HtmlElement ($Id,$Name,$Class,$Tag)\n{\n    if($Id)\n    {\n        return $ie.Document.getElementById($id)\n    }\n    elseif($Name)\n    {\n        return $ie.Document.getElementsByName($Name)\n    }\n    elseif($Class)\n    {\n        $ie.Document.all |　where {$_.className -contains $Class}\n    }\n    elseif($Tag)\n    {\n        $ie.Document.getElementsByTagName($Tag)\n    }\n}</code></pre><p><br /></p><ul><li><p>其他语言一律欢迎</p></li></ul><p><br /></p><h3 id=\"tudgkb\"><a href=\"#tudgkb\"></a>成果</h3><p><br /></p><ul><li><p>有效的可视化数据（网页或者其他形式的报表等）</p></li></ul><ul><li><p>源代码和说明文档</p></li></ul><p><br /></p><p><em>提交方式：在git.oschina.net上管理项目，在scauhci的hci-spider处将项目地址提交到issue</em></p><p><br /></p><h3 id=\"u3e6wl\"><a href=\"#u3e6wl\"></a>后话</h3><p><br /></p><p>本作业为小组作业或个人作业，建议人数不超过2人，可以选择使用自己最熟悉的语言编写。同样需要邀请一位13级师兄/师姐作为指导。强烈推荐大家学习多样化的语言！有任何疑问，可直接在<code>HCI@上有老下有小群</code>讨论。也可以在本文后面的评论框直接评论。</p>",
    "body_lake": "<!doctype lake><p>date: 2015-12-31</p><p>tags: [爬虫, hci]</p><card type=\"block\" name=\"hr\"></card><p>欢迎来访HCI第一次趣玩作业，本次作业主要是完成爬虫的简单设计以及掌握团队协作工具的应用。</p><p><br /></p><h3 id=\"zplldu\"><a href=\"#zplldu\" id=\"爬虫知多少\"></a>爬虫知多少</h3><p><br /></p><p>概要：网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"e8qska\"><a href=\"#e8qska\" id=\"项目概要\"></a>项目概要</h3><p><br /></p><p>本次项目主要目的为简单的网页抓取和数据处理。本次需要抓取的网站为豆瓣读书。进行分类后存储到本地文件或数据库。</p><p><br /></p><h3 id=\"0t9vie\"><a href=\"#0t9vie\" id=\"思路教程\"></a>思路教程</h3><p><br /></p><ul><li><p>体验和发现url规则(如学院OJ系统报名列表<a href=\"http://acm.scau.edu.cn:8000/uoj/register/displayActivity.html?id=29&page=1%22\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://acm.scau.edu.cn:8000/uoj/register/displayActivity.html?id=29&amp;page=1&quot;</a>，这里的page就是页码)</p></li></ul><ul><li><p>获取网页文件</p></li></ul><ul><li><p>分析页面元素，抓取有效数据</p></li></ul><p><br /></p><p>心有余力的同学可以尝试迭代分析页面元素（链接）抓取整站页面。（需要考虑链接的重复性和同属于一站）</p><p><br /></p><h3 id=\"t5ckpu\"><a href=\"#t5ckpu\" id=\"部分教程（思路）\"></a>部分教程（思路）</h3><p><br /></p><p>时间有限，对此也不再赘述，参考如下文章:</p><p><br /></p><ul><li><p>Python教程: <a href=\"https://www.thenewboston.com/forum/topic.php?id=1610\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://www.thenewboston.com/forum/topic.php?id=1610</a> （参考技术：request和bs4）</p></li></ul><ul><li><p>powershell部分代码</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%221c73e485%22%2C%22code%22%3A%22%23%20%E6%8A%93%E5%8F%96%E9%A1%B5%E9%9D%A2%5Cn%24web%20%3D%20New-Object%20System.Net.WebClient%5Cn%24web.Encoding%20%3D%20%5BSystem.Text.Encoding%5D%3A%3AUTF8%5Cn%24str%20%3D%20%24web.DownloadString(%5C%22http%3A%2F%2Flocalhost%5C%22)%5Cn%24str%5Cn%5Cn%23%20%E5%88%86%E6%9E%90HTML%5Cnfunction%20Get-HtmlElement%20(%24Id%2C%24Name%2C%24Class%2C%24Tag)%5Cn%7B%5Cn%20%20%20%20if(%24Id)%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20return%20%24ie.Document.getElementById(%24id)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20elseif(%24Name)%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20return%20%24ie.Document.getElementsByName(%24Name)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20elseif(%24Class)%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%24ie.Document.all%20%7C%E3%80%80where%20%7B%24_.className%20-contains%20%24Class%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20elseif(%24Tag)%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%24ie.Document.getElementsByTagName(%24Tag)%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p><br /></p><ul><li><p>其他语言一律欢迎</p></li></ul><p><br /></p><h3 id=\"tudgkb\"><a href=\"#tudgkb\" id=\"成果\"></a>成果</h3><p><br /></p><ul><li><p>有效的可视化数据（网页或者其他形式的报表等）</p></li></ul><ul><li><p>源代码和说明文档</p></li></ul><p><br /></p><p><em>提交方式：在git.oschina.net上管理项目，在scauhci的hci-spider处将项目地址提交到issue</em></p><p><br /></p><h3 id=\"u3e6wl\"><a href=\"#u3e6wl\" id=\"后话\"></a>后话</h3><p><br /></p><p>本作业为小组作业或个人作业，建议人数不超过2人，可以选择使用自己最熟悉的语言编写。同样需要邀请一位13级师兄/师姐作为指导。强烈推荐大家学习多样化的语言！有任何疑问，可直接在<code>HCI@上有老下有小群</code>讨论。也可以在本文后面的评论框直接评论。</p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"date: 2015-12-31\"],[\"div\",{\"data-type\":\"p\"},\"tags: [爬虫, hci]\"],[\"hr\",{\"id\":\"g0lzpq\"}],[\"div\",{\"data-type\":\"p\"},\"欢迎来访HCI第一次趣玩作业，本次作业主要是完成爬虫的简单设计以及掌握团队协作工具的应用。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"zplldu\"},\"爬虫知多少\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"概要：网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"e8qska\"},\"项目概要\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"本次项目主要目的为简单的网页抓取和数据处理。本次需要抓取的网站为豆瓣读书。进行分类后存储到本地文件或数据库。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"0t9vie\"},\"思路教程\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"体验和发现url规则(如学院OJ系统报名列表\",[\"a\",{\"title\":\"\",\"href\":\"http://acm.scau.edu.cn:8000/uoj/register/displayActivity.html?id=29&page=1%22\"},\"http://acm.scau.edu.cn:8000/uoj/register/displayActivity.html?id=29&page=1\\\"\"],\"，这里的page就是页码)\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"获取网页文件\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"分析页面元素，抓取有效数据\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"心有余力的同学可以尝试迭代分析页面元素（链接）抓取整站页面。（需要考虑链接的重复性和同属于一站）\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"t5ckpu\"},\"部分教程（思路）\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"时间有限，对此也不再赘述，参考如下文章:\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"Python教程: \",[\"a\",{\"title\":\"\",\"href\":\"https://www.thenewboston.com/forum/topic.php?id=1610\"},\"https://www.thenewboston.com/forum/topic.php?id=1610\"],\" （参考技术：request和bs4）\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"powershell部分代码\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"# 抓取页面\\n\",\"$web = New-Object System.Net.WebClient\\n\",\"$web.Encoding = [System.Text.Encoding]::UTF8\\n\",\"$str = $web.DownloadString(\\\"http://localhost\\\")\\n\",\"$str\\n\",\"\\n\",\"# 分析HTML\\n\",\"function Get-HtmlElement ($Id,$Name,$Class,$Tag)\\n\",\"{\\n\",\"    if($Id)\\n\",\"    {\\n\",\"        return $ie.Document.getElementById($id)\\n\",\"    }\\n\",\"    elseif($Name)\\n\",\"    {\\n\",\"        return $ie.Document.getElementsByName($Name)\\n\",\"    }\\n\",\"    elseif($Class)\\n\",\"    {\\n\",\"        $ie.Document.all |　where {$_.className -contains $Class}\\n\",\"    }\\n\",\"    elseif($Tag)\\n\",\"    {\\n\",\"        $ie.Document.getElementsByTagName($Tag)\\n\",\"    }\\n\",\"}\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"其他语言一律欢迎\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"tudgkb\"},\"成果\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"有效的可视化数据（网页或者其他形式的报表等）\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"源代码和说明文档\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"em\",{},\"提交方式：在git.oschina.net上管理项目，在scauhci的hci-spider处将项目地址提交到issue\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"u3e6wl\"},\"后话\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"本作业为小组作业或个人作业，建议人数不超过2人，可以选择使用自己最熟悉的语言编写。同样需要邀请一位13级师兄/师姐作为指导。强烈推荐大家学习多样化的语言！有任何疑问，可直接在\",[\"code\",{},\"HCI@上有老下有小群\"],\"讨论。也可以在本文后面的评论框直接评论。\"]]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T09:28:14.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:31:11.000Z",
    "updated_at": "2019-07-02T16:22:10.000Z",
    "published_at": "2018-09-15T09:28:14.000Z",
    "first_published_at": null,
    "word_count": 593,
    "cover": null,
    "description": "date: 2015-12-31tags: [爬虫, hci]欢迎来访HCI第一次趣玩作业，本次作业主要是完成爬虫的简单设计以及掌握团队协作工具的应用。爬虫知多少概要：网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。&lt;!-- more --&gt...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709031,
    "slug": "chomfq",
    "title": "HCI第一次分享例会[命令行]",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "date: 2015-10-25<br />tags: [cmd, linux, hci] \n\n---\n\n欢迎来访HCI第一次例会分享，今天小编（HCI-鹏飞）需要分享的是linux和windows命令行的基本命令以及技巧。\n\n<a name=\"bovtlm\"></a>\n### 关于linux知多少\n\n概要：开源、多用户多任务、支持多线程多CPU的操作系统（基于POSIX和UNIX），以网络为核心而设计，可以运行UNIX工具、应用程序和网络协议。Linux内核版本已经升级到4.3。(内核源代码Git仓库：[https://git.kernel.org/](https://git.kernel.org/))。<br />特性：强大的控制台和Linux终端环境以及桌面环境如GNOME, KDE, XFCE和 LXDE，稳定性高安全性较高。\n\n<!-- more -->\n\n应用场景：<br />\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282614096-ab87ccb8-d840-4f46-8e0b-d854f6f28999.png#width=442)\n\n<a name=\"np1gov\"></a>\n### 言归正传，下面开始进入正题。开始讲解linux(局部windows的命令行)\n\n- 用户管理\n\n\n```bash\n查看当前登录的用户名：who am i \\ who mom likes\n添加用户：adduser hci\n修改密码：passwd\n用户组查询：groups [root](cat /etc/group)\n添加到组：usermod -G sudo hci\n删除用户：deluser hci --remove-home\n```\n\n- 文件管理\n\n\n> 文件权限：\n\n\n```bash\n查看文件权限：ls -l\n```\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282638549-5e6ff30a-676f-4162-a8af-fb1b07a735cc.png#width=747)<br />![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282646577-acd64bd4-6eaa-41dc-a9e4-5c4627293458.png#width=528)\n\n```bash\n更改所有者：chown\n更改文件权限：chmod (直接赋值和加减权限)\nchmod go-rw hci\n# 'g''o'还有'u'，分别表示group，others，user，'+'，'-' 就分别表示增加和去掉相应的权限\n```\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282661213-c3bd0152-16ce-4546-9a6c-4a0b1cb83833.png#width=747)<br />\n[ps: 三组权限：拥有者、所属用户组、其他用户]\n> 操作文件：\n\n\n```bash\n切换目录：cd\\pushd\n新建文件：touch\n新建目录：mkdir\n查看目录：ls\n删除文件、目录：rm\\rm -rf\n复制文件：cp\n移动文件：mv\n重命名：rename\n查看文件：cat\\tac\\ln\n查看文件首尾：head\\tail\n逐行显示：more\\less\n查看文件类型：file\n```\n\n- 文本处理<br />主要工具vi\\vim：屏幕编辑和行编辑模式\n\n- 环境变量<br />运行环境的变量。\n\n\n```bash\n定义变量：declare\n删除变量：unset\n立即生效：source .bashrc\n用户Bash环境变量文件：~/.bashrc(根据终端环境如zsh的.zshrc)\n系统环境变量：/etc/profile(/etc/bashrc)\n```\n\n- 其他技巧\n\n\n```bash\n回显筛选：grep\n查找文件：where(qs)\\locate(qm)\\whic(sr)\\find\n查看进程：ps\n任务管理器：top\n重启：reboot\n关机：poweroff\\shutdown\\init\n创建归档：tar(-c -x)\n下载文件：wget\n挂载文件系统：mount\\unmount\n帮助文档：man\\info\n```\n\n",
    "body_draft": "date: 2015-10-25\ntags: [cmd, linux, hci] \n\n---\n\n欢迎来访HCI第一次例会分享，今天小编（HCI-鹏飞）需要分享的是linux和windows命令行的基本命令以及技巧。\n\n### <a name=\"bovtlm\"></a>关于linux知多少\n\n概要：开源、多用户多任务、支持多线程多CPU的操作系统（基于POSIX和UNIX），以网络为核心而设计，可以运行UNIX工具、应用程序和网络协议。Linux内核版本已经升级到4.3。(内核源代码Git仓库：[https://git.kernel.org/](https://git.kernel.org/))。\n特性：强大的控制台和Linux终端环境以及桌面环境如GNOME, KDE, XFCE和 LXDE，稳定性高安全性较高。\n\n<!-- more -->\n\n应用场景：\n\n\n\n\n![image.png | left | 442x693](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282614096-ab87ccb8-d840-4f46-8e0b-d854f6f28999.png \"\")\n\n\n### <a name=\"np1gov\"></a>言归正传，下面开始进入正题。开始讲解linux(局部windows的命令行)\n\n* 用户管理\n\n```Bash\n查看当前登录的用户名：who am i \\ who mom likes\n添加用户：adduser hci\n修改密码：passwd\n用户组查询：groups [root](cat /etc/group)\n添加到组：usermod -G sudo hci\n删除用户：deluser hci --remove-home\n```\n\n* 文件管理\n\n> 文件权限：\n\n```Bash\n查看文件权限：ls -l\n```\n\n\n\n![image.png | left | 747x141](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282638549-5e6ff30a-676f-4162-a8af-fb1b07a735cc.png \"\")\n\n\n\n![image.png | left | 528x363](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282646577-acd64bd4-6eaa-41dc-a9e4-5c4627293458.png \"\")\n\n\n```Bash\n更改所有者：chown\n更改文件权限：chmod (直接赋值和加减权限)\nchmod go-rw hci\n# 'g''o'还有'u'，分别表示group，others，user，'+'，'-' 就分别表示增加和去掉相应的权限\n\n```\n\n\n\n![image.png | left | 747x245](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282661213-c3bd0152-16ce-4546-9a6c-4a0b1cb83833.png \"\")\n\n\n[ps: 三组权限：拥有者、所属用户组、其他用户]\n> 操作文件：\n\n```Bash\n切换目录：cd\\pushd\n新建文件：touch\n新建目录：mkdir\n查看目录：ls\n删除文件、目录：rm\\rm -rf\n复制文件：cp\n移动文件：mv\n重命名：rename\n查看文件：cat\\tac\\ln\n查看文件首尾：head\\tail\n逐行显示：more\\less\n查看文件类型：file\n```\n\n* 文本处理\n    主要工具vi\\vim：屏幕编辑和行编辑模式\n* 环境变量\n    运行环境的变量。\n\n```Bash\n定义变量：declare\n删除变量：unset\n立即生效：source .bashrc\n用户Bash环境变量文件：~/.bashrc(根据终端环境如zsh的.zshrc)\n系统环境变量：/etc/profile(/etc/bashrc)\n```\n\n* 其他技巧\n\n```Bash\n回显筛选：grep\n查找文件：where(qs)\\locate(qm)\\whic(sr)\\find\n查看进程：ps\n任务管理器：top\n重启：reboot\n关机：poweroff\\shutdown\\init\n创建归档：tar(-c -x)\n下载文件：wget\n挂载文件系统：mount\\unmount\n帮助文档：man\\info\n```\n\n",
    "body_html": "<p>date: 2015-10-25</p><p>tags: [cmd, linux, hci] </p><hr /><p>欢迎来访HCI第一次例会分享，今天小编（HCI-鹏飞）需要分享的是linux和windows命令行的基本命令以及技巧。</p><p><br /></p><h3 id=\"bovtlm\"><a href=\"#bovtlm\"></a>关于linux知多少</h3><p><br /></p><p>概要：开源、多用户多任务、支持多线程多CPU的操作系统（基于POSIX和UNIX），以网络为核心而设计，可以运行UNIX工具、应用程序和网络协议。Linux内核版本已经升级到4.3。(内核源代码Git仓库：<a href=\"https://git.kernel.org/\" target=\"_blank\">https://git.kernel.org/</a>)。<br />特性：强大的控制台和Linux终端环境以及桌面环境如GNOME, KDE, XFCE和 LXDE，稳定性高安全性较高。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p>应用场景：<br /></p><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282614096-ab87ccb8-d840-4f46-8e0b-d854f6f28999.png#width=442\" style=\"max-width: 600px; width: 442px;\" /></p><p><br /></p><h3 id=\"np1gov\"><a href=\"#np1gov\"></a>言归正传，下面开始进入正题。开始讲解linux(局部windows的命令行)</h3><p><br /></p><ul><li><p>用户管理</p></li></ul><p><br /></p><pre data-lang=\"bash\"><code>查看当前登录的用户名：who am i \\ who mom likes\n添加用户：adduser hci\n修改密码：passwd\n用户组查询：groups [root](cat /etc/group)\n添加到组：usermod -G sudo hci\n删除用户：deluser hci --remove-home</code></pre><p><br /></p><ul><li><p>文件管理</p></li></ul><p><br /></p><blockquote><p>文件权限：</p></blockquote><p><br /></p><pre data-lang=\"bash\"><code>查看文件权限：ls -l</code></pre><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282638549-5e6ff30a-676f-4162-a8af-fb1b07a735cc.png#width=747\" style=\"max-width: 600px; width: 747px;\" /><br /><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282646577-acd64bd4-6eaa-41dc-a9e4-5c4627293458.png#width=528\" style=\"max-width: 600px; width: 528px;\" /></p><p><br /></p><pre data-lang=\"bash\"><code>更改所有者：chown\n更改文件权限：chmod (直接赋值和加减权限)\nchmod go-rw hci\n# 'g''o'还有'u'，分别表示group，others，user，'+'，'-' 就分别表示增加和去掉相应的权限</code></pre><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282661213-c3bd0152-16ce-4546-9a6c-4a0b1cb83833.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p><p><br />[ps: 三组权限：拥有者、所属用户组、其他用户]</p><blockquote><p>操作文件：</p></blockquote><p><br /></p><pre data-lang=\"bash\"><code>切换目录：cd\\pushd\n新建文件：touch\n新建目录：mkdir\n查看目录：ls\n删除文件、目录：rm\\rm -rf\n复制文件：cp\n移动文件：mv\n重命名：rename\n查看文件：cat\\tac\\ln\n查看文件首尾：head\\tail\n逐行显示：more\\less\n查看文件类型：file</code></pre><p><br /></p><ul><li><p>文本处理<br />主要工具vi\\vim：屏幕编辑和行编辑模式</p></li></ul><ul><li><p>环境变量<br />运行环境的变量。</p></li></ul><p><br /></p><pre data-lang=\"bash\"><code>定义变量：declare\n删除变量：unset\n立即生效：source .bashrc\n用户Bash环境变量文件：~/.bashrc(根据终端环境如zsh的.zshrc)\n系统环境变量：/etc/profile(/etc/bashrc)</code></pre><p><br /></p><ul><li><p>其他技巧</p></li></ul><p><br /></p><pre data-lang=\"bash\"><code>回显筛选：grep\n查找文件：where(qs)\\locate(qm)\\whic(sr)\\find\n查看进程：ps\n任务管理器：top\n重启：reboot\n关机：poweroff\\shutdown\\init\n创建归档：tar(-c -x)\n下载文件：wget\n挂载文件系统：mount\\unmount\n帮助文档：man\\info</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p>date: 2015-10-25</p><p>tags: [cmd, linux, hci] </p><card type=\"block\" name=\"hr\"></card><p>欢迎来访HCI第一次例会分享，今天小编（HCI-鹏飞）需要分享的是linux和windows命令行的基本命令以及技巧。</p><p><br /></p><h3 id=\"bovtlm\"><a href=\"#bovtlm\" id=\"关于linux知多少\"></a>关于linux知多少</h3><p><br /></p><p>概要：开源、多用户多任务、支持多线程多CPU的操作系统（基于POSIX和UNIX），以网络为核心而设计，可以运行UNIX工具、应用程序和网络协议。Linux内核版本已经升级到4.3。(内核源代码Git仓库：<a href=\"https://git.kernel.org/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://git.kernel.org/</a>)。<br />特性：强大的控制台和Linux终端环境以及桌面环境如GNOME, KDE, XFCE和 LXDE，稳定性高安全性较高。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p>应用场景：<br /></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282614096-ab87ccb8-d840-4f46-8e0b-d854f6f28999.png%22%2C%22width%22%3A442%7D\"></card></p><p><br /></p><h3 id=\"np1gov\"><a href=\"#np1gov\" id=\"言归正传，下面开始进入正题。开始讲解linux(局部windows的命令行)\"></a>言归正传，下面开始进入正题。开始讲解linux(局部windows的命令行)</h3><p><br /></p><ul><li><p>用户管理</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2207602338%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E7%99%BB%E5%BD%95%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%9Awho%20am%20i%20%5C%5C%20who%20mom%20likes%5Cn%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%EF%BC%9Aadduser%20hci%5Cn%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%EF%BC%9Apasswd%5Cn%E7%94%A8%E6%88%B7%E7%BB%84%E6%9F%A5%E8%AF%A2%EF%BC%9Agroups%20%5Broot%5D(cat%20%2Fetc%2Fgroup)%5Cn%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%BB%84%EF%BC%9Ausermod%20-G%20sudo%20hci%5Cn%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7%EF%BC%9Adeluser%20hci%20--remove-home%22%7D\"></card><p><br /></p><ul><li><p>文件管理</p></li></ul><p><br /></p><blockquote><p>文件权限：</p></blockquote><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%227bad5064%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%9Als%20-l%22%7D\"></card><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282638549-5e6ff30a-676f-4162-a8af-fb1b07a735cc.png%22%2C%22width%22%3A747%7D\"></card><br /><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282646577-acd64bd4-6eaa-41dc-a9e4-5c4627293458.png%22%2C%22width%22%3A528%7D\"></card></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22048cf9d3%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%E6%9B%B4%E6%94%B9%E6%89%80%E6%9C%89%E8%80%85%EF%BC%9Achown%5Cn%E6%9B%B4%E6%94%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%EF%BC%9Achmod%20(%E7%9B%B4%E6%8E%A5%E8%B5%8B%E5%80%BC%E5%92%8C%E5%8A%A0%E5%87%8F%E6%9D%83%E9%99%90)%5Cnchmod%20go-rw%20hci%5Cn%23%20'g''o'%E8%BF%98%E6%9C%89'u'%EF%BC%8C%E5%88%86%E5%88%AB%E8%A1%A8%E7%A4%BAgroup%EF%BC%8Cothers%EF%BC%8Cuser%EF%BC%8C'%2B'%EF%BC%8C'-'%20%E5%B0%B1%E5%88%86%E5%88%AB%E8%A1%A8%E7%A4%BA%E5%A2%9E%E5%8A%A0%E5%92%8C%E5%8E%BB%E6%8E%89%E7%9B%B8%E5%BA%94%E7%9A%84%E6%9D%83%E9%99%90%22%7D\"></card><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282661213-c3bd0152-16ce-4546-9a6c-4a0b1cb83833.png%22%2C%22width%22%3A747%7D\"></card></p><p><br />[ps: 三组权限：拥有者、所属用户组、其他用户]</p><blockquote><p>操作文件：</p></blockquote><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22f55983a1%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%E5%88%87%E6%8D%A2%E7%9B%AE%E5%BD%95%EF%BC%9Acd%5C%5Cpushd%5Cn%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%EF%BC%9Atouch%5Cn%E6%96%B0%E5%BB%BA%E7%9B%AE%E5%BD%95%EF%BC%9Amkdir%5Cn%E6%9F%A5%E7%9C%8B%E7%9B%AE%E5%BD%95%EF%BC%9Als%5Cn%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E3%80%81%E7%9B%AE%E5%BD%95%EF%BC%9Arm%5C%5Crm%20-rf%5Cn%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%EF%BC%9Acp%5Cn%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6%EF%BC%9Amv%5Cn%E9%87%8D%E5%91%BD%E5%90%8D%EF%BC%9Arename%5Cn%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%EF%BC%9Acat%5C%5Ctac%5C%5Cln%5Cn%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E9%A6%96%E5%B0%BE%EF%BC%9Ahead%5C%5Ctail%5Cn%E9%80%90%E8%A1%8C%E6%98%BE%E7%A4%BA%EF%BC%9Amore%5C%5Cless%5Cn%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%EF%BC%9Afile%22%7D\"></card><p><br /></p><ul><li><p>文本处理<br />主要工具vi\\vim：屏幕编辑和行编辑模式</p></li></ul><ul><li><p>环境变量<br />运行环境的变量。</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%220e910bfa%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%EF%BC%9Adeclare%5Cn%E5%88%A0%E9%99%A4%E5%8F%98%E9%87%8F%EF%BC%9Aunset%5Cn%E7%AB%8B%E5%8D%B3%E7%94%9F%E6%95%88%EF%BC%9Asource%20.bashrc%5Cn%E7%94%A8%E6%88%B7Bash%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%96%87%E4%BB%B6%EF%BC%9A~%2F.bashrc(%E6%A0%B9%E6%8D%AE%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E5%A6%82zsh%E7%9A%84.zshrc)%5Cn%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%9A%2Fetc%2Fprofile(%2Fetc%2Fbashrc)%22%7D\"></card><p><br /></p><ul><li><p>其他技巧</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2212b2c19c%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%E5%9B%9E%E6%98%BE%E7%AD%9B%E9%80%89%EF%BC%9Agrep%5Cn%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%EF%BC%9Awhere(qs)%5C%5Clocate(qm)%5C%5Cwhic(sr)%5C%5Cfind%5Cn%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%EF%BC%9Aps%5Cn%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%9Atop%5Cn%E9%87%8D%E5%90%AF%EF%BC%9Areboot%5Cn%E5%85%B3%E6%9C%BA%EF%BC%9Apoweroff%5C%5Cshutdown%5C%5Cinit%5Cn%E5%88%9B%E5%BB%BA%E5%BD%92%E6%A1%A3%EF%BC%9Atar(-c%20-x)%5Cn%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%EF%BC%9Awget%5Cn%E6%8C%82%E8%BD%BD%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%9Amount%5C%5Cunmount%5Cn%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%EF%BC%9Aman%5C%5Cinfo%22%7D\"></card><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"date: 2015-10-25\"],[\"div\",{\"data-type\":\"p\"},\"tags: [cmd, linux, hci] \"],[\"hr\",{\"id\":\"h1ccht\"}],[\"div\",{\"data-type\":\"p\"},\"欢迎来访HCI第一次例会分享，今天小编（HCI-鹏飞）需要分享的是linux和windows命令行的基本命令以及技巧。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"bovtlm\"},\"关于linux知多少\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"概要：开源、多用户多任务、支持多线程多CPU的操作系统（基于POSIX和UNIX），以网络为核心而设计，可以运行UNIX工具、应用程序和网络协议。Linux内核版本已经升级到4.3。(内核源代码Git仓库：\",[\"a\",{\"title\":\"\",\"href\":\"https://git.kernel.org/\"},\"https://git.kernel.org/\"],\")。\\n特性：强大的控制台和Linux终端环境以及桌面环境如GNOME, KDE, XFCE和 LXDE，稳定性高安全性较高。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"应用场景：\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"2y6bpl\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282614096-ab87ccb8-d840-4f46-8e0b-d854f6f28999.png\",\"width\":442,\"height\":693,\"size\":97718,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"np1gov\"},\"言归正传，下面开始进入正题。开始讲解linux(局部windows的命令行)\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"用户管理\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"查看当前登录的用户名：who am i \\\\ who mom likes\\n\",\"添加用户：adduser hci\\n\",\"修改密码：passwd\\n\",\"用户组查询：groups [root](cat /etc/group)\\n\",\"添加到组：usermod -G sudo hci\\n\",\"删除用户：deluser hci --remove-home\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"文件管理\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"blockquote\",[\"div\",{\"data-type\":\"p\"},\"文件权限：\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"查看文件权限：ls -l\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"ec30ez\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282638549-5e6ff30a-676f-4162-a8af-fb1b07a735cc.png\",\"width\":747,\"height\":141,\"size\":33598,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\\n\",[\"img\",{\"id\":\"q2xsqo\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282646577-acd64bd4-6eaa-41dc-a9e4-5c4627293458.png\",\"width\":528,\"height\":363,\"size\":47054,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"更改所有者：chown\\n\",\"更改文件权限：chmod (直接赋值和加减权限)\\n\",\"chmod go-rw hci\\n\",\"# 'g''o'还有'u'，分别表示group，others，user，'+'，'-' 就分别表示增加和去掉相应的权限\\n\",\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"mrxpdy\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282661213-c3bd0152-16ce-4546-9a6c-4a0b1cb83833.png\",\"width\":747,\"height\":245,\"size\":82499,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\\n[ps: 三组权限：拥有者、所属用户组、其他用户]\"],[\"blockquote\",[\"div\",{\"data-type\":\"p\"},\"操作文件：\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"切换目录：cd\\\\pushd\\n\",\"新建文件：touch\\n\",\"新建目录：mkdir\\n\",\"查看目录：ls\\n\",\"删除文件、目录：rm\\\\rm -rf\\n\",\"复制文件：cp\\n\",\"移动文件：mv\\n\",\"重命名：rename\\n\",\"查看文件：cat\\\\tac\\\\ln\\n\",\"查看文件首尾：head\\\\tail\\n\",\"逐行显示：more\\\\less\\n\",\"查看文件类型：file\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"文本处理\\n主要工具vi\\\\vim：屏幕编辑和行编辑模式\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"环境变量\\n运行环境的变量。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"定义变量：declare\\n\",\"删除变量：unset\\n\",\"立即生效：source .bashrc\\n\",\"用户Bash环境变量文件：~/.bashrc(根据终端环境如zsh的.zshrc)\\n\",\"系统环境变量：/etc/profile(/etc/bashrc)\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"其他技巧\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"回显筛选：grep\\n\",\"查找文件：where(qs)\\\\locate(qm)\\\\whic(sr)\\\\find\\n\",\"查看进程：ps\\n\",\"任务管理器：top\\n\",\"重启：reboot\\n\",\"关机：poweroff\\\\shutdown\\\\init\\n\",\"创建归档：tar(-c -x)\\n\",\"下载文件：wget\\n\",\"挂载文件系统：mount\\\\unmount\\n\",\"帮助文档：man\\\\info\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:19:53.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:29:11.000Z",
    "updated_at": "2019-05-30T05:58:02.000Z",
    "published_at": "2018-09-15T08:19:53.000Z",
    "first_published_at": null,
    "word_count": 568,
    "cover": null,
    "description": "date: 2015-10-25tags: [cmd, linux, hci] 欢迎来访HCI第一次例会分享，今天小编（HCI-鹏飞）需要分享的是linux和windows命令行的基本命令以及技巧。关于linux知多少概要：开源、多用户多任务、支持多线程多CPU的操作系统（基于POSIX和UNIX），以网络为核心而设计，可以运行UNIX工具、应用程序和网络协议。Linux内核版本已经升级到4.3。(内核源代码Git仓库：https://git.kernel.org/)。 特性：强大的控制台和Linux...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709030,
    "slug": "zphz8h",
    "title": "Docker大行其道—初识",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [linux, docker]<br />date: 2016-05-29\n\n---\n\n随着分布式、云计算、大数据的火热爆发，大量的云计算集群出现，光凭计算机硬件配置的已经无法再次一较高下，虚拟化成为其中最核心的技术。虚拟化既可以通过硬件模拟，也可以通过操作系统层面去实现，近年来热火朝天的容器轻量级虚拟化，保留了操作系统本身的机制和特性，而Docker在此脱颖而出。\n\n<a name=\"pkigdt\"></a>\n### Docker的前世今生\n\nDocker是基于Go语言实现的云开源项目，目前归于Apache基金会并遵循Apache 2.0协议。诞生于2013年初，前身公司为dotCloud，docker开源后得到受到社会广泛的关注，docker的生态圈体系也逐渐成熟，这家公司也改名为Docker Inc，专注于Docker相关技术和产品开发。\n\n<!-- more -->\n\nDocker最大的目标是：“Build, Ship and Run Any App, Anywhere！”。你只需要通过对应用组件的一次的封装，就能在任意地点构建和运行你的应用。无论是一个完整的应用，或者是某些微服务，甚至到一个完整的操作系统都能成为docker的应用组件。Docker提供一个高效、敏捷和轻量的容器方案，能动态适应各种规模的系统部署需求。\n\nDocker整个生命周期包含三部分：镜像（Image），容器（Container），仓库（Repository）。镜像和容器的关系就像程序和进程，镜像是容器运行的一大前提，而容器则是镜像的一个运行实例。仓库则是镜像的管理中心，默认的镜像仓库为Docker Hub。\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282528817-dfd72221-6fc4-4fb2-9f5a-da659e85f848.png#width=747)\n\nDocker运行容器前需要检查本地是否存在对应的镜像，如果不存在，会尝试从默认的镜像仓库下载。镜像实例化之后运行着一个完整的容器，容器除了镜像本身的内容外，还提供额外的可写文件层以及相对独立的运行环境（可能是一些应用或者服务，也可能是完整的操作系统）。\n\n作为一个C/S模型的项目，Docker通过Docker Host进行镜像、容器、守护进程、分区等的管理，同时在Docker Client进行镜像的拉取，容器的构建等操作，通常情况下Host和Client可能会在同一台机器上。\n\nDocker开源代码地址：[https://github.com/docker/docker](https://github.com/docker/docker)\n\n<a name=\"s3oqts\"></a>\n### Docker得天独厚的优势\n\n<a name=\"2t21gp\"></a>\n### 新的部署方式\n\n假如当前有这么一个场景：“由于业务增长，公司的一个网站项目需要迁移到新的服务器”。按照传统方案，我们很可能需要作一些重复性的工作。首先需要在新的服务器上安装对应的运行环境以及对应的依赖，如LAMP（Linux+Apache+Mysql+PHP），创建对应的用户或组并进行文件权限的管理，耗费大量的精力后，还需要对该环境进行测试，最后才能部署上线。试想一下，如果这样的需求多少十几倍，这些工作需要重复的执行。\n\n也许你会说可以通过虚拟化的技术将整个环境打包成镜像再进行部署，加入新的服务器本身也是一台虚拟化的机器，再加上一层xen（或者其他虚拟机）去部署显然显得多余了。\n\n而Docker提供一种极为简便的操作方式，通过容器来进行应用打包，我们可以通过封装成镜像或是编写Dockerfile等方式来进行打包，这意味着在新的服务器上只需要启动所需要的容器即可。一来节省了大量的时间投入，而来降低了部署过程出现问题带来的隐患。\n\n<a name=\"94q1bk\"></a>\n### 运维策略的革新\n\n1. 极速交付和部署\n\n\n使用docker，开发人员可以使用镜像快速构建一套标准的开发环境。之后的测试和上线环节完全可以复用这套镜像将应用部署到测试环境或生产环境等任意地方。Docker可以快速创建、删除容器，并保留了每一个步骤的配置和操作过程，降低开发、测试、部署的时间的同时让环境部署更容易被理解。通过简单的配置文件修改，就能轻松完成一次运行环境的迭代，所有操作都可以以增量的形式进行分发和更新，从而实现自动化和高效的容器管理。\n\n1. 性能损耗低\n\n\n事实上docker是内核级别的虚拟化，不需要额外的虚拟化管理程序，因此开启docker对性能的损耗几乎忽略不计。\n\n1. 轻便易迁移拓展\n\n\nDocker几乎支持任意平台运行，无论是物理机还是虚拟化的主机，甚至个人电脑都能兼容运行docker，这种兼容性可以让应用更方便切换运行平台。\n\n1. 规范化的标准\n\n\nDocker背后的标准化容器执行引擎 - runC。runC是由docker贡献后续完善的一个开放的工业化标准，其主要内容：\n\n- **操作标准化**：容器的标准化操作包括使用标准容器感觉创建、启动、停止容器，使用标准文件系统工具复制和创建容器快照，使用标准化网络工具进行下载和上传。\n\n- **内容无关**：内容无关指不管针对的具体容器内容是什么，容器标准操作执行后都能产生同样的效果。如容器可以用同样的方式上传、启动，不管是php应用还是mysql数据库服务。\n\n- **基础设施无关**：无论是个人的笔记本电脑还是AWS S3，亦或是Openstack，或者其他基础设施，都应该对支持容器的各项操作。\n\n- **为自动化量身定制**：制定容器统一标准，是的操作内容无关化、平台无关化的根本目的之一，就是为了可以使容器操作全平台自动化。\n\n- **工业级交付**：制定容器标准一大目标，就是使软件分发可以达到工业级交付成为现实。\n\n\n1. 集群管理\n\n\nKubernetes是Google开源的Docker容器集群管理系统，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能，本质上可看作是基于容器技术的mini-PaaS平台。\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282540268-e4b8ef20-e07f-40a7-9dc4-9df606ee60f9.png#width=747)\n\n关于Docker和虚拟机的比较，请参考：[http://www.linuxprobe.com/docker-and-vm.html](http://www.linuxprobe.com/docker-and-vm.html)\n\n关于Docker的标准，请参考：[http://www.open-open.com/lib/view/open1444481959869.html](http://www.open-open.com/lib/view/open1444481959869.html)\n\n<a name=\"70g4ri\"></a>\n### 文章小节\n\n全文主要对docker进行概念性的介绍，想必读到这里，docker再也不会是一个陌生的技术。无论是在针对应用的自动化运维还是PAAS的管理策略，docker都能提供一套优秀的解决方案，docker在领域内倍受青睐，让运维的工作有了前所未有的优质体验。如果你也被docker的魅力深深折服的话，欢迎加入到docker的学习行列一同探索。\n",
    "body_draft": "tags: [linux, docker]\ndate: 2016-05-29\n\n---\n\n随着分布式、云计算、大数据的火热爆发，大量的云计算集群出现，光凭计算机硬件配置的已经无法再次一较高下，虚拟化成为其中最核心的技术。虚拟化既可以通过硬件模拟，也可以通过操作系统层面去实现，近年来热火朝天的容器轻量级虚拟化，保留了操作系统本身的机制和特性，而Docker在此脱颖而出。\n\n### <a name=\"pkigdt\"></a>Docker的前世今生\n\nDocker是基于Go语言实现的云开源项目，目前归于Apache基金会并遵循Apache 2.0协议。诞生于2013年初，前身公司为dotCloud，docker开源后得到受到社会广泛的关注，docker的生态圈体系也逐渐成熟，这家公司也改名为Docker Inc，专注于Docker相关技术和产品开发。\n\n<!-- more -->\n\nDocker最大的目标是：“Build, Ship and Run Any App, Anywhere！”。你只需要通过对应用组件的一次的封装，就能在任意地点构建和运行你的应用。无论是一个完整的应用，或者是某些微服务，甚至到一个完整的操作系统都能成为docker的应用组件。Docker提供一个高效、敏捷和轻量的容器方案，能动态适应各种规模的系统部署需求。\n\nDocker整个生命周期包含三部分：镜像（Image），容器（Container），仓库（Repository）。镜像和容器的关系就像程序和进程，镜像是容器运行的一大前提，而容器则是镜像的一个运行实例。仓库则是镜像的管理中心，默认的镜像仓库为Docker Hub。\n\n\n\n![image.png | left | 747x477](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282528817-dfd72221-6fc4-4fb2-9f5a-da659e85f848.png \"\")\n\n\nDocker运行容器前需要检查本地是否存在对应的镜像，如果不存在，会尝试从默认的镜像仓库下载。镜像实例化之后运行着一个完整的容器，容器除了镜像本身的内容外，还提供额外的可写文件层以及相对独立的运行环境（可能是一些应用或者服务，也可能是完整的操作系统）。\n\n作为一个C/S模型的项目，Docker通过Docker Host进行镜像、容器、守护进程、分区等的管理，同时在Docker Client进行镜像的拉取，容器的构建等操作，通常情况下Host和Client可能会在同一台机器上。\n\nDocker开源代码地址：[https://github.com/docker/docker](https://github.com/docker/docker)\n\n### <a name=\"s3oqts\"></a>Docker得天独厚的优势\n\n### <a name=\"2t21gp\"></a>新的部署方式\n\n假如当前有这么一个场景：“由于业务增长，公司的一个网站项目需要迁移到新的服务器”。按照传统方案，我们很可能需要作一些重复性的工作。首先需要在新的服务器上安装对应的运行环境以及对应的依赖，如LAMP（Linux+Apache+Mysql+PHP），创建对应的用户或组并进行文件权限的管理，耗费大量的精力后，还需要对该环境进行测试，最后才能部署上线。试想一下，如果这样的需求多少十几倍，这些工作需要重复的执行。\n\n也许你会说可以通过虚拟化的技术将整个环境打包成镜像再进行部署，加入新的服务器本身也是一台虚拟化的机器，再加上一层xen（或者其他虚拟机）去部署显然显得多余了。\n\n而Docker提供一种极为简便的操作方式，通过容器来进行应用打包，我们可以通过封装成镜像或是编写Dockerfile等方式来进行打包，这意味着在新的服务器上只需要启动所需要的容器即可。一来节省了大量的时间投入，而来降低了部署过程出现问题带来的隐患。\n\n### <a name=\"94q1bk\"></a>运维策略的革新\n\n1. 极速交付和部署\n\n使用docker，开发人员可以使用镜像快速构建一套标准的开发环境。之后的测试和上线环节完全可以复用这套镜像将应用部署到测试环境或生产环境等任意地方。Docker可以快速创建、删除容器，并保留了每一个步骤的配置和操作过程，降低开发、测试、部署的时间的同时让环境部署更容易被理解。通过简单的配置文件修改，就能轻松完成一次运行环境的迭代，所有操作都可以以增量的形式进行分发和更新，从而实现自动化和高效的容器管理。\n\n1. 性能损耗低\n\n事实上docker是内核级别的虚拟化，不需要额外的虚拟化管理程序，因此开启docker对性能的损耗几乎忽略不计。\n\n1. 轻便易迁移拓展\n\nDocker几乎支持任意平台运行，无论是物理机还是虚拟化的主机，甚至个人电脑都能兼容运行docker，这种兼容性可以让应用更方便切换运行平台。\n\n1. 规范化的标准\n\nDocker背后的标准化容器执行引擎 - runC。runC是由docker贡献后续完善的一个开放的工业化标准，其主要内容：\n\n* __操作标准化__：容器的标准化操作包括使用标准容器感觉创建、启动、停止容器，使用标准文件系统工具复制和创建容器快照，使用标准化网络工具进行下载和上传。\n* __内容无关__：内容无关指不管针对的具体容器内容是什么，容器标准操作执行后都能产生同样的效果。如容器可以用同样的方式上传、启动，不管是php应用还是mysql数据库服务。\n* __基础设施无关__：无论是个人的笔记本电脑还是AWS S3，亦或是Openstack，或者其他基础设施，都应该对支持容器的各项操作。\n* __为自动化量身定制__：制定容器统一标准，是的操作内容无关化、平台无关化的根本目的之一，就是为了可以使容器操作全平台自动化。\n* __工业级交付__：制定容器标准一大目标，就是使软件分发可以达到工业级交付成为现实。\n\n1. 集群管理\n\nKubernetes是Google开源的Docker容器集群管理系统，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能，本质上可看作是基于容器技术的mini-PaaS平台。\n\n\n\n![image.png | left | 747x545](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282540268-e4b8ef20-e07f-40a7-9dc4-9df606ee60f9.png \"\")\n\n\n关于Docker和虚拟机的比较，请参考：[http://www.linuxprobe.com/docker-and-vm.html](http://www.linuxprobe.com/docker-and-vm.html)\n\n关于Docker的标准，请参考：[http://www.open-open.com/lib/view/open1444481959869.html](http://www.open-open.com/lib/view/open1444481959869.html)\n\n### <a name=\"70g4ri\"></a>文章小节\n\n全文主要对docker进行概念性的介绍，想必读到这里，docker再也不会是一个陌生的技术。无论是在针对应用的自动化运维还是PAAS的管理策略，docker都能提供一套优秀的解决方案，docker在领域内倍受青睐，让运维的工作有了前所未有的优质体验。如果你也被docker的魅力深深折服的话，欢迎加入到docker的学习行列一同探索。\n",
    "body_html": "<p>tags: [linux, docker]</p><p>date: 2016-05-29</p><hr /><p>随着分布式、云计算、大数据的火热爆发，大量的云计算集群出现，光凭计算机硬件配置的已经无法再次一较高下，虚拟化成为其中最核心的技术。虚拟化既可以通过硬件模拟，也可以通过操作系统层面去实现，近年来热火朝天的容器轻量级虚拟化，保留了操作系统本身的机制和特性，而Docker在此脱颖而出。</p><p><br /></p><h3 id=\"pkigdt\"><a href=\"#pkigdt\"></a>Docker的前世今生</h3><p><br /></p><p>Docker是基于Go语言实现的云开源项目，目前归于Apache基金会并遵循Apache 2.0协议。诞生于2013年初，前身公司为dotCloud，docker开源后得到受到社会广泛的关注，docker的生态圈体系也逐渐成熟，这家公司也改名为Docker Inc，专注于Docker相关技术和产品开发。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p>Docker最大的目标是：“Build, Ship and Run Any App, Anywhere！”。你只需要通过对应用组件的一次的封装，就能在任意地点构建和运行你的应用。无论是一个完整的应用，或者是某些微服务，甚至到一个完整的操作系统都能成为docker的应用组件。Docker提供一个高效、敏捷和轻量的容器方案，能动态适应各种规模的系统部署需求。</p><p><br /></p><p>Docker整个生命周期包含三部分：镜像（Image），容器（Container），仓库（Repository）。镜像和容器的关系就像程序和进程，镜像是容器运行的一大前提，而容器则是镜像的一个运行实例。仓库则是镜像的管理中心，默认的镜像仓库为Docker Hub。</p><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282528817-dfd72221-6fc4-4fb2-9f5a-da659e85f848.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p><p><br /></p><p>Docker运行容器前需要检查本地是否存在对应的镜像，如果不存在，会尝试从默认的镜像仓库下载。镜像实例化之后运行着一个完整的容器，容器除了镜像本身的内容外，还提供额外的可写文件层以及相对独立的运行环境（可能是一些应用或者服务，也可能是完整的操作系统）。</p><p><br /></p><p>作为一个C/S模型的项目，Docker通过Docker Host进行镜像、容器、守护进程、分区等的管理，同时在Docker Client进行镜像的拉取，容器的构建等操作，通常情况下Host和Client可能会在同一台机器上。</p><p><br /></p><p>Docker开源代码地址：<a href=\"https://github.com/docker/docker\" target=\"_blank\">https://github.com/docker/docker</a></p><p><br /></p><h3 id=\"s3oqts\"><a href=\"#s3oqts\"></a>Docker得天独厚的优势</h3><p><br /></p><h3 id=\"2t21gp\"><a href=\"#2t21gp\"></a>新的部署方式</h3><p><br /></p><p>假如当前有这么一个场景：“由于业务增长，公司的一个网站项目需要迁移到新的服务器”。按照传统方案，我们很可能需要作一些重复性的工作。首先需要在新的服务器上安装对应的运行环境以及对应的依赖，如LAMP（Linux+Apache+Mysql+PHP），创建对应的用户或组并进行文件权限的管理，耗费大量的精力后，还需要对该环境进行测试，最后才能部署上线。试想一下，如果这样的需求多少十几倍，这些工作需要重复的执行。</p><p><br /></p><p>也许你会说可以通过虚拟化的技术将整个环境打包成镜像再进行部署，加入新的服务器本身也是一台虚拟化的机器，再加上一层xen（或者其他虚拟机）去部署显然显得多余了。</p><p><br /></p><p>而Docker提供一种极为简便的操作方式，通过容器来进行应用打包，我们可以通过封装成镜像或是编写Dockerfile等方式来进行打包，这意味着在新的服务器上只需要启动所需要的容器即可。一来节省了大量的时间投入，而来降低了部署过程出现问题带来的隐患。</p><p><br /></p><h3 id=\"94q1bk\"><a href=\"#94q1bk\"></a>运维策略的革新</h3><p><br /></p><ol start=\"1\"><li><p>极速交付和部署</p></li></ol><p><br /></p><p>使用docker，开发人员可以使用镜像快速构建一套标准的开发环境。之后的测试和上线环节完全可以复用这套镜像将应用部署到测试环境或生产环境等任意地方。Docker可以快速创建、删除容器，并保留了每一个步骤的配置和操作过程，降低开发、测试、部署的时间的同时让环境部署更容易被理解。通过简单的配置文件修改，就能轻松完成一次运行环境的迭代，所有操作都可以以增量的形式进行分发和更新，从而实现自动化和高效的容器管理。</p><p><br /></p><ol start=\"1\"><li><p>性能损耗低</p></li></ol><p><br /></p><p>事实上docker是内核级别的虚拟化，不需要额外的虚拟化管理程序，因此开启docker对性能的损耗几乎忽略不计。</p><p><br /></p><ol start=\"1\"><li><p>轻便易迁移拓展</p></li></ol><p><br /></p><p>Docker几乎支持任意平台运行，无论是物理机还是虚拟化的主机，甚至个人电脑都能兼容运行docker，这种兼容性可以让应用更方便切换运行平台。</p><p><br /></p><ol start=\"1\"><li><p>规范化的标准</p></li></ol><p><br /></p><p>Docker背后的标准化容器执行引擎 - runC。runC是由docker贡献后续完善的一个开放的工业化标准，其主要内容：</p><p><br /></p><ul><li><p><strong>操作标准化</strong>：容器的标准化操作包括使用标准容器感觉创建、启动、停止容器，使用标准文件系统工具复制和创建容器快照，使用标准化网络工具进行下载和上传。</p></li></ul><ul><li><p><strong>内容无关</strong>：内容无关指不管针对的具体容器内容是什么，容器标准操作执行后都能产生同样的效果。如容器可以用同样的方式上传、启动，不管是php应用还是mysql数据库服务。</p></li></ul><ul><li><p><strong>基础设施无关</strong>：无论是个人的笔记本电脑还是AWS S3，亦或是Openstack，或者其他基础设施，都应该对支持容器的各项操作。</p></li></ul><ul><li><p><strong>为自动化量身定制</strong>：制定容器统一标准，是的操作内容无关化、平台无关化的根本目的之一，就是为了可以使容器操作全平台自动化。</p></li></ul><ul><li><p><strong>工业级交付</strong>：制定容器标准一大目标，就是使软件分发可以达到工业级交付成为现实。</p></li></ul><p><br /></p><ol start=\"1\"><li><p>集群管理</p></li></ol><p><br /></p><p>Kubernetes是Google开源的Docker容器集群管理系统，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能，本质上可看作是基于容器技术的mini-PaaS平台。</p><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282540268-e4b8ef20-e07f-40a7-9dc4-9df606ee60f9.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p><p><br /></p><p>关于Docker和虚拟机的比较，请参考：<a href=\"http://www.linuxprobe.com/docker-and-vm.html\" target=\"_blank\">http://www.linuxprobe.com/docker-and-vm.html</a></p><p><br /></p><p>关于Docker的标准，请参考：<a href=\"http://www.open-open.com/lib/view/open1444481959869.html\" target=\"_blank\">http://www.open-open.com/lib/view/open1444481959869.html</a></p><p><br /></p><h3 id=\"70g4ri\"><a href=\"#70g4ri\"></a>文章小节</h3><p><br /></p><p>全文主要对docker进行概念性的介绍，想必读到这里，docker再也不会是一个陌生的技术。无论是在针对应用的自动化运维还是PAAS的管理策略，docker都能提供一套优秀的解决方案，docker在领域内倍受青睐，让运维的工作有了前所未有的优质体验。如果你也被docker的魅力深深折服的话，欢迎加入到docker的学习行列一同探索。</p>",
    "body_lake": "<!doctype lake><p>tags: [linux, docker]</p><p>date: 2016-05-29</p><card type=\"block\" name=\"hr\"></card><p>随着分布式、云计算、大数据的火热爆发，大量的云计算集群出现，光凭计算机硬件配置的已经无法再次一较高下，虚拟化成为其中最核心的技术。虚拟化既可以通过硬件模拟，也可以通过操作系统层面去实现，近年来热火朝天的容器轻量级虚拟化，保留了操作系统本身的机制和特性，而Docker在此脱颖而出。</p><p><br /></p><h3 id=\"pkigdt\"><a href=\"#pkigdt\" id=\"docker的前世今生\"></a>Docker的前世今生</h3><p><br /></p><p>Docker是基于Go语言实现的云开源项目，目前归于Apache基金会并遵循Apache 2.0协议。诞生于2013年初，前身公司为dotCloud，docker开源后得到受到社会广泛的关注，docker的生态圈体系也逐渐成熟，这家公司也改名为Docker Inc，专注于Docker相关技术和产品开发。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><p>Docker最大的目标是：“Build, Ship and Run Any App, Anywhere！”。你只需要通过对应用组件的一次的封装，就能在任意地点构建和运行你的应用。无论是一个完整的应用，或者是某些微服务，甚至到一个完整的操作系统都能成为docker的应用组件。Docker提供一个高效、敏捷和轻量的容器方案，能动态适应各种规模的系统部署需求。</p><p><br /></p><p>Docker整个生命周期包含三部分：镜像（Image），容器（Container），仓库（Repository）。镜像和容器的关系就像程序和进程，镜像是容器运行的一大前提，而容器则是镜像的一个运行实例。仓库则是镜像的管理中心，默认的镜像仓库为Docker Hub。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282528817-dfd72221-6fc4-4fb2-9f5a-da659e85f848.png%22%2C%22width%22%3A747%7D\"></card></p><p><br /></p><p>Docker运行容器前需要检查本地是否存在对应的镜像，如果不存在，会尝试从默认的镜像仓库下载。镜像实例化之后运行着一个完整的容器，容器除了镜像本身的内容外，还提供额外的可写文件层以及相对独立的运行环境（可能是一些应用或者服务，也可能是完整的操作系统）。</p><p><br /></p><p>作为一个C/S模型的项目，Docker通过Docker Host进行镜像、容器、守护进程、分区等的管理，同时在Docker Client进行镜像的拉取，容器的构建等操作，通常情况下Host和Client可能会在同一台机器上。</p><p><br /></p><p>Docker开源代码地址：<a href=\"https://github.com/docker/docker\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://github.com/docker/docker</a></p><p><br /></p><h3 id=\"s3oqts\"><a href=\"#s3oqts\" id=\"docker得天独厚的优势\"></a>Docker得天独厚的优势</h3><p><br /></p><h3 id=\"2t21gp\"><a href=\"#2t21gp\" id=\"新的部署方式\"></a>新的部署方式</h3><p><br /></p><p>假如当前有这么一个场景：“由于业务增长，公司的一个网站项目需要迁移到新的服务器”。按照传统方案，我们很可能需要作一些重复性的工作。首先需要在新的服务器上安装对应的运行环境以及对应的依赖，如LAMP（Linux+Apache+Mysql+PHP），创建对应的用户或组并进行文件权限的管理，耗费大量的精力后，还需要对该环境进行测试，最后才能部署上线。试想一下，如果这样的需求多少十几倍，这些工作需要重复的执行。</p><p><br /></p><p>也许你会说可以通过虚拟化的技术将整个环境打包成镜像再进行部署，加入新的服务器本身也是一台虚拟化的机器，再加上一层xen（或者其他虚拟机）去部署显然显得多余了。</p><p><br /></p><p>而Docker提供一种极为简便的操作方式，通过容器来进行应用打包，我们可以通过封装成镜像或是编写Dockerfile等方式来进行打包，这意味着在新的服务器上只需要启动所需要的容器即可。一来节省了大量的时间投入，而来降低了部署过程出现问题带来的隐患。</p><p><br /></p><h3 id=\"94q1bk\"><a href=\"#94q1bk\" id=\"运维策略的革新\"></a>运维策略的革新</h3><p><br /></p><ol start=\"1\"><li><p>极速交付和部署</p></li></ol><p><br /></p><p>使用docker，开发人员可以使用镜像快速构建一套标准的开发环境。之后的测试和上线环节完全可以复用这套镜像将应用部署到测试环境或生产环境等任意地方。Docker可以快速创建、删除容器，并保留了每一个步骤的配置和操作过程，降低开发、测试、部署的时间的同时让环境部署更容易被理解。通过简单的配置文件修改，就能轻松完成一次运行环境的迭代，所有操作都可以以增量的形式进行分发和更新，从而实现自动化和高效的容器管理。</p><p><br /></p><ol start=\"1\"><li><p>性能损耗低</p></li></ol><p><br /></p><p>事实上docker是内核级别的虚拟化，不需要额外的虚拟化管理程序，因此开启docker对性能的损耗几乎忽略不计。</p><p><br /></p><ol start=\"1\"><li><p>轻便易迁移拓展</p></li></ol><p><br /></p><p>Docker几乎支持任意平台运行，无论是物理机还是虚拟化的主机，甚至个人电脑都能兼容运行docker，这种兼容性可以让应用更方便切换运行平台。</p><p><br /></p><ol start=\"1\"><li><p>规范化的标准</p></li></ol><p><br /></p><p>Docker背后的标准化容器执行引擎 - runC。runC是由docker贡献后续完善的一个开放的工业化标准，其主要内容：</p><p><br /></p><ul><li><p><strong>操作标准化</strong>：容器的标准化操作包括使用标准容器感觉创建、启动、停止容器，使用标准文件系统工具复制和创建容器快照，使用标准化网络工具进行下载和上传。</p></li></ul><ul><li><p><strong>内容无关</strong>：内容无关指不管针对的具体容器内容是什么，容器标准操作执行后都能产生同样的效果。如容器可以用同样的方式上传、启动，不管是php应用还是mysql数据库服务。</p></li></ul><ul><li><p><strong>基础设施无关</strong>：无论是个人的笔记本电脑还是AWS S3，亦或是Openstack，或者其他基础设施，都应该对支持容器的各项操作。</p></li></ul><ul><li><p><strong>为自动化量身定制</strong>：制定容器统一标准，是的操作内容无关化、平台无关化的根本目的之一，就是为了可以使容器操作全平台自动化。</p></li></ul><ul><li><p><strong>工业级交付</strong>：制定容器标准一大目标，就是使软件分发可以达到工业级交付成为现实。</p></li></ul><p><br /></p><ol start=\"1\"><li><p>集群管理</p></li></ol><p><br /></p><p>Kubernetes是Google开源的Docker容器集群管理系统，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能，本质上可看作是基于容器技术的mini-PaaS平台。</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282540268-e4b8ef20-e07f-40a7-9dc4-9df606ee60f9.png%22%2C%22width%22%3A747%7D\"></card></p><p><br /></p><p>关于Docker和虚拟机的比较，请参考：<a href=\"http://www.linuxprobe.com/docker-and-vm.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://www.linuxprobe.com/docker-and-vm.html</a></p><p><br /></p><p>关于Docker的标准，请参考：<a href=\"http://www.open-open.com/lib/view/open1444481959869.html\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">http://www.open-open.com/lib/view/open1444481959869.html</a></p><p><br /></p><h3 id=\"70g4ri\"><a href=\"#70g4ri\" id=\"文章小节\"></a>文章小节</h3><p><br /></p><p>全文主要对docker进行概念性的介绍，想必读到这里，docker再也不会是一个陌生的技术。无论是在针对应用的自动化运维还是PAAS的管理策略，docker都能提供一套优秀的解决方案，docker在领域内倍受青睐，让运维的工作有了前所未有的优质体验。如果你也被docker的魅力深深折服的话，欢迎加入到docker的学习行列一同探索。</p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [linux, docker]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2016-05-29\"],[\"hr\",{\"id\":\"1afwyl\"}],[\"div\",{\"data-type\":\"p\"},\"随着分布式、云计算、大数据的火热爆发，大量的云计算集群出现，光凭计算机硬件配置的已经无法再次一较高下，虚拟化成为其中最核心的技术。虚拟化既可以通过硬件模拟，也可以通过操作系统层面去实现，近年来热火朝天的容器轻量级虚拟化，保留了操作系统本身的机制和特性，而Docker在此脱颖而出。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"pkigdt\"},\"Docker的前世今生\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Docker是基于Go语言实现的云开源项目，目前归于Apache基金会并遵循Apache 2.0协议。诞生于2013年初，前身公司为dotCloud，docker开源后得到受到社会广泛的关注，docker的生态圈体系也逐渐成熟，这家公司也改名为Docker Inc，专注于Docker相关技术和产品开发。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Docker最大的目标是：“Build, Ship and Run Any App, Anywhere！”。你只需要通过对应用组件的一次的封装，就能在任意地点构建和运行你的应用。无论是一个完整的应用，或者是某些微服务，甚至到一个完整的操作系统都能成为docker的应用组件。Docker提供一个高效、敏捷和轻量的容器方案，能动态适应各种规模的系统部署需求。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Docker整个生命周期包含三部分：镜像（Image），容器（Container），仓库（Repository）。镜像和容器的关系就像程序和进程，镜像是容器运行的一大前提，而容器则是镜像的一个运行实例。仓库则是镜像的管理中心，默认的镜像仓库为Docker Hub。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"5qgumn\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282528817-dfd72221-6fc4-4fb2-9f5a-da659e85f848.png\",\"width\":747,\"height\":477,\"size\":62259,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Docker运行容器前需要检查本地是否存在对应的镜像，如果不存在，会尝试从默认的镜像仓库下载。镜像实例化之后运行着一个完整的容器，容器除了镜像本身的内容外，还提供额外的可写文件层以及相对独立的运行环境（可能是一些应用或者服务，也可能是完整的操作系统）。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"作为一个C/S模型的项目，Docker通过Docker Host进行镜像、容器、守护进程、分区等的管理，同时在Docker Client进行镜像的拉取，容器的构建等操作，通常情况下Host和Client可能会在同一台机器上。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Docker开源代码地址：\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/docker/docker\"},\"https://github.com/docker/docker\"],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"s3oqts\"},\"Docker得天独厚的优势\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"2t21gp\"},\"新的部署方式\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"假如当前有这么一个场景：“由于业务增长，公司的一个网站项目需要迁移到新的服务器”。按照传统方案，我们很可能需要作一些重复性的工作。首先需要在新的服务器上安装对应的运行环境以及对应的依赖，如LAMP（Linux+Apache+Mysql+PHP），创建对应的用户或组并进行文件权限的管理，耗费大量的精力后，还需要对该环境进行测试，最后才能部署上线。试想一下，如果这样的需求多少十几倍，这些工作需要重复的执行。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"也许你会说可以通过虚拟化的技术将整个环境打包成镜像再进行部署，加入新的服务器本身也是一台虚拟化的机器，再加上一层xen（或者其他虚拟机）去部署显然显得多余了。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"而Docker提供一种极为简便的操作方式，通过容器来进行应用打包，我们可以通过封装成镜像或是编写Dockerfile等方式来进行打包，这意味着在新的服务器上只需要启动所需要的容器即可。一来节省了大量的时间投入，而来降低了部署过程出现问题带来的隐患。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"94q1bk\"},\"运维策略的革新\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"极速交付和部署\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"使用docker，开发人员可以使用镜像快速构建一套标准的开发环境。之后的测试和上线环节完全可以复用这套镜像将应用部署到测试环境或生产环境等任意地方。Docker可以快速创建、删除容器，并保留了每一个步骤的配置和操作过程，降低开发、测试、部署的时间的同时让环境部署更容易被理解。通过简单的配置文件修改，就能轻松完成一次运行环境的迭代，所有操作都可以以增量的形式进行分发和更新，从而实现自动化和高效的容器管理。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"性能损耗低\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"事实上docker是内核级别的虚拟化，不需要额外的虚拟化管理程序，因此开启docker对性能的损耗几乎忽略不计。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"轻便易迁移拓展\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Docker几乎支持任意平台运行，无论是物理机还是虚拟化的主机，甚至个人电脑都能兼容运行docker，这种兼容性可以让应用更方便切换运行平台。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"规范化的标准\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Docker背后的标准化容器执行引擎 - runC。runC是由docker贡献后续完善的一个开放的工业化标准，其主要内容：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"strong\",{},\"操作标准化\"],\"：容器的标准化操作包括使用标准容器感觉创建、启动、停止容器，使用标准文件系统工具复制和创建容器快照，使用标准化网络工具进行下载和上传。\"]]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"strong\",{},\"内容无关\"],\"：内容无关指不管针对的具体容器内容是什么，容器标准操作执行后都能产生同样的效果。如容器可以用同样的方式上传、启动，不管是php应用还是mysql数据库服务。\"]]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"strong\",{},\"基础设施无关\"],\"：无论是个人的笔记本电脑还是AWS S3，亦或是Openstack，或者其他基础设施，都应该对支持容器的各项操作。\"]]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"strong\",{},\"为自动化量身定制\"],\"：制定容器统一标准，是的操作内容无关化、平台无关化的根本目的之一，就是为了可以使容器操作全平台自动化。\"]]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"strong\",{},\"工业级交付\"],\"：制定容器标准一大目标，就是使软件分发可以达到工业级交付成为现实。\"]]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ol\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"集群管理\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"Kubernetes是Google开源的Docker容器集群管理系统，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能，本质上可看作是基于容器技术的mini-PaaS平台。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"g911fh\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282540268-e4b8ef20-e07f-40a7-9dc4-9df606ee60f9.png\",\"width\":747,\"height\":545,\"size\":127597,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"关于Docker和虚拟机的比较，请参考：\",[\"a\",{\"title\":\"\",\"href\":\"http://www.linuxprobe.com/docker-and-vm.html\"},\"http://www.linuxprobe.com/docker-and-vm.html\"],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"关于Docker的标准，请参考：\",[\"a\",{\"title\":\"\",\"href\":\"http://www.open-open.com/lib/view/open1444481959869.html\"},\"http://www.open-open.com/lib/view/open1444481959869.html\"],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"70g4ri\"},\"文章小节\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"全文主要对docker进行概念性的介绍，想必读到这里，docker再也不会是一个陌生的技术。无论是在针对应用的自动化运维还是PAAS的管理策略，docker都能提供一套优秀的解决方案，docker在领域内倍受青睐，让运维的工作有了前所未有的优质体验。如果你也被docker的魅力深深折服的话，欢迎加入到docker的学习行列一同探索。\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T09:22:15.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:27:34.000Z",
    "updated_at": "2019-06-17T07:00:20.000Z",
    "published_at": "2018-09-15T12:44:44.000Z",
    "first_published_at": null,
    "word_count": 1840,
    "cover": null,
    "description": "tags: [linux, docker]date: 2016-05-29随着分布式、云计算、大数据的火热爆发，大量的云计算集群出现，光凭计算机硬件配置的已经无法再次一较高下，虚拟化成为其中最核心的技术。虚拟化既可以通过硬件模拟，也可以通过操作系统层面去实现，近年来热火朝天的容器轻量级虚拟化，保留了操作系统本身的机制和特性，而Docker在此脱颖而出。Docker的前世今生Docker是基于Go语言实现的云开源项目，目前归于Apache基金会并遵循Apache 2.0协议。诞生于201...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709029,
    "slug": "qgvhqy",
    "title": "CSS优先级",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [css]<br />date: 2015-04-18\n\n---\n\n<a name=\"t0ngis\"></a>\n## 优先级排序\n\n- [1位重要标志位] > [4位特殊性标志] > 声明先后顺序\n\n\n```bash\n!important > [ id > class > tag ]\n```\n\nps：使用!important可以改变优先级别为最高，其次是style对象，然后是id > class > tag ，另外，另外在同级样式按照申明的顺序后出现的样式具有高优先级。\n\n<!-- more -->\n\n- 4位特殊性标志 [0.0.0.0]：从左至右，每次给某一个位置+1，前一段对后一段具有无可辩驳的压倒性优势。无论后一位数值有多大永远无法超过前一位的1。\n\n  - 内联样式 [1.0.0.0]<br />A：<br />B：还有就是JS控制的内联样式style对象，document.getElementById(\"demo\").style.color=\"red\";<br />两者属于同一级别，不过一般情况是JS控制的内联样式优先级高，这与先后顺序申明有关系与本质无关，因为往往DOM操作是在DOM树加载完毕之后。\n\n  - ID选择器 [0.1.0.0]\n\n  - 类，属性，伪类 选择器 [0.0.1.0]\n\n  - 元素标签，伪元素 选择器 [0.0.0.1]\n\n- LVHA伪类,样式按LVHA优先级顺序从右至左覆盖，不同的顺序会产生不同的效果。<br />a:link - 默认链接样式<br />a:visited - 已访问链接样式<br />a:hover - 鼠标悬停样式<br />a:active - 鼠标点击样式\n\n\n",
    "body_draft": "tags: [css]\ndate: 2015-04-18\n\n---\n\n## <a name=\"t0ngis\"></a>优先级排序\n\n* [1位重要标志位] > [4位特殊性标志] > 声明先后顺序\n\n```Bash\n!important > [ id > class > tag ]\n```\n\nps：使用!important可以改变优先级别为最高，其次是style对象，然后是id > class > tag ，另外，另外在同级样式按照申明的顺序后出现的样式具有高优先级。\n\n<!-- more -->\n\n* 4位特殊性标志 [0.0.0.0]：从左至右，每次给某一个位置+1，前一段对后一段具有无可辩驳的压倒性优势。无论后一位数值有多大永远无法超过前一位的1。\n    * 内联样式 [1.0.0.0]\n        A：\n        B：还有就是JS控制的内联样式style对象，document.getElementById(\"demo\").style.color=\"red\";\n        两者属于同一级别，不过一般情况是JS控制的内联样式优先级高，这与先后顺序申明有关系与本质无关，因为往往DOM操作是在DOM树加载完毕之后。\n    * ID选择器 [0.1.0.0]\n    * 类，属性，伪类 选择器 [0.0.1.0]\n    * 元素标签，伪元素 选择器 [0.0.0.1]\n* LVHA伪类,样式按LVHA优先级顺序从右至左覆盖，不同的顺序会产生不同的效果。\n    a:link - 默认链接样式\n    a:visited - 已访问链接样式\n    a:hover - 鼠标悬停样式\n    a:active - 鼠标点击样式\n\n",
    "body_html": "<p>tags: [css]</p><p>date: 2015-04-18</p><hr /><h2 id=\"t0ngis\"><a href=\"#t0ngis\"></a>优先级排序</h2><p><br /></p><ul><li><p>[1位重要标志位] &gt; [4位特殊性标志] &gt; 声明先后顺序</p></li></ul><p><br /></p><pre data-lang=\"bash\"><code>!important &gt; [ id &gt; class &gt; tag ]</code></pre><p><br /></p><p>ps：使用!important可以改变优先级别为最高，其次是style对象，然后是id &gt; class &gt; tag ，另外，另外在同级样式按照申明的顺序后出现的样式具有高优先级。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><ul><li><p>4位特殊性标志 [0.0.0.0]：从左至右，每次给某一个位置+1，前一段对后一段具有无可辩驳的压倒性优势。无论后一位数值有多大永远无法超过前一位的1。</p></li></ul><ul data-lake-indent=\"1\"><li><p>内联样式 [1.0.0.0]<br />A：<br />B：还有就是JS控制的内联样式style对象，document.getElementById(&quot;demo&quot;).style.color=&quot;red&quot;;<br />两者属于同一级别，不过一般情况是JS控制的内联样式优先级高，这与先后顺序申明有关系与本质无关，因为往往DOM操作是在DOM树加载完毕之后。</p></li></ul><ul data-lake-indent=\"1\"><li><p>ID选择器 [0.1.0.0]</p></li></ul><ul data-lake-indent=\"1\"><li><p>类，属性，伪类 选择器 [0.0.1.0]</p></li></ul><ul data-lake-indent=\"1\"><li><p>元素标签，伪元素 选择器 [0.0.0.1]</p></li></ul><ul><li><p>LVHA伪类,样式按LVHA优先级顺序从右至左覆盖，不同的顺序会产生不同的效果。<br />a:link - 默认链接样式<br />a:visited - 已访问链接样式<br />a:hover - 鼠标悬停样式<br />a:active - 鼠标点击样式</p></li></ul><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [css]</p><p>date: 2015-04-18</p><card type=\"block\" name=\"hr\"></card><h2 id=\"t0ngis\"><a href=\"#t0ngis\" id=\"优先级排序\"></a>优先级排序</h2><p><br /></p><ul><li><p>[1位重要标志位] &gt; [4位特殊性标志] &gt; 声明先后顺序</p></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22add4062b%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22!important%20%3E%20%5B%20id%20%3E%20class%20%3E%20tag%20%5D%22%7D\"></card><p><br /></p><p>ps：使用!important可以改变优先级别为最高，其次是style对象，然后是id &gt; class &gt; tag ，另外，另外在同级样式按照申明的顺序后出现的样式具有高优先级。</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><ul><li><p>4位特殊性标志 [0.0.0.0]：从左至右，每次给某一个位置+1，前一段对后一段具有无可辩驳的压倒性优势。无论后一位数值有多大永远无法超过前一位的1。</p></li></ul><ul data-lake-indent=\"1\"><li><p>内联样式 [1.0.0.0]<br />A：<br />B：还有就是JS控制的内联样式style对象，document.getElementById(&quot;demo&quot;).style.color=&quot;red&quot;;<br />两者属于同一级别，不过一般情况是JS控制的内联样式优先级高，这与先后顺序申明有关系与本质无关，因为往往DOM操作是在DOM树加载完毕之后。</p></li></ul><ul data-lake-indent=\"1\"><li><p>ID选择器 [0.1.0.0]</p></li></ul><ul data-lake-indent=\"1\"><li><p>类，属性，伪类 选择器 [0.0.1.0]</p></li></ul><ul data-lake-indent=\"1\"><li><p>元素标签，伪元素 选择器 [0.0.0.1]</p></li></ul><ul><li><p>LVHA伪类,样式按LVHA优先级顺序从右至左覆盖，不同的顺序会产生不同的效果。<br />a:link - 默认链接样式<br />a:visited - 已访问链接样式<br />a:hover - 鼠标悬停样式<br />a:active - 鼠标点击样式</p></li></ul><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [css]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-04-18\"],[\"hr\",{\"id\":\"iht6vx\"}],[\"h2\",{\"id\":\"t0ngis\"},\"优先级排序\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"[1位重要标志位] > [4位特殊性标志] > 声明先后顺序\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"!important > [ id > class > tag ]\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"ps：使用!important可以改变优先级别为最高，其次是style对象，然后是id > class > tag ，另外，另外在同级样式按照申明的顺序后出现的样式具有高优先级。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"4位特殊性标志 [0.0.0.0]：从左至右，每次给某一个位置+1，前一段对后一段具有无可辩驳的压倒性优势。无论后一位数值有多大永远无法超过前一位的1。\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"内联样式 [1.0.0.0]\\nA：\\nB：还有就是JS控制的内联样式style对象，document.getElementById(\\\"demo\\\").style.color=\\\"red\\\";\\n两者属于同一级别，不过一般情况是JS控制的内联样式优先级高，这与先后顺序申明有关系与本质无关，因为往往DOM操作是在DOM树加载完毕之后。\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"ID选择器 [0.1.0.0]\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"类，属性，伪类 选择器 [0.0.1.0]\"]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"元素标签，伪元素 选择器 [0.0.0.1]\"]]]],[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"LVHA伪类,样式按LVHA优先级顺序从右至左覆盖，不同的顺序会产生不同的效果。\\na:link - 默认链接样式\\na:visited - 已访问链接样式\\na:hover - 鼠标悬停样式\\na:active - 鼠标点击样式\"]]],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:10:47.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:26:43.000Z",
    "updated_at": "2019-07-18T08:19:27.000Z",
    "published_at": "2018-09-15T08:10:47.000Z",
    "first_published_at": null,
    "word_count": 357,
    "cover": null,
    "description": "tags: [css]date: 2015-04-18优先级排序[1位重要标志位] &gt; [4位特殊性标志] &gt; 声明先后顺序!important &gt; [ id &gt; class &gt; tag ] ps：使用!important可以改变优先级别为最高，其次是style对象，然后是id &gt; class &gt; tag ，另外，另外在同级样式按照申明的顺序后出现的样式具有高优先级。&lt;!-- more --&gt;4位特殊性标志 [0.0.0....",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709028,
    "slug": "sk5uz1",
    "title": "批处理机房文件批量传输",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [bat]<br />date: 2015-10-17\n\n---\n\n<a name=\"89ucqc\"></a>\n## 题记\n\n计算机维护队将于次日在机房进行队员第一次培训会，培训会上的队员实操过程则需要使用到win7和PE镜像，工作人员（委员）不得不提前拷贝好镜像到每一台机子。于是便有了机房内通过网络批量传输文件的想法，实现之后可以大大减轻工作量，传输速度上瓶颈为100Mbps（机房网络配置），与普通USB3.0的U盘传输速率相比确实低了一大截，在传输速率上似乎不占优势，因此我们将多台主机作为源点传输数据，并行传输数据，大大提升了时间效率。\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282323573-b3ec65c0-c8fc-4dec-a92f-4da95966b6da.png#width=391)<br />\n<br /><!-- more -->\n\n<a name=\"hxqrtl\"></a>\n### 机遇阶段\n\n很凑巧，在同类型的机房中上实验课的时候一不小心执行了以下powershell指令：\n\n```\nGet-WmiObject -Class Win32_Share -Computername [computername]\n# [computername] 代表主机名\n```\n\n意外的收获，默认共享居然没有被关闭，切安全策略~[偷笑]!\n\n```\nName     Path                          Description\n----     ----                          -----------\nADMIN$   C:\\Windows                    远程管理\nC$       C:\\                           默认共享\nD$       D:\\                           默认共享\nIPC$                                   远程 IPC\n```\n\n然而不出所料，我尝试通过net use空连接到旁边的机子时，被无情的拒之门外。要知道机房的电脑都是自带默认密码的。\n\n```\nnet use z: \\\\[computername]\\D$\n\n为 '[computername]' 输入用户名:\n发生系统错误 1223。\n操作已被用户取消。\n```\n\n好吧，确实是个棘手的问题，因为不可能提前手动更改用户密码，因为机房的电脑自带还原程序（且不可恶意破坏），因此不得不废弃这个方案。于是编者剑走偏锋，掏出了一代神器[mimikatz_trunk](http://blog.gentilkiwi.com/presentations)，利用这个神器(原理是通过彩虹表破解NTLM加密口令)可以轻易获取windows系统账户的明文密码。\n\n<a name=\"uxiodh\"></a>\n#### 下载链接\n\n- [Binaires](https://github.com/gentilkiwi/mimikatz/releases/latest)\n\n\n- [Sources](https://github.com/gentilkiwi/mimikatz)\n\n\n使用说明详参[README.md](https://github.com/gentilkiwi/mimikatz/blob/master/README.md)，下载后或编译后程序目录如下：\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282348556-f8855387-6730-4b14-ae05-6d72a8fecffa.png#width=657)\n\n我们接着运行如下命令即可获得账户明文密码：\n\n```\n# 提升权限\nmimikatz # privilege::debug\nPrivilege '20' OK\n\n# 获取密码\nmimikatz # sekurlsa::logonpasswords\n```\n\n获取密码后部分结果如下：\n\n```\n# *是编者自己打上的马赛克，命令执行后输出的全为明文，下同\nAuthentication Id : 0 ; 298372 (00000000:00048d84)\nSession           : Interactive from 1\nUser Name         : ******\nDomain            : ****\nLogon Server      : (null)\nLogon Time        : 2015-10-16 20:54:11\nSID               : S-1-5-21-*******-********-*********-1004\n        msv :\n         [00000003] Primary\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Flags    : I00/N01/L00/S01\n         * NTLM     : 198469ad0**********ed7ddfadd94\n         * SHA1     : 1018ac5781ab260******8b9d57fae11d3313a86\n        tspkg :\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Password : ********\n        wdigest :\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Password : ******\n        kerberos :\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Password : (null)\n        ssp :\n        credman :\n         [00000000]\n         * Username : (null)\n         * Domain   : MicrosoftOffice16_Data:SSPI:lxstart@outlook.com\n         * Password : ******\n```\n\n<a name=\"k6o6ss\"></a>\n### 程序设计\n\n既然获取到了一台机子的明文密码（账户名默认为Administrator），由于机房采用统一镜像进行安装，因此默认账户信息完全一致，那么，就可以跳到批量传输的阶段了。那么我们来做一个详尽的规划：[篇幅有限，下面只提供关键代码]\n\n<a name=\"d8iolx\"></a>\n#### 获取局域网内的主机名列表\n\n原理：通过net view获取局域网主机列表后进行字符串过滤筛选，得到最终的主机名列表并写入hosts.ini文件。\n\n```\n(for /f \"eol=。 skip=3 tokens=1 delims=, \" %%i in ('net view') do (\n\tfor /f \"tokens=1 delims=\\ \" %%a in ('echo %%i ^| findstr ^\\') do (\n\t\techo %%a\n\t)\n)) >> hosts.ini\n```\n\n<a name=\"tnyvtu\"></a>\n#### 建立net use连接\n\n```\n# 将网络路径\\\\[hostname]\\d$映射到z:\\\nnet use z: \\\\[hostname]\\d$ \"******\" /user:\"administrator\" /persistent:yes\n```\n\n在这之前需要先释放z:原本可能存在net use连接：\n\n```\nnet use z: /delete\n```\n\n我们就可以直接通过访问z:来访问到目标机器的D盘根目录并进行文件操作了。\n\n<a name=\"xotpxv\"></a>\n#### 复制文件\n\n推荐使用xcopy命令，参数较简单易懂。\n\n```\n# 假设D:\\已有win7.iso和PE.iso\nxcopy D:\\win7.iso Z:\\\nxcopy D:\\PE.iso Z:\\\n```\n\n<a name=\"odxkpc\"></a>\n#### 批量复制\n\n由于我们已经获取到主机名列表，则我们可以串行批量复制文件。\n\n```\nfor /f  %%a in (hosts.ini) do (\n\techo 正在处理%%a\n\tcall :copyer %%a\n\t:: 删除映射，释放连接\n\tnet use z: /delete /y\n)\n\n# 定义函数\n:copyer\nnet use z: \\\\%~1\\d$ \"******\" /user:\"administrator\" /persistent:yes\nxcopy D:\\win7.iso Z:\\\nxcopy D:\\PE.iso Z:\\\n```\n\n<a name=\"850vsl\"></a>\n#### 多主机并行处理\n\n将程序放置到多台主机下运行，划分主机名列表片段到不同的主机，则可同时执行不同的文件批量复制的任务。\n\n<a name=\"zdiwbh\"></a>\n#### 最佳方案\n\n这里涉及一种类似于细胞分裂的算法技术，在上面原有的基础上添加更能提高效率的解决方案。假设每人负责部署一台主机（用于批量复制文件），复制完46台机子需要(46-6)/6=7轮，开始说表述的每台机子带宽有限（下面的流程图则以一台源主机为例解释），因此传输速度也难以提升。\n\n更合理的解决方案就是利用所有空闲切有镜像的主机的网络带宽，思路图对比大致如下：\n\n- 传统<br />\n\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282360282-26242597-1bcc-4ccf-a856-19fbd7ba6d09.png#width=686)\n\n- 并行化\n\n\n![](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282373553-b57fcc30-f2fc-4d16-b7eb-20431a7cebad.png#width=692)\n\n关键要解决的问题是需要给下一台机器发送指令，分配给每台主机最优的复制队列：通过ipc$获取远程at和time权限\n\n```\n# 建立ipc$连接\nnet use \\\\[hostname]\\ipc$ \"password\" /user:\"username\"\n\n# 获取主机时间，假设为19:00\nnet time \\\\[hostname]\n\n# at 设置命令，假设transformListFile.bat包含了计算下一台机子需要复制到的目标队列的算法\nat \\\\[hostname] 19:01 transformListFile.bat\n```\n\n",
    "body_draft": "tags: [bat]\ndate: 2015-10-17\n\n---\n\n## <a name=\"89ucqc\"></a>题记\n\n计算机维护队将于次日在机房进行队员第一次培训会，培训会上的队员实操过程则需要使用到win7和PE镜像，工作人员（委员）不得不提前拷贝好镜像到每一台机子。于是便有了机房内通过网络批量传输文件的想法，实现之后可以大大减轻工作量，传输速度上瓶颈为100Mbps（机房网络配置），与普通USB3.0的U盘传输速率相比确实低了一大截，在传输速率上似乎不占优势，因此我们将多台主机作为源点传输数据，并行传输数据，大大提升了时间效率。\n\n<div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n  <div data-type=\"p\">\n    <div id=\"sdxuoz\" data-type=\"image\" data-display=\"block\" data-align=\"center\" data-src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282323573-b3ec65c0-c8fc-4dec-a92f-4da95966b6da.png\" data-width=\"391\">\n      <img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282323573-b3ec65c0-c8fc-4dec-a92f-4da95966b6da.png\" width=\"391\" />\n    </div>\n  </div>\n  <div data-type=\"p\"></div>\n</div>\n\n<!-- more -->\n\n### <a name=\"hxqrtl\"></a>机遇阶段\n\n很凑巧，在同类型的机房中上实验课的时候一不小心执行了以下powershell指令：\n\n```\nGet-WmiObject -Class Win32_Share -Computername [computername]\n# [computername] 代表主机名\n```\n\n意外的收获，默认共享居然没有被关闭，切安全策略~[偷笑]!\n\n```\nName     Path                          Description\n----     ----                          -----------\nADMIN$   C:\\Windows                    远程管理\nC$       C:\\                           默认共享\nD$       D:\\                           默认共享\nIPC$                                   远程 IPC\n```\n\n然而不出所料，我尝试通过net use空连接到旁边的机子时，被无情的拒之门外。要知道机房的电脑都是自带默认密码的。\n\n```\nnet use z: \\\\[computername]\\D$\n\n为 '[computername]' 输入用户名:\n发生系统错误 1223。\n操作已被用户取消。\n```\n\n好吧，确实是个棘手的问题，因为不可能提前手动更改用户密码，因为机房的电脑自带还原程序（且不可恶意破坏），因此不得不废弃这个方案。于是编者剑走偏锋，掏出了一代神器[mimikatz\\_trunk](http://blog.gentilkiwi.com/presentations)，利用这个神器(原理是通过彩虹表破解NTLM加密口令)可以轻易获取windows系统账户的明文密码。\n\n#### <a name=\"uxiodh\"></a>下载链接\n\n* [Binaires](https://github.com/gentilkiwi/mimikatz/releases/latest)\n\n* [Sources](https://github.com/gentilkiwi/mimikatz)\n\n使用说明详参[README.md](https://github.com/gentilkiwi/mimikatz/blob/master/README.md)，下载后或编译后程序目录如下：\n\n\n\n![image.png | left | 657x169](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282348556-f8855387-6730-4b14-ae05-6d72a8fecffa.png \"\")\n\n\n我们接着运行如下命令即可获得账户明文密码：\n\n```\n# 提升权限\nmimikatz # privilege::debug\nPrivilege '20' OK\n\n# 获取密码\nmimikatz # sekurlsa::logonpasswords\n\n```\n\n获取密码后部分结果如下：\n\n```\n# *是编者自己打上的马赛克，命令执行后输出的全为明文，下同\nAuthentication Id : 0 ; 298372 (00000000:00048d84)\nSession           : Interactive from 1\nUser Name         : ******\nDomain            : ****\nLogon Server      : (null)\nLogon Time        : 2015-10-16 20:54:11\nSID               : S-1-5-21-*******-********-*********-1004\n        msv :\n         [00000003] Primary\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Flags    : I00/N01/L00/S01\n         * NTLM     : 198469ad0**********ed7ddfadd94\n         * SHA1     : 1018ac5781ab260******8b9d57fae11d3313a86\n        tspkg :\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Password : ********\n        wdigest :\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Password : ******\n        kerberos :\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Password : (null)\n        ssp :\n        credman :\n         [00000000]\n         * Username : (null)\n         * Domain   : MicrosoftOffice16_Data:SSPI:lxstart@outlook.com\n         * Password : ******\n\n```\n\n### <a name=\"k6o6ss\"></a>程序设计\n\n既然获取到了一台机子的明文密码（账户名默认为Administrator），由于机房采用统一镜像进行安装，因此默认账户信息完全一致，那么，就可以跳到批量传输的阶段了。那么我们来做一个详尽的规划：[篇幅有限，下面只提供关键代码]\n\n#### <a name=\"d8iolx\"></a>获取局域网内的主机名列表\n\n原理：通过net view获取局域网主机列表后进行字符串过滤筛选，得到最终的主机名列表并写入hosts.ini文件。\n\n```\n(for /f \"eol=。 skip=3 tokens=1 delims=, \" %%i in ('net view') do (\n\tfor /f \"tokens=1 delims=\\ \" %%a in ('echo %%i ^| findstr ^\\') do (\n\t\techo %%a\n\t)\n)) >> hosts.ini\n```\n\n#### <a name=\"tnyvtu\"></a>建立net use连接\n\n```\n# 将网络路径\\\\[hostname]\\d$映射到z:\\\nnet use z: \\\\[hostname]\\d$ \"******\" /user:\"administrator\" /persistent:yes\n```\n\n在这之前需要先释放z:原本可能存在net use连接：\n\n```\nnet use z: /delete\n```\n\n我们就可以直接通过访问z:来访问到目标机器的D盘根目录并进行文件操作了。\n\n#### <a name=\"xotpxv\"></a>复制文件\n\n推荐使用xcopy命令，参数较简单易懂。\n\n```\n# 假设D:\\已有win7.iso和PE.iso\nxcopy D:\\win7.iso Z:\\\nxcopy D:\\PE.iso Z:\\\n```\n\n#### <a name=\"odxkpc\"></a>批量复制\n\n由于我们已经获取到主机名列表，则我们可以串行批量复制文件。\n\n```\nfor /f  %%a in (hosts.ini) do (\n\techo 正在处理%%a\n\tcall :copyer %%a\n\t:: 删除映射，释放连接\n\tnet use z: /delete /y\n)\n\n# 定义函数\n:copyer\nnet use z: \\\\%~1\\d$ \"******\" /user:\"administrator\" /persistent:yes\nxcopy D:\\win7.iso Z:\\\nxcopy D:\\PE.iso Z:\\\n```\n\n#### <a name=\"850vsl\"></a>多主机并行处理\n\n将程序放置到多台主机下运行，划分主机名列表片段到不同的主机，则可同时执行不同的文件批量复制的任务。\n\n#### <a name=\"zdiwbh\"></a>最佳方案\n\n这里涉及一种类似于细胞分裂的算法技术，在上面原有的基础上添加更能提高效率的解决方案。假设每人负责部署一台主机（用于批量复制文件），复制完46台机子需要(46-6)/6=7轮，开始说表述的每台机子带宽有限（下面的流程图则以一台源主机为例解释），因此传输速度也难以提升。\n\n更合理的解决方案就是利用所有空闲切有镜像的主机的网络带宽，思路图对比大致如下：\n\n* 传统\n    \n\n\n\n![image.png | left | 686x459](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282360282-26242597-1bcc-4ccf-a856-19fbd7ba6d09.png \"\")\n\n\n* 并行化\n\n\n\n![image.png | left | 692x439](https://cdn.yuque.com/yuque/0/2018/png/103147/1530282373553-b57fcc30-f2fc-4d16-b7eb-20431a7cebad.png \"\")\n\n\n关键要解决的问题是需要给下一台机器发送指令，分配给每台主机最优的复制队列：通过ipc\\$获取远程at和time权限\n\n```\n# 建立ipc$连接\nnet use \\\\[hostname]\\ipc$ \"password\" /user:\"username\"\n\n# 获取主机时间，假设为19:00\nnet time \\\\[hostname]\n\n# at 设置命令，假设transformListFile.bat包含了计算下一台机子需要复制到的目标队列的算法\nat \\\\[hostname] 19:01 transformListFile.bat\n\n```\n\n",
    "body_html": "<p>tags: [bat]</p><p>date: 2015-10-17</p><hr /><h2 id=\"89ucqc\"><a href=\"#89ucqc\"></a>题记</h2><p><br /></p><p>计算机维护队将于次日在机房进行队员第一次培训会，培训会上的队员实操过程则需要使用到win7和PE镜像，工作人员（委员）不得不提前拷贝好镜像到每一台机子。于是便有了机房内通过网络批量传输文件的想法，实现之后可以大大减轻工作量，传输速度上瓶颈为100Mbps（机房网络配置），与普通USB3.0的U盘传输速率相比确实低了一大截，在传输速率上似乎不占优势，因此我们将多台主机作为源点传输数据，并行传输数据，大大提升了时间效率。</p><p><br /></p><p style=\"text-align: center;\"><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282323573-b3ec65c0-c8fc-4dec-a92f-4da95966b6da.png#width=391\" style=\"max-width: 600px; width: 391px;\" /></p><p style=\"text-align: center;\"><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"hxqrtl\"><a href=\"#hxqrtl\"></a>机遇阶段</h3><p><br /></p><p>很凑巧，在同类型的机房中上实验课的时候一不小心执行了以下powershell指令：</p><p><br /></p><pre><code>Get-WmiObject -Class Win32_Share -Computername [computername]\n# [computername] 代表主机名</code></pre><p><br /></p><p>意外的收获，默认共享居然没有被关闭，切安全策略~[偷笑]!</p><p><br /></p><pre><code>Name     Path                          Description\n----     ----                          -----------\nADMIN$   C:\\Windows                    远程管理\nC$       C:\\                           默认共享\nD$       D:\\                           默认共享\nIPC$                                   远程 IPC</code></pre><p><br /></p><p>然而不出所料，我尝试通过net use空连接到旁边的机子时，被无情的拒之门外。要知道机房的电脑都是自带默认密码的。</p><p><br /></p><pre><code>net use z: \\\\[computername]\\D$\n\n为 '[computername]' 输入用户名:\n发生系统错误 1223。\n操作已被用户取消。</code></pre><p><br /></p><p>好吧，确实是个棘手的问题，因为不可能提前手动更改用户密码，因为机房的电脑自带还原程序（且不可恶意破坏），因此不得不废弃这个方案。于是编者剑走偏锋，掏出了一代神器<a href=\"http://blog.gentilkiwi.com/presentations\" target=\"_blank\">mimikatz_trunk</a>，利用这个神器(原理是通过彩虹表破解NTLM加密口令)可以轻易获取windows系统账户的明文密码。</p><p><br /></p><h4 id=\"uxiodh\"><a href=\"#uxiodh\"></a>下载链接</h4><p><br /></p><ul><li><p><a href=\"https://github.com/gentilkiwi/mimikatz/releases/latest\" target=\"_blank\">Binaires</a></p></li></ul><p><br /></p><ul><li><p><a href=\"https://github.com/gentilkiwi/mimikatz\" target=\"_blank\">Sources</a></p></li></ul><p><br /></p><p>使用说明详参<a href=\"https://github.com/gentilkiwi/mimikatz/blob/master/README.md\" target=\"_blank\">README.md</a>，下载后或编译后程序目录如下：</p><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282348556-f8855387-6730-4b14-ae05-6d72a8fecffa.png#width=657\" style=\"max-width: 600px; width: 657px;\" /></p><p><br /></p><p>我们接着运行如下命令即可获得账户明文密码：</p><p><br /></p><pre><code># 提升权限\nmimikatz # privilege::debug\nPrivilege '20' OK\n\n# 获取密码\nmimikatz # sekurlsa::logonpasswords</code></pre><p><br /></p><p>获取密码后部分结果如下：</p><p><br /></p><pre><code># *是编者自己打上的马赛克，命令执行后输出的全为明文，下同\nAuthentication Id : 0 ; 298372 (00000000:00048d84)\nSession           : Interactive from 1\nUser Name         : ******\nDomain            : ****\nLogon Server      : (null)\nLogon Time        : 2015-10-16 20:54:11\nSID               : S-1-5-21-*******-********-*********-1004\n        msv :\n         [00000003] Primary\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Flags    : I00/N01/L00/S01\n         * NTLM     : 198469ad0**********ed7ddfadd94\n         * SHA1     : 1018ac5781ab260******8b9d57fae11d3313a86\n        tspkg :\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Password : ********\n        wdigest :\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Password : ******\n        kerberos :\n         * Username : ******@outlook.com\n         * Domain   : MicrosoftAccount\n         * Password : (null)\n        ssp :\n        credman :\n         [00000000]\n         * Username : (null)\n         * Domain   : MicrosoftOffice16_Data:SSPI:lxstart@outlook.com\n         * Password : ******</code></pre><p><br /></p><h3 id=\"k6o6ss\"><a href=\"#k6o6ss\"></a>程序设计</h3><p><br /></p><p>既然获取到了一台机子的明文密码（账户名默认为Administrator），由于机房采用统一镜像进行安装，因此默认账户信息完全一致，那么，就可以跳到批量传输的阶段了。那么我们来做一个详尽的规划：[篇幅有限，下面只提供关键代码]</p><p><br /></p><h4 id=\"d8iolx\"><a href=\"#d8iolx\"></a>获取局域网内的主机名列表</h4><p><br /></p><p>原理：通过net view获取局域网主机列表后进行字符串过滤筛选，得到最终的主机名列表并写入hosts.ini文件。</p><p><br /></p><pre><code>(for /f &quot;eol=。 skip=3 tokens=1 delims=, &quot; %%i in ('net view') do (\n\tfor /f &quot;tokens=1 delims=\\ &quot; %%a in ('echo %%i ^| findstr ^\\') do (\n\t\techo %%a\n\t)\n)) &gt;&gt; hosts.ini</code></pre><p><br /></p><h4 id=\"tnyvtu\"><a href=\"#tnyvtu\"></a>建立net use连接</h4><p><br /></p><pre><code># 将网络路径\\\\[hostname]\\d$映射到z:\\\nnet use z: \\\\[hostname]\\d$ &quot;******&quot; /user:&quot;administrator&quot; /persistent:yes</code></pre><p><br /></p><p>在这之前需要先释放z:原本可能存在net use连接：</p><p><br /></p><pre><code>net use z: /delete</code></pre><p><br /></p><p>我们就可以直接通过访问z:来访问到目标机器的D盘根目录并进行文件操作了。</p><p><br /></p><h4 id=\"xotpxv\"><a href=\"#xotpxv\"></a>复制文件</h4><p><br /></p><p>推荐使用xcopy命令，参数较简单易懂。</p><p><br /></p><pre><code># 假设D:\\已有win7.iso和PE.iso\nxcopy D:\\win7.iso Z:\\\nxcopy D:\\PE.iso Z:\\</code></pre><p><br /></p><h4 id=\"odxkpc\"><a href=\"#odxkpc\"></a>批量复制</h4><p><br /></p><p>由于我们已经获取到主机名列表，则我们可以串行批量复制文件。</p><p><br /></p><pre><code>for /f  %%a in (hosts.ini) do (\n\techo 正在处理%%a\n\tcall :copyer %%a\n\t:: 删除映射，释放连接\n\tnet use z: /delete /y\n)\n\n# 定义函数\n:copyer\nnet use z: \\\\%~1\\d$ &quot;******&quot; /user:&quot;administrator&quot; /persistent:yes\nxcopy D:\\win7.iso Z:\\\nxcopy D:\\PE.iso Z:\\</code></pre><p><br /></p><h4 id=\"850vsl\"><a href=\"#850vsl\"></a>多主机并行处理</h4><p><br /></p><p>将程序放置到多台主机下运行，划分主机名列表片段到不同的主机，则可同时执行不同的文件批量复制的任务。</p><p><br /></p><h4 id=\"zdiwbh\"><a href=\"#zdiwbh\"></a>最佳方案</h4><p><br /></p><p>这里涉及一种类似于细胞分裂的算法技术，在上面原有的基础上添加更能提高效率的解决方案。假设每人负责部署一台主机（用于批量复制文件），复制完46台机子需要(46-6)/6=7轮，开始说表述的每台机子带宽有限（下面的流程图则以一台源主机为例解释），因此传输速度也难以提升。</p><p><br /></p><p>更合理的解决方案就是利用所有空闲切有镜像的主机的网络带宽，思路图对比大致如下：</p><p><br /></p><ul><li><p>传统<br /></p></li></ul><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282360282-26242597-1bcc-4ccf-a856-19fbd7ba6d09.png#width=686\" style=\"max-width: 600px; width: 686px;\" /></p><p><br /></p><ul><li><p>并行化</p></li></ul><p><br /></p><p><img src=\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282373553-b57fcc30-f2fc-4d16-b7eb-20431a7cebad.png#width=692\" style=\"max-width: 600px; width: 692px;\" /></p><p><br /></p><p>关键要解决的问题是需要给下一台机器发送指令，分配给每台主机最优的复制队列：通过ipc$获取远程at和time权限</p><p><br /></p><pre><code># 建立ipc$连接\nnet use \\\\[hostname]\\ipc$ &quot;password&quot; /user:&quot;username&quot;\n\n# 获取主机时间，假设为19:00\nnet time \\\\[hostname]\n\n# at 设置命令，假设transformListFile.bat包含了计算下一台机子需要复制到的目标队列的算法\nat \\\\[hostname] 19:01 transformListFile.bat</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [bat]</p><p>date: 2015-10-17</p><card type=\"block\" name=\"hr\"></card><h2 id=\"89ucqc\"><a href=\"#89ucqc\" id=\"题记\"></a>题记</h2><p><br /></p><p>计算机维护队将于次日在机房进行队员第一次培训会，培训会上的队员实操过程则需要使用到win7和PE镜像，工作人员（委员）不得不提前拷贝好镜像到每一台机子。于是便有了机房内通过网络批量传输文件的想法，实现之后可以大大减轻工作量，传输速度上瓶颈为100Mbps（机房网络配置），与普通USB3.0的U盘传输速率相比确实低了一大截，在传输速率上似乎不占优势，因此我们将多台主机作为源点传输数据，并行传输数据，大大提升了时间效率。</p><p><br /></p><p style=\"text-align:center\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282323573-b3ec65c0-c8fc-4dec-a92f-4da95966b6da.png%22%2C%22width%22%3A391%7D\"></card></p><p style=\"text-align:center\"><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h3 id=\"hxqrtl\"><a href=\"#hxqrtl\" id=\"机遇阶段\"></a>机遇阶段</h3><p><br /></p><p>很凑巧，在同类型的机房中上实验课的时候一不小心执行了以下powershell指令：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2294bbd1b2%22%2C%22code%22%3A%22Get-WmiObject%20-Class%20Win32_Share%20-Computername%20%5Bcomputername%5D%5Cn%23%20%5Bcomputername%5D%20%E4%BB%A3%E8%A1%A8%E4%B8%BB%E6%9C%BA%E5%90%8D%22%7D\"></card><p><br /></p><p>意外的收获，默认共享居然没有被关闭，切安全策略~[偷笑]!</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22cbfe8c49%22%2C%22code%22%3A%22Name%20%20%20%20%20Path%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Description%5Cn----%20%20%20%20%20----%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20-----------%5CnADMIN%24%20%20%20C%3A%5C%5CWindows%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%5CnC%24%20%20%20%20%20%20%20C%3A%5C%5C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E9%BB%98%E8%AE%A4%E5%85%B1%E4%BA%AB%5CnD%24%20%20%20%20%20%20%20D%3A%5C%5C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E9%BB%98%E8%AE%A4%E5%85%B1%E4%BA%AB%5CnIPC%24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E8%BF%9C%E7%A8%8B%20IPC%22%7D\"></card><p><br /></p><p>然而不出所料，我尝试通过net use空连接到旁边的机子时，被无情的拒之门外。要知道机房的电脑都是自带默认密码的。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22a7dde544%22%2C%22code%22%3A%22net%20use%20z%3A%20%5C%5C%5C%5C%5Bcomputername%5D%5C%5CD%24%5Cn%5Cn%E4%B8%BA%20'%5Bcomputername%5D'%20%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%3A%5Cn%E5%8F%91%E7%94%9F%E7%B3%BB%E7%BB%9F%E9%94%99%E8%AF%AF%201223%E3%80%82%5Cn%E6%93%8D%E4%BD%9C%E5%B7%B2%E8%A2%AB%E7%94%A8%E6%88%B7%E5%8F%96%E6%B6%88%E3%80%82%22%7D\"></card><p><br /></p><p>好吧，确实是个棘手的问题，因为不可能提前手动更改用户密码，因为机房的电脑自带还原程序（且不可恶意破坏），因此不得不废弃这个方案。于是编者剑走偏锋，掏出了一代神器<a href=\"http://blog.gentilkiwi.com/presentations\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">mimikatz_trunk</a>，利用这个神器(原理是通过彩虹表破解NTLM加密口令)可以轻易获取windows系统账户的明文密码。</p><p><br /></p><h4 id=\"uxiodh\"><a href=\"#uxiodh\" id=\"下载链接\"></a>下载链接</h4><p><br /></p><ul><li><p><a href=\"https://github.com/gentilkiwi/mimikatz/releases/latest\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Binaires</a></p></li></ul><p><br /></p><ul><li><p><a href=\"https://github.com/gentilkiwi/mimikatz\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Sources</a></p></li></ul><p><br /></p><p>使用说明详参<a href=\"https://github.com/gentilkiwi/mimikatz/blob/master/README.md\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">README.md</a>，下载后或编译后程序目录如下：</p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282348556-f8855387-6730-4b14-ae05-6d72a8fecffa.png%22%2C%22width%22%3A657%7D\"></card></p><p><br /></p><p>我们接着运行如下命令即可获得账户明文密码：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22e79e3be2%22%2C%22code%22%3A%22%23%20%E6%8F%90%E5%8D%87%E6%9D%83%E9%99%90%5Cnmimikatz%20%23%20privilege%3A%3Adebug%5CnPrivilege%20'20'%20OK%5Cn%5Cn%23%20%E8%8E%B7%E5%8F%96%E5%AF%86%E7%A0%81%5Cnmimikatz%20%23%20sekurlsa%3A%3Alogonpasswords%22%7D\"></card><p><br /></p><p>获取密码后部分结果如下：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%228c963ecd%22%2C%22code%22%3A%22%23%20*%E6%98%AF%E7%BC%96%E8%80%85%E8%87%AA%E5%B7%B1%E6%89%93%E4%B8%8A%E7%9A%84%E9%A9%AC%E8%B5%9B%E5%85%8B%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%90%8E%E8%BE%93%E5%87%BA%E7%9A%84%E5%85%A8%E4%B8%BA%E6%98%8E%E6%96%87%EF%BC%8C%E4%B8%8B%E5%90%8C%5CnAuthentication%20Id%20%3A%200%20%3B%20298372%20(00000000%3A00048d84)%5CnSession%20%20%20%20%20%20%20%20%20%20%20%3A%20Interactive%20from%201%5CnUser%20Name%20%20%20%20%20%20%20%20%20%3A%20******%5CnDomain%20%20%20%20%20%20%20%20%20%20%20%20%3A%20****%5CnLogon%20Server%20%20%20%20%20%20%3A%20(null)%5CnLogon%20Time%20%20%20%20%20%20%20%20%3A%202015-10-16%2020%3A54%3A11%5CnSID%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%20S-1-5-21-*******-********-*********-1004%5Cn%20%20%20%20%20%20%20%20msv%20%3A%5Cn%20%20%20%20%20%20%20%20%20%5B00000003%5D%20Primary%5Cn%20%20%20%20%20%20%20%20%20*%20Username%20%3A%20******%40outlook.com%5Cn%20%20%20%20%20%20%20%20%20*%20Domain%20%20%20%3A%20MicrosoftAccount%5Cn%20%20%20%20%20%20%20%20%20*%20Flags%20%20%20%20%3A%20I00%2FN01%2FL00%2FS01%5Cn%20%20%20%20%20%20%20%20%20*%20NTLM%20%20%20%20%20%3A%20198469ad0**********ed7ddfadd94%5Cn%20%20%20%20%20%20%20%20%20*%20SHA1%20%20%20%20%20%3A%201018ac5781ab260******8b9d57fae11d3313a86%5Cn%20%20%20%20%20%20%20%20tspkg%20%3A%5Cn%20%20%20%20%20%20%20%20%20*%20Username%20%3A%20******%40outlook.com%5Cn%20%20%20%20%20%20%20%20%20*%20Domain%20%20%20%3A%20MicrosoftAccount%5Cn%20%20%20%20%20%20%20%20%20*%20Password%20%3A%20********%5Cn%20%20%20%20%20%20%20%20wdigest%20%3A%5Cn%20%20%20%20%20%20%20%20%20*%20Username%20%3A%20******%40outlook.com%5Cn%20%20%20%20%20%20%20%20%20*%20Domain%20%20%20%3A%20MicrosoftAccount%5Cn%20%20%20%20%20%20%20%20%20*%20Password%20%3A%20******%5Cn%20%20%20%20%20%20%20%20kerberos%20%3A%5Cn%20%20%20%20%20%20%20%20%20*%20Username%20%3A%20******%40outlook.com%5Cn%20%20%20%20%20%20%20%20%20*%20Domain%20%20%20%3A%20MicrosoftAccount%5Cn%20%20%20%20%20%20%20%20%20*%20Password%20%3A%20(null)%5Cn%20%20%20%20%20%20%20%20ssp%20%3A%5Cn%20%20%20%20%20%20%20%20credman%20%3A%5Cn%20%20%20%20%20%20%20%20%20%5B00000000%5D%5Cn%20%20%20%20%20%20%20%20%20*%20Username%20%3A%20(null)%5Cn%20%20%20%20%20%20%20%20%20*%20Domain%20%20%20%3A%20MicrosoftOffice16_Data%3ASSPI%3Alxstart%40outlook.com%5Cn%20%20%20%20%20%20%20%20%20*%20Password%20%3A%20******%22%7D\"></card><p><br /></p><h3 id=\"k6o6ss\"><a href=\"#k6o6ss\" id=\"程序设计\"></a>程序设计</h3><p><br /></p><p>既然获取到了一台机子的明文密码（账户名默认为Administrator），由于机房采用统一镜像进行安装，因此默认账户信息完全一致，那么，就可以跳到批量传输的阶段了。那么我们来做一个详尽的规划：[篇幅有限，下面只提供关键代码]</p><p><br /></p><h4 id=\"d8iolx\"><a href=\"#d8iolx\" id=\"获取局域网内的主机名列表\"></a>获取局域网内的主机名列表</h4><p><br /></p><p>原理：通过net view获取局域网主机列表后进行字符串过滤筛选，得到最终的主机名列表并写入hosts.ini文件。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2269b941a3%22%2C%22code%22%3A%22(for%20%2Ff%20%5C%22eol%3D%E3%80%82%20skip%3D3%20tokens%3D1%20delims%3D%2C%20%5C%22%20%25%25i%20in%20('net%20view')%20do%20(%5Cn%5Ctfor%20%2Ff%20%5C%22tokens%3D1%20delims%3D%5C%5C%20%5C%22%20%25%25a%20in%20('echo%20%25%25i%20%5E%7C%20findstr%20%5E%5C%5C')%20do%20(%5Cn%5Ct%5Ctecho%20%25%25a%5Cn%5Ct)%5Cn))%20%3E%3E%20hosts.ini%22%7D\"></card><p><br /></p><h4 id=\"tnyvtu\"><a href=\"#tnyvtu\" id=\"建立net-use连接\"></a>建立net use连接</h4><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22709ced8c%22%2C%22code%22%3A%22%23%20%E5%B0%86%E7%BD%91%E7%BB%9C%E8%B7%AF%E5%BE%84%5C%5C%5C%5C%5Bhostname%5D%5C%5Cd%24%E6%98%A0%E5%B0%84%E5%88%B0z%3A%5C%5C%5Cnnet%20use%20z%3A%20%5C%5C%5C%5C%5Bhostname%5D%5C%5Cd%24%20%5C%22******%5C%22%20%2Fuser%3A%5C%22administrator%5C%22%20%2Fpersistent%3Ayes%22%7D\"></card><p><br /></p><p>在这之前需要先释放z:原本可能存在net use连接：</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22a6048557%22%2C%22code%22%3A%22net%20use%20z%3A%20%2Fdelete%22%7D\"></card><p><br /></p><p>我们就可以直接通过访问z:来访问到目标机器的D盘根目录并进行文件操作了。</p><p><br /></p><h4 id=\"xotpxv\"><a href=\"#xotpxv\" id=\"复制文件\"></a>复制文件</h4><p><br /></p><p>推荐使用xcopy命令，参数较简单易懂。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%226b0957d3%22%2C%22code%22%3A%22%23%20%E5%81%87%E8%AE%BED%3A%5C%5C%E5%B7%B2%E6%9C%89win7.iso%E5%92%8CPE.iso%5Cnxcopy%20D%3A%5C%5Cwin7.iso%20Z%3A%5C%5C%5Cnxcopy%20D%3A%5C%5CPE.iso%20Z%3A%5C%5C%22%7D\"></card><p><br /></p><h4 id=\"odxkpc\"><a href=\"#odxkpc\" id=\"批量复制\"></a>批量复制</h4><p><br /></p><p>由于我们已经获取到主机名列表，则我们可以串行批量复制文件。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%220378175a%22%2C%22code%22%3A%22for%20%2Ff%20%20%25%25a%20in%20(hosts.ini)%20do%20(%5Cn%5Ctecho%20%E6%AD%A3%E5%9C%A8%E5%A4%84%E7%90%86%25%25a%5Cn%5Ctcall%20%3Acopyer%20%25%25a%5Cn%5Ct%3A%3A%20%E5%88%A0%E9%99%A4%E6%98%A0%E5%B0%84%EF%BC%8C%E9%87%8A%E6%94%BE%E8%BF%9E%E6%8E%A5%5Cn%5Ctnet%20use%20z%3A%20%2Fdelete%20%2Fy%5Cn)%5Cn%5Cn%23%20%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%5Cn%3Acopyer%5Cnnet%20use%20z%3A%20%5C%5C%5C%5C%25~1%5C%5Cd%24%20%5C%22******%5C%22%20%2Fuser%3A%5C%22administrator%5C%22%20%2Fpersistent%3Ayes%5Cnxcopy%20D%3A%5C%5Cwin7.iso%20Z%3A%5C%5C%5Cnxcopy%20D%3A%5C%5CPE.iso%20Z%3A%5C%5C%22%7D\"></card><p><br /></p><h4 id=\"850vsl\"><a href=\"#850vsl\" id=\"多主机并行处理\"></a>多主机并行处理</h4><p><br /></p><p>将程序放置到多台主机下运行，划分主机名列表片段到不同的主机，则可同时执行不同的文件批量复制的任务。</p><p><br /></p><h4 id=\"zdiwbh\"><a href=\"#zdiwbh\" id=\"最佳方案\"></a>最佳方案</h4><p><br /></p><p>这里涉及一种类似于细胞分裂的算法技术，在上面原有的基础上添加更能提高效率的解决方案。假设每人负责部署一台主机（用于批量复制文件），复制完46台机子需要(46-6)/6=7轮，开始说表述的每台机子带宽有限（下面的流程图则以一台源主机为例解释），因此传输速度也难以提升。</p><p><br /></p><p>更合理的解决方案就是利用所有空闲切有镜像的主机的网络带宽，思路图对比大致如下：</p><p><br /></p><ul><li><p>传统<br /></p></li></ul><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282360282-26242597-1bcc-4ccf-a856-19fbd7ba6d09.png%22%2C%22width%22%3A686%7D\"></card></p><p><br /></p><ul><li><p>并行化</p></li></ul><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.yuque.com%2Fyuque%2F0%2F2018%2Fpng%2F103147%2F1530282373553-b57fcc30-f2fc-4d16-b7eb-20431a7cebad.png%22%2C%22width%22%3A692%7D\"></card></p><p><br /></p><p>关键要解决的问题是需要给下一台机器发送指令，分配给每台主机最优的复制队列：通过ipc$获取远程at和time权限</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22dea51036%22%2C%22code%22%3A%22%23%20%E5%BB%BA%E7%AB%8Bipc%24%E8%BF%9E%E6%8E%A5%5Cnnet%20use%20%5C%5C%5C%5C%5Bhostname%5D%5C%5Cipc%24%20%5C%22password%5C%22%20%2Fuser%3A%5C%22username%5C%22%5Cn%5Cn%23%20%E8%8E%B7%E5%8F%96%E4%B8%BB%E6%9C%BA%E6%97%B6%E9%97%B4%EF%BC%8C%E5%81%87%E8%AE%BE%E4%B8%BA19%3A00%5Cnnet%20time%20%5C%5C%5C%5C%5Bhostname%5D%5Cn%5Cn%23%20at%20%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4%EF%BC%8C%E5%81%87%E8%AE%BEtransformListFile.bat%E5%8C%85%E5%90%AB%E4%BA%86%E8%AE%A1%E7%AE%97%E4%B8%8B%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%AD%90%E9%9C%80%E8%A6%81%E5%A4%8D%E5%88%B6%E5%88%B0%E7%9A%84%E7%9B%AE%E6%A0%87%E9%98%9F%E5%88%97%E7%9A%84%E7%AE%97%E6%B3%95%5Cnat%20%5C%5C%5C%5C%5Bhostname%5D%2019%3A01%20transformListFile.bat%22%7D\"></card><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [bat]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-10-17\"],[\"hr\",{\"id\":\"cgguyc\"}],[\"h2\",{\"id\":\"89ucqc\"},\"题记\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"计算机维护队将于次日在机房进行队员第一次培训会，培训会上的队员实操过程则需要使用到win7和PE镜像，工作人员（委员）不得不提前拷贝好镜像到每一台机子。于是便有了机房内通过网络批量传输文件的想法，实现之后可以大大减轻工作量，传输速度上瓶颈为100Mbps（机房网络配置），与普通USB3.0的U盘传输速率相比确实低了一大截，在传输速率上似乎不占优势，因此我们将多台主机作为源点传输数据，并行传输数据，大大提升了时间效率。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"alignment\",\"data-value\":\"center\"},[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"sdxuoz\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282323573-b3ec65c0-c8fc-4dec-a92f-4da95966b6da.png\",\"width\":391,\"height\":220,\"size\":136354,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"center\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"]],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"hxqrtl\"},\"机遇阶段\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"很凑巧，在同类型的机房中上实验课的时候一不小心执行了以下powershell指令：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"Get-WmiObject -Class Win32_Share -Computername [computername]\\n\",\"# [computername] 代表主机名\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"意外的收获，默认共享居然没有被关闭，切安全策略~[偷笑]!\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"Name     Path                          Description\\n\",\"----     ----                          -----------\\n\",\"ADMIN$   C:\\\\Windows                    远程管理\\n\",\"C$       C:\\\\                           默认共享\\n\",\"D$       D:\\\\                           默认共享\\n\",\"IPC$                                   远程 IPC\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"然而不出所料，我尝试通过net use空连接到旁边的机子时，被无情的拒之门外。要知道机房的电脑都是自带默认密码的。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"net use z: \\\\\\\\[computername]\\\\D$\\n\",\"\\n\",\"为 '[computername]' 输入用户名:\\n\",\"发生系统错误 1223。\\n\",\"操作已被用户取消。\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"好吧，确实是个棘手的问题，因为不可能提前手动更改用户密码，因为机房的电脑自带还原程序（且不可恶意破坏），因此不得不废弃这个方案。于是编者剑走偏锋，掏出了一代神器\",[\"a\",{\"title\":\"\",\"href\":\"http://blog.gentilkiwi.com/presentations\"},\"mimikatz_trunk\"],\"，利用这个神器(原理是通过彩虹表破解NTLM加密口令)可以轻易获取windows系统账户的明文密码。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"uxiodh\"},\"下载链接\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/gentilkiwi/mimikatz/releases/latest\"},\"Binaires\"],\"\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/gentilkiwi/mimikatz\"},\"Sources\"],\"\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"使用说明详参\",[\"a\",{\"title\":\"\",\"href\":\"https://github.com/gentilkiwi/mimikatz/blob/master/README.md\"},\"README.md\"],\"，下载后或编译后程序目录如下：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"b5zudp\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282348556-f8855387-6730-4b14-ae05-6d72a8fecffa.png\",\"width\":657,\"height\":169,\"size\":20809,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"我们接着运行如下命令即可获得账户明文密码：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"# 提升权限\\n\",\"mimikatz # privilege::debug\\n\",\"Privilege '20' OK\\n\",\"\\n\",\"# 获取密码\\n\",\"mimikatz # sekurlsa::logonpasswords\\n\",\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"获取密码后部分结果如下：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"# *是编者自己打上的马赛克，命令执行后输出的全为明文，下同\\n\",\"Authentication Id : 0 ; 298372 (00000000:00048d84)\\n\",\"Session           : Interactive from 1\\n\",\"User Name         : ******\\n\",\"Domain            : ****\\n\",\"Logon Server      : (null)\\n\",\"Logon Time        : 2015-10-16 20:54:11\\n\",\"SID               : S-1-5-21-*******-********-*********-1004\\n\",\"        msv :\\n\",\"         [00000003] Primary\\n\",\"         * Username : ******@outlook.com\\n\",\"         * Domain   : MicrosoftAccount\\n\",\"         * Flags    : I00/N01/L00/S01\\n\",\"         * NTLM     : 198469ad0**********ed7ddfadd94\\n\",\"         * SHA1     : 1018ac5781ab260******8b9d57fae11d3313a86\\n\",\"        tspkg :\\n\",\"         * Username : ******@outlook.com\\n\",\"         * Domain   : MicrosoftAccount\\n\",\"         * Password : ********\\n\",\"        wdigest :\\n\",\"         * Username : ******@outlook.com\\n\",\"         * Domain   : MicrosoftAccount\\n\",\"         * Password : ******\\n\",\"        kerberos :\\n\",\"         * Username : ******@outlook.com\\n\",\"         * Domain   : MicrosoftAccount\\n\",\"         * Password : (null)\\n\",\"        ssp :\\n\",\"        credman :\\n\",\"         [00000000]\\n\",\"         * Username : (null)\\n\",\"         * Domain   : MicrosoftOffice16_Data:SSPI:lxstart@outlook.com\\n\",\"         * Password : ******\\n\",\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"k6o6ss\"},\"程序设计\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"既然获取到了一台机子的明文密码（账户名默认为Administrator），由于机房采用统一镜像进行安装，因此默认账户信息完全一致，那么，就可以跳到批量传输的阶段了。那么我们来做一个详尽的规划：[篇幅有限，下面只提供关键代码]\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"d8iolx\"},\"获取局域网内的主机名列表\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"原理：通过net view获取局域网主机列表后进行字符串过滤筛选，得到最终的主机名列表并写入hosts.ini文件。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"(for /f \\\"eol=。 skip=3 tokens=1 delims=, \\\" %%i in ('net view') do (\\n\",\"\\tfor /f \\\"tokens=1 delims=\\\\ \\\" %%a in ('echo %%i ^| findstr ^\\\\') do (\\n\",\"\\t\\techo %%a\\n\",\"\\t)\\n\",\")) >> hosts.ini\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"tnyvtu\"},\"建立net use连接\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"# 将网络路径\\\\\\\\[hostname]\\\\d$映射到z:\\\\\\n\",\"net use z: \\\\\\\\[hostname]\\\\d$ \\\"******\\\" /user:\\\"administrator\\\" /persistent:yes\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"在这之前需要先释放z:原本可能存在net use连接：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"net use z: /delete\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"我们就可以直接通过访问z:来访问到目标机器的D盘根目录并进行文件操作了。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"xotpxv\"},\"复制文件\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"推荐使用xcopy命令，参数较简单易懂。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"# 假设D:\\\\已有win7.iso和PE.iso\\n\",\"xcopy D:\\\\win7.iso Z:\\\\\\n\",\"xcopy D:\\\\PE.iso Z:\\\\\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"odxkpc\"},\"批量复制\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"由于我们已经获取到主机名列表，则我们可以串行批量复制文件。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"for /f  %%a in (hosts.ini) do (\\n\",\"\\techo 正在处理%%a\\n\",\"\\tcall :copyer %%a\\n\",\"\\t:: 删除映射，释放连接\\n\",\"\\tnet use z: /delete /y\\n\",\")\\n\",\"\\n\",\"# 定义函数\\n\",\":copyer\\n\",\"net use z: \\\\\\\\%~1\\\\d$ \\\"******\\\" /user:\\\"administrator\\\" /persistent:yes\\n\",\"xcopy D:\\\\win7.iso Z:\\\\\\n\",\"xcopy D:\\\\PE.iso Z:\\\\\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"850vsl\"},\"多主机并行处理\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"将程序放置到多台主机下运行，划分主机名列表片段到不同的主机，则可同时执行不同的文件批量复制的任务。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h4\",{\"id\":\"zdiwbh\"},\"最佳方案\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"这里涉及一种类似于细胞分裂的算法技术，在上面原有的基础上添加更能提高效率的解决方案。假设每人负责部署一台主机（用于批量复制文件），复制完46台机子需要(46-6)/6=7轮，开始说表述的每台机子带宽有限（下面的流程图则以一台源主机为例解释），因此传输速度也难以提升。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"更合理的解决方案就是利用所有空闲切有镜像的主机的网络带宽，思路图对比大致如下：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"传统\\n\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"8q2xqq\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282360282-26242597-1bcc-4ccf-a856-19fbd7ba6d09.png\",\"width\":686,\"height\":459,\"size\":22238,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"并行化\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"\",[\"img\",{\"id\":\"hk5dxe\",\"name\":\"image.png\",\"caption\":\"\",\"src\":\"https://cdn.yuque.com/yuque/0/2018/png/103147/1530282373553-b57fcc30-f2fc-4d16-b7eb-20431a7cebad.png\",\"width\":692,\"height\":439,\"size\":22866,\"type\":\"image/png\",\"progress\":{\"percent\":100},\"status\":2,\"data-align\":\"left\",\"data-display\":\"block\"}],\"\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"关键要解决的问题是需要给下一台机器发送指令，分配给每台主机最优的复制队列：通过ipc$获取远程at和time权限\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"# 建立ipc$连接\\n\",\"net use \\\\\\\\[hostname]\\\\ipc$ \\\"password\\\" /user:\\\"username\\\"\\n\",\"\\n\",\"# 获取主机时间，假设为19:00\\n\",\"net time \\\\\\\\[hostname]\\n\",\"\\n\",\"# at 设置命令，假设transformListFile.bat包含了计算下一台机子需要复制到的目标队列的算法\\n\",\"at \\\\\\\\[hostname] 19:01 transformListFile.bat\\n\",\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T09:27:30.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:20:43.000Z",
    "updated_at": "2019-05-21T01:56:03.000Z",
    "published_at": "2018-09-15T09:27:30.000Z",
    "first_published_at": null,
    "word_count": 1389,
    "cover": null,
    "description": "tags: [bat]date: 2015-10-17题记计算机维护队将于次日在机房进行队员第一次培训会，培训会上的队员实操过程则需要使用到win7和PE镜像，工作人员（委员）不得不提前拷贝好镜像到每一台机子。于是便有了机房内通过网络批量传输文件的想法，实现之后可以大大减轻工作量，传输速度上瓶颈为100Mbps（机房网络配置），与普通USB3.0的U盘传输速率相比确实低了一大截，在传输速率上似乎不占优势，因此我们将多台主机作为源点传输数据，并行传输数据，大大提升了时间效率。[图片]&lt;!-- more...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709027,
    "slug": "uozvfw",
    "title": "批处理模拟守护进程",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [bat]<br />date: 2015-01-23\n\n---\n\n<a name=\"bnuhky\"></a>\n### 原理\n后台监听任务管理器列表中是否存在被守护的进程，_核心代码如下：_\n\n```\n::守护chrome.exe进程\ntasklist | findstr \"chrome.exe\" || start \"%ProgramFiles%\\Google\\Chrome\\Applicationchrome\\chrome.exe\"\n```\n\n<a name=\"zwh7oo\"></a>\n### 主要知识点\n\n- 主要运用到管道符号\"|\"，配合findstr寻找并判断系统是否运行着\"chrome.exe\"，\"||\"连接符表示\"finstr\"未找到合适的进程，将执行后面的启动\"chrome.exe\"语句。\n\n\n<!-- more -->\n\n<a name=\"i601vn\"></a>\n## 源码\n\n下面是一则源码，用于批量打开网页，并且在浏览器关闭后循环这个过程。【可拓展用途】\n\n```bash\n@echo off\ntitle QAQ\nsetlocal enabledelayedexpansion\npushd %~dp0\n:start\nset /a index=0\nfor /f %%a in (config.ini) do (\n\tping %%a -n 1 > nul && (\n\t\tstart \"%ProgramFiles%\\Google\\Chrome\\Applicationchrome\\chrome.exe\" http://%%a\n\t\techo \t   !date! !time!: sent request to %%a\n\t\techo !date! !time!: sent request to %%a >> log.txt\n\t\tset /a index+=1\n\t\tping 127.1 -n 1 > nul\n\t)\n)\necho= >> log.txt\n\n:wait\ntasklist | findstr \"chrome.exe\" > nul || goto start\nping 127.1 -n 5 > nul\ngoto wait\n```\n\n",
    "body_draft": "tags: [bat]\ndate: 2015-01-23\n\n---\n\n### <a name=\"bnuhky\"></a>原理\n后台监听任务管理器列表中是否存在被守护的进程，*核心代码如下：*\n\n```\n::守护chrome.exe进程\ntasklist | findstr \"chrome.exe\" || start \"%ProgramFiles%\\Google\\Chrome\\Applicationchrome\\chrome.exe\"\n```\n\n### <a name=\"zwh7oo\"></a>主要知识点\n\n* 主要运用到管道符号\"|\"，配合findstr寻找并判断系统是否运行着\"chrome.exe\"，\"||\"连接符表示\"finstr\"未找到合适的进程，将执行后面的启动\"chrome.exe\"语句。\n\n<!-- more -->\n\n## <a name=\"i601vn\"></a>源码\n\n下面是一则源码，用于批量打开网页，并且在浏览器关闭后循环这个过程。【可拓展用途】\n\n```Bash\n@echo off\ntitle QAQ\nsetlocal enabledelayedexpansion\npushd %~dp0\n:start\nset /a index=0\nfor /f %%a in (config.ini) do (\n\tping %%a -n 1 > nul && (\n\t\tstart \"%ProgramFiles%\\Google\\Chrome\\Applicationchrome\\chrome.exe\" http://%%a\n\t\techo \t   !date! !time!: sent request to %%a\n\t\techo !date! !time!: sent request to %%a >> log.txt\n\t\tset /a index+=1\n\t\tping 127.1 -n 1 > nul\n\t)\n)\necho= >> log.txt\n\n:wait\ntasklist | findstr \"chrome.exe\" > nul || goto start\nping 127.1 -n 5 > nul\ngoto wait\n```\n\n",
    "body_html": "<p>tags: [bat]</p><p>date: 2015-01-23</p><hr /><h3 id=\"bnuhky\"><a href=\"#bnuhky\"></a>原理</h3><p>后台监听任务管理器列表中是否存在被守护的进程，<em>核心代码如下：</em></p><p><br /></p><pre><code>::守护chrome.exe进程\ntasklist | findstr &quot;chrome.exe&quot; || start &quot;%ProgramFiles%\\Google\\Chrome\\Applicationchrome\\chrome.exe&quot;</code></pre><p><br /></p><h3 id=\"zwh7oo\"><a href=\"#zwh7oo\"></a>主要知识点</h3><p><br /></p><ul><li><p>主要运用到管道符号&quot;|&quot;，配合findstr寻找并判断系统是否运行着&quot;chrome.exe&quot;，&quot;||&quot;连接符表示&quot;finstr&quot;未找到合适的进程，将执行后面的启动&quot;chrome.exe&quot;语句。</p></li></ul><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h2 id=\"i601vn\"><a href=\"#i601vn\"></a>源码</h2><p><br /></p><p>下面是一则源码，用于批量打开网页，并且在浏览器关闭后循环这个过程。【可拓展用途】</p><p><br /></p><pre data-lang=\"bash\"><code>@echo off\ntitle QAQ\nsetlocal enabledelayedexpansion\npushd %~dp0\n:start\nset /a index=0\nfor /f %%a in (config.ini) do (\n\tping %%a -n 1 &gt; nul &amp;&amp; (\n\t\tstart &quot;%ProgramFiles%\\Google\\Chrome\\Applicationchrome\\chrome.exe&quot; http://%%a\n\t\techo \t   !date! !time!: sent request to %%a\n\t\techo !date! !time!: sent request to %%a &gt;&gt; log.txt\n\t\tset /a index+=1\n\t\tping 127.1 -n 1 &gt; nul\n\t)\n)\necho= &gt;&gt; log.txt\n\n:wait\ntasklist | findstr &quot;chrome.exe&quot; &gt; nul || goto start\nping 127.1 -n 5 &gt; nul\ngoto wait</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [bat]</p><p>date: 2015-01-23</p><card type=\"block\" name=\"hr\"></card><h3 id=\"bnuhky\"><a href=\"#bnuhky\" id=\"原理\"></a>原理</h3><p>后台监听任务管理器列表中是否存在被守护的进程，<em>核心代码如下：</em></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22497ad96f%22%2C%22code%22%3A%22%3A%3A%E5%AE%88%E6%8A%A4chrome.exe%E8%BF%9B%E7%A8%8B%5Cntasklist%20%7C%20findstr%20%5C%22chrome.exe%5C%22%20%7C%7C%20start%20%5C%22%25ProgramFiles%25%5C%5CGoogle%5C%5CChrome%5C%5CApplicationchrome%5C%5Cchrome.exe%5C%22%22%7D\"></card><p><br /></p><h3 id=\"zwh7oo\"><a href=\"#zwh7oo\" id=\"主要知识点\"></a>主要知识点</h3><p><br /></p><ul><li><p>主要运用到管道符号&quot;|&quot;，配合findstr寻找并判断系统是否运行着&quot;chrome.exe&quot;，&quot;||&quot;连接符表示&quot;finstr&quot;未找到合适的进程，将执行后面的启动&quot;chrome.exe&quot;语句。</p></li></ul><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><h2 id=\"i601vn\"><a href=\"#i601vn\" id=\"源码\"></a>源码</h2><p><br /></p><p>下面是一则源码，用于批量打开网页，并且在浏览器关闭后循环这个过程。【可拓展用途】</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22e8a0f059%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%40echo%20off%5Cntitle%20QAQ%5Cnsetlocal%20enabledelayedexpansion%5Cnpushd%20%25~dp0%5Cn%3Astart%5Cnset%20%2Fa%20index%3D0%5Cnfor%20%2Ff%20%25%25a%20in%20(config.ini)%20do%20(%5Cn%5Ctping%20%25%25a%20-n%201%20%3E%20nul%20%26%26%20(%5Cn%5Ct%5Ctstart%20%5C%22%25ProgramFiles%25%5C%5CGoogle%5C%5CChrome%5C%5CApplicationchrome%5C%5Cchrome.exe%5C%22%20http%3A%2F%2F%25%25a%5Cn%5Ct%5Ctecho%20%5Ct%20%20%20!date!%20!time!%3A%20sent%20request%20to%20%25%25a%5Cn%5Ct%5Ctecho%20!date!%20!time!%3A%20sent%20request%20to%20%25%25a%20%3E%3E%20log.txt%5Cn%5Ct%5Ctset%20%2Fa%20index%2B%3D1%5Cn%5Ct%5Ctping%20127.1%20-n%201%20%3E%20nul%5Cn%5Ct)%5Cn)%5Cnecho%3D%20%3E%3E%20log.txt%5Cn%5Cn%3Await%5Cntasklist%20%7C%20findstr%20%5C%22chrome.exe%5C%22%20%3E%20nul%20%7C%7C%20goto%20start%5Cnping%20127.1%20-n%205%20%3E%20nul%5Cngoto%20wait%22%7D\"></card><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [bat]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-01-23\"],[\"hr\",{\"id\":\"5l6eyy\"}],[\"h3\",{\"id\":\"bnuhky\"},\"原理\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"后台监听任务管理器列表中是否存在被守护的进程，\",[\"em\",{},\"核心代码如下：\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"::守护chrome.exe进程\\n\",\"tasklist | findstr \\\"chrome.exe\\\" || start \\\"%ProgramFiles%\\\\Google\\\\Chrome\\\\Applicationchrome\\\\chrome.exe\\\"\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"zwh7oo\"},\"主要知识点\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"ul\",{},[\"li\",{},[\"div\",{\"data-type\":\"p\"},\"主要运用到管道符号\\\"|\\\"，配合findstr寻找并判断系统是否运行着\\\"chrome.exe\\\"，\\\"||\\\"连接符表示\\\"finstr\\\"未找到合适的进程，将执行后面的启动\\\"chrome.exe\\\"语句。\"]]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h2\",{\"id\":\"i601vn\"},\"源码\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"下面是一则源码，用于批量打开网页，并且在浏览器关闭后循环这个过程。【可拓展用途】\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"Bash\"},\"@echo off\\n\",\"title QAQ\\n\",\"setlocal enabledelayedexpansion\\n\",\"pushd %~dp0\\n\",\":start\\n\",\"set /a index=0\\n\",\"for /f %%a in (config.ini) do (\\n\",\"\\tping %%a -n 1 > nul && (\\n\",\"\\t\\tstart \\\"%ProgramFiles%\\\\Google\\\\Chrome\\\\Applicationchrome\\\\chrome.exe\\\" http://%%a\\n\",\"\\t\\techo \\t   !date! !time!: sent request to %%a\\n\",\"\\t\\techo !date! !time!: sent request to %%a >> log.txt\\n\",\"\\t\\tset /a index+=1\\n\",\"\\t\\tping 127.1 -n 1 > nul\\n\",\"\\t)\\n\",\")\\n\",\"echo= >> log.txt\\n\",\"\\n\",\":wait\\n\",\"tasklist | findstr \\\"chrome.exe\\\" > nul || goto start\\n\",\"ping 127.1 -n 5 > nul\\n\",\"goto wait\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:14:09.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:19:48.000Z",
    "updated_at": "2018-09-15T08:14:09.000Z",
    "published_at": "2018-09-15T08:14:09.000Z",
    "first_published_at": null,
    "word_count": 255,
    "cover": null,
    "description": "tags: [bat]date: 2015-01-23原理后台监听任务管理器列表中是否存在被守护的进程，核心代码如下：::守护chrome.exe进程 tasklist | findstr &quot;chrome.exe&quot; || start &quot;%ProgramFiles%\\Google\\Chrome\\Applicationchrome\\chrome.exe&quot; 主要知识点主要运用到管道符号&quot;|&quot;，配合findstr寻找并判断系统是否运行着&quot...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709026,
    "slug": "lho00s",
    "title": "批处理后台运行",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [bat]<br />date: 2015-01-28\n\n---\n\n<a name=\"dovtpi\"></a>\n### 通过cmd的启动参数进行窗口隐藏\n\n```\ncmd /c test #后台调用test并关闭当前进程\ncmd /k test #后台调用test但不关闭当前进程\n```\n\n<a name=\"o9iayb\"></a>\n### 通过vbs直接启动\n\ncmd /c 和 cmd /k隐藏控制台窗口时，依然会出现一个一闪而过的黑框，因此我们需要通过VBscript进行辅助启动。\n\n```vbs\nSet ws = CreateObject(\"Wscript.Shell\")\nws.run \"cmd /c lol.bat\",vbhide\n```\n\n",
    "body_draft": "tags: [bat]\ndate: 2015-01-28\n\n---\n\n### <a name=\"dovtpi\"></a>通过cmd的启动参数进行窗口隐藏\n\n```\ncmd /c test #后台调用test并关闭当前进程\ncmd /k test #后台调用test但不关闭当前进程\n```\n\n### <a name=\"o9iayb\"></a>通过vbs直接启动\n\ncmd /c 和 cmd /k隐藏控制台窗口时，依然会出现一个一闪而过的黑框，因此我们需要通过VBscript进行辅助启动。\n\n```vbs\nSet ws = CreateObject(\"Wscript.Shell\")\nws.run \"cmd /c lol.bat\",vbhide\n```\n\n",
    "body_html": "<p>tags: [bat]</p><p>date: 2015-01-28</p><hr /><h3 id=\"dovtpi\"><a href=\"#dovtpi\"></a>通过cmd的启动参数进行窗口隐藏</h3><p><br /></p><pre><code>cmd /c test #后台调用test并关闭当前进程\ncmd /k test #后台调用test但不关闭当前进程</code></pre><p><br /></p><h3 id=\"o9iayb\"><a href=\"#o9iayb\"></a>通过vbs直接启动</h3><p><br /></p><p>cmd /c 和 cmd /k隐藏控制台窗口时，依然会出现一个一闪而过的黑框，因此我们需要通过VBscript进行辅助启动。</p><p><br /></p><pre data-lang=\"vbs\"><code>Set ws = CreateObject(&quot;Wscript.Shell&quot;)\nws.run &quot;cmd /c lol.bat&quot;,vbhide</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [bat]</p><p>date: 2015-01-28</p><card type=\"block\" name=\"hr\"></card><h3 id=\"dovtpi\"><a href=\"#dovtpi\" id=\"通过cmd的启动参数进行窗口隐藏\"></a>通过cmd的启动参数进行窗口隐藏</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2223f40767%22%2C%22code%22%3A%22cmd%20%2Fc%20test%20%23%E5%90%8E%E5%8F%B0%E8%B0%83%E7%94%A8test%E5%B9%B6%E5%85%B3%E9%97%AD%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%5Cncmd%20%2Fk%20test%20%23%E5%90%8E%E5%8F%B0%E8%B0%83%E7%94%A8test%E4%BD%86%E4%B8%8D%E5%85%B3%E9%97%AD%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%22%7D\"></card><p><br /></p><h3 id=\"o9iayb\"><a href=\"#o9iayb\" id=\"通过vbs直接启动\"></a>通过vbs直接启动</h3><p><br /></p><p>cmd /c 和 cmd /k隐藏控制台窗口时，依然会出现一个一闪而过的黑框，因此我们需要通过VBscript进行辅助启动。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22fa2b3400%22%2C%22mode%22%3A%22vbs%22%2C%22code%22%3A%22Set%20ws%20%3D%20CreateObject(%5C%22Wscript.Shell%5C%22)%5Cnws.run%20%5C%22cmd%20%2Fc%20lol.bat%5C%22%2Cvbhide%22%7D\"></card><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [bat]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-01-28\"],[\"hr\",{\"id\":\"ugp4zm\"}],[\"h3\",{\"id\":\"dovtpi\"},\"通过cmd的启动参数进行窗口隐藏\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"cmd /c test #后台调用test并关闭当前进程\\n\",\"cmd /k test #后台调用test但不关闭当前进程\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"o9iayb\"},\"通过vbs直接启动\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"cmd /c 和 cmd /k隐藏控制台窗口时，依然会出现一个一闪而过的黑框，因此我们需要通过VBscript进行辅助启动。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"vbs\"},\"Set ws = CreateObject(\\\"Wscript.Shell\\\")\\n\",\"ws.run \\\"cmd /c lol.bat\\\",vbhide\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:13:28.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:19:30.000Z",
    "updated_at": "2019-12-03T08:10:22.000Z",
    "published_at": "2018-09-15T08:13:28.000Z",
    "first_published_at": null,
    "word_count": 117,
    "cover": null,
    "description": "tags: [bat]date: 2015-01-28通过cmd的启动参数进行窗口隐藏cmd /c test #后台调用test并关闭当前进程 cmd /k test #后台调用test但不关闭当前进程 通过vbs直接启动cmd /c 和 cmd /k隐藏控制台窗口时，依然会出现一个一闪而过的黑框，因此我们需要通过VBscript进行辅助启动。Set ws = CreateObject(&quot;Wscript.Shell&quot;) ws.run &quot;cmd /c lol.bat&quot...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709025,
    "slug": "bwbix7",
    "title": "批处理批量重命名",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [bat]<br />date: 2015-01-18\n\n---\n\n模拟一下这样的情景，假设我有一个文件夹用于保存各种下载的文本文件（自然也可以是其他格式的文件），当这个文件夹文件数量达到一定规模时，我需要将这些文件的名字序列化，那么下面这个批处理文件便横空出世了。\n\n<a name=\"gauqhp\"></a>\n### 实现代码：\n\n```\n@echo off\nsetlocal EnableDelayedExpansion\n::下面这个语句要请改成你要处理的文件夹路径如“pushd %~dp0^\\text”改成\"pushd \"c:\\text\"\"\npushd %~dp0^\\text\n::计数\nset /a index = 0\nfor /f %%i in ('dir /b /a-d *.*') do (\nset /a index += 1\nren %%~nxi !index!%%~xi\n)\necho 共扫描到!index!个文件。\npause>nul\n```\n\n_ps：请将以上代码用任意文本编辑器保存为后缀名为\"bat\"或者\"cmd\"的文件。_\n",
    "body_draft": "tags: [bat]\ndate: 2015-01-18\n\n---\n\n模拟一下这样的情景，假设我有一个文件夹用于保存各种下载的文本文件（自然也可以是其他格式的文件），当这个文件夹文件数量达到一定规模时，我需要将这些文件的名字序列化，那么下面这个批处理文件便横空出世了。\n\n### <a name=\"gauqhp\"></a>实现代码：\n\n```\n@echo off\nsetlocal EnableDelayedExpansion\n::下面这个语句要请改成你要处理的文件夹路径如“pushd %~dp0^\\text”改成\"pushd \"c:\\text\"\"\npushd %~dp0^\\text\n::计数\nset /a index = 0\nfor /f %%i in ('dir /b /a-d *.*') do (\nset /a index += 1\nren %%~nxi !index!%%~xi\n)\necho 共扫描到!index!个文件。\npause>nul\n```\n\n*ps：请将以上代码用任意文本编辑器保存为后缀名为\"bat\"或者\"cmd\"的文件。*\n",
    "body_html": "<p>tags: [bat]</p><p>date: 2015-01-18</p><hr /><p>模拟一下这样的情景，假设我有一个文件夹用于保存各种下载的文本文件（自然也可以是其他格式的文件），当这个文件夹文件数量达到一定规模时，我需要将这些文件的名字序列化，那么下面这个批处理文件便横空出世了。</p><p><br /></p><h3 id=\"gauqhp\"><a href=\"#gauqhp\"></a>实现代码：</h3><p><br /></p><pre><code>@echo off\nsetlocal EnableDelayedExpansion\n::下面这个语句要请改成你要处理的文件夹路径如“pushd %~dp0^\\text”改成&quot;pushd &quot;c:\\text&quot;&quot;\npushd %~dp0^\\text\n::计数\nset /a index = 0\nfor /f %%i in ('dir /b /a-d *.*') do (\nset /a index += 1\nren %%~nxi !index!%%~xi\n)\necho 共扫描到!index!个文件。\npause&gt;nul</code></pre><p><br /></p><p><em>ps：请将以上代码用任意文本编辑器保存为后缀名为&quot;bat&quot;或者&quot;cmd&quot;的文件。</em></p>",
    "body_lake": "<!doctype lake><p>tags: [bat]</p><p>date: 2015-01-18</p><card type=\"block\" name=\"hr\"></card><p>模拟一下这样的情景，假设我有一个文件夹用于保存各种下载的文本文件（自然也可以是其他格式的文件），当这个文件夹文件数量达到一定规模时，我需要将这些文件的名字序列化，那么下面这个批处理文件便横空出世了。</p><p><br /></p><h3 id=\"gauqhp\"><a href=\"#gauqhp\" id=\"实现代码：\"></a>实现代码：</h3><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22d8d6ffa2%22%2C%22code%22%3A%22%40echo%20off%5Cnsetlocal%20EnableDelayedExpansion%5Cn%3A%3A%E4%B8%8B%E9%9D%A2%E8%BF%99%E4%B8%AA%E8%AF%AD%E5%8F%A5%E8%A6%81%E8%AF%B7%E6%94%B9%E6%88%90%E4%BD%A0%E8%A6%81%E5%A4%84%E7%90%86%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E8%B7%AF%E5%BE%84%E5%A6%82%E2%80%9Cpushd%20%25~dp0%5E%5C%5Ctext%E2%80%9D%E6%94%B9%E6%88%90%5C%22pushd%20%5C%22c%3A%5C%5Ctext%5C%22%5C%22%5Cnpushd%20%25~dp0%5E%5C%5Ctext%5Cn%3A%3A%E8%AE%A1%E6%95%B0%5Cnset%20%2Fa%20index%20%3D%200%5Cnfor%20%2Ff%20%25%25i%20in%20('dir%20%2Fb%20%2Fa-d%20*.*')%20do%20(%5Cnset%20%2Fa%20index%20%2B%3D%201%5Cnren%20%25%25~nxi%20!index!%25%25~xi%5Cn)%5Cnecho%20%E5%85%B1%E6%89%AB%E6%8F%8F%E5%88%B0!index!%E4%B8%AA%E6%96%87%E4%BB%B6%E3%80%82%5Cnpause%3Enul%22%7D\"></card><p><br /></p><p><em>ps：请将以上代码用任意文本编辑器保存为后缀名为&quot;bat&quot;或者&quot;cmd&quot;的文件。</em></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [bat]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-01-18\"],[\"hr\",{\"id\":\"go8imx\"}],[\"div\",{\"data-type\":\"p\"},\"模拟一下这样的情景，假设我有一个文件夹用于保存各种下载的文本文件（自然也可以是其他格式的文件），当这个文件夹文件数量达到一定规模时，我需要将这些文件的名字序列化，那么下面这个批处理文件便横空出世了。\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"gauqhp\"},\"实现代码：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"\"},\"@echo off\\n\",\"setlocal EnableDelayedExpansion\\n\",\"::下面这个语句要请改成你要处理的文件夹路径如“pushd %~dp0^\\\\text”改成\\\"pushd \\\"c:\\\\text\\\"\\\"\\n\",\"pushd %~dp0^\\\\text\\n\",\"::计数\\n\",\"set /a index = 0\\n\",\"for /f %%i in ('dir /b /a-d *.*') do (\\n\",\"set /a index += 1\\n\",\"ren %%~nxi !index!%%~xi\\n\",\")\\n\",\"echo 共扫描到!index!个文件。\\n\",\"pause>nul\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},[\"em\",{},\"ps：请将以上代码用任意文本编辑器保存为后缀名为\\\"bat\\\"或者\\\"cmd\\\"的文件。\"]]]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:12:36.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:18:21.000Z",
    "updated_at": "2019-10-04T21:18:06.000Z",
    "published_at": "2018-09-15T08:12:36.000Z",
    "first_published_at": null,
    "word_count": 214,
    "cover": null,
    "description": "tags: [bat]date: 2015-01-18模拟一下这样的情景，假设我有一个文件夹用于保存各种下载的文本文件（自然也可以是其他格式的文件），当这个文件夹文件数量达到一定规模时，我需要将这些文件的名字序列化，那么下面这个批处理文件便横空出世了。实现代码：@echo off setlocal EnableDelayedExpansion ::下面这个语句要请改成你要处理的文件夹路径如“pushd %~dp0^\\text”改成&quot;pushd &quot;c:\\text&quot;&quot...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 709023,
    "slug": "xtbi4g",
    "title": "批处理文本合并",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 21,
      "content_updated_at": "2020-03-21T05:55:52.101Z",
      "updated_at": "2020-03-21T05:55:52.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 7,
        "public_books_count": 4,
        "followers_count": 76,
        "following_count": 27,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2020-03-20T14:56:53.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 7,
      "public_books_count": 4,
      "followers_count": 76,
      "following_count": 27,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2020-03-20T14:56:53.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "tags: [bat]<br />date: 2015-01-21\n\n---\n\n<a name=\"ho4obz\"></a>\n### 使用批处理进行多个文本内容的筛选及合并\n\n案例为连接文本1的奇数行，文本2的行数对2整除的行及行数对3整除的行\n\n<a name=\"5h4zhp\"></a>\n### 用法：\n\n命令格式: [this text1 text2 destText]<br />例子：`this 1.txt 2.txt 3.txt` (其中this为下面的代码保存后的文件名)\n\n<!-- more -->\n\n```bash\n@echo off\ntitle 文本连接\nsetlocal enabledelayedexpansion\ncd. > %3\nset line1 = 0\nset line2 = 0\nset line3 = 0\nfor /f \"delims=\" %%i in (%1) do (\n\tset /a line1 += 1 && set /a flag = !line1!%%2 && if \"!flag!\"==\"1\" (set /a n+=1&call,set \"_%%n%%=%%i\")\n\t)\nfor /f \"delims=\" %%i in (%1) do (\n\tset /a line2 += 1 && set /a flag1 = !line2!%%2 && if \"!flag1!\"==\"0\" (set /a t+=1&call,set \",%%t%%=%%i\")\n\t)\nfor /f \"delims=\" %%i in (%2) do (\n\tset /a line3 += 1 && set /a flag2 = !line3!%%3 && if \"!flag2!\"==\"0\" (set /a m+=1&call,set \".%%m%%=%%i\")\n\t)\n\nif %n% gtr %m% (set \"num=%n%\") else (set \"num=%m%\")\n(for /l %%i in (1,1,%num%) do (\nif defined _%%i call,echo %%_%%i%%\nif defined _%%i call,echo %%,%%i%%\nif defined .%%i call,echo %%.%%i%%\n)) >> %3\n\nendlocal\nnotepad %3\npause\n```\n\n",
    "body_draft": "tags: [bat]\ndate: 2015-01-21\n\n---\n\n### <a name=\"ho4obz\"></a>使用批处理进行多个文本内容的筛选及合并\n\n案例为连接文本1的奇数行，文本2的行数对2整除的行及行数对3整除的行\n\n### <a name=\"5h4zhp\"></a>用法：\n\n命令格式: [this text1 text2 destText]\n例子：`this 1.txt 2.txt 3.txt` (其中this为下面的代码保存后的文件名)\n\n<!-- more -->\n\n```bash\n@echo off\ntitle 文本连接\nsetlocal enabledelayedexpansion\ncd. > %3\nset line1 = 0\nset line2 = 0\nset line3 = 0\nfor /f \"delims=\" %%i in (%1) do (\n\tset /a line1 += 1 && set /a flag = !line1!%%2 && if \"!flag!\"==\"1\" (set /a n+=1&call,set \"_%%n%%=%%i\")\n\t)\nfor /f \"delims=\" %%i in (%1) do (\n\tset /a line2 += 1 && set /a flag1 = !line2!%%2 && if \"!flag1!\"==\"0\" (set /a t+=1&call,set \",%%t%%=%%i\")\n\t)\nfor /f \"delims=\" %%i in (%2) do (\n\tset /a line3 += 1 && set /a flag2 = !line3!%%3 && if \"!flag2!\"==\"0\" (set /a m+=1&call,set \".%%m%%=%%i\")\n\t)\n\nif %n% gtr %m% (set \"num=%n%\") else (set \"num=%m%\")\n(for /l %%i in (1,1,%num%) do (\nif defined _%%i call,echo %%_%%i%%\nif defined _%%i call,echo %%,%%i%%\nif defined .%%i call,echo %%.%%i%%\n)) >> %3\n\nendlocal\nnotepad %3\npause\n```\n\n",
    "body_html": "<p>tags: [bat]</p><p>date: 2015-01-21</p><hr /><h3 id=\"ho4obz\"><a href=\"#ho4obz\"></a>使用批处理进行多个文本内容的筛选及合并</h3><p><br /></p><p>案例为连接文本1的奇数行，文本2的行数对2整除的行及行数对3整除的行</p><p><br /></p><h3 id=\"5h4zhp\"><a href=\"#5h4zhp\"></a>用法：</h3><p><br /></p><p>命令格式: [this text1 text2 destText]<br />例子：<code>this 1.txt 2.txt 3.txt</code> (其中this为下面的代码保存后的文件名)</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><pre data-lang=\"bash\"><code>@echo off\ntitle 文本连接\nsetlocal enabledelayedexpansion\ncd. &gt; %3\nset line1 = 0\nset line2 = 0\nset line3 = 0\nfor /f &quot;delims=&quot; %%i in (%1) do (\n\tset /a line1 += 1 &amp;&amp; set /a flag = !line1!%%2 &amp;&amp; if &quot;!flag!&quot;==&quot;1&quot; (set /a n+=1&amp;call,set &quot;_%%n%%=%%i&quot;)\n\t)\nfor /f &quot;delims=&quot; %%i in (%1) do (\n\tset /a line2 += 1 &amp;&amp; set /a flag1 = !line2!%%2 &amp;&amp; if &quot;!flag1!&quot;==&quot;0&quot; (set /a t+=1&amp;call,set &quot;,%%t%%=%%i&quot;)\n\t)\nfor /f &quot;delims=&quot; %%i in (%2) do (\n\tset /a line3 += 1 &amp;&amp; set /a flag2 = !line3!%%3 &amp;&amp; if &quot;!flag2!&quot;==&quot;0&quot; (set /a m+=1&amp;call,set &quot;.%%m%%=%%i&quot;)\n\t)\n\nif %n% gtr %m% (set &quot;num=%n%&quot;) else (set &quot;num=%m%&quot;)\n(for /l %%i in (1,1,%num%) do (\nif defined _%%i call,echo %%_%%i%%\nif defined _%%i call,echo %%,%%i%%\nif defined .%%i call,echo %%.%%i%%\n)) &gt;&gt; %3\n\nendlocal\nnotepad %3\npause</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p>tags: [bat]</p><p>date: 2015-01-21</p><card type=\"block\" name=\"hr\"></card><h3 id=\"ho4obz\"><a href=\"#ho4obz\" id=\"使用批处理进行多个文本内容的筛选及合并\"></a>使用批处理进行多个文本内容的筛选及合并</h3><p><br /></p><p>案例为连接文本1的奇数行，文本2的行数对2整除的行及行数对3整除的行</p><p><br /></p><h3 id=\"5h4zhp\"><a href=\"#5h4zhp\" id=\"用法：\"></a>用法：</h3><p><br /></p><p>命令格式: [this text1 text2 destText]<br />例子：<code>this 1.txt 2.txt 3.txt</code> (其中this为下面的代码保存后的文件名)</p><p><br /></p><p>&lt;!-- more --&gt;</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%223e14eb73%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%40echo%20off%5Cntitle%20%E6%96%87%E6%9C%AC%E8%BF%9E%E6%8E%A5%5Cnsetlocal%20enabledelayedexpansion%5Cncd.%20%3E%20%253%5Cnset%20line1%20%3D%200%5Cnset%20line2%20%3D%200%5Cnset%20line3%20%3D%200%5Cnfor%20%2Ff%20%5C%22delims%3D%5C%22%20%25%25i%20in%20(%251)%20do%20(%5Cn%5Ctset%20%2Fa%20line1%20%2B%3D%201%20%26%26%20set%20%2Fa%20flag%20%3D%20!line1!%25%252%20%26%26%20if%20%5C%22!flag!%5C%22%3D%3D%5C%221%5C%22%20(set%20%2Fa%20n%2B%3D1%26call%2Cset%20%5C%22_%25%25n%25%25%3D%25%25i%5C%22)%5Cn%5Ct)%5Cnfor%20%2Ff%20%5C%22delims%3D%5C%22%20%25%25i%20in%20(%251)%20do%20(%5Cn%5Ctset%20%2Fa%20line2%20%2B%3D%201%20%26%26%20set%20%2Fa%20flag1%20%3D%20!line2!%25%252%20%26%26%20if%20%5C%22!flag1!%5C%22%3D%3D%5C%220%5C%22%20(set%20%2Fa%20t%2B%3D1%26call%2Cset%20%5C%22%2C%25%25t%25%25%3D%25%25i%5C%22)%5Cn%5Ct)%5Cnfor%20%2Ff%20%5C%22delims%3D%5C%22%20%25%25i%20in%20(%252)%20do%20(%5Cn%5Ctset%20%2Fa%20line3%20%2B%3D%201%20%26%26%20set%20%2Fa%20flag2%20%3D%20!line3!%25%253%20%26%26%20if%20%5C%22!flag2!%5C%22%3D%3D%5C%220%5C%22%20(set%20%2Fa%20m%2B%3D1%26call%2Cset%20%5C%22.%25%25m%25%25%3D%25%25i%5C%22)%5Cn%5Ct)%5Cn%5Cnif%20%25n%25%20gtr%20%25m%25%20(set%20%5C%22num%3D%25n%25%5C%22)%20else%20(set%20%5C%22num%3D%25m%25%5C%22)%5Cn(for%20%2Fl%20%25%25i%20in%20(1%2C1%2C%25num%25)%20do%20(%5Cnif%20defined%20_%25%25i%20call%2Cecho%20%25%25_%25%25i%25%25%5Cnif%20defined%20_%25%25i%20call%2Cecho%20%25%25%2C%25%25i%25%25%5Cnif%20defined%20.%25%25i%20call%2Cecho%20%25%25.%25%25i%25%25%5Cn))%20%3E%3E%20%253%5Cn%5Cnendlocal%5Cnnotepad%20%253%5Cnpause%22%7D\"></card><p><br /></p>",
    "body_draft_lake": "[\"root\",[\"div\",{\"data-type\":\"p\"},\"tags: [bat]\"],[\"div\",{\"data-type\":\"p\"},\"date: 2015-01-21\"],[\"hr\",{\"id\":\"5odrut\"}],[\"h3\",{\"id\":\"ho4obz\"},\"使用批处理进行多个文本内容的筛选及合并\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"案例为连接文本1的奇数行，文本2的行数对2整除的行及行数对3整除的行\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"h3\",{\"id\":\"5h4zhp\"},\"用法：\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},[\"span\",{\"data-type\":\"ranges\"},\"命令格式: [this text1 text2 destText]\\n例子：\",[\"code\",{},\"this 1.txt 2.txt 3.txt\"],\" (其中this为下面的代码保存后的文件名)\"]],[\"div\",{\"data-type\":\"p\"},\"\"],[\"div\",{\"data-type\":\"p\"},\"<!-- more -->\"],[\"div\",{\"data-type\":\"p\"},\"\"],[\"pre\",{\"syntax\":\"bash\"},\"@echo off\\n\",\"title 文本连接\\n\",\"setlocal enabledelayedexpansion\\n\",\"cd. > %3\\n\",\"set line1 = 0\\n\",\"set line2 = 0\\n\",\"set line3 = 0\\n\",\"for /f \\\"delims=\\\" %%i in (%1) do (\\n\",\"\\tset /a line1 += 1 && set /a flag = !line1!%%2 && if \\\"!flag!\\\"==\\\"1\\\" (set /a n+=1&call,set \\\"_%%n%%=%%i\\\")\\n\",\"\\t)\\n\",\"for /f \\\"delims=\\\" %%i in (%1) do (\\n\",\"\\tset /a line2 += 1 && set /a flag1 = !line2!%%2 && if \\\"!flag1!\\\"==\\\"0\\\" (set /a t+=1&call,set \\\",%%t%%=%%i\\\")\\n\",\"\\t)\\n\",\"for /f \\\"delims=\\\" %%i in (%2) do (\\n\",\"\\tset /a line3 += 1 && set /a flag2 = !line3!%%3 && if \\\"!flag2!\\\"==\\\"0\\\" (set /a m+=1&call,set \\\".%%m%%=%%i\\\")\\n\",\"\\t)\\n\",\"\\n\",\"if %n% gtr %m% (set \\\"num=%n%\\\") else (set \\\"num=%m%\\\")\\n\",\"(for /l %%i in (1,1,%num%) do (\\n\",\"if defined _%%i call,echo %%_%%i%%\\n\",\"if defined _%%i call,echo %%,%%i%%\\n\",\"if defined .%%i call,echo %%.%%i%%\\n\",\")) >> %3\\n\",\"\\n\",\"endlocal\\n\",\"notepad %3\\n\",\"pause\\n\"],[\"div\",{\"data-type\":\"p\"},\"\"]]",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-09-15T08:13:01.000Z",
    "deleted_at": null,
    "created_at": "2018-06-29T14:16:54.000Z",
    "updated_at": "2019-12-03T08:10:23.000Z",
    "published_at": "2018-09-15T08:13:01.000Z",
    "first_published_at": null,
    "word_count": 297,
    "cover": null,
    "description": "tags: [bat]date: 2015-01-21使用批处理进行多个文本内容的筛选及合并案例为连接文本1的奇数行，文本2的行数对2整除的行及行数对3整除的行用法：命令格式: [this text1 text2 destText] 例子：this 1.txt 2.txt 3.txt (其中this为下面的代码保存后的文件名)&lt;!-- more --&gt;@echo off title 文本连接 setlocal enabledelayedexpansion cd. &gt; %3 set...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 66516649,
    "slug": "sqrkko",
    "title": "更优雅地用 JS 进行 “IPC” 调用，我写了 event-invoke 库",
    "book_id": 128865,
    "book": {
      "id": 128865,
      "type": "Book",
      "slug": "blog",
      "name": "技术博客",
      "user_id": 103147,
      "description": "",
      "creator_id": 103147,
      "public": 1,
      "items_count": 35,
      "likes_count": 0,
      "watches_count": 24,
      "content_updated_at": "2022-02-12T14:18:05.792Z",
      "updated_at": "2022-02-12T14:18:05.000Z",
      "created_at": "2018-06-19T08:34:03.000Z",
      "namespace": "yinzhi/blog",
      "user": {
        "id": 103147,
        "type": "User",
        "login": "yinzhi",
        "name": "尹挚 (x-cold)",
        "description": "https://github.com/x-cold",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
        "books_count": 12,
        "public_books_count": 5,
        "followers_count": 94,
        "following_count": 31,
        "created_at": "2018-04-23T00:50:24.000Z",
        "updated_at": "2022-02-12T09:08:14.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 103147,
    "creator": {
      "id": 103147,
      "type": "User",
      "login": "yinzhi",
      "name": "尹挚 (x-cold)",
      "description": "https://github.com/x-cold",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2018/png/103147/1537198582768-55bfaa8f-150c-47cd-a259-dc06f1082ea5.png",
      "books_count": 12,
      "public_books_count": 5,
      "followers_count": 94,
      "following_count": 31,
      "created_at": "2018-04-23T00:50:24.000Z",
      "updated_at": "2022-02-12T09:08:14.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"Nqmyg\"></a>\n## 背景\n团队最近有一个 Node.js 全新的模块需要开发，涉及多进程的管理和通讯，简化模型可以理解为需要频繁从 master 进程调用 worker 进程的某些方法，简单设计实现了一个 [event-invoke](https://github.com/x-cold/event-invoke) 的库，可以简单优雅进行调用。\n> Node.js 提供了 child_process 模块，在 master 进程通过 fork / spawn 等方法调用可以创建 worker 进程并获取其对象（简称 cp）。父子进程会建立 IPC 通道，在 master 进程中可以使用 cp.send() 给 worker 进程发送 IPC 消息，而在 worker 进程中也可以通过 process.send() 给父进程发送 IPC 消息，达到双工通信的目的。（进程管理涉及更复杂的工作，本文暂不涉及）\n\n<a name=\"YHH44\"></a>\n## 最小实现\n基于以上前提，借助 IPC 通道和进程对象，我们可以通过事件驱动的方式实现进程间的通信，只需要简单的几行代码，就能实现基本调用逻辑，例如：\n```javascript\n// master.js\nconst child_process = require('child_process');\nconst cp = child_process.fork('./worker.js');\n\nfunction invoke() {\n\tcp.send({ name: 'methodA', args: [] });\n  cp.on('message', (packet) => {\n  \tconsole.log('result: %j', packet.payload);\n  });\n}\n\ninvoke();\n\n// worker.js\nconst methodMap = {\n  methodA() {}\n}\n\ncp.on('message', async (packet) => {\n  const { name, args } = packet;\n  const result = await methodMap[name)(...args);\n  process.send({ name, payload: result });\n});\n```\n仔细分析上述代码实现，直观感受 invoke 调用并不优雅，并且当调用量较大时，会创建很多的 message 监听器，并且要保证请求和响应是一一对应，需要做很多额外的设计。**希望设计一个简单理想的方式，只需提供 invoke 方法，传入方法名和参数，返回一个 Promise，像调用本地方法那样进行 IPC 调用，而不用考虑消息通信的细节。**\n```javascript\n// 假想中的 IPC 调用\nconst res1 = await invoker.invoke('sleep', 1000);\nconsole.log('sleep 1000ms:', res1);\nconst res2 = await invoker.invoke('max', [1, 2, 3]); // 3\nconsole.log('max(1, 2, 3):', res2);\n```\n<a name=\"n5gZg\"></a>\n## 流程设计\n从调用的模型看，可以将角色抽象为 Invoker 和 Callee，分别对应服务调用方和提供方，将消息通讯的细节可以封装在内部。parent_process 和 child_process  的通信桥梁是操作系统提供的 IPC 通道，单纯从 API 的视角看，可以简化为两个 Event 对象（主进程为 cp，子进程为 process）。Event 对象作为中间的双工通道两端，暂且命名为 InvokerChannel 和 CalleeChannel。<br />​\n\n关键实体和流程如下：\n![](https://cdn.nlark.com/yuque/__puml/389251cdfc899ca7af47f3fc7d6764b3.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcblxuYXV0b251bWJlclxuXG5hY3RvciBcInVzZXJcIiBhcyBVc2VyXG5wYXJ0aWNpcGFudCBcIkludm9rZXJcIiBhcyBJbnZva2VyXG5wYXJ0aWNpcGFudCBcIkludm9rZXJDaGFubmVsXCIgYXMgSW52b2tlckNoYW5uZWxcbnBhcnRpY2lwYW50IFwiQ2FsbGVlQ2hhbm5lbFwiIGFzIENhbGxlZUNoYW5uZWxcbnBhcnRpY2lwYW50IFwiQ2FsbGVlXCIgYXMgQ2FsbGVlXG5cbmFjdGl2YXRlIFVzZXJcblxuVXNlciAtPiBJbnZva2VyOiBpbnZva2VyLmludm9rZSgnbWV0aG9kQScsIGFyZ3MpXG5hY3RpdmF0ZSBJbnZva2VyXG5JbnZva2VyIC0-IEludm9rZXI6IHByb21pc2VNYXAuc2V0KG5hbWUsIHNlcSwgcHJvbWlzZSlcbkludm9rZXIgLT4gVXNlcjogcHJvbWlzZTxwZW5kaW5nPlxuXG5JbnZva2VyIC0-IEludm9rZXJDaGFubmVsOiBzZW5kTWVzc2FnZTpcXG57IG5hbWUsIGFyZ3MsIHNlcSB9XG5hY3RpdmF0ZSBJbnZva2VyQ2hhbm5lbFxuXG5JbnZva2VyQ2hhbm5lbCAtPiBDYWxsZWVDaGFubmVsOiBvbk1lc3NhZ2UoKVxuYWN0aXZhdGUgQ2FsbGVlQ2hhbm5lbFxuXG5JbnZva2VyIC0-IEludm9rZXI6IG9uVGltZW91dDogcmVqZWN0KClcblxuQ2FsbGVlQ2hhbm5lbCAtPiBDYWxsZWU6IGZ1bmN0aW9uTWFwLmdldChuYW1lKVxcbmV4ZWN1dGUgbWV0aG9kQShhcmdzKVxuYWN0aXZhdGUgQ2FsbGVlXG5cbkNhbGxlZSAtPiBDYWxsZWVDaGFubmVsOiBzZW5kTWVzc2FnZTpcXG57IG5hbWUsIHNlcSwgcGF5bG9hZCwgc3RhdHVzIH1cbmRlYWN0aXZhdGUgQ2FsbGVlXG5cdFxuQ2FsbGVlQ2hhbm5lbCAtPiBJbnZva2VyQ2hhbm5lbDogb25NZXNzYWdlKClcbmRlYWN0aXZhdGUgQ2FsbGVlQ2hhbm5lbFxuXHRcbkludm9rZXJDaGFubmVsIC0-IEludm9rZXI6IHByb21pc2VNYXAuZ2V0KG5hbWUsIHNlcSlcXG5yZXNvbHZlKHBheWxvYWQpL3JlamVjdCgpXG5kZWFjdGl2YXRlIEludm9rZXJDaGFubmVsXG5cblVzZXIgLT4gVXNlcjogcHJvbWlzZTxmdWxsZmlsbGVkIHwgcmVqZWN0ZWQ-XG5cbkBlbmR1bWwiLCJ1cmwiOiJodHRwczovL2Nkbi5ubGFyay5jb20veXVxdWUvX19wdW1sLzM4OTI1MWNkZmM4OTljYTdhZjQ3ZjNmYzdkNjc2NGIzLnN2ZyIsImlkIjoiVXB5eGMiLCJtYXJnaW4iOnsidG9wIjp0cnVlLCJib3R0b20iOnRydWV9LCJjYXJkIjoiZGlhZ3JhbSJ9)\n- Callee 中注册可被调用的所有方法，并保存在 functionMap\n- 用户调用 Invoker.invoke() 时：\n   - 创建一个 promise 对象，返回给用户，同时将其保存在 promiseMap 中\n   - 每次调用生成一个 id，保证调用和执行结果是一一对应的\n   - 进行超时控制，超时的任务直接执行 reject 该 promise\n- Invoker 通过 Channel 把调用方法消息发送给 Callee\n- Callee 解析收到的消息，通过 name 执行对应方法，并将结果和完成状态（成功 or 异常）通过 Channel 发送消息给 Invoker\n- Invoker 解析消息，通过 id+name 找到对应的 promise 对象，成功则 resolve，失败则 reject\n\n​\n\n实际上，这个设计不仅适用 IPC 调用，在浏览器的场景下也能直接得到很好的应用，比如说跨 iframe 的调用可以包装 window.postMessage()，跨标签页调用可以使用 storage 事件，以及 Web worker 中可借助 worker.postMessage() 作为通信的桥梁。\n<a name=\"YZqq9\"></a>\n## 快速开始\n基于以上设计，实现编码必然不在话下，趁着非工作时间迅速完成开发和文档的工作，源代码：[https://github.com/x-cold/event-invoke](https://github.com/x-cold/event-invoke)<br />​<br />\n<a name=\"QdHNb\"></a>\n### 安装依赖\n```bash\nnpm i -S event-invoke\n```\n<a name=\"PCXL8\"></a>\n### 父子进程通信实例\n> 示例代码：[Example code](https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/child_process)\n\n```javascript\n// parent.js\nconst cp = require('child_process');\nconst { Invoker } = require('event-invoke');\n\nconst invokerChannel = cp.fork('./child.js');\n\nconst invoker = new Invoker(invokerChannel);\n\nasync function main() {\n  const res1 = await invoker.invoke('sleep', 1000);\n  console.log('sleep 1000ms:', res1);\n  const res2 = await invoker.invoke('max', [1, 2, 3]); // 3\n  console.log('max(1, 2, 3):', res2);\n  invoker.destroy();\n}\n\nmain();\n```\n\n```js\n// child.js\nconst { Callee } = require('event-invoke');\n\nconst calleeChannel = process;\n\nconst callee = new Callee(calleeChannel);\n\n// async method\ncallee.register(async function sleep(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n});\n\n// sync method\ncallee.register(function max(...args) {\n  return Math.max(...args);\n});\n\ncallee.listen();\n```\n<a name=\"f11pK\"></a>\n### 自定义 Channel 实现 PM2 进程间调用\n> 示例代码：[Example code](https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/pm2)\n\n```javascript\n// pm2.config.cjs\nmodule.exports = {\n  apps: [\n    {\n      script: 'invoker.js',\n      name: 'invoker',\n      exec_mode: 'fork',\n    },\n    {\n      script: 'callee.js',\n      name: 'callee',\n      exec_mode: 'fork',\n    }\n  ],\n};\n```\n\n\n```javascript\n// callee.js\nimport net from 'net';\nimport pm2 from 'pm2';\nimport {\n  Callee,\n  BaseCalleeChannel\n} from 'event-invoke';\n\nconst messageType = 'event-invoke';\nconst messageTopic = 'some topic';\n\nclass CalleeChannel extends BaseCalleeChannel {\n  constructor() {\n    super();\n    this._onProcessMessage = this.onProcessMessage.bind(this);\n    process.on('message', this._onProcessMessage);\n  }\n\n  onProcessMessage(packet) {\n    if (packet.type !== messageType) {\n      return;\n    }\n    this.emit('message', packet.data);\n  }\n\n  send(data) {\n    pm2.list((err, processes) => {\n      if (err) { throw err; }\n      const list = processes.filter(p => p.name === 'invoker');\n      const pmId = list[0].pm2_env.pm_id;\n      pm2.sendDataToProcessId({\n        id: pmId,\n        type: messageType,\n        topic: messageTopic,\n        data,\n      }, function (err, res) {\n        if (err) { throw err; }\n      });\n    });\n  }\n\n  destory() {\n    process.off('message', this._onProcessMessage);\n  }\n}\n\nconst channel = new CalleeChannel();\nconst callee = new Callee(channel);\n\n// async method\ncallee.register(async function sleep(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n});\n\n// sync method\ncallee.register(function max(...args) {\n  return Math.max(...args);\n});\n\ncallee.listen();\n\n// keep your process alive\nnet.createServer().listen();\n```\n\n\n```javascript\n// invoker.js\nimport pm2 from 'pm2';\nimport {\n  Invoker,\n  BaseInvokerChannel\n} from 'event-invoke';\n\nconst messageType = 'event-invoke';\nconst messageTopic = 'some topic';\n\nclass InvokerChannel extends BaseInvokerChannel {\n  constructor() {\n    super();\n    this._onProcessMessage = this.onProcessMessage.bind(this);\n    process.on('message', this._onProcessMessage);\n  }\n\n  onProcessMessage(packet) {\n    if (packet.type !== messageType) {\n      return;\n    }\n    this.emit('message', packet.data);\n  }\n\n  send(data) {\n    pm2.list((err, processes) => {\n      if (err) { throw err; }\n      const list = processes.filter(p => p.name === 'callee');\n      const pmId = list[0].pm2_env.pm_id;\n      pm2.sendDataToProcessId({\n        id: pmId,\n        type: messageType,\n        topic: messageTopic,\n        data,\n      }, function (err, res) {\n        if (err) { throw err; }\n      });\n    });\n  }\n\n  connect() {\n    this.connected = true;\n  }\n\n  disconnect() {\n    this.connected = false;\n  }\n\n  destory() {\n    process.off('message', this._onProcessMessage);\n  }\n}\n\nconst channel = new InvokerChannel();\nchannel.connect();\n\nconst invoker = new Invoker(channel);\n\nsetInterval(async () => {\n  const res1 = await invoker.invoke('sleep', 1000);\n  console.log('sleep 1000ms:', res1);\n  const res2 = await invoker.invoke('max', [1, 2, 3]); // 3\n  console.log('max(1, 2, 3):', res2);\n}, 5 * 1000);\n```\n<a name=\"wfuoP\"></a>\n## 下一步\n目前 [event-invoke](https://github.com/x-cold/event-invoke) 具备了优雅调用“IPC”调用的基本能力，代码覆盖率 100%，同时提供了相对完善的[类型描述](https://github.com/x-cold/event-invoke/blob/master/index.d.ts)。感兴趣的同学可以直接使用，有任何问题可以直接提 [Issue](https://github.com/x-cold/event-invoke/issues)。<br />​\n\n另外一些后续仍要持续完善的部分：\n\n- 更丰富的示例，覆盖跨 Iframe，跨标签页，Web worker 等使用场景\n- 提供开箱即用通用 Channel\n- 更友好的异常处理\n\n\n\n",
    "body_draft": "<a name=\"Nqmyg\"></a>\n## 背景\n团队最近有一个 Node.js 全新的模块需要开发，涉及多进程的管理和通讯，简化模型可以理解为需要频繁从 master 进程调用 worker 进程的某些方法，简单设计实现了一个 [event-invoke](https://github.com/x-cold/event-invoke) 的库，可以简单优雅进行调用。\n> Node.js 提供了 child_process 模块，在 master 进程通过 fork / spawn 等方法调用可以创建 worker 进程并获取其对象（简称 cp）。父子进程会建立 IPC 通道，在 master 进程中可以使用 cp.send() 给 worker 进程发送 IPC 消息，而在 worker 进程中也可以通过 process.send() 给父进程发送 IPC 消息，达到双工通信的目的。（进程管理涉及更复杂的工作，本文暂不涉及）\n\n<a name=\"YHH44\"></a>\n## 最小实现\n基于以上前提，借助 IPC 通道和进程对象，我们可以通过事件驱动的方式实现进程间的通信，只需要简单的几行代码，就能实现基本调用逻辑，例如：\n```javascript\n// master.js\nconst child_process = require('child_process');\nconst cp = child_process.fork('./worker.js');\n\nfunction invoke() {\n\tcp.send({ name: 'methodA', args: [] });\n  cp.on('message', (packet) => {\n  \tconsole.log('result: %j', packet.payload);\n  });\n}\n\ninvoke();\n\n// worker.js\nconst methodMap = {\n  methodA() {}\n}\n\ncp.on('message', async (packet) => {\n  const { name, args } = packet;\n  const result = await methodMap[name)(...args);\n  process.send({ name, payload: result });\n});\n```\n仔细分析上述代码实现，直观感受 invoke 调用并不优雅，并且当调用量较大时，会创建很多的 message 监听器，并且要保证请求和响应是一一对应，需要做很多额外的设计。**希望设计一个简单理想的方式，只需提供 invoke 方法，传入方法名和参数，返回一个 Promise，像调用本地方法那样进行 IPC 调用，而不用考虑消息通信的细节。**\n```javascript\n// 假想中的 IPC 调用\nconst res1 = await invoker.invoke('sleep', 1000);\nconsole.log('sleep 1000ms:', res1);\nconst res2 = await invoker.invoke('max', [1, 2, 3]); // 3\nconsole.log('max(1, 2, 3):', res2);\n```\n<a name=\"n5gZg\"></a>\n## 流程设计\n从调用的模型看，可以将角色抽象为 Invoker 和 Callee，分别对应服务调用方和提供方，将消息通讯的细节可以封装在内部。parent_process 和 child_process  的通信桥梁是操作系统提供的 IPC 通道，单纯从 API 的视角看，可以简化为两个 Event 对象（主进程为 cp，子进程为 process）。Event 对象作为中间的双工通道两端，暂且命名为 InvokerChannel 和 CalleeChannel。<br />​\n\n关键实体和流程如下：\n![](https://cdn.nlark.com/yuque/__puml/389251cdfc899ca7af47f3fc7d6764b3.svg#lake_card_v2=eyJ0eXBlIjoicHVtbCIsImNvZGUiOiJAc3RhcnR1bWxcblxuYXV0b251bWJlclxuXG5hY3RvciBcInVzZXJcIiBhcyBVc2VyXG5wYXJ0aWNpcGFudCBcIkludm9rZXJcIiBhcyBJbnZva2VyXG5wYXJ0aWNpcGFudCBcIkludm9rZXJDaGFubmVsXCIgYXMgSW52b2tlckNoYW5uZWxcbnBhcnRpY2lwYW50IFwiQ2FsbGVlQ2hhbm5lbFwiIGFzIENhbGxlZUNoYW5uZWxcbnBhcnRpY2lwYW50IFwiQ2FsbGVlXCIgYXMgQ2FsbGVlXG5cbmFjdGl2YXRlIFVzZXJcblxuVXNlciAtPiBJbnZva2VyOiBpbnZva2VyLmludm9rZSgnbWV0aG9kQScsIGFyZ3MpXG5hY3RpdmF0ZSBJbnZva2VyXG5JbnZva2VyIC0-IEludm9rZXI6IHByb21pc2VNYXAuc2V0KG5hbWUsIHNlcSwgcHJvbWlzZSlcbkludm9rZXIgLT4gVXNlcjogcHJvbWlzZTxwZW5kaW5nPlxuXG5JbnZva2VyIC0-IEludm9rZXJDaGFubmVsOiBzZW5kTWVzc2FnZTpcXG57IG5hbWUsIGFyZ3MsIHNlcSB9XG5hY3RpdmF0ZSBJbnZva2VyQ2hhbm5lbFxuXG5JbnZva2VyQ2hhbm5lbCAtPiBDYWxsZWVDaGFubmVsOiBvbk1lc3NhZ2UoKVxuYWN0aXZhdGUgQ2FsbGVlQ2hhbm5lbFxuXG5JbnZva2VyIC0-IEludm9rZXI6IG9uVGltZW91dDogcmVqZWN0KClcblxuQ2FsbGVlQ2hhbm5lbCAtPiBDYWxsZWU6IGZ1bmN0aW9uTWFwLmdldChuYW1lKVxcbmV4ZWN1dGUgbWV0aG9kQShhcmdzKVxuYWN0aXZhdGUgQ2FsbGVlXG5cbkNhbGxlZSAtPiBDYWxsZWVDaGFubmVsOiBzZW5kTWVzc2FnZTpcXG57IG5hbWUsIHNlcSwgcGF5bG9hZCwgc3RhdHVzIH1cbmRlYWN0aXZhdGUgQ2FsbGVlXG5cdFxuQ2FsbGVlQ2hhbm5lbCAtPiBJbnZva2VyQ2hhbm5lbDogb25NZXNzYWdlKClcbmRlYWN0aXZhdGUgQ2FsbGVlQ2hhbm5lbFxuXHRcbkludm9rZXJDaGFubmVsIC0-IEludm9rZXI6IHByb21pc2VNYXAuZ2V0KG5hbWUsIHNlcSlcXG5yZXNvbHZlKHBheWxvYWQpL3JlamVjdCgpXG5kZWFjdGl2YXRlIEludm9rZXJDaGFubmVsXG5cblVzZXIgLT4gVXNlcjogcHJvbWlzZTxmdWxsZmlsbGVkIHwgcmVqZWN0ZWQ-XG5cbkBlbmR1bWwiLCJ1cmwiOiJodHRwczovL2Nkbi5ubGFyay5jb20veXVxdWUvX19wdW1sLzM4OTI1MWNkZmM4OTljYTdhZjQ3ZjNmYzdkNjc2NGIzLnN2ZyIsImlkIjoiVXB5eGMiLCJtYXJnaW4iOnsidG9wIjp0cnVlLCJib3R0b20iOnRydWV9LCJjYXJkIjoiZGlhZ3JhbSJ9)\n- Callee 中注册可被调用的所有方法，并保存在 functionMap\n- 用户调用 Invoker.invoke() 时：\n   - 创建一个 promise 对象，返回给用户，同时将其保存在 promiseMap 中\n   - 每次调用生成一个 id，保证调用和执行结果是一一对应的\n   - 进行超时控制，超时的任务直接执行 reject 该 promise\n- Invoker 通过 Channel 把调用方法消息发送给 Callee\n- Callee 解析收到的消息，通过 name 执行对应方法，并将结果和完成状态（成功 or 异常）通过 Channel 发送消息给 Invoker\n- Invoker 解析消息，通过 id+name 找到对应的 promise 对象，成功则 resolve，失败则 reject\n\n​\n\n实际上，这个设计不仅适用 IPC 调用，在浏览器的场景下也能直接得到很好的应用，比如说跨 iframe 的调用可以包装 window.postMessage()，跨标签页调用可以使用 storage 事件，以及 Web worker 中可借助 worker.postMessage() 作为通信的桥梁。\n<a name=\"YZqq9\"></a>\n## 快速开始\n基于以上设计，实现编码必然不在话下，趁着非工作时间迅速完成开发和文档的工作，源代码：[https://github.com/x-cold/event-invoke](https://github.com/x-cold/event-invoke)<br />​<br />\n<a name=\"QdHNb\"></a>\n### 安装依赖\n```bash\nnpm i -S event-invoke\n```\n<a name=\"PCXL8\"></a>\n### 父子进程通信实例\n> 示例代码：[Example code](https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/child_process)\n\n```javascript\n// parent.js\nconst cp = require('child_process');\nconst { Invoker } = require('event-invoke');\n\nconst invokerChannel = cp.fork('./child.js');\n\nconst invoker = new Invoker(invokerChannel);\n\nasync function main() {\n  const res1 = await invoker.invoke('sleep', 1000);\n  console.log('sleep 1000ms:', res1);\n  const res2 = await invoker.invoke('max', [1, 2, 3]); // 3\n  console.log('max(1, 2, 3):', res2);\n  invoker.destroy();\n}\n\nmain();\n```\n\n```js\n// child.js\nconst { Callee } = require('event-invoke');\n\nconst calleeChannel = process;\n\nconst callee = new Callee(calleeChannel);\n\n// async method\ncallee.register(async function sleep(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n});\n\n// sync method\ncallee.register(function max(...args) {\n  return Math.max(...args);\n});\n\ncallee.listen();\n```\n<a name=\"f11pK\"></a>\n### 自定义 Channel 实现 PM2 进程间调用\n> 示例代码：[Example code](https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/pm2)\n\n```javascript\n// pm2.config.cjs\nmodule.exports = {\n  apps: [\n    {\n      script: 'invoker.js',\n      name: 'invoker',\n      exec_mode: 'fork',\n    },\n    {\n      script: 'callee.js',\n      name: 'callee',\n      exec_mode: 'fork',\n    }\n  ],\n};\n```\n\n\n```javascript\n// callee.js\nimport net from 'net';\nimport pm2 from 'pm2';\nimport {\n  Callee,\n  BaseCalleeChannel\n} from 'event-invoke';\n\nconst messageType = 'event-invoke';\nconst messageTopic = 'some topic';\n\nclass CalleeChannel extends BaseCalleeChannel {\n  constructor() {\n    super();\n    this._onProcessMessage = this.onProcessMessage.bind(this);\n    process.on('message', this._onProcessMessage);\n  }\n\n  onProcessMessage(packet) {\n    if (packet.type !== messageType) {\n      return;\n    }\n    this.emit('message', packet.data);\n  }\n\n  send(data) {\n    pm2.list((err, processes) => {\n      if (err) { throw err; }\n      const list = processes.filter(p => p.name === 'invoker');\n      const pmId = list[0].pm2_env.pm_id;\n      pm2.sendDataToProcessId({\n        id: pmId,\n        type: messageType,\n        topic: messageTopic,\n        data,\n      }, function (err, res) {\n        if (err) { throw err; }\n      });\n    });\n  }\n\n  destory() {\n    process.off('message', this._onProcessMessage);\n  }\n}\n\nconst channel = new CalleeChannel();\nconst callee = new Callee(channel);\n\n// async method\ncallee.register(async function sleep(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n});\n\n// sync method\ncallee.register(function max(...args) {\n  return Math.max(...args);\n});\n\ncallee.listen();\n\n// keep your process alive\nnet.createServer().listen();\n```\n\n\n```javascript\n// invoker.js\nimport pm2 from 'pm2';\nimport {\n  Invoker,\n  BaseInvokerChannel\n} from 'event-invoke';\n\nconst messageType = 'event-invoke';\nconst messageTopic = 'some topic';\n\nclass InvokerChannel extends BaseInvokerChannel {\n  constructor() {\n    super();\n    this._onProcessMessage = this.onProcessMessage.bind(this);\n    process.on('message', this._onProcessMessage);\n  }\n\n  onProcessMessage(packet) {\n    if (packet.type !== messageType) {\n      return;\n    }\n    this.emit('message', packet.data);\n  }\n\n  send(data) {\n    pm2.list((err, processes) => {\n      if (err) { throw err; }\n      const list = processes.filter(p => p.name === 'callee');\n      const pmId = list[0].pm2_env.pm_id;\n      pm2.sendDataToProcessId({\n        id: pmId,\n        type: messageType,\n        topic: messageTopic,\n        data,\n      }, function (err, res) {\n        if (err) { throw err; }\n      });\n    });\n  }\n\n  connect() {\n    this.connected = true;\n  }\n\n  disconnect() {\n    this.connected = false;\n  }\n\n  destory() {\n    process.off('message', this._onProcessMessage);\n  }\n}\n\nconst channel = new InvokerChannel();\nchannel.connect();\n\nconst invoker = new Invoker(channel);\n\nsetInterval(async () => {\n  const res1 = await invoker.invoke('sleep', 1000);\n  console.log('sleep 1000ms:', res1);\n  const res2 = await invoker.invoke('max', [1, 2, 3]); // 3\n  console.log('max(1, 2, 3):', res2);\n}, 5 * 1000);\n```\n<a name=\"wfuoP\"></a>\n## 下一步\n目前 [event-invoke](https://github.com/x-cold/event-invoke) 具备了优雅调用“IPC”调用的基本能力，代码覆盖率 100%，同时提供了相对完善的[类型描述](https://github.com/x-cold/event-invoke/blob/master/index.d.ts)。感兴趣的同学可以直接使用，有任何问题可以直接提 [Issue](https://github.com/x-cold/event-invoke/issues)。<br />​\n\n另外一些后续仍要持续完善的部分：\n\n- 更丰富的示例，覆盖跨 Iframe，跨标签页，Web worker 等使用场景\n- 提供开箱即用通用 Channel\n- 更友好的异常处理\n\n\n\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"Nqmyg\"><span class=\"ne-text\">背景</span></h2><p id=\"ufc334809\" class=\"ne-p\"><span class=\"ne-text\">团队最近有一个 Node.js 全新的模块需要开发，涉及多进程的管理和通讯，简化模型可以理解为需要频繁从 master 进程调用 worker 进程的某些方法，简单设计实现了一个 </span><a href=\"https://github.com/x-cold/event-invoke\" data-href=\"https://github.com/x-cold/event-invoke\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">event-invoke</span></a><span class=\"ne-text\"> 的库，可以简单优雅进行调用。</span></p><div class=\"ne-quote\"><p id=\"u16d59054\" class=\"ne-p\"><span class=\"ne-text\">Node.js 提供了 child_process 模块，在 master 进程通过 fork / spawn 等方法调用可以创建 worker 进程并获取其对象（简称 cp）。父子进程会建立 IPC 通道，在 master 进程中可以使用 cp.send() 给 worker 进程发送 IPC 消息，而在 worker 进程中也可以通过 process.send() 给父进程发送 IPC 消息，达到双工通信的目的。（进程管理涉及更复杂的工作，本文暂不涉及）</span></p></div><h2 id=\"YHH44\"><span class=\"ne-text\">最小实现</span></h2><p id=\"u5322f9ba\" class=\"ne-p\"><span class=\"ne-text\">基于以上前提，借助 IPC 通道和进程对象，我们可以通过事件驱动的方式实现进程间的通信，只需要简单的几行代码，就能实现基本调用逻辑，例如：</span></p><pre data-language=\"javascript\" id=\"SOgaq\" class=\"ne-codeblock language-javascript\">// master.js\nconst child_process = require('child_process');\nconst cp = child_process.fork('./worker.js');\n\nfunction invoke() {\n\tcp.send({ name: 'methodA', args: [] });\n  cp.on('message', (packet) =&gt; {\n  \tconsole.log('result: %j', packet.payload);\n  });\n}\n\ninvoke();\n\n// worker.js\nconst methodMap = {\n  methodA() {}\n}\n\ncp.on('message', async (packet) =&gt; {\n  const { name, args } = packet;\n  const result = await methodMap[name)(...args);\n  process.send({ name, payload: result });\n});</pre><p id=\"u3b34b889\" class=\"ne-p\"><span class=\"ne-text\">仔细分析上述代码实现，直观感受 invoke 调用并不优雅，并且当调用量较大时，会创建很多的 message 监听器，并且要保证请求和响应是一一对应，需要做很多额外的设计。</span><strong><span class=\"ne-text\">希望设计一个简单理想的方式，只需提供 invoke 方法，传入方法名和参数，返回一个 Promise，像调用本地方法那样进行 IPC 调用，而不用考虑消息通信的细节。</span></strong></p><pre data-language=\"javascript\" id=\"gqjd9\" class=\"ne-codeblock language-javascript\">// 假想中的 IPC 调用\nconst res1 = await invoker.invoke('sleep', 1000);\nconsole.log('sleep 1000ms:', res1);\nconst res2 = await invoker.invoke('max', [1, 2, 3]); // 3\nconsole.log('max(1, 2, 3):', res2);</pre><h2 id=\"n5gZg\"><span class=\"ne-text\">流程设计</span></h2><p id=\"u10bfb036\" class=\"ne-p\"><span class=\"ne-text\">从调用的模型看，可以将角色抽象为 Invoker 和 Callee，分别对应服务调用方和提供方，将消息通讯的细节可以封装在内部。parent_process 和 child_process  的通信桥梁是操作系统提供的 IPC 通道，单纯从 API 的视角看，可以简化为两个 Event 对象（主进程为 cp，子进程为 process）。Event 对象作为中间的双工通道两端，暂且命名为 InvokerChannel 和 CalleeChannel。</span></p><p id=\"u64bc187f\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ua07f314f\" class=\"ne-p\"><span class=\"ne-text\">关键实体和流程如下：</span></p><div id=\"Upyxc\" class=\"ne-text-diagram\"><img src=\"https://cdn.nlark.com/yuque/__puml/389251cdfc899ca7af47f3fc7d6764b3.svg\"></div><ul class=\"ne-ul\"><li id=\"u2405557d\"><span class=\"ne-text\">Callee 中注册可被调用的所有方法，并保存在 functionMap</span></li><li id=\"ufbdaf781\"><span class=\"ne-text\">用户调用 Invoker.invoke() 时：</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u34e6177c\"><span class=\"ne-text\">创建一个 promise 对象，返回给用户，同时将其保存在 promiseMap 中</span></li><li id=\"ucde202be\"><span class=\"ne-text\">每次调用生成一个 id，保证调用和执行结果是一一对应的</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u4425e550\"><span class=\"ne-text\">进行超时控制，超时的任务直接执行 reject 该 promise</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u986e7c66\"><span class=\"ne-text\">Invoker 通过 Channel 把调用方法消息发送给 Callee</span></li><li id=\"u2155a773\"><span class=\"ne-text\">Callee 解析收到的消息，通过 name 执行对应方法，并将结果和完成状态（成功 or 异常）通过 Channel 发送消息给 Invoker</span></li></ul><ul class=\"ne-ul\"><li id=\"uf792bd01\"><span class=\"ne-text\">Invoker 解析消息，通过 id+name 找到对应的 promise 对象，成功则 resolve，失败则 reject</span></li></ul><p id=\"u4bd3af7a\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ubd2af793\" class=\"ne-p\"><span class=\"ne-text\">实际上，这个设计不仅适用 IPC 调用，在浏览器的场景下也能直接得到很好的应用，比如说跨 iframe 的调用可以包装 window.postMessage()，跨标签页调用可以使用 storage 事件，以及 Web worker 中可借助 worker.postMessage() 作为通信的桥梁。</span></p><h2 id=\"YZqq9\"><span class=\"ne-text\">快速开始</span></h2><p id=\"u63346eb1\" class=\"ne-p\"><span class=\"ne-text\">基于以上设计，实现编码必然不在话下，趁着非工作时间迅速完成开发和文档的工作，源代码：</span><a href=\"https://github.com/x-cold/event-invoke\" data-href=\"https://github.com/x-cold/event-invoke\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://github.com/x-cold/event-invoke</span></a></p><p id=\"ua557e7e5\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h3 id=\"QdHNb\"><span class=\"ne-text\">安装依赖</span></h3><pre data-language=\"bash\" id=\"XkKTI\" class=\"ne-codeblock language-bash\">npm i -S event-invoke</pre><h3 id=\"PCXL8\"><span class=\"ne-text\">父子进程通信实例</span></h3><div class=\"ne-quote\"><p id=\"uf0626e29\" class=\"ne-p\"><span class=\"ne-text\">示例代码：</span><a href=\"https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/child_process\" data-href=\"https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/child_process\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Example code</span></a></p></div><pre data-language=\"javascript\" id=\"lQPT8\" class=\"ne-codeblock language-javascript\">// parent.js\nconst cp = require('child_process');\nconst { Invoker } = require('event-invoke');\n\nconst invokerChannel = cp.fork('./child.js');\n\nconst invoker = new Invoker(invokerChannel);\n\nasync function main() {\n  const res1 = await invoker.invoke('sleep', 1000);\n  console.log('sleep 1000ms:', res1);\n  const res2 = await invoker.invoke('max', [1, 2, 3]); // 3\n  console.log('max(1, 2, 3):', res2);\n  invoker.destroy();\n}\n\nmain();\n```\n\n```js\n// child.js\nconst { Callee } = require('event-invoke');\n\nconst calleeChannel = process;\n\nconst callee = new Callee(calleeChannel);\n\n// async method\ncallee.register(async function sleep(ms) {\n  return new Promise((resolve) =&gt; {\n    setTimeout(resolve, ms);\n  });\n});\n\n// sync method\ncallee.register(function max(...args) {\n  return Math.max(...args);\n});\n\ncallee.listen();</pre><h3 id=\"f11pK\"><span class=\"ne-text\">自定义 Channel 实现 PM2 进程间调用</span></h3><div class=\"ne-quote\"><p id=\"u1aaf7927\" class=\"ne-p\"><span class=\"ne-text\">示例代码：</span><a href=\"https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/pm2\" data-href=\"https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/pm2\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Example code</span></a></p></div><pre data-language=\"javascript\" id=\"ef942d68\" class=\"ne-codeblock language-javascript\">// pm2.config.cjs\nmodule.exports = {\n  apps: [\n    {\n      script: 'invoker.js',\n      name: 'invoker',\n      exec_mode: 'fork',\n    },\n    {\n      script: 'callee.js',\n      name: 'callee',\n      exec_mode: 'fork',\n    }\n  ],\n};</pre><p id=\"ud96fd301\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"3682fda3\" class=\"ne-codeblock language-javascript\">// callee.js\nimport net from 'net';\nimport pm2 from 'pm2';\nimport {\n  Callee,\n  BaseCalleeChannel\n} from 'event-invoke';\n\nconst messageType = 'event-invoke';\nconst messageTopic = 'some topic';\n\nclass CalleeChannel extends BaseCalleeChannel {\n  constructor() {\n    super();\n    this._onProcessMessage = this.onProcessMessage.bind(this);\n    process.on('message', this._onProcessMessage);\n  }\n\n  onProcessMessage(packet) {\n    if (packet.type !== messageType) {\n      return;\n    }\n    this.emit('message', packet.data);\n  }\n\n  send(data) {\n    pm2.list((err, processes) =&gt; {\n      if (err) { throw err; }\n      const list = processes.filter(p =&gt; p.name === 'invoker');\n      const pmId = list[0].pm2_env.pm_id;\n      pm2.sendDataToProcessId({\n        id: pmId,\n        type: messageType,\n        topic: messageTopic,\n        data,\n      }, function (err, res) {\n        if (err) { throw err; }\n      });\n    });\n  }\n\n  destory() {\n    process.off('message', this._onProcessMessage);\n  }\n}\n\nconst channel = new CalleeChannel();\nconst callee = new Callee(channel);\n\n// async method\ncallee.register(async function sleep(ms) {\n  return new Promise((resolve) =&gt; {\n    setTimeout(resolve, ms);\n  });\n});\n\n// sync method\ncallee.register(function max(...args) {\n  return Math.max(...args);\n});\n\ncallee.listen();\n\n// keep your process alive\nnet.createServer().listen();</pre><p id=\"u00dd6b4b\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"91f00578\" class=\"ne-codeblock language-javascript\">// invoker.js\nimport pm2 from 'pm2';\nimport {\n  Invoker,\n  BaseInvokerChannel\n} from 'event-invoke';\n\nconst messageType = 'event-invoke';\nconst messageTopic = 'some topic';\n\nclass InvokerChannel extends BaseInvokerChannel {\n  constructor() {\n    super();\n    this._onProcessMessage = this.onProcessMessage.bind(this);\n    process.on('message', this._onProcessMessage);\n  }\n\n  onProcessMessage(packet) {\n    if (packet.type !== messageType) {\n      return;\n    }\n    this.emit('message', packet.data);\n  }\n\n  send(data) {\n    pm2.list((err, processes) =&gt; {\n      if (err) { throw err; }\n      const list = processes.filter(p =&gt; p.name === 'callee');\n      const pmId = list[0].pm2_env.pm_id;\n      pm2.sendDataToProcessId({\n        id: pmId,\n        type: messageType,\n        topic: messageTopic,\n        data,\n      }, function (err, res) {\n        if (err) { throw err; }\n      });\n    });\n  }\n\n  connect() {\n    this.connected = true;\n  }\n\n  disconnect() {\n    this.connected = false;\n  }\n\n  destory() {\n    process.off('message', this._onProcessMessage);\n  }\n}\n\nconst channel = new InvokerChannel();\nchannel.connect();\n\nconst invoker = new Invoker(channel);\n\nsetInterval(async () =&gt; {\n  const res1 = await invoker.invoke('sleep', 1000);\n  console.log('sleep 1000ms:', res1);\n  const res2 = await invoker.invoke('max', [1, 2, 3]); // 3\n  console.log('max(1, 2, 3):', res2);\n}, 5 * 1000);</pre><h2 id=\"wfuoP\"><span class=\"ne-text\">下一步</span></h2><p id=\"uc99cd43c\" class=\"ne-p\"><span class=\"ne-text\">目前 </span><a href=\"https://github.com/x-cold/event-invoke\" data-href=\"https://github.com/x-cold/event-invoke\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">event-invoke</span></a><span class=\"ne-text\"> 具备了优雅调用“IPC”调用的基本能力，代码覆盖率 100%，同时提供了相对完善的</span><a href=\"https://github.com/x-cold/event-invoke/blob/master/index.d.ts\" data-href=\"https://github.com/x-cold/event-invoke/blob/master/index.d.ts\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">类型描述</span></a><span class=\"ne-text\">。感兴趣的同学可以直接使用，有任何问题可以直接提 </span><a href=\"https://github.com/x-cold/event-invoke/issues\" data-href=\"https://github.com/x-cold/event-invoke/issues\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Issue</span></a><span class=\"ne-text\">。</span></p><p id=\"u67441bf9\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uac0c982e\" class=\"ne-p\"><span class=\"ne-text\">另外一些后续仍要持续完善的部分：</span></p><ul class=\"ne-ul\"><li id=\"u174f9ddd\"><span class=\"ne-text\">更丰富的示例，覆盖跨 Iframe，跨标签页，Web worker 等使用场景</span></li><li id=\"u3acd630e\"><span class=\"ne-text\">提供开箱即用通用 Channel</span></li></ul><ul class=\"ne-ul\"><li id=\"ubf2c3f43\"><span class=\"ne-text\">更友好的异常处理</span></li></ul><p id=\"u1095c5b0\" class=\"ne-p\"><br></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><h2 data-lake-id=\"Nqmyg\" id=\"Nqmyg\"><span data-lake-id=\"u3dd2a3dd\" id=\"u3dd2a3dd\">背景</span></h2><p data-lake-id=\"ufc334809\" id=\"ufc334809\"><span data-lake-id=\"ua485ea86\" id=\"ua485ea86\">团队最近有一个 Node.js 全新的模块需要开发，涉及多进程的管理和通讯，简化模型可以理解为需要频繁从 master 进程调用 worker 进程的某些方法，简单设计实现了一个 </span><a href=\"https://github.com/x-cold/event-invoke\" target=\"_blank\" data-lake-id=\"uade30060\" id=\"uade30060\"><span data-lake-id=\"uc8dc0f2c\" id=\"uc8dc0f2c\">event-invoke</span></a><span data-lake-id=\"ub3860769\" id=\"ub3860769\"> 的库，可以简单优雅进行调用。</span></p><blockquote data-lake-id=\"uc745990d\" id=\"uc745990d\"><p data-lake-id=\"u16d59054\" id=\"u16d59054\"><span data-lake-id=\"u3733d788\" id=\"u3733d788\">Node.js 提供了 child_process 模块，在 master 进程通过 fork / spawn 等方法调用可以创建 worker 进程并获取其对象（简称 cp）。父子进程会建立 IPC 通道，在 master 进程中可以使用 cp.send() 给 worker 进程发送 IPC 消息，而在 worker 进程中也可以通过 process.send() 给父进程发送 IPC 消息，达到双工通信的目的。（进程管理涉及更复杂的工作，本文暂不涉及）</span></p></blockquote><h2 data-lake-id=\"YHH44\" id=\"YHH44\"><span data-lake-id=\"ub8262d45\" id=\"ub8262d45\">最小实现</span></h2><p data-lake-id=\"u5322f9ba\" id=\"u5322f9ba\"><span data-lake-id=\"u686f4bd8\" id=\"u686f4bd8\">基于以上前提，借助 IPC 通道和进程对象，我们可以通过事件驱动的方式实现进程间的通信，只需要简单的几行代码，就能实现基本调用逻辑，例如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20master.js%5Cnconst%20child_process%20%3D%20require('child_process')%3B%5Cnconst%20cp%20%3D%20child_process.fork('.%2Fworker.js')%3B%5Cn%5Cnfunction%20invoke()%20%7B%5Cn%5Ctcp.send(%7B%20name%3A%20'methodA'%2C%20args%3A%20%5B%5D%20%7D)%3B%5Cn%20%20cp.on('message'%2C%20(packet)%20%3D%3E%20%7B%5Cn%20%20%5Ctconsole.log('result%3A%20%25j'%2C%20packet.payload)%3B%5Cn%20%20%7D)%3B%5Cn%7D%5Cn%5Cninvoke()%3B%5Cn%5Cn%2F%2F%20worker.js%5Cnconst%20methodMap%20%3D%20%7B%5Cn%20%20methodA()%20%7B%7D%5Cn%7D%5Cn%5Cncp.on('message'%2C%20async%20(packet)%20%3D%3E%20%7B%5Cn%20%20const%20%7B%20name%2C%20args%20%7D%20%3D%20packet%3B%5Cn%20%20const%20result%20%3D%20await%20methodMap%5Bname)(...args)%3B%5Cn%20%20process.send(%7B%20name%2C%20payload%3A%20result%20%7D)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22SOgaq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u3b34b889\" id=\"u3b34b889\"><span data-lake-id=\"u07011ae9\" id=\"u07011ae9\">仔细分析上述代码实现，直观感受 invoke 调用并不优雅，并且当调用量较大时，会创建很多的 message 监听器，并且要保证请求和响应是一一对应，需要做很多额外的设计。</span><strong><span data-lake-id=\"u3bdecabb\" id=\"u3bdecabb\">希望设计一个简单理想的方式，只需提供 invoke 方法，传入方法名和参数，返回一个 Promise，像调用本地方法那样进行 IPC 调用，而不用考虑消息通信的细节。</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%81%87%E6%83%B3%E4%B8%AD%E7%9A%84%20IPC%20%E8%B0%83%E7%94%A8%5Cnconst%20res1%20%3D%20await%20invoker.invoke('sleep'%2C%201000)%3B%5Cnconsole.log('sleep%201000ms%3A'%2C%20res1)%3B%5Cnconst%20res2%20%3D%20await%20invoker.invoke('max'%2C%20%5B1%2C%202%2C%203%5D)%3B%20%2F%2F%203%5Cnconsole.log('max(1%2C%202%2C%203)%3A'%2C%20res2)%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gqjd9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"n5gZg\" id=\"n5gZg\"><span data-lake-id=\"uc927632f\" id=\"uc927632f\">流程设计</span></h2><p data-lake-id=\"u10bfb036\" id=\"u10bfb036\"><span data-lake-id=\"u2e41bc7d\" id=\"u2e41bc7d\">从调用的模型看，可以将角色抽象为 Invoker 和 Callee，分别对应服务调用方和提供方，将消息通讯的细节可以封装在内部。parent_process 和 child_process  的通信桥梁是操作系统提供的 IPC 通道，单纯从 API 的视角看，可以简化为两个 Event 对象（主进程为 cp，子进程为 process）。Event 对象作为中间的双工通道两端，暂且命名为 InvokerChannel 和 CalleeChannel。</span></p><p data-lake-id=\"u64bc187f\" id=\"u64bc187f\"><span data-lake-id=\"uc563d341\" id=\"uc563d341\">​</span><br></p><p data-lake-id=\"ua07f314f\" id=\"ua07f314f\"><span data-lake-id=\"u067d9414\" id=\"u067d9414\">关键实体和流程如下：</span></p><card type=\"block\" name=\"diagram\" value=\"data:%7B%22type%22%3A%22puml%22%2C%22code%22%3A%22%40startuml%5Cn%5Cnautonumber%5Cn%5Cnactor%20%5C%22user%5C%22%20as%20User%5Cnparticipant%20%5C%22Invoker%5C%22%20as%20Invoker%5Cnparticipant%20%5C%22InvokerChannel%5C%22%20as%20InvokerChannel%5Cnparticipant%20%5C%22CalleeChannel%5C%22%20as%20CalleeChannel%5Cnparticipant%20%5C%22Callee%5C%22%20as%20Callee%5Cn%5Cnactivate%20User%5Cn%5CnUser%20-%3E%20Invoker%3A%20invoker.invoke('methodA'%2C%20args)%5Cnactivate%20Invoker%5CnInvoker%20-%3E%20Invoker%3A%20promiseMap.set(name%2C%20seq%2C%20promise)%5CnInvoker%20-%3E%20User%3A%20promise%3Cpending%3E%5Cn%5CnInvoker%20-%3E%20InvokerChannel%3A%20sendMessage%3A%5C%5Cn%7B%20name%2C%20args%2C%20seq%20%7D%5Cnactivate%20InvokerChannel%5Cn%5CnInvokerChannel%20-%3E%20CalleeChannel%3A%20onMessage()%5Cnactivate%20CalleeChannel%5Cn%5CnInvoker%20-%3E%20Invoker%3A%20onTimeout%3A%20reject()%5Cn%5CnCalleeChannel%20-%3E%20Callee%3A%20functionMap.get(name)%5C%5Cnexecute%20methodA(args)%5Cnactivate%20Callee%5Cn%5CnCallee%20-%3E%20CalleeChannel%3A%20sendMessage%3A%5C%5Cn%7B%20name%2C%20seq%2C%20payload%2C%20status%20%7D%5Cndeactivate%20Callee%5Cn%5Ct%5CnCalleeChannel%20-%3E%20InvokerChannel%3A%20onMessage()%5Cndeactivate%20CalleeChannel%5Cn%5Ct%5CnInvokerChannel%20-%3E%20Invoker%3A%20promiseMap.get(name%2C%20seq)%5C%5Cnresolve(payload)%2Freject()%5Cndeactivate%20InvokerChannel%5Cn%5CnUser%20-%3E%20User%3A%20promise%3Cfullfilled%20%7C%20rejected%3E%5Cn%5Cn%40enduml%22%2C%22url%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F__puml%2F389251cdfc899ca7af47f3fc7d6764b3.svg%22%2C%22id%22%3A%22Upyxc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u7423ff3a\"><li fid=\"ue7627877\" data-lake-id=\"u2405557d\" id=\"u2405557d\"><span data-lake-id=\"ua51727f9\" id=\"ua51727f9\">Callee 中注册可被调用的所有方法，并保存在 functionMap</span></li><li fid=\"ue7627877\" data-lake-id=\"ufbdaf781\" id=\"ufbdaf781\"><span data-lake-id=\"uc30ff00f\" id=\"uc30ff00f\">用户调用 Invoker.invoke() 时：</span></li></ul><ul list=\"u7423ff3a\" data-lake-indent=\"1\"><li fid=\"ue7627877\" data-lake-id=\"u34e6177c\" id=\"u34e6177c\"><span data-lake-id=\"ua64b49b2\" id=\"ua64b49b2\">创建一个 promise 对象，返回给用户，同时将其保存在 promiseMap 中</span></li><li fid=\"ue7627877\" data-lake-id=\"ucde202be\" id=\"ucde202be\"><span data-lake-id=\"ucf307a6c\" id=\"ucf307a6c\">每次调用生成一个 id，保证调用和执行结果是一一对应的</span></li><li fid=\"ue7627877\" data-lake-id=\"u4425e550\" id=\"u4425e550\"><span data-lake-id=\"uf27986c1\" id=\"uf27986c1\">进行超时控制，超时的任务直接执行 reject 该 promise</span></li></ul><ul list=\"u7423ff3a\" start=\"3\"><li fid=\"ue7627877\" data-lake-id=\"u986e7c66\" id=\"u986e7c66\"><span data-lake-id=\"u56f0f29c\" id=\"u56f0f29c\">Invoker 通过 Channel 把调用方法消息发送给 Callee</span></li><li fid=\"ue7627877\" data-lake-id=\"u2155a773\" id=\"u2155a773\"><span data-lake-id=\"u0e9e24bc\" id=\"u0e9e24bc\">Callee 解析收到的消息，通过 name 执行对应方法，并将结果和完成状态（成功 or 异常）通过 Channel 发送消息给 Invoker</span></li><li fid=\"ue7627877\" data-lake-id=\"uf792bd01\" id=\"uf792bd01\"><span data-lake-id=\"u67e7413a\" id=\"u67e7413a\">Invoker 解析消息，通过 id+name 找到对应的 promise 对象，成功则 resolve，失败则 reject</span></li></ul><p data-lake-id=\"u4bd3af7a\" id=\"u4bd3af7a\"><span data-lake-id=\"u17fd6024\" id=\"u17fd6024\">​</span><br></p><p data-lake-id=\"ubd2af793\" id=\"ubd2af793\"><span data-lake-id=\"u15f9fda4\" id=\"u15f9fda4\">实际上，这个设计不仅适用 IPC 调用，在浏览器的场景下也能直接得到很好的应用，比如说跨 iframe 的调用可以包装 window.postMessage()，跨标签页调用可以使用 storage 事件，以及 Web worker 中可借助 worker.postMessage() 作为通信的桥梁。</span></p><h2 data-lake-id=\"YZqq9\" id=\"YZqq9\"><span data-lake-id=\"u14851ece\" id=\"u14851ece\">快速开始</span></h2><p data-lake-id=\"u63346eb1\" id=\"u63346eb1\"><span data-lake-id=\"u3033ca5f\" id=\"u3033ca5f\">基于以上设计，实现编码必然不在话下，趁着非工作时间迅速完成开发和文档的工作，源代码：</span><a href=\"https://github.com/x-cold/event-invoke\" target=\"_blank\" data-lake-id=\"ub770535d\" id=\"ub770535d\"><span data-lake-id=\"u3192a7e1\" id=\"u3192a7e1\">https://github.com/x-cold/event-invoke</span></a></p><p data-lake-id=\"ua557e7e5\" id=\"ua557e7e5\"><span data-lake-id=\"ua23497ba\" id=\"ua23497ba\">​</span><br></p><h3 data-lake-id=\"QdHNb\" id=\"QdHNb\"><span data-lake-id=\"ua276a772\" id=\"ua276a772\">安装依赖</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22npm%20i%20-S%20event-invoke%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22XkKTI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"PCXL8\" id=\"PCXL8\"><span data-lake-id=\"u2addd159\" id=\"u2addd159\">父子进程通信实例</span></h3><blockquote data-lake-id=\"u4b0e4a9f\" id=\"u4b0e4a9f\"><p data-lake-id=\"uf0626e29\" id=\"uf0626e29\"><span data-lake-id=\"ub99c6eed\" id=\"ub99c6eed\">示例代码：</span><a href=\"https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/child_process\" target=\"_blank\" data-lake-id=\"uaa71daaf\" id=\"uaa71daaf\"><span data-lake-id=\"u088cb915\" id=\"u088cb915\">Example code</span></a></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20parent.js%5Cnconst%20cp%20%3D%20require('child_process')%3B%5Cnconst%20%7B%20Invoker%20%7D%20%3D%20require('event-invoke')%3B%5Cn%5Cnconst%20invokerChannel%20%3D%20cp.fork('.%2Fchild.js')%3B%5Cn%5Cnconst%20invoker%20%3D%20new%20Invoker(invokerChannel)%3B%5Cn%5Cnasync%20function%20main()%20%7B%5Cn%20%20const%20res1%20%3D%20await%20invoker.invoke('sleep'%2C%201000)%3B%5Cn%20%20console.log('sleep%201000ms%3A'%2C%20res1)%3B%5Cn%20%20const%20res2%20%3D%20await%20invoker.invoke('max'%2C%20%5B1%2C%202%2C%203%5D)%3B%20%2F%2F%203%5Cn%20%20console.log('max(1%2C%202%2C%203)%3A'%2C%20res2)%3B%5Cn%20%20invoker.destroy()%3B%5Cn%7D%5Cn%5Cnmain()%3B%5Cn%60%60%60%5Cn%5Cn%60%60%60js%5Cn%2F%2F%20child.js%5Cnconst%20%7B%20Callee%20%7D%20%3D%20require('event-invoke')%3B%5Cn%5Cnconst%20calleeChannel%20%3D%20process%3B%5Cn%5Cnconst%20callee%20%3D%20new%20Callee(calleeChannel)%3B%5Cn%5Cn%2F%2F%20async%20method%5Cncallee.register(async%20function%20sleep(ms)%20%7B%5Cn%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(resolve%2C%20ms)%3B%5Cn%20%20%7D)%3B%5Cn%7D)%3B%5Cn%5Cn%2F%2F%20sync%20method%5Cncallee.register(function%20max(...args)%20%7B%5Cn%20%20return%20Math.max(...args)%3B%5Cn%7D)%3B%5Cn%5Cncallee.listen()%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22lQPT8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"f11pK\" id=\"f11pK\"><span data-lake-id=\"u3541c6c7\" id=\"u3541c6c7\">自定义 Channel 实现 PM2 进程间调用</span></h3><blockquote data-lake-id=\"uf9825ec6\" id=\"uf9825ec6\"><p data-lake-id=\"u1aaf7927\" id=\"u1aaf7927\"><span data-lake-id=\"u13c95503\" id=\"u13c95503\">示例代码：</span><a href=\"https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/pm2\" target=\"_blank\" data-lake-id=\"ue9c806ad\" id=\"ue9c806ad\"><span data-lake-id=\"u8ffecaa5\" id=\"u8ffecaa5\">Example code</span></a></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20pm2.config.cjs%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20apps%3A%20%5B%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20script%3A%20'invoker.js'%2C%5Cn%20%20%20%20%20%20name%3A%20'invoker'%2C%5Cn%20%20%20%20%20%20exec_mode%3A%20'fork'%2C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20script%3A%20'callee.js'%2C%5Cn%20%20%20%20%20%20name%3A%20'callee'%2C%5Cn%20%20%20%20%20%20exec_mode%3A%20'fork'%2C%5Cn%20%20%20%20%7D%5Cn%20%20%5D%2C%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22ef942d68%22%7D\"></card><p data-lake-id=\"ud96fd301\" id=\"ud96fd301\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20callee.js%5Cnimport%20net%20from%20'net'%3B%5Cnimport%20pm2%20from%20'pm2'%3B%5Cnimport%20%7B%5Cn%20%20Callee%2C%5Cn%20%20BaseCalleeChannel%5Cn%7D%20from%20'event-invoke'%3B%5Cn%5Cnconst%20messageType%20%3D%20'event-invoke'%3B%5Cnconst%20messageTopic%20%3D%20'some%20topic'%3B%5Cn%5Cnclass%20CalleeChannel%20extends%20BaseCalleeChannel%20%7B%5Cn%20%20constructor()%20%7B%5Cn%20%20%20%20super()%3B%5Cn%20%20%20%20this._onProcessMessage%20%3D%20this.onProcessMessage.bind(this)%3B%5Cn%20%20%20%20process.on('message'%2C%20this._onProcessMessage)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20onProcessMessage(packet)%20%7B%5Cn%20%20%20%20if%20(packet.type%20!%3D%3D%20messageType)%20%7B%5Cn%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20this.emit('message'%2C%20packet.data)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20send(data)%20%7B%5Cn%20%20%20%20pm2.list((err%2C%20processes)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(err)%20%7B%20throw%20err%3B%20%7D%5Cn%20%20%20%20%20%20const%20list%20%3D%20processes.filter(p%20%3D%3E%20p.name%20%3D%3D%3D%20'invoker')%3B%5Cn%20%20%20%20%20%20const%20pmId%20%3D%20list%5B0%5D.pm2_env.pm_id%3B%5Cn%20%20%20%20%20%20pm2.sendDataToProcessId(%7B%5Cn%20%20%20%20%20%20%20%20id%3A%20pmId%2C%5Cn%20%20%20%20%20%20%20%20type%3A%20messageType%2C%5Cn%20%20%20%20%20%20%20%20topic%3A%20messageTopic%2C%5Cn%20%20%20%20%20%20%20%20data%2C%5Cn%20%20%20%20%20%20%7D%2C%20function%20(err%2C%20res)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(err)%20%7B%20throw%20err%3B%20%7D%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20destory()%20%7B%5Cn%20%20%20%20process.off('message'%2C%20this._onProcessMessage)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnconst%20channel%20%3D%20new%20CalleeChannel()%3B%5Cnconst%20callee%20%3D%20new%20Callee(channel)%3B%5Cn%5Cn%2F%2F%20async%20method%5Cncallee.register(async%20function%20sleep(ms)%20%7B%5Cn%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(resolve%2C%20ms)%3B%5Cn%20%20%7D)%3B%5Cn%7D)%3B%5Cn%5Cn%2F%2F%20sync%20method%5Cncallee.register(function%20max(...args)%20%7B%5Cn%20%20return%20Math.max(...args)%3B%5Cn%7D)%3B%5Cn%5Cncallee.listen()%3B%5Cn%5Cn%2F%2F%20keep%20your%20process%20alive%5Cnnet.createServer().listen()%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%223682fda3%22%7D\"></card><p data-lake-id=\"u00dd6b4b\" id=\"u00dd6b4b\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20invoker.js%5Cnimport%20pm2%20from%20'pm2'%3B%5Cnimport%20%7B%5Cn%20%20Invoker%2C%5Cn%20%20BaseInvokerChannel%5Cn%7D%20from%20'event-invoke'%3B%5Cn%5Cnconst%20messageType%20%3D%20'event-invoke'%3B%5Cnconst%20messageTopic%20%3D%20'some%20topic'%3B%5Cn%5Cnclass%20InvokerChannel%20extends%20BaseInvokerChannel%20%7B%5Cn%20%20constructor()%20%7B%5Cn%20%20%20%20super()%3B%5Cn%20%20%20%20this._onProcessMessage%20%3D%20this.onProcessMessage.bind(this)%3B%5Cn%20%20%20%20process.on('message'%2C%20this._onProcessMessage)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20onProcessMessage(packet)%20%7B%5Cn%20%20%20%20if%20(packet.type%20!%3D%3D%20messageType)%20%7B%5Cn%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20this.emit('message'%2C%20packet.data)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20send(data)%20%7B%5Cn%20%20%20%20pm2.list((err%2C%20processes)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(err)%20%7B%20throw%20err%3B%20%7D%5Cn%20%20%20%20%20%20const%20list%20%3D%20processes.filter(p%20%3D%3E%20p.name%20%3D%3D%3D%20'callee')%3B%5Cn%20%20%20%20%20%20const%20pmId%20%3D%20list%5B0%5D.pm2_env.pm_id%3B%5Cn%20%20%20%20%20%20pm2.sendDataToProcessId(%7B%5Cn%20%20%20%20%20%20%20%20id%3A%20pmId%2C%5Cn%20%20%20%20%20%20%20%20type%3A%20messageType%2C%5Cn%20%20%20%20%20%20%20%20topic%3A%20messageTopic%2C%5Cn%20%20%20%20%20%20%20%20data%2C%5Cn%20%20%20%20%20%20%7D%2C%20function%20(err%2C%20res)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(err)%20%7B%20throw%20err%3B%20%7D%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20connect()%20%7B%5Cn%20%20%20%20this.connected%20%3D%20true%3B%5Cn%20%20%7D%5Cn%5Cn%20%20disconnect()%20%7B%5Cn%20%20%20%20this.connected%20%3D%20false%3B%5Cn%20%20%7D%5Cn%5Cn%20%20destory()%20%7B%5Cn%20%20%20%20process.off('message'%2C%20this._onProcessMessage)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnconst%20channel%20%3D%20new%20InvokerChannel()%3B%5Cnchannel.connect()%3B%5Cn%5Cnconst%20invoker%20%3D%20new%20Invoker(channel)%3B%5Cn%5CnsetInterval(async%20()%20%3D%3E%20%7B%5Cn%20%20const%20res1%20%3D%20await%20invoker.invoke('sleep'%2C%201000)%3B%5Cn%20%20console.log('sleep%201000ms%3A'%2C%20res1)%3B%5Cn%20%20const%20res2%20%3D%20await%20invoker.invoke('max'%2C%20%5B1%2C%202%2C%203%5D)%3B%20%2F%2F%203%5Cn%20%20console.log('max(1%2C%202%2C%203)%3A'%2C%20res2)%3B%5Cn%7D%2C%205%20*%201000)%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2291f00578%22%7D\"></card><h2 data-lake-id=\"wfuoP\" id=\"wfuoP\"><span data-lake-id=\"uab251d19\" id=\"uab251d19\">下一步</span></h2><p data-lake-id=\"uc99cd43c\" id=\"uc99cd43c\"><span data-lake-id=\"u77a2d579\" id=\"u77a2d579\">目前 </span><a href=\"https://github.com/x-cold/event-invoke\" target=\"_blank\" data-lake-id=\"uf9b9ec07\" id=\"uf9b9ec07\"><span data-lake-id=\"u57caf761\" id=\"u57caf761\">event-invoke</span></a><span data-lake-id=\"ubeace622\" id=\"ubeace622\"> 具备了优雅调用“IPC”调用的基本能力，代码覆盖率 100%，同时提供了相对完善的</span><a href=\"https://github.com/x-cold/event-invoke/blob/master/index.d.ts\" target=\"_blank\" data-lake-id=\"uc92bde1d\" id=\"uc92bde1d\"><span data-lake-id=\"ue87c5ed8\" id=\"ue87c5ed8\">类型描述</span></a><span data-lake-id=\"u444c7392\" id=\"u444c7392\">。感兴趣的同学可以直接使用，有任何问题可以直接提 </span><a href=\"https://github.com/x-cold/event-invoke/issues\" target=\"_blank\" data-lake-id=\"u1ac36a76\" id=\"u1ac36a76\"><span data-lake-id=\"u0fa7fa92\" id=\"u0fa7fa92\">Issue</span></a><span data-lake-id=\"u033cceb9\" id=\"u033cceb9\">。</span></p><p data-lake-id=\"u67441bf9\" id=\"u67441bf9\"><span data-lake-id=\"u5d69c72d\" id=\"u5d69c72d\">​</span><br></p><p data-lake-id=\"uac0c982e\" id=\"uac0c982e\"><span data-lake-id=\"u40e18b09\" id=\"u40e18b09\">另外一些后续仍要持续完善的部分：</span></p><ul list=\"uec4a888a\"><li fid=\"u8233dd23\" data-lake-id=\"u174f9ddd\" id=\"u174f9ddd\"><span data-lake-id=\"ua05736c4\" id=\"ua05736c4\">更丰富的示例，覆盖跨 Iframe，跨标签页，Web worker 等使用场景</span></li><li fid=\"u8233dd23\" data-lake-id=\"u3acd630e\" id=\"u3acd630e\"><span data-lake-id=\"ubb111055\" id=\"ubb111055\">提供开箱即用通用 Channel</span></li><li fid=\"u8233dd23\" data-lake-id=\"ubf2c3f43\" id=\"ubf2c3f43\"><span data-lake-id=\"u6e2aced6\" id=\"u6e2aced6\">更友好的异常处理</span></li></ul><p data-lake-id=\"u1095c5b0\" id=\"u1095c5b0\"><br></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><h2 data-lake-id=\"Nqmyg\" id=\"Nqmyg\"><span data-lake-id=\"u3dd2a3dd\" id=\"u3dd2a3dd\">背景</span></h2><p data-lake-id=\"ufc334809\" id=\"ufc334809\"><span data-lake-id=\"ua485ea86\" id=\"ua485ea86\">团队最近有一个 Node.js 全新的模块需要开发，涉及多进程的管理和通讯，简化模型可以理解为需要频繁从 master 进程调用 worker 进程的某些方法，简单设计实现了一个 </span><a href=\"https://github.com/x-cold/event-invoke\" target=\"_blank\" data-lake-id=\"uade30060\" id=\"uade30060\"><span data-lake-id=\"uc8dc0f2c\" id=\"uc8dc0f2c\">event-invoke</span></a><span data-lake-id=\"ub3860769\" id=\"ub3860769\"> 的库，可以简单优雅进行调用。</span></p><blockquote data-lake-id=\"uc745990d\" id=\"uc745990d\"><p data-lake-id=\"u16d59054\" id=\"u16d59054\"><span data-lake-id=\"u3733d788\" id=\"u3733d788\">Node.js 提供了 child_process 模块，在 master 进程通过 fork / spawn 等方法调用可以创建 worker 进程并获取其对象（简称 cp）。父子进程会建立 IPC 通道，在 master 进程中可以使用 cp.send() 给 worker 进程发送 IPC 消息，而在 worker 进程中也可以通过 process.send() 给父进程发送 IPC 消息，达到双工通信的目的。（进程管理涉及更复杂的工作，本文暂不涉及）</span></p></blockquote><h2 data-lake-id=\"YHH44\" id=\"YHH44\"><span data-lake-id=\"ub8262d45\" id=\"ub8262d45\">最小实现</span></h2><p data-lake-id=\"u5322f9ba\" id=\"u5322f9ba\"><span data-lake-id=\"u686f4bd8\" id=\"u686f4bd8\">基于以上前提，借助 IPC 通道和进程对象，我们可以通过事件驱动的方式实现进程间的通信，只需要简单的几行代码，就能实现基本调用逻辑，例如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20master.js%5Cnconst%20child_process%20%3D%20require('child_process')%3B%5Cnconst%20cp%20%3D%20child_process.fork('.%2Fworker.js')%3B%5Cn%5Cnfunction%20invoke()%20%7B%5Cn%5Ctcp.send(%7B%20name%3A%20'methodA'%2C%20args%3A%20%5B%5D%20%7D)%3B%5Cn%20%20cp.on('message'%2C%20(packet)%20%3D%3E%20%7B%5Cn%20%20%5Ctconsole.log('result%3A%20%25j'%2C%20packet.payload)%3B%5Cn%20%20%7D)%3B%5Cn%7D%5Cn%5Cninvoke()%3B%5Cn%5Cn%2F%2F%20worker.js%5Cnconst%20methodMap%20%3D%20%7B%5Cn%20%20methodA()%20%7B%7D%5Cn%7D%5Cn%5Cncp.on('message'%2C%20async%20(packet)%20%3D%3E%20%7B%5Cn%20%20const%20%7B%20name%2C%20args%20%7D%20%3D%20packet%3B%5Cn%20%20const%20result%20%3D%20await%20methodMap%5Bname)(...args)%3B%5Cn%20%20process.send(%7B%20name%2C%20payload%3A%20result%20%7D)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22SOgaq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u3b34b889\" id=\"u3b34b889\"><span data-lake-id=\"u07011ae9\" id=\"u07011ae9\">仔细分析上述代码实现，直观感受 invoke 调用并不优雅，并且当调用量较大时，会创建很多的 message 监听器，并且要保证请求和响应是一一对应，需要做很多额外的设计。</span><strong><span data-lake-id=\"u3bdecabb\" id=\"u3bdecabb\">希望设计一个简单理想的方式，只需提供 invoke 方法，传入方法名和参数，返回一个 Promise，像调用本地方法那样进行 IPC 调用，而不用考虑消息通信的细节。</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%81%87%E6%83%B3%E4%B8%AD%E7%9A%84%20IPC%20%E8%B0%83%E7%94%A8%5Cnconst%20res1%20%3D%20await%20invoker.invoke('sleep'%2C%201000)%3B%5Cnconsole.log('sleep%201000ms%3A'%2C%20res1)%3B%5Cnconst%20res2%20%3D%20await%20invoker.invoke('max'%2C%20%5B1%2C%202%2C%203%5D)%3B%20%2F%2F%203%5Cnconsole.log('max(1%2C%202%2C%203)%3A'%2C%20res2)%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gqjd9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"n5gZg\" id=\"n5gZg\"><span data-lake-id=\"uc927632f\" id=\"uc927632f\">流程设计</span></h2><p data-lake-id=\"u10bfb036\" id=\"u10bfb036\"><span data-lake-id=\"u2e41bc7d\" id=\"u2e41bc7d\">从调用的模型看，可以将角色抽象为 Invoker 和 Callee，分别对应服务调用方和提供方，将消息通讯的细节可以封装在内部。parent_process 和 child_process  的通信桥梁是操作系统提供的 IPC 通道，单纯从 API 的视角看，可以简化为两个 Event 对象（主进程为 cp，子进程为 process）。Event 对象作为中间的双工通道两端，暂且命名为 InvokerChannel 和 CalleeChannel。</span></p><p data-lake-id=\"u64bc187f\" id=\"u64bc187f\"><span data-lake-id=\"uc563d341\" id=\"uc563d341\">​</span><br></p><p data-lake-id=\"ua07f314f\" id=\"ua07f314f\"><span data-lake-id=\"u067d9414\" id=\"u067d9414\">关键实体和流程如下：</span></p><card type=\"block\" name=\"diagram\" value=\"data:%7B%22type%22%3A%22puml%22%2C%22code%22%3A%22%40startuml%5Cn%5Cnautonumber%5Cn%5Cnactor%20%5C%22user%5C%22%20as%20User%5Cnparticipant%20%5C%22Invoker%5C%22%20as%20Invoker%5Cnparticipant%20%5C%22InvokerChannel%5C%22%20as%20InvokerChannel%5Cnparticipant%20%5C%22CalleeChannel%5C%22%20as%20CalleeChannel%5Cnparticipant%20%5C%22Callee%5C%22%20as%20Callee%5Cn%5Cnactivate%20User%5Cn%5CnUser%20-%3E%20Invoker%3A%20invoker.invoke('methodA'%2C%20args)%5Cnactivate%20Invoker%5CnInvoker%20-%3E%20Invoker%3A%20promiseMap.set(name%2C%20seq%2C%20promise)%5CnInvoker%20-%3E%20User%3A%20promise%3Cpending%3E%5Cn%5CnInvoker%20-%3E%20InvokerChannel%3A%20sendMessage%3A%5C%5Cn%7B%20name%2C%20args%2C%20seq%20%7D%5Cnactivate%20InvokerChannel%5Cn%5CnInvokerChannel%20-%3E%20CalleeChannel%3A%20onMessage()%5Cnactivate%20CalleeChannel%5Cn%5CnInvoker%20-%3E%20Invoker%3A%20onTimeout%3A%20reject()%5Cn%5CnCalleeChannel%20-%3E%20Callee%3A%20functionMap.get(name)%5C%5Cnexecute%20methodA(args)%5Cnactivate%20Callee%5Cn%5CnCallee%20-%3E%20CalleeChannel%3A%20sendMessage%3A%5C%5Cn%7B%20name%2C%20seq%2C%20payload%2C%20status%20%7D%5Cndeactivate%20Callee%5Cn%5Ct%5CnCalleeChannel%20-%3E%20InvokerChannel%3A%20onMessage()%5Cndeactivate%20CalleeChannel%5Cn%5Ct%5CnInvokerChannel%20-%3E%20Invoker%3A%20promiseMap.get(name%2C%20seq)%5C%5Cnresolve(payload)%2Freject()%5Cndeactivate%20InvokerChannel%5Cn%5CnUser%20-%3E%20User%3A%20promise%3Cfullfilled%20%7C%20rejected%3E%5Cn%5Cn%40enduml%22%2C%22url%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F__puml%2F389251cdfc899ca7af47f3fc7d6764b3.svg%22%2C%22id%22%3A%22Upyxc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u7423ff3a\"><li fid=\"ue7627877\" data-lake-id=\"u2405557d\" id=\"u2405557d\"><span data-lake-id=\"ua51727f9\" id=\"ua51727f9\">Callee 中注册可被调用的所有方法，并保存在 functionMap</span></li><li fid=\"ue7627877\" data-lake-id=\"ufbdaf781\" id=\"ufbdaf781\"><span data-lake-id=\"uc30ff00f\" id=\"uc30ff00f\">用户调用 Invoker.invoke() 时：</span></li></ul><ul list=\"u7423ff3a\" data-lake-indent=\"1\"><li fid=\"ue7627877\" data-lake-id=\"u34e6177c\" id=\"u34e6177c\"><span data-lake-id=\"ua64b49b2\" id=\"ua64b49b2\">创建一个 promise 对象，返回给用户，同时将其保存在 promiseMap 中</span></li><li fid=\"ue7627877\" data-lake-id=\"ucde202be\" id=\"ucde202be\"><span data-lake-id=\"ucf307a6c\" id=\"ucf307a6c\">每次调用生成一个 id，保证调用和执行结果是一一对应的</span></li><li fid=\"ue7627877\" data-lake-id=\"u4425e550\" id=\"u4425e550\"><span data-lake-id=\"uf27986c1\" id=\"uf27986c1\">进行超时控制，超时的任务直接执行 reject 该 promise</span></li></ul><ul list=\"u7423ff3a\" start=\"3\"><li fid=\"ue7627877\" data-lake-id=\"u986e7c66\" id=\"u986e7c66\"><span data-lake-id=\"u56f0f29c\" id=\"u56f0f29c\">Invoker 通过 Channel 把调用方法消息发送给 Callee</span></li><li fid=\"ue7627877\" data-lake-id=\"u2155a773\" id=\"u2155a773\"><span data-lake-id=\"u0e9e24bc\" id=\"u0e9e24bc\">Callee 解析收到的消息，通过 name 执行对应方法，并将结果和完成状态（成功 or 异常）通过 Channel 发送消息给 Invoker</span></li><li fid=\"ue7627877\" data-lake-id=\"uf792bd01\" id=\"uf792bd01\"><span data-lake-id=\"u67e7413a\" id=\"u67e7413a\">Invoker 解析消息，通过 id+name 找到对应的 promise 对象，成功则 resolve，失败则 reject</span></li></ul><p data-lake-id=\"u4bd3af7a\" id=\"u4bd3af7a\"><span data-lake-id=\"u17fd6024\" id=\"u17fd6024\">​</span><br></p><p data-lake-id=\"ubd2af793\" id=\"ubd2af793\"><span data-lake-id=\"u15f9fda4\" id=\"u15f9fda4\">实际上，这个设计不仅适用 IPC 调用，在浏览器的场景下也能直接得到很好的应用，比如说跨 iframe 的调用可以包装 window.postMessage()，跨标签页调用可以使用 storage 事件，以及 Web worker 中可借助 worker.postMessage() 作为通信的桥梁。</span></p><h2 data-lake-id=\"YZqq9\" id=\"YZqq9\"><span data-lake-id=\"u14851ece\" id=\"u14851ece\">快速开始</span></h2><p data-lake-id=\"u63346eb1\" id=\"u63346eb1\"><span data-lake-id=\"u3033ca5f\" id=\"u3033ca5f\">基于以上设计，实现编码必然不在话下，趁着非工作时间迅速完成开发和文档的工作，源代码：</span><a href=\"https://github.com/x-cold/event-invoke\" target=\"_blank\" data-lake-id=\"ub770535d\" id=\"ub770535d\"><span data-lake-id=\"u3192a7e1\" id=\"u3192a7e1\">https://github.com/x-cold/event-invoke</span></a></p><p data-lake-id=\"ua557e7e5\" id=\"ua557e7e5\"><span data-lake-id=\"ua23497ba\" id=\"ua23497ba\">​</span><br></p><h3 data-lake-id=\"QdHNb\" id=\"QdHNb\"><span data-lake-id=\"ua276a772\" id=\"ua276a772\">安装依赖</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22npm%20i%20-S%20event-invoke%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22XkKTI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"PCXL8\" id=\"PCXL8\"><span data-lake-id=\"u2addd159\" id=\"u2addd159\">父子进程通信实例</span></h3><blockquote data-lake-id=\"u4b0e4a9f\" id=\"u4b0e4a9f\"><p data-lake-id=\"uf0626e29\" id=\"uf0626e29\"><span data-lake-id=\"ub99c6eed\" id=\"ub99c6eed\">示例代码：</span><a href=\"https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/child_process\" target=\"_blank\" data-lake-id=\"uaa71daaf\" id=\"uaa71daaf\"><span data-lake-id=\"u088cb915\" id=\"u088cb915\">Example code</span></a></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20parent.js%5Cnconst%20cp%20%3D%20require('child_process')%3B%5Cnconst%20%7B%20Invoker%20%7D%20%3D%20require('event-invoke')%3B%5Cn%5Cnconst%20invokerChannel%20%3D%20cp.fork('.%2Fchild.js')%3B%5Cn%5Cnconst%20invoker%20%3D%20new%20Invoker(invokerChannel)%3B%5Cn%5Cnasync%20function%20main()%20%7B%5Cn%20%20const%20res1%20%3D%20await%20invoker.invoke('sleep'%2C%201000)%3B%5Cn%20%20console.log('sleep%201000ms%3A'%2C%20res1)%3B%5Cn%20%20const%20res2%20%3D%20await%20invoker.invoke('max'%2C%20%5B1%2C%202%2C%203%5D)%3B%20%2F%2F%203%5Cn%20%20console.log('max(1%2C%202%2C%203)%3A'%2C%20res2)%3B%5Cn%20%20invoker.destroy()%3B%5Cn%7D%5Cn%5Cnmain()%3B%5Cn%60%60%60%5Cn%5Cn%60%60%60js%5Cn%2F%2F%20child.js%5Cnconst%20%7B%20Callee%20%7D%20%3D%20require('event-invoke')%3B%5Cn%5Cnconst%20calleeChannel%20%3D%20process%3B%5Cn%5Cnconst%20callee%20%3D%20new%20Callee(calleeChannel)%3B%5Cn%5Cn%2F%2F%20async%20method%5Cncallee.register(async%20function%20sleep(ms)%20%7B%5Cn%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(resolve%2C%20ms)%3B%5Cn%20%20%7D)%3B%5Cn%7D)%3B%5Cn%5Cn%2F%2F%20sync%20method%5Cncallee.register(function%20max(...args)%20%7B%5Cn%20%20return%20Math.max(...args)%3B%5Cn%7D)%3B%5Cn%5Cncallee.listen()%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22lQPT8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"f11pK\" id=\"f11pK\"><span data-lake-id=\"u3541c6c7\" id=\"u3541c6c7\">自定义 Channel 实现 PM2 进程间调用</span></h3><blockquote data-lake-id=\"uf9825ec6\" id=\"uf9825ec6\"><p data-lake-id=\"u1aaf7927\" id=\"u1aaf7927\"><span data-lake-id=\"u13c95503\" id=\"u13c95503\">示例代码：</span><a href=\"https://github.com/x-cold/event-invoke/tree/master/examples/nodejs/pm2\" target=\"_blank\" data-lake-id=\"ue9c806ad\" id=\"ue9c806ad\"><span data-lake-id=\"u8ffecaa5\" id=\"u8ffecaa5\">Example code</span></a></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20pm2.config.cjs%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20apps%3A%20%5B%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20script%3A%20'invoker.js'%2C%5Cn%20%20%20%20%20%20name%3A%20'invoker'%2C%5Cn%20%20%20%20%20%20exec_mode%3A%20'fork'%2C%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20script%3A%20'callee.js'%2C%5Cn%20%20%20%20%20%20name%3A%20'callee'%2C%5Cn%20%20%20%20%20%20exec_mode%3A%20'fork'%2C%5Cn%20%20%20%20%7D%5Cn%20%20%5D%2C%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22ef942d68%22%7D\"></card><p data-lake-id=\"ud96fd301\" id=\"ud96fd301\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20callee.js%5Cnimport%20net%20from%20'net'%3B%5Cnimport%20pm2%20from%20'pm2'%3B%5Cnimport%20%7B%5Cn%20%20Callee%2C%5Cn%20%20BaseCalleeChannel%5Cn%7D%20from%20'event-invoke'%3B%5Cn%5Cnconst%20messageType%20%3D%20'event-invoke'%3B%5Cnconst%20messageTopic%20%3D%20'some%20topic'%3B%5Cn%5Cnclass%20CalleeChannel%20extends%20BaseCalleeChannel%20%7B%5Cn%20%20constructor()%20%7B%5Cn%20%20%20%20super()%3B%5Cn%20%20%20%20this._onProcessMessage%20%3D%20this.onProcessMessage.bind(this)%3B%5Cn%20%20%20%20process.on('message'%2C%20this._onProcessMessage)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20onProcessMessage(packet)%20%7B%5Cn%20%20%20%20if%20(packet.type%20!%3D%3D%20messageType)%20%7B%5Cn%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20this.emit('message'%2C%20packet.data)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20send(data)%20%7B%5Cn%20%20%20%20pm2.list((err%2C%20processes)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(err)%20%7B%20throw%20err%3B%20%7D%5Cn%20%20%20%20%20%20const%20list%20%3D%20processes.filter(p%20%3D%3E%20p.name%20%3D%3D%3D%20'invoker')%3B%5Cn%20%20%20%20%20%20const%20pmId%20%3D%20list%5B0%5D.pm2_env.pm_id%3B%5Cn%20%20%20%20%20%20pm2.sendDataToProcessId(%7B%5Cn%20%20%20%20%20%20%20%20id%3A%20pmId%2C%5Cn%20%20%20%20%20%20%20%20type%3A%20messageType%2C%5Cn%20%20%20%20%20%20%20%20topic%3A%20messageTopic%2C%5Cn%20%20%20%20%20%20%20%20data%2C%5Cn%20%20%20%20%20%20%7D%2C%20function%20(err%2C%20res)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(err)%20%7B%20throw%20err%3B%20%7D%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20destory()%20%7B%5Cn%20%20%20%20process.off('message'%2C%20this._onProcessMessage)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnconst%20channel%20%3D%20new%20CalleeChannel()%3B%5Cnconst%20callee%20%3D%20new%20Callee(channel)%3B%5Cn%5Cn%2F%2F%20async%20method%5Cncallee.register(async%20function%20sleep(ms)%20%7B%5Cn%20%20return%20new%20Promise((resolve)%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(resolve%2C%20ms)%3B%5Cn%20%20%7D)%3B%5Cn%7D)%3B%5Cn%5Cn%2F%2F%20sync%20method%5Cncallee.register(function%20max(...args)%20%7B%5Cn%20%20return%20Math.max(...args)%3B%5Cn%7D)%3B%5Cn%5Cncallee.listen()%3B%5Cn%5Cn%2F%2F%20keep%20your%20process%20alive%5Cnnet.createServer().listen()%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%223682fda3%22%7D\"></card><p data-lake-id=\"u00dd6b4b\" id=\"u00dd6b4b\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20invoker.js%5Cnimport%20pm2%20from%20'pm2'%3B%5Cnimport%20%7B%5Cn%20%20Invoker%2C%5Cn%20%20BaseInvokerChannel%5Cn%7D%20from%20'event-invoke'%3B%5Cn%5Cnconst%20messageType%20%3D%20'event-invoke'%3B%5Cnconst%20messageTopic%20%3D%20'some%20topic'%3B%5Cn%5Cnclass%20InvokerChannel%20extends%20BaseInvokerChannel%20%7B%5Cn%20%20constructor()%20%7B%5Cn%20%20%20%20super()%3B%5Cn%20%20%20%20this._onProcessMessage%20%3D%20this.onProcessMessage.bind(this)%3B%5Cn%20%20%20%20process.on('message'%2C%20this._onProcessMessage)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20onProcessMessage(packet)%20%7B%5Cn%20%20%20%20if%20(packet.type%20!%3D%3D%20messageType)%20%7B%5Cn%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20this.emit('message'%2C%20packet.data)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20send(data)%20%7B%5Cn%20%20%20%20pm2.list((err%2C%20processes)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(err)%20%7B%20throw%20err%3B%20%7D%5Cn%20%20%20%20%20%20const%20list%20%3D%20processes.filter(p%20%3D%3E%20p.name%20%3D%3D%3D%20'callee')%3B%5Cn%20%20%20%20%20%20const%20pmId%20%3D%20list%5B0%5D.pm2_env.pm_id%3B%5Cn%20%20%20%20%20%20pm2.sendDataToProcessId(%7B%5Cn%20%20%20%20%20%20%20%20id%3A%20pmId%2C%5Cn%20%20%20%20%20%20%20%20type%3A%20messageType%2C%5Cn%20%20%20%20%20%20%20%20topic%3A%20messageTopic%2C%5Cn%20%20%20%20%20%20%20%20data%2C%5Cn%20%20%20%20%20%20%7D%2C%20function%20(err%2C%20res)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(err)%20%7B%20throw%20err%3B%20%7D%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20connect()%20%7B%5Cn%20%20%20%20this.connected%20%3D%20true%3B%5Cn%20%20%7D%5Cn%5Cn%20%20disconnect()%20%7B%5Cn%20%20%20%20this.connected%20%3D%20false%3B%5Cn%20%20%7D%5Cn%5Cn%20%20destory()%20%7B%5Cn%20%20%20%20process.off('message'%2C%20this._onProcessMessage)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnconst%20channel%20%3D%20new%20InvokerChannel()%3B%5Cnchannel.connect()%3B%5Cn%5Cnconst%20invoker%20%3D%20new%20Invoker(channel)%3B%5Cn%5CnsetInterval(async%20()%20%3D%3E%20%7B%5Cn%20%20const%20res1%20%3D%20await%20invoker.invoke('sleep'%2C%201000)%3B%5Cn%20%20console.log('sleep%201000ms%3A'%2C%20res1)%3B%5Cn%20%20const%20res2%20%3D%20await%20invoker.invoke('max'%2C%20%5B1%2C%202%2C%203%5D)%3B%20%2F%2F%203%5Cn%20%20console.log('max(1%2C%202%2C%203)%3A'%2C%20res2)%3B%5Cn%7D%2C%205%20*%201000)%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2291f00578%22%7D\"></card><h2 data-lake-id=\"wfuoP\" id=\"wfuoP\"><span data-lake-id=\"uab251d19\" id=\"uab251d19\">下一步</span></h2><p data-lake-id=\"uc99cd43c\" id=\"uc99cd43c\"><span data-lake-id=\"u77a2d579\" id=\"u77a2d579\">目前 </span><a href=\"https://github.com/x-cold/event-invoke\" target=\"_blank\" data-lake-id=\"uf9b9ec07\" id=\"uf9b9ec07\"><span data-lake-id=\"u57caf761\" id=\"u57caf761\">event-invoke</span></a><span data-lake-id=\"ubeace622\" id=\"ubeace622\"> 具备了优雅调用“IPC”调用的基本能力，代码覆盖率 100%，同时提供了相对完善的</span><a href=\"https://github.com/x-cold/event-invoke/blob/master/index.d.ts\" target=\"_blank\" data-lake-id=\"uc92bde1d\" id=\"uc92bde1d\"><span data-lake-id=\"ue87c5ed8\" id=\"ue87c5ed8\">类型描述</span></a><span data-lake-id=\"u444c7392\" id=\"u444c7392\">。感兴趣的同学可以直接使用，有任何问题可以直接提 </span><a href=\"https://github.com/x-cold/event-invoke/issues\" target=\"_blank\" data-lake-id=\"u1ac36a76\" id=\"u1ac36a76\"><span data-lake-id=\"u0fa7fa92\" id=\"u0fa7fa92\">Issue</span></a><span data-lake-id=\"u033cceb9\" id=\"u033cceb9\">。</span></p><p data-lake-id=\"u67441bf9\" id=\"u67441bf9\"><span data-lake-id=\"u5d69c72d\" id=\"u5d69c72d\">​</span><br></p><p data-lake-id=\"uac0c982e\" id=\"uac0c982e\"><span data-lake-id=\"u40e18b09\" id=\"u40e18b09\">另外一些后续仍要持续完善的部分：</span></p><ul list=\"uec4a888a\"><li fid=\"u8233dd23\" data-lake-id=\"u174f9ddd\" id=\"u174f9ddd\"><span data-lake-id=\"ua05736c4\" id=\"ua05736c4\">更丰富的示例，覆盖跨 Iframe，跨标签页，Web worker 等使用场景</span></li><li fid=\"u8233dd23\" data-lake-id=\"u3acd630e\" id=\"u3acd630e\"><span data-lake-id=\"ubb111055\" id=\"ubb111055\">提供开箱即用通用 Channel</span></li><li fid=\"u8233dd23\" data-lake-id=\"ubf2c3f43\" id=\"ubf2c3f43\"><span data-lake-id=\"u6e2aced6\" id=\"u6e2aced6\">更友好的异常处理</span></li></ul><p data-lake-id=\"u1095c5b0\" id=\"u1095c5b0\"><br></p>",
    "public": 1,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-02-12T13:55:52.000Z",
    "deleted_at": null,
    "created_at": "2022-02-12T09:08:14.000Z",
    "updated_at": "2022-02-12T14:18:05.000Z",
    "published_at": "2022-02-12T14:18:05.000Z",
    "first_published_at": "2022-02-12T13:55:52.000Z",
    "word_count": 1545,
    "cover": "https://cdn.nlark.com/yuque/__puml/389251cdfc899ca7af47f3fc7d6764b3.svg",
    "description": "背景团队最近有一个 Node.js 全新的模块需要开发，涉及多进程的管理和通讯，简化模型可以理解为需要频繁从 master 进程调用 worker 进程的某些方法，简单设计实现了一个 event-invoke 的库，可以简单优雅进行调用。Node.js 提供了 child_process 模块...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  }
]